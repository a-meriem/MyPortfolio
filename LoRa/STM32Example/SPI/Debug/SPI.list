
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cbc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003e44  08003e44  00013e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e5c  08003e5c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003e5c  08003e5c  00013e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e64  08003e64  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e64  08003e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e68  08003e68  00013e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000150  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000160  20000160  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000868d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b6e  00000000  00000000  000286cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000778  00000000  00000000  0002a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000690  00000000  00000000  0002a9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fdca  00000000  00000000  0002b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000093ef  00000000  00000000  0004ae12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be78a  00000000  00000000  00054201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011298b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c04  00000000  00000000  001129dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e2c 	.word	0x08003e2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003e2c 	.word	0x08003e2c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Lora_vSetNSS>:
  * @brief	Set the slave select pin to high state or low state
  * @note	Necessary for the SPI communication with the Sx1278
  * @param	value takes 0 Low state or 1 for High state
  * @retval None
  */
void Lora_vSetNSS(int value) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin,
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	bf0c      	ite	eq
 80004da:	2301      	moveq	r3, #1
 80004dc:	2300      	movne	r3, #0
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	461a      	mov	r2, r3
 80004e2:	2110      	movs	r1, #16
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <Lora_vSetNSS+0x28>)
 80004e6:	f001 fd41 	bl	8001f6c <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40020000 	.word	0x40020000

080004f8 <Lora_vInit>:
/**
  * @brief	Initialization of the Lora Modem
  * @note	The LoRa Modem doesn't work without it
  * @retval	None
  */
void Lora_vInit(void) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	Lora_vSetNSS(1);
 80004fc:	2001      	movs	r0, #1
 80004fe:	f7ff ffe5 	bl	80004cc <Lora_vSetNSS>
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000502:	2201      	movs	r2, #1
 8000504:	2110      	movs	r1, #16
 8000506:	4802      	ldr	r0, [pc, #8]	; (8000510 <Lora_vInit+0x18>)
 8000508:	f001 fd30 	bl	8001f6c <HAL_GPIO_WritePin>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40020800 	.word	0x40020800

08000514 <Lora_vReset>:
/**
  * @brief	Reset the Lora Modem using the Reset pin
  * @note	uses Hal_Delay so it needs to be modified if used with other timers
  * @retval	None
  */
void Lora_vReset(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	Lora_vSetNSS(1);
 8000518:	2001      	movs	r0, #1
 800051a:	f7ff ffd7 	bl	80004cc <Lora_vSetNSS>

	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2110      	movs	r1, #16
 8000522:	4808      	ldr	r0, [pc, #32]	; (8000544 <Lora_vReset+0x30>)
 8000524:	f001 fd22 	bl	8001f6c <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000528:	2001      	movs	r0, #1
 800052a:	f000 fea3 	bl	8001274 <HAL_Delay>

	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2110      	movs	r1, #16
 8000532:	4804      	ldr	r0, [pc, #16]	; (8000544 <Lora_vReset+0x30>)
 8000534:	f001 fd1a 	bl	8001f6c <HAL_GPIO_WritePin>

	HAL_Delay(5);
 8000538:	2005      	movs	r0, #5
 800053a:	f000 fe9b 	bl	8001274 <HAL_Delay>
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40020800 	.word	0x40020800

08000548 <Lora_WaitForTx>:


void Lora_WaitForTx()
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
	while( 0 == Lora_Transmit_Complete )
 800054c:	bf00      	nop
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <Lora_WaitForTx+0x20>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	2b00      	cmp	r3, #0
 8000556:	d0fa      	beq.n	800054e <Lora_WaitForTx+0x6>
		;
	Lora_Transmit_Complete=0;
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <Lora_WaitForTx+0x20>)
 800055a:	2200      	movs	r2, #0
 800055c:	701a      	strb	r2, [r3, #0]

}
 800055e:	bf00      	nop
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	20000032 	.word	0x20000032

0800056c <Lora_WaitForRx>:

void Lora_WaitForRx()
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
	while( 0 == Lora_Receive_Complete )
 8000570:	bf00      	nop
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <Lora_WaitForRx+0x20>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	b2db      	uxtb	r3, r3
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0fa      	beq.n	8000572 <Lora_WaitForRx+0x6>
		;
	Lora_Receive_Complete=0;
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <Lora_WaitForRx+0x20>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	20000031 	.word	0x20000031

08000590 <Lora_vWriteReg>:
  * @note	Uses the spi interface
  * @param	RegAdress is the address of the register in the Lora Modem
  * @param	data is the value to be written in the register
  * @retval	None
  */
void Lora_vWriteReg(uint8_t RegAdress, uint8_t data){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	460a      	mov	r2, r1
 800059a:	71fb      	strb	r3, [r7, #7]
 800059c:	4613      	mov	r3, r2
 800059e:	71bb      	strb	r3, [r7, #6]
	uint8_t payload[2]={0.0};
 80005a0:	2300      	movs	r3, #0
 80005a2:	81bb      	strh	r3, [r7, #12]
	payload[0] = RegAdress | 0x80 ;
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	733b      	strb	r3, [r7, #12]
	payload[1] = data;
 80005ae:	79bb      	ldrb	r3, [r7, #6]
 80005b0:	737b      	strb	r3, [r7, #13]
//	HAL_SPI_Transmit(Lora_SpiHandler, payload, 2,HAL_MAX_DELAY);
//	while (HAL_SPI_GetState(Lora_SpiHandler) != HAL_SPI_STATE_READY)
//			;
//	Lora_vSetNSS(1);

	Lora_vSetNSS( 0 );
 80005b2:	2000      	movs	r0, #0
 80005b4:	f7ff ff8a 	bl	80004cc <Lora_vSetNSS>

	while( HAL_SPI_Transmit_DMA( Lora_SpiHandler, payload, 2) != HAL_OK );
 80005b8:	bf00      	nop
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <Lora_vWriteReg+0x54>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f107 010c 	add.w	r1, r7, #12
 80005c2:	2202      	movs	r2, #2
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fdc7 	bl	8003158 <HAL_SPI_Transmit_DMA>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d1f4      	bne.n	80005ba <Lora_vWriteReg+0x2a>
	Lora_WaitForTx();
 80005d0:	f7ff ffba 	bl	8000548 <Lora_WaitForTx>

	Lora_vSetNSS( 1 );
 80005d4:	2001      	movs	r0, #1
 80005d6:	f7ff ff79 	bl	80004cc <Lora_vSetNSS>

}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000000 	.word	0x20000000

080005e8 <Lora_u8ReadReg>:
  * @brief	Returns the byte written in a register
  * @note	Uses the spi interface
  * @param	RegAdress is the address of the register in the Lora Modem
  * @retval	uint8_t
  */
uint8_t Lora_u8ReadReg(uint8_t RegAdress){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
	uint8_t payload[2]={0.0};
 80005f2:	2300      	movs	r3, #0
 80005f4:	81bb      	strh	r3, [r7, #12]
	payload[0] = RegAdress;
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	733b      	strb	r3, [r7, #12]
//    			;
//
//    Lora_vSetNSS(1);
//    return payload[1];

	Lora_vSetNSS( 0 );
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ff66 	bl	80004cc <Lora_vSetNSS>

	while( HAL_SPI_Transmit_DMA( Lora_SpiHandler, payload, 1 ) !=HAL_OK );
 8000600:	bf00      	nop
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <Lora_u8ReadReg+0x64>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f107 010c 	add.w	r1, r7, #12
 800060a:	2201      	movs	r2, #1
 800060c:	4618      	mov	r0, r3
 800060e:	f002 fda3 	bl	8003158 <HAL_SPI_Transmit_DMA>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d1f4      	bne.n	8000602 <Lora_u8ReadReg+0x1a>
	Lora_WaitForTx();
 8000618:	f7ff ff96 	bl	8000548 <Lora_WaitForTx>

	while( HAL_SPI_Receive_DMA( Lora_SpiHandler, payload+1, 1 ) !=HAL_OK );
 800061c:	bf00      	nop
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <Lora_u8ReadReg+0x64>)
 8000620:	6818      	ldr	r0, [r3, #0]
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	3301      	adds	r3, #1
 8000628:	2201      	movs	r2, #1
 800062a:	4619      	mov	r1, r3
 800062c:	f002 fe4a 	bl	80032c4 <HAL_SPI_Receive_DMA>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f3      	bne.n	800061e <Lora_u8ReadReg+0x36>
	Lora_WaitForRx();
 8000636:	f7ff ff99 	bl	800056c <Lora_WaitForRx>

	Lora_vSetNSS( 1 );
 800063a:	2001      	movs	r0, #1
 800063c:	f7ff ff46 	bl	80004cc <Lora_vSetNSS>
	return payload[1];
 8000640:	7b7b      	ldrb	r3, [r7, #13]

}
 8000642:	4618      	mov	r0, r3
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000000 	.word	0x20000000

08000650 <Lora_vWriteFifo>:
  * @param	TxBuffer is the pointer on the first byte of the packet to be written in the Fifo
  * @param	packet size is the amount of data to be sent
  * @retval None
  */

void Lora_vWriteFifo(uint8_t * TxBuffer, uint8_t payloadLength) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	460b      	mov	r3, r1
 800065a:	70fb      	strb	r3, [r7, #3]

	if (payloadLength < 1) {
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d012      	beq.n	8000688 <Lora_vWriteFifo+0x38>
		return;
	} else {
			for(int i =0; i<payloadLength ; i++){
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	e00a      	b.n	800067e <Lora_vWriteFifo+0x2e>
				Lora_vWriteReg(RegFifo,TxBuffer[i]);
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff ff8c 	bl	8000590 <Lora_vWriteReg>
			for(int i =0; i<payloadLength ; i++){
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	78fb      	ldrb	r3, [r7, #3]
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	429a      	cmp	r2, r3
 8000684:	dbf0      	blt.n	8000668 <Lora_vWriteFifo+0x18>
 8000686:	e000      	b.n	800068a <Lora_vWriteFifo+0x3a>
		return;
 8000688:	bf00      	nop
			}
	}
}
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <Lora_vReadFifo>:
  * @param	RxBuffer is the pointer on the first byte of the packet received from the Fifo
  * @param	payloadLength is the amount of data received
  * @retval None
  */

void Lora_vReadFifo(uint8_t RegAdr, uint8_t * RxBuffer, uint8_t payloadLength){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]
		if (payloadLength < 1) {
 80006a0:	79bb      	ldrb	r3, [r7, #6]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d029      	beq.n	80006fa <Lora_vReadFifo+0x6a>
			return;
		} else {
			Lora_vSetNSS(0);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f7ff ff10 	bl	80004cc <Lora_vSetNSS>
			HAL_SPI_Transmit(Lora_SpiHandler, &RegAdr, 1,HAL_MAX_DELAY);
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <Lora_vReadFifo+0x74>)
 80006ae:	6818      	ldr	r0, [r3, #0]
 80006b0:	1df9      	adds	r1, r7, #7
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295
 80006b6:	2201      	movs	r2, #1
 80006b8:	f002 f95f 	bl	800297a <HAL_SPI_Transmit>
			while (HAL_SPI_GetState(Lora_SpiHandler) != HAL_SPI_STATE_READY)
 80006bc:	bf00      	nop
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <Lora_vReadFifo+0x74>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 f8fa 	bl	80038bc <HAL_SPI_GetState>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d1f7      	bne.n	80006be <Lora_vReadFifo+0x2e>
					;
				HAL_SPI_Receive(Lora_SpiHandler, RxBuffer, payloadLength,HAL_MAX_DELAY);
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <Lora_vReadFifo+0x74>)
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	79bb      	ldrb	r3, [r7, #6]
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	6839      	ldr	r1, [r7, #0]
 80006dc:	f002 fa89 	bl	8002bf2 <HAL_SPI_Receive>
			    while (HAL_SPI_GetState(Lora_SpiHandler) != HAL_SPI_STATE_READY)
 80006e0:	bf00      	nop
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <Lora_vReadFifo+0x74>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 f8e8 	bl	80038bc <HAL_SPI_GetState>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d1f7      	bne.n	80006e2 <Lora_vReadFifo+0x52>
			    			;
			Lora_vSetNSS(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff feea 	bl	80004cc <Lora_vSetNSS>
 80006f8:	e000      	b.n	80006fc <Lora_vReadFifo+0x6c>
			return;
 80006fa:	bf00      	nop
		}
}
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000000 	.word	0x20000000

08000708 <Lora_u8GetDIO0>:
/**
  * @brief	returns the state of the hardware interrupt of the Lora Modem
  * @note	to be configured as an external interrupt when the Lora Modem is used with other peripherals
  * @retval	returns the state of the DIO0 pin
  */
uint8_t Lora_u8GetDIO0(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(DIO0_GPIO_Port, DIO0_Pin) == GPIO_PIN_SET);
 800070c:	2120      	movs	r1, #32
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <Lora_u8GetDIO0+0x1c>)
 8000710:	f001 fc14 	bl	8001f3c <HAL_GPIO_ReadPin>
 8000714:	4603      	mov	r3, r0
 8000716:	2b01      	cmp	r3, #1
 8000718:	bf0c      	ite	eq
 800071a:	2301      	moveq	r3, #1
 800071c:	2300      	movne	r3, #0
 800071e:	b2db      	uxtb	r3, r3
}
 8000720:	4618      	mov	r0, r3
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40020800 	.word	0x40020800

08000728 <Lora_vConfig>:
/**
  * @brief	Configuration of the parameters of the Lora Modem
  * @note	ends with the Lora Modem in standby mode
  * @retval None
  */
void Lora_vConfig(void){
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	Lora_vWriteReg(RegOpMode,SleepMode);		//Set Sleep Mode
 800072c:	2100      	movs	r1, #0
 800072e:	2001      	movs	r0, #1
 8000730:	f7ff ff2e 	bl	8000590 <Lora_vWriteReg>
	HAL_Delay(15);
 8000734:	200f      	movs	r0, #15
 8000736:	f000 fd9d 	bl	8001274 <HAL_Delay>

	Lora_vWriteReg(RegOpMode,LoraMode);				//Set LORA mode / High Frequency Mode
 800073a:	2188      	movs	r1, #136	; 0x88
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff ff27 	bl	8000590 <Lora_vWriteReg>

	Lora_vWriteReg(RegFrMsb,FrMsb);
 8000742:	216c      	movs	r1, #108	; 0x6c
 8000744:	2006      	movs	r0, #6
 8000746:	f7ff ff23 	bl	8000590 <Lora_vWriteReg>
	Lora_vWriteReg(RegFrMid,FrMid);
 800074a:	2180      	movs	r1, #128	; 0x80
 800074c:	2007      	movs	r0, #7
 800074e:	f7ff ff1f 	bl	8000590 <Lora_vWriteReg>
	Lora_vWriteReg(RegFrLsb,FrLsb);
 8000752:	2100      	movs	r1, #0
 8000754:	2008      	movs	r0, #8
 8000756:	f7ff ff1b 	bl	8000590 <Lora_vWriteReg>

	Lora_vWriteReg(RegSyncWord,SyncWord);
 800075a:	2134      	movs	r1, #52	; 0x34
 800075c:	2039      	movs	r0, #57	; 0x39
 800075e:	f7ff ff17 	bl	8000590 <Lora_vWriteReg>

	Lora_vWriteReg(RegPaConfig,DefaultMaxPower); 	//Default max output power config
 8000762:	21fc      	movs	r1, #252	; 0xfc
 8000764:	2009      	movs	r0, #9
 8000766:	f7ff ff13 	bl	8000590 <Lora_vWriteReg>

	Lora_vWriteReg(RegOcp,Ocp);
 800076a:	210b      	movs	r1, #11
 800076c:	200b      	movs	r0, #11
 800076e:	f7ff ff0f 	bl	8000590 <Lora_vWriteReg>
	Lora_vWriteReg(RegLna,Lna);
 8000772:	2123      	movs	r1, #35	; 0x23
 8000774:	200c      	movs	r0, #12
 8000776:	f7ff ff0b 	bl	8000590 <Lora_vWriteReg>

	Lora_vWriteReg(RegModemConfig1,Config1);
 800077a:	2172      	movs	r1, #114	; 0x72
 800077c:	201d      	movs	r0, #29
 800077e:	f7ff ff07 	bl	8000590 <Lora_vWriteReg>
	Lora_vWriteReg(RegModemConfig2,Config2);
 8000782:	2174      	movs	r1, #116	; 0x74
 8000784:	201e      	movs	r0, #30
 8000786:	f7ff ff03 	bl	8000590 <Lora_vWriteReg>
	Lora_vWriteReg(RegModemConfig3,Config3);
 800078a:	2104      	movs	r1, #4
 800078c:	2026      	movs	r0, #38	; 0x26
 800078e:	f7ff feff 	bl	8000590 <Lora_vWriteReg>

	Lora_vWriteReg(RegSymbTimeoutLsb,SymbTimeoutLsb);
 8000792:	2108      	movs	r1, #8
 8000794:	201f      	movs	r0, #31
 8000796:	f7ff fefb 	bl	8000590 <Lora_vWriteReg>

	Lora_vWriteReg(RegPreambleLsb,PreambleLsb);
 800079a:	2108      	movs	r1, #8
 800079c:	2021      	movs	r0, #33	; 0x21
 800079e:	f7ff fef7 	bl	8000590 <Lora_vWriteReg>
	Lora_vWriteReg(RegPreambleMsb,PreambleMsb);
 80007a2:	2100      	movs	r1, #0
 80007a4:	2020      	movs	r0, #32
 80007a6:	f7ff fef3 	bl	8000590 <Lora_vWriteReg>

	Lora_vWriteReg(RegOpMode,StdbyMode);
 80007aa:	2189      	movs	r1, #137	; 0x89
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff feef 	bl	8000590 <Lora_vWriteReg>

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <Lora_clearIrq>:
/**
  * @brief	clears the interruption request flags
  * @retval	None
  */
void Lora_clearIrq(void) {
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0
	Lora_vWriteReg(RegIrqFlags,ClearIrqFlags);
 80007ba:	21ff      	movs	r1, #255	; 0xff
 80007bc:	2012      	movs	r0, #18
 80007be:	f7ff fee7 	bl	8000590 <Lora_vWriteReg>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <Lora_vRxConfig>:
/**
  * @brief	Configuration of the Rx parameters of the Lora Modem
  * @param	payloadLength is the amount of data to be received
  * @retval	None
  */
void Lora_vRxConfig(uint8_t payloadLength){
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b084      	sub	sp, #16
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	4603      	mov	r3, r0
 80007ce:	71fb      	strb	r3, [r7, #7]
	uint8_t adr;

	Lora_vWriteReg(RegPaDac,RxPaDac);
 80007d0:	214d      	movs	r1, #77	; 0x4d
 80007d2:	204d      	movs	r0, #77	; 0x4d
 80007d4:	f7ff fedc 	bl	8000590 <Lora_vWriteReg>
	Lora_vWriteReg(RegHopPeriod,RxHopPeriod);
 80007d8:	21ff      	movs	r1, #255	; 0xff
 80007da:	2024      	movs	r0, #36	; 0x24
 80007dc:	f7ff fed8 	bl	8000590 <Lora_vWriteReg>
	Lora_vWriteReg(RegDioMapping1,RxDioMapping1);
 80007e0:	2101      	movs	r1, #1
 80007e2:	2040      	movs	r0, #64	; 0x40
 80007e4:	f7ff fed4 	bl	8000590 <Lora_vWriteReg>
	Lora_vWriteReg(RegIrqFlagsMask,RxIrqFlagsMask);
 80007e8:	213f      	movs	r1, #63	; 0x3f
 80007ea:	2011      	movs	r0, #17
 80007ec:	f7ff fed0 	bl	8000590 <Lora_vWriteReg>
	Lora_clearIrq();
 80007f0:	f7ff ffe1 	bl	80007b6 <Lora_clearIrq>
	Lora_vWriteReg(RegPayloadLength, payloadLength);
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	4619      	mov	r1, r3
 80007f8:	2022      	movs	r0, #34	; 0x22
 80007fa:	f7ff fec9 	bl	8000590 <Lora_vWriteReg>
	Lora_vWriteReg(RegFifoRxBaseAdr,RxBaseAdr);
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	200f      	movs	r0, #15
 8000802:	f7ff fec5 	bl	8000590 <Lora_vWriteReg>
	adr= Lora_u8ReadReg(RegFifoRxBaseAdr);
 8000806:	200f      	movs	r0, #15
 8000808:	f7ff feee 	bl	80005e8 <Lora_u8ReadReg>
 800080c:	4603      	mov	r3, r0
 800080e:	73fb      	strb	r3, [r7, #15]
	Lora_vWriteReg(RegFifoAdrPtr,adr);
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	4619      	mov	r1, r3
 8000814:	200d      	movs	r0, #13
 8000816:	f7ff febb 	bl	8000590 <Lora_vWriteReg>
}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <Lora_vTxConfig>:
/**
  * @brief	Configuration of the Tx parameters of the Lora Modem
  * @param	payloadLength is the amount of data to be sent
  * @retval	None
  */
void Lora_vTxConfig(uint8_t payloadLength){
 8000822:	b580      	push	{r7, lr}
 8000824:	b084      	sub	sp, #16
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	71fb      	strb	r3, [r7, #7]
	uint8_t adr;

	Lora_vWriteReg(RegPaDac,TxPaDac);
 800082c:	2187      	movs	r1, #135	; 0x87
 800082e:	204d      	movs	r0, #77	; 0x4d
 8000830:	f7ff feae 	bl	8000590 <Lora_vWriteReg>
	Lora_vWriteReg(RegHopPeriod,TxHopPeriod);
 8000834:	2100      	movs	r1, #0
 8000836:	2024      	movs	r0, #36	; 0x24
 8000838:	f7ff feaa 	bl	8000590 <Lora_vWriteReg>
	Lora_vWriteReg(RegDioMapping1,TxDioMapping1);
 800083c:	2141      	movs	r1, #65	; 0x41
 800083e:	2040      	movs	r0, #64	; 0x40
 8000840:	f7ff fea6 	bl	8000590 <Lora_vWriteReg>
	Lora_vWriteReg(RegIrqFlagsMask,TxIrqFlagsMask);
 8000844:	21f7      	movs	r1, #247	; 0xf7
 8000846:	2011      	movs	r0, #17
 8000848:	f7ff fea2 	bl	8000590 <Lora_vWriteReg>
	Lora_clearIrq();
 800084c:	f7ff ffb3 	bl	80007b6 <Lora_clearIrq>
	Lora_vWriteReg(RegPayloadLength, payloadLength); //Set the payload length
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	4619      	mov	r1, r3
 8000854:	2022      	movs	r0, #34	; 0x22
 8000856:	f7ff fe9b 	bl	8000590 <Lora_vWriteReg>
	Lora_vWriteReg(RegFifoTxBaseAdr,TxBaseAdr);
 800085a:	2100      	movs	r1, #0
 800085c:	200e      	movs	r0, #14
 800085e:	f7ff fe97 	bl	8000590 <Lora_vWriteReg>
	adr= Lora_u8ReadReg(RegFifoTxBaseAdr);
 8000862:	200e      	movs	r0, #14
 8000864:	f7ff fec0 	bl	80005e8 <Lora_u8ReadReg>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]
	Lora_vWriteReg(RegFifoAdrPtr,adr);
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	4619      	mov	r1, r3
 8000870:	200d      	movs	r0, #13
 8000872:	f7ff fe8d 	bl	8000590 <Lora_vWriteReg>
}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <Lora_tenRxMode>:
  * @brief	state machine describing the functioning of the Lora Modem in Rx mode
  * @param	RxBuffer is a pointer to an array containing the received packet
  * @param	payloadLength is the amount of received data
  * @retval	Lora_RxMode state
  */
Lora_RxStates_ten Lora_tenRxMode(uint8_t* RxBuffer, uint8_t payloadLength){
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	70fb      	strb	r3, [r7, #3]

	uint8_t RegAdr ;
	uint8_t packetSize;

	switch(Lora_RxCurrentState_en){
 800088c:	4b4d      	ldr	r3, [pc, #308]	; (80009c4 <Lora_tenRxMode+0x144>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b0a      	cmp	r3, #10
 8000892:	f200 8091 	bhi.w	80009b8 <Lora_tenRxMode+0x138>
 8000896:	a201      	add	r2, pc, #4	; (adr r2, 800089c <Lora_tenRxMode+0x1c>)
 8000898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800089c:	080008c9 	.word	0x080008c9
 80008a0:	080008d1 	.word	0x080008d1
 80008a4:	080009b9 	.word	0x080009b9
 80008a8:	080008dd 	.word	0x080008dd
 80008ac:	080008ed 	.word	0x080008ed
 80008b0:	080008fd 	.word	0x080008fd
 80008b4:	0800092d 	.word	0x0800092d
 80008b8:	08000965 	.word	0x08000965
 80008bc:	08000997 	.word	0x08000997
 80008c0:	080009b9 	.word	0x080009b9
 80008c4:	080009ab 	.word	0x080009ab
	case Lora_RxIdle_en:{
		Lora_RxCurrentState_en = Lora_ModemConfigRx;
 80008c8:	4b3e      	ldr	r3, [pc, #248]	; (80009c4 <Lora_tenRxMode+0x144>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
		}break;
 80008ce:	e073      	b.n	80009b8 <Lora_tenRxMode+0x138>
	case Lora_ModemConfigRx:{
		Lora_vConfig();
 80008d0:	f7ff ff2a 	bl	8000728 <Lora_vConfig>
		Lora_RxCurrentState_en = Lora_RxConfig_en;
 80008d4:	4b3b      	ldr	r3, [pc, #236]	; (80009c4 <Lora_tenRxMode+0x144>)
 80008d6:	2203      	movs	r2, #3
 80008d8:	701a      	strb	r2, [r3, #0]
	}break;
 80008da:	e06d      	b.n	80009b8 <Lora_tenRxMode+0x138>
	case Lora_RxConfig_en :{

		Lora_vRxConfig(payloadLength);
 80008dc:	78fb      	ldrb	r3, [r7, #3]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff ff71 	bl	80007c6 <Lora_vRxConfig>
		Lora_RxCurrentState_en = Lora_EntryRxMode_en;
 80008e4:	4b37      	ldr	r3, [pc, #220]	; (80009c4 <Lora_tenRxMode+0x144>)
 80008e6:	2204      	movs	r2, #4
 80008e8:	701a      	strb	r2, [r3, #0]

	}break;
 80008ea:	e065      	b.n	80009b8 <Lora_tenRxMode+0x138>
	case Lora_EntryRxMode_en :{

			Lora_vWriteReg(RegOpMode,RxContMode);
 80008ec:	2185      	movs	r1, #133	; 0x85
 80008ee:	2001      	movs	r0, #1
 80008f0:	f7ff fe4e 	bl	8000590 <Lora_vWriteReg>
			Lora_RxCurrentState_en = Lora_RxModeTest_en;
 80008f4:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <Lora_tenRxMode+0x144>)
 80008f6:	2205      	movs	r2, #5
 80008f8:	701a      	strb	r2, [r3, #0]

	}break;
 80008fa:	e05d      	b.n	80009b8 <Lora_tenRxMode+0x138>
	case Lora_RxModeTest_en:{
		Lora_status_u8 =( (Lora_u8ReadReg(RegModemStat) & 0x04) == 0x04);
 80008fc:	2018      	movs	r0, #24
 80008fe:	f7ff fe73 	bl	80005e8 <Lora_u8ReadReg>
 8000902:	4603      	mov	r3, r0
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	2b04      	cmp	r3, #4
 800090a:	bf0c      	ite	eq
 800090c:	2301      	moveq	r3, #1
 800090e:	2300      	movne	r3, #0
 8000910:	b2db      	uxtb	r3, r3
 8000912:	461a      	mov	r2, r3
 8000914:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <Lora_tenRxMode+0x148>)
 8000916:	701a      	strb	r2, [r3, #0]
		Lora_RxCurrentState_en = (Lora_status_u8==1 )? Lora_RxWaiting_en :Lora_RxReset_en ;
 8000918:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <Lora_tenRxMode+0x148>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d101      	bne.n	8000924 <Lora_tenRxMode+0xa4>
 8000920:	2206      	movs	r2, #6
 8000922:	e000      	b.n	8000926 <Lora_tenRxMode+0xa6>
 8000924:	220a      	movs	r2, #10
 8000926:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <Lora_tenRxMode+0x144>)
 8000928:	701a      	strb	r2, [r3, #0]
		//Lora_Rxcounter_u32 = 0;
	}break;
 800092a:	e045      	b.n	80009b8 <Lora_tenRxMode+0x138>
	case Lora_RxWaiting_en:{
		//Lora_Rxcounter_u32++;
		Lora_RxDoneHw_u8 = Lora_u8GetDIO0();
 800092c:	f7ff feec 	bl	8000708 <Lora_u8GetDIO0>
 8000930:	4603      	mov	r3, r0
 8000932:	461a      	mov	r2, r3
 8000934:	4b25      	ldr	r3, [pc, #148]	; (80009cc <Lora_tenRxMode+0x14c>)
 8000936:	701a      	strb	r2, [r3, #0]
		if( Lora_RxDoneHw_u8 == 1){
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <Lora_tenRxMode+0x14c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d13a      	bne.n	80009b6 <Lora_tenRxMode+0x136>
			Lora_RxDoneSw_u8 = ( (Lora_u8ReadReg(RegIrqFlags) & 0x40) == 0x40);
 8000940:	2012      	movs	r0, #18
 8000942:	f7ff fe51 	bl	80005e8 <Lora_u8ReadReg>
 8000946:	4603      	mov	r3, r0
 8000948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094c:	2b40      	cmp	r3, #64	; 0x40
 800094e:	bf0c      	ite	eq
 8000950:	2301      	moveq	r3, #1
 8000952:	2300      	movne	r3, #0
 8000954:	b2db      	uxtb	r3, r3
 8000956:	461a      	mov	r2, r3
 8000958:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <Lora_tenRxMode+0x150>)
 800095a:	701a      	strb	r2, [r3, #0]
			Lora_RxCurrentState_en = Lora_RxReadPacket_en;
 800095c:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <Lora_tenRxMode+0x144>)
 800095e:	2207      	movs	r2, #7
 8000960:	701a      	strb	r2, [r3, #0]
		}
		/*
		else if((Lora_Rxcounter_u32 = 0xFFFFFE)){ // value of counter needs to be calculating depending on the sampling period
			Lora_RxCurrentState_en = Lora_RxTimeout_en ;
		}*/
	}break;
 8000962:	e028      	b.n	80009b6 <Lora_tenRxMode+0x136>
	case Lora_RxReadPacket_en: {

		RegAdr = Lora_u8ReadReg(RegFifoRxCurrentAdr);
 8000964:	2010      	movs	r0, #16
 8000966:	f7ff fe3f 	bl	80005e8 <Lora_u8ReadReg>
 800096a:	4603      	mov	r3, r0
 800096c:	73fb      	strb	r3, [r7, #15]
		Lora_vWriteReg(RegFifoAdrPtr,RegAdr);
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	4619      	mov	r1, r3
 8000972:	200d      	movs	r0, #13
 8000974:	f7ff fe0c 	bl	8000590 <Lora_vWriteReg>
		packetSize = Lora_u8ReadReg(RegRxNbBytes);
 8000978:	2013      	movs	r0, #19
 800097a:	f7ff fe35 	bl	80005e8 <Lora_u8ReadReg>
 800097e:	4603      	mov	r3, r0
 8000980:	73bb      	strb	r3, [r7, #14]
		Lora_vReadFifo(RegFifo, RxBuffer, packetSize);
 8000982:	7bbb      	ldrb	r3, [r7, #14]
 8000984:	461a      	mov	r2, r3
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff fe81 	bl	8000690 <Lora_vReadFifo>
		Lora_RxCurrentState_en = Lora_RxDone_en;
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <Lora_tenRxMode+0x144>)
 8000990:	2208      	movs	r2, #8
 8000992:	701a      	strb	r2, [r3, #0]
	}break;
 8000994:	e010      	b.n	80009b8 <Lora_tenRxMode+0x138>
	case Lora_RxDone_en:{
		Lora_clearIrq();
 8000996:	f7ff ff0e 	bl	80007b6 <Lora_clearIrq>
		Lora_vWriteReg(RegOpMode,StdbyMode);
 800099a:	2189      	movs	r1, #137	; 0x89
 800099c:	2001      	movs	r0, #1
 800099e:	f7ff fdf7 	bl	8000590 <Lora_vWriteReg>
		Lora_RxCurrentState_en = Lora_RxReady_en ;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <Lora_tenRxMode+0x144>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	701a      	strb	r2, [r3, #0]
	}break;
 80009a8:	e006      	b.n	80009b8 <Lora_tenRxMode+0x138>
	case Lora_RxTimeout_en:{

	}break;
	case Lora_RxReset_en:{
		Lora_vReset() ;
 80009aa:	f7ff fdb3 	bl	8000514 <Lora_vReset>
		Lora_RxCurrentState_en = Lora_ModemConfigRx;
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <Lora_tenRxMode+0x144>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]
	}break;
 80009b4:	e000      	b.n	80009b8 <Lora_tenRxMode+0x138>
	}break;
 80009b6:	bf00      	nop
	case Lora_RxReady_en:{

	}break;

	}
	return Lora_RxCurrentState_en;
 80009b8:	4b02      	ldr	r3, [pc, #8]	; (80009c4 <Lora_tenRxMode+0x144>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000041 	.word	0x20000041
 80009c8:	2000002c 	.word	0x2000002c
 80009cc:	2000002f 	.word	0x2000002f
 80009d0:	20000030 	.word	0x20000030

080009d4 <Lora_tenTxMode>:
  * @brief	state machine describing the functioning of the Lora Modem in Tx mode
  * @param	TxBuffer is a pointer to an array containing the packet to be sent
  * @param	payloadLength is the amount of data to be sent
  * @retval	Lora_TxMode state
  */
Lora_TxStates_ten Lora_tenTxMode(uint8_t* TxBuffer, uint8_t payloadLength){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]


	switch(Lora_TxCurrentState_en){
 80009e0:	4b41      	ldr	r3, [pc, #260]	; (8000ae8 <Lora_tenTxMode+0x114>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b08      	cmp	r3, #8
 80009e6:	d879      	bhi.n	8000adc <Lora_tenTxMode+0x108>
 80009e8:	a201      	add	r2, pc, #4	; (adr r2, 80009f0 <Lora_tenTxMode+0x1c>)
 80009ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ee:	bf00      	nop
 80009f0:	08000a15 	.word	0x08000a15
 80009f4:	08000a1d 	.word	0x08000a1d
 80009f8:	08000add 	.word	0x08000add
 80009fc:	08000a29 	.word	0x08000a29
 8000a00:	08000a39 	.word	0x08000a39
 8000a04:	08000a69 	.word	0x08000a69
 8000a08:	08000a83 	.word	0x08000a83
 8000a0c:	08000a9f 	.word	0x08000a9f
 8000a10:	08000acf 	.word	0x08000acf
	case Lora_TxIdle_en:{
		Lora_TxCurrentState_en = Lora_ModemConfigTx;
 8000a14:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <Lora_tenTxMode+0x114>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
		}break;
 8000a1a:	e05f      	b.n	8000adc <Lora_tenTxMode+0x108>
	case Lora_ModemConfigTx:{
		Lora_vConfig();
 8000a1c:	f7ff fe84 	bl	8000728 <Lora_vConfig>
		Lora_TxCurrentState_en = Lora_TxConfig_en;
 8000a20:	4b31      	ldr	r3, [pc, #196]	; (8000ae8 <Lora_tenTxMode+0x114>)
 8000a22:	2203      	movs	r2, #3
 8000a24:	701a      	strb	r2, [r3, #0]
	}break;
 8000a26:	e059      	b.n	8000adc <Lora_tenTxMode+0x108>
	case Lora_TxConfig_en :{
		Lora_vTxConfig(payloadLength);
 8000a28:	78fb      	ldrb	r3, [r7, #3]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fef9 	bl	8000822 <Lora_vTxConfig>
		Lora_TxCurrentState_en = Lora_TxConfigTest_en;
 8000a30:	4b2d      	ldr	r3, [pc, #180]	; (8000ae8 <Lora_tenTxMode+0x114>)
 8000a32:	2204      	movs	r2, #4
 8000a34:	701a      	strb	r2, [r3, #0]
	}break;
 8000a36:	e051      	b.n	8000adc <Lora_tenTxMode+0x108>
	case Lora_TxConfigTest_en:{
		Lora_status_u8 = (Lora_u8ReadReg(RegPayloadLength) == payloadLength);
 8000a38:	2022      	movs	r0, #34	; 0x22
 8000a3a:	f7ff fdd5 	bl	80005e8 <Lora_u8ReadReg>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	461a      	mov	r2, r3
 8000a42:	78fb      	ldrb	r3, [r7, #3]
 8000a44:	4293      	cmp	r3, r2
 8000a46:	bf0c      	ite	eq
 8000a48:	2301      	moveq	r3, #1
 8000a4a:	2300      	movne	r3, #0
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b26      	ldr	r3, [pc, #152]	; (8000aec <Lora_tenTxMode+0x118>)
 8000a52:	701a      	strb	r2, [r3, #0]
		Lora_TxCurrentState_en =  (Lora_status_u8==1 )? Lora_EntryTxMode_en :Lora_TxReset_en ;
 8000a54:	4b25      	ldr	r3, [pc, #148]	; (8000aec <Lora_tenTxMode+0x118>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d101      	bne.n	8000a60 <Lora_tenTxMode+0x8c>
 8000a5c:	2205      	movs	r2, #5
 8000a5e:	e000      	b.n	8000a62 <Lora_tenTxMode+0x8e>
 8000a60:	2208      	movs	r2, #8
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <Lora_tenTxMode+0x114>)
 8000a64:	701a      	strb	r2, [r3, #0]

		}break;
 8000a66:	e039      	b.n	8000adc <Lora_tenTxMode+0x108>
	case Lora_EntryTxMode_en:{
		Lora_vWriteFifo(TxBuffer, payloadLength);
 8000a68:	78fb      	ldrb	r3, [r7, #3]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff fdef 	bl	8000650 <Lora_vWriteFifo>
		Lora_vWriteReg(RegOpMode,TxMode);
 8000a72:	2183      	movs	r1, #131	; 0x83
 8000a74:	2001      	movs	r0, #1
 8000a76:	f7ff fd8b 	bl	8000590 <Lora_vWriteReg>
		Lora_TxCurrentState_en = Lora_TxTest_en ;
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <Lora_tenTxMode+0x114>)
 8000a7c:	2206      	movs	r2, #6
 8000a7e:	701a      	strb	r2, [r3, #0]
	}break;
 8000a80:	e02c      	b.n	8000adc <Lora_tenTxMode+0x108>
	case Lora_TxTest_en:{
		Lora_TxDoneHw_u8 = Lora_u8GetDIO0();
 8000a82:	f7ff fe41 	bl	8000708 <Lora_u8GetDIO0>
 8000a86:	4603      	mov	r3, r0
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <Lora_tenTxMode+0x11c>)
 8000a8c:	701a      	strb	r2, [r3, #0]
		  if ( Lora_TxDoneHw_u8 == 1 )  {
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <Lora_tenTxMode+0x11c>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d121      	bne.n	8000ada <Lora_tenTxMode+0x106>
			  Lora_TxCurrentState_en = Lora_TxDone_en;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <Lora_tenTxMode+0x114>)
 8000a98:	2207      	movs	r2, #7
 8000a9a:	701a      	strb	r2, [r3, #0]
		  }

	}break;
 8000a9c:	e01d      	b.n	8000ada <Lora_tenTxMode+0x106>
	case Lora_TxDone_en:{

		Lora_TxDoneSw_u8 = ( (Lora_u8ReadReg(RegIrqFlags) & 0x08) == 0x08);
 8000a9e:	2012      	movs	r0, #18
 8000aa0:	f7ff fda2 	bl	80005e8 <Lora_u8ReadReg>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	2b08      	cmp	r3, #8
 8000aac:	bf0c      	ite	eq
 8000aae:	2301      	moveq	r3, #1
 8000ab0:	2300      	movne	r3, #0
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <Lora_tenTxMode+0x120>)
 8000ab8:	701a      	strb	r2, [r3, #0]
		Lora_clearIrq();
 8000aba:	f7ff fe7c 	bl	80007b6 <Lora_clearIrq>
		Lora_vWriteReg(RegOpMode,StdbyMode);
 8000abe:	2189      	movs	r1, #137	; 0x89
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f7ff fd65 	bl	8000590 <Lora_vWriteReg>
		Lora_TxCurrentState_en = Lora_TxReady_en ;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <Lora_tenTxMode+0x114>)
 8000ac8:	2202      	movs	r2, #2
 8000aca:	701a      	strb	r2, [r3, #0]

	}break;
 8000acc:	e006      	b.n	8000adc <Lora_tenTxMode+0x108>
	case Lora_TxReset_en:{
		Lora_vReset() ;
 8000ace:	f7ff fd21 	bl	8000514 <Lora_vReset>
		Lora_TxCurrentState_en=Lora_TxConfig_en ;
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <Lora_tenTxMode+0x114>)
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	701a      	strb	r2, [r3, #0]

	}break;
 8000ad8:	e000      	b.n	8000adc <Lora_tenTxMode+0x108>
	}break;
 8000ada:	bf00      	nop

	}break;

	}

	return Lora_TxCurrentState_en;
 8000adc:	4b02      	ldr	r3, [pc, #8]	; (8000ae8 <Lora_tenTxMode+0x114>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000042 	.word	0x20000042
 8000aec:	2000002c 	.word	0x2000002c
 8000af0:	2000002d 	.word	0x2000002d
 8000af4:	2000002e 	.word	0x2000002e

08000af8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_DMA_Init+0x4c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <MX_DMA_Init+0x4c>)
 8000b08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <MX_DMA_Init+0x4c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2038      	movs	r0, #56	; 0x38
 8000b20:	f000 fca7 	bl	8001472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b24:	2038      	movs	r0, #56	; 0x38
 8000b26:	f000 fcc0 	bl	80014aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	203b      	movs	r0, #59	; 0x3b
 8000b30:	f000 fc9f 	bl	8001472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b34:	203b      	movs	r0, #59	; 0x3b
 8000b36:	f000 fcb8 	bl	80014aa <HAL_NVIC_EnableIRQ>

}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <MX_GPIO_Init+0xbc>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a27      	ldr	r2, [pc, #156]	; (8000c04 <MX_GPIO_Init+0xbc>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <MX_GPIO_Init+0xbc>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <MX_GPIO_Init+0xbc>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a20      	ldr	r2, [pc, #128]	; (8000c04 <MX_GPIO_Init+0xbc>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <MX_GPIO_Init+0xbc>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2110      	movs	r1, #16
 8000b9a:	481b      	ldr	r0, [pc, #108]	; (8000c08 <MX_GPIO_Init+0xc0>)
 8000b9c:	f001 f9e6 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	4819      	ldr	r0, [pc, #100]	; (8000c0c <MX_GPIO_Init+0xc4>)
 8000ba6:	f001 f9e1 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000baa:	2310      	movs	r3, #16
 8000bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4811      	ldr	r0, [pc, #68]	; (8000c08 <MX_GPIO_Init+0xc0>)
 8000bc2:	f001 f81f 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000bc6:	2310      	movs	r3, #16
 8000bc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480b      	ldr	r0, [pc, #44]	; (8000c0c <MX_GPIO_Init+0xc4>)
 8000bde:	f001 f811 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000be2:	2320      	movs	r3, #32
 8000be4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_GPIO_Init+0xc4>)
 8000bf6:	f001 f805 	bl	8001c04 <HAL_GPIO_Init>

}
 8000bfa:	bf00      	nop
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000
 8000c0c:	40020800 	.word	0x40020800

08000c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c14:	f000 fabc 	bl	8001190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c18:	f000 f880 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1c:	f7ff ff94 	bl	8000b48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c20:	f7ff ff6a 	bl	8000af8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000c24:	f000 f91e 	bl	8000e64 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Lora_vInit();
 8000c28:	f7ff fc66 	bl	80004f8 <Lora_vInit>
  Lora_payloadLength_u8 = 2;
 8000c2c:	4b35      	ldr	r3, [pc, #212]	; (8000d04 <main+0xf4>)
 8000c2e:	2202      	movs	r2, #2
 8000c30:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Lora_TxBuffer_au8[0]=0x66;
 8000c32:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <main+0xf8>)
 8000c34:	2266      	movs	r2, #102	; 0x66
 8000c36:	701a      	strb	r2, [r3, #0]
  Lora_TxBuffer_au8[1]=0x01;
 8000c38:	4b33      	ldr	r3, [pc, #204]	; (8000d08 <main+0xf8>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	705a      	strb	r2, [r3, #1]
  Lora_RxBuffer_au8[0]=0;
 8000c3e:	4b33      	ldr	r3, [pc, #204]	; (8000d0c <main+0xfc>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
  Lora_RxBuffer_au8[1]=0;
 8000c44:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <main+0xfc>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	705a      	strb	r2, [r3, #1]
  Lora_vConfig();
 8000c4a:	f7ff fd6d 	bl	8000728 <Lora_vConfig>
  while (1)
  {
	  switch(Lora_CurrentMode_en){
 8000c4e:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <main+0x100>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	d8fb      	bhi.n	8000c4e <main+0x3e>
 8000c56:	a201      	add	r2, pc, #4	; (adr r2, 8000c5c <main+0x4c>)
 8000c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5c:	08000c71 	.word	0x08000c71
 8000c60:	08000c79 	.word	0x08000c79
 8000c64:	08000c9d 	.word	0x08000c9d
 8000c68:	08000cb7 	.word	0x08000cb7
 8000c6c:	08000cdb 	.word	0x08000cdb
	  case Lora_Idle_en :{
		  Lora_CurrentMode_en = Lora_RxtoTx_en;
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <main+0x100>)
 8000c72:	2204      	movs	r2, #4
 8000c74:	701a      	strb	r2, [r3, #0]
	  }break;
 8000c76:	e044      	b.n	8000d02 <main+0xf2>
	  case Lora_Tx_en:{
		  Lora_TxCurrentState_en = Lora_tenTxMode(Lora_TxBuffer_au8 , Lora_payloadLength_u8);
 8000c78:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <main+0xf4>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4822      	ldr	r0, [pc, #136]	; (8000d08 <main+0xf8>)
 8000c80:	f7ff fea8 	bl	80009d4 <Lora_tenTxMode>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <main+0x104>)
 8000c8a:	701a      	strb	r2, [r3, #0]
		  if (Lora_TxReady_en ==Lora_TxCurrentState_en ){
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <main+0x104>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d133      	bne.n	8000cfc <main+0xec>
			  Lora_CurrentMode_en = Lora_TxtoRx_en ;
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <main+0x100>)
 8000c96:	2202      	movs	r2, #2
 8000c98:	701a      	strb	r2, [r3, #0]
		  }
	  }break;
 8000c9a:	e02f      	b.n	8000cfc <main+0xec>
	  case Lora_TxtoRx_en:{
		  //HAL_Delay(1000);
		  Lora_RxBuffer_au8[0] = 0;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <main+0xfc>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
		  Lora_RxBuffer_au8[1] = 0;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <main+0xfc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	705a      	strb	r2, [r3, #1]
		  Lora_RxCurrentState_en =Lora_RxConfig_en;
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <main+0x108>)
 8000caa:	2203      	movs	r2, #3
 8000cac:	701a      	strb	r2, [r3, #0]
		  Lora_CurrentMode_en = Lora_Rx_en ;
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <main+0x100>)
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	701a      	strb	r2, [r3, #0]
	  }break;
 8000cb4:	e025      	b.n	8000d02 <main+0xf2>
	  case Lora_Rx_en:{
		  Lora_RxCurrentState_en = Lora_tenRxMode(Lora_RxBuffer_au8, Lora_payloadLength_u8);
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <main+0xf4>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4813      	ldr	r0, [pc, #76]	; (8000d0c <main+0xfc>)
 8000cbe:	f7ff fddf 	bl	8000880 <Lora_tenRxMode>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <main+0x108>)
 8000cc8:	701a      	strb	r2, [r3, #0]
		  if ( (Lora_RxReady_en ==Lora_RxCurrentState_en) /*||(Lora_RxTimeout_en ==Lora_RxCurrentState_en)*/ ){
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <main+0x108>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d116      	bne.n	8000d00 <main+0xf0>
			  Lora_CurrentMode_en = Lora_RxtoTx_en ;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <main+0x100>)
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	701a      	strb	r2, [r3, #0]
		  }
	  }break;
 8000cd8:	e012      	b.n	8000d00 <main+0xf0>
	  case Lora_RxtoTx_en:{
		  HAL_Delay(1000);
 8000cda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cde:	f000 fac9 	bl	8001274 <HAL_Delay>
		  Lora_TxBuffer_au8[1] =  Lora_RxBuffer_au8[1] +1;
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <main+0xfc>)
 8000ce4:	785b      	ldrb	r3, [r3, #1]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <main+0xf8>)
 8000cec:	705a      	strb	r2, [r3, #1]
		  Lora_TxCurrentState_en =Lora_TxConfig_en;
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <main+0x104>)
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	701a      	strb	r2, [r3, #0]
		  Lora_CurrentMode_en = Lora_Tx_en ;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <main+0x100>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
		  }break;
 8000cfa:	e002      	b.n	8000d02 <main+0xf2>
	  }break;
 8000cfc:	bf00      	nop
 8000cfe:	e7a6      	b.n	8000c4e <main+0x3e>
	  }break;
 8000d00:	bf00      	nop
	  switch(Lora_CurrentMode_en){
 8000d02:	e7a4      	b.n	8000c4e <main+0x3e>
 8000d04:	20000033 	.word	0x20000033
 8000d08:	2000003c 	.word	0x2000003c
 8000d0c:	20000034 	.word	0x20000034
 8000d10:	20000043 	.word	0x20000043
 8000d14:	20000042 	.word	0x20000042
 8000d18:	20000041 	.word	0x20000041

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b094      	sub	sp, #80	; 0x50
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 0320 	add.w	r3, r7, #32
 8000d26:	2230      	movs	r2, #48	; 0x30
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f003 f876 	bl	8003e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <SystemClock_Config+0xcc>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	4a27      	ldr	r2, [pc, #156]	; (8000de8 <SystemClock_Config+0xcc>)
 8000d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d50:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <SystemClock_Config+0xcc>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	4b22      	ldr	r3, [pc, #136]	; (8000dec <SystemClock_Config+0xd0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a21      	ldr	r2, [pc, #132]	; (8000dec <SystemClock_Config+0xd0>)
 8000d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <SystemClock_Config+0xd0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d80:	2310      	movs	r3, #16
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d84:	2302      	movs	r3, #2
 8000d86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000d90:	2332      	movs	r3, #50	; 0x32
 8000d92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d94:	2304      	movs	r3, #4
 8000d96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9c:	f107 0320 	add.w	r3, r7, #32
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 f8fd 	bl	8001fa0 <HAL_RCC_OscConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000dac:	f000 f854 	bl	8000e58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db0:	230f      	movs	r3, #15
 8000db2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db4:	2302      	movs	r3, #2
 8000db6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dbc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 fb5e 	bl	8002490 <HAL_RCC_ClockConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000dda:	f000 f83d 	bl	8000e58 <Error_Handler>
  }
}
 8000dde:	bf00      	nop
 8000de0:	3750      	adds	r7, #80	; 0x50
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40007000 	.word	0x40007000

08000df0 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback( SPI_HandleTypeDef *hspi )
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	__HAL_DMA_DISABLE_IT ( &hdma_spi1_tx, DMA_IT_HT );
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_SPI_TxCpltCallback+0x2c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <HAL_SPI_TxCpltCallback+0x2c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0208 	bic.w	r2, r2, #8
 8000e06:	601a      	str	r2, [r3, #0]
	Lora_Transmit_Complete = 1;
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_SPI_TxCpltCallback+0x30>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	200000fc 	.word	0x200000fc
 8000e20:	20000032 	.word	0x20000032

08000e24 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback( SPI_HandleTypeDef *hspi )
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	__HAL_DMA_DISABLE_IT ( &hdma_spi1_rx, DMA_IT_HT );
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_SPI_RxCpltCallback+0x2c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <HAL_SPI_RxCpltCallback+0x2c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 0208 	bic.w	r2, r2, #8
 8000e3a:	601a      	str	r2, [r3, #0]
	Lora_Receive_Complete = 1;
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_SPI_RxCpltCallback+0x30>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	2000009c 	.word	0x2000009c
 8000e54:	20000031 	.word	0x20000031

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <Error_Handler+0x8>
	...

08000e64 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e68:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000e6a:	4a18      	ldr	r2, [pc, #96]	; (8000ecc <MX_SPI1_Init+0x68>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000e70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000eb0:	220a      	movs	r2, #10
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <MX_SPI1_Init+0x64>)
 8000eb6:	f001 fcd7 	bl	8002868 <HAL_SPI_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ec0:	f7ff ffca 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000044 	.word	0x20000044
 8000ecc:	40013000 	.word	0x40013000

08000ed0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a4b      	ldr	r2, [pc, #300]	; (800101c <HAL_SPI_MspInit+0x14c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	f040 8090 	bne.w	8001014 <HAL_SPI_MspInit+0x144>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	4b49      	ldr	r3, [pc, #292]	; (8001020 <HAL_SPI_MspInit+0x150>)
 8000efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efc:	4a48      	ldr	r2, [pc, #288]	; (8001020 <HAL_SPI_MspInit+0x150>)
 8000efe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f02:	6453      	str	r3, [r2, #68]	; 0x44
 8000f04:	4b46      	ldr	r3, [pc, #280]	; (8001020 <HAL_SPI_MspInit+0x150>)
 8000f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	4b42      	ldr	r3, [pc, #264]	; (8001020 <HAL_SPI_MspInit+0x150>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	4a41      	ldr	r2, [pc, #260]	; (8001020 <HAL_SPI_MspInit+0x150>)
 8000f1a:	f043 0301 	orr.w	r3, r3, #1
 8000f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f20:	4b3f      	ldr	r3, [pc, #252]	; (8001020 <HAL_SPI_MspInit+0x150>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f2c:	23e0      	movs	r3, #224	; 0xe0
 8000f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f3c:	2305      	movs	r3, #5
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4837      	ldr	r0, [pc, #220]	; (8001024 <HAL_SPI_MspInit+0x154>)
 8000f48:	f000 fe5c 	bl	8001c04 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000f4c:	4b36      	ldr	r3, [pc, #216]	; (8001028 <HAL_SPI_MspInit+0x158>)
 8000f4e:	4a37      	ldr	r2, [pc, #220]	; (800102c <HAL_SPI_MspInit+0x15c>)
 8000f50:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000f52:	4b35      	ldr	r3, [pc, #212]	; (8001028 <HAL_SPI_MspInit+0x158>)
 8000f54:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000f58:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f5a:	4b33      	ldr	r3, [pc, #204]	; (8001028 <HAL_SPI_MspInit+0x158>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f60:	4b31      	ldr	r3, [pc, #196]	; (8001028 <HAL_SPI_MspInit+0x158>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f66:	4b30      	ldr	r3, [pc, #192]	; (8001028 <HAL_SPI_MspInit+0x158>)
 8000f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f6e:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <HAL_SPI_MspInit+0x158>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f74:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <HAL_SPI_MspInit+0x158>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000f7a:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <HAL_SPI_MspInit+0x158>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f80:	4b29      	ldr	r3, [pc, #164]	; (8001028 <HAL_SPI_MspInit+0x158>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f86:	4b28      	ldr	r3, [pc, #160]	; (8001028 <HAL_SPI_MspInit+0x158>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000f8c:	4826      	ldr	r0, [pc, #152]	; (8001028 <HAL_SPI_MspInit+0x158>)
 8000f8e:	f000 faa7 	bl	80014e0 <HAL_DMA_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000f98:	f7ff ff5e 	bl	8000e58 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a22      	ldr	r2, [pc, #136]	; (8001028 <HAL_SPI_MspInit+0x158>)
 8000fa0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fa2:	4a21      	ldr	r2, [pc, #132]	; (8001028 <HAL_SPI_MspInit+0x158>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000fa8:	4b21      	ldr	r3, [pc, #132]	; (8001030 <HAL_SPI_MspInit+0x160>)
 8000faa:	4a22      	ldr	r2, [pc, #136]	; (8001034 <HAL_SPI_MspInit+0x164>)
 8000fac:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <HAL_SPI_MspInit+0x160>)
 8000fb0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000fb4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fb6:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <HAL_SPI_MspInit+0x160>)
 8000fb8:	2240      	movs	r2, #64	; 0x40
 8000fba:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <HAL_SPI_MspInit+0x160>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <HAL_SPI_MspInit+0x160>)
 8000fc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <HAL_SPI_MspInit+0x160>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_SPI_MspInit+0x160>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_SPI_MspInit+0x160>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_SPI_MspInit+0x160>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <HAL_SPI_MspInit+0x160>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000fe8:	4811      	ldr	r0, [pc, #68]	; (8001030 <HAL_SPI_MspInit+0x160>)
 8000fea:	f000 fa79 	bl	80014e0 <HAL_DMA_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8000ff4:	f7ff ff30 	bl	8000e58 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <HAL_SPI_MspInit+0x160>)
 8000ffc:	649a      	str	r2, [r3, #72]	; 0x48
 8000ffe:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <HAL_SPI_MspInit+0x160>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	2023      	movs	r0, #35	; 0x23
 800100a:	f000 fa32 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800100e:	2023      	movs	r0, #35	; 0x23
 8001010:	f000 fa4b 	bl	80014aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	; 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40013000 	.word	0x40013000
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000
 8001028:	2000009c 	.word	0x2000009c
 800102c:	40026410 	.word	0x40026410
 8001030:	200000fc 	.word	0x200000fc
 8001034:	40026458 	.word	0x40026458

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <HAL_MspInit+0x4c>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	4a0f      	ldr	r2, [pc, #60]	; (8001084 <HAL_MspInit+0x4c>)
 8001048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104c:	6453      	str	r3, [r2, #68]	; 0x44
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <HAL_MspInit+0x4c>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_MspInit+0x4c>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <HAL_MspInit+0x4c>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	6413      	str	r3, [r2, #64]	; 0x40
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_MspInit+0x4c>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001076:	2007      	movs	r0, #7
 8001078:	f000 f9f0 	bl	800145c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40023800 	.word	0x40023800

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800108c:	e7fe      	b.n	800108c <NMI_Handler+0x4>

0800108e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <MemManage_Handler+0x4>

0800109a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d4:	f000 f8ae 	bl	8001234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <SPI1_IRQHandler+0x10>)
 80010e2:	f002 fab9 	bl	8003658 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000044 	.word	0x20000044

080010f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <DMA2_Stream0_IRQHandler+0x10>)
 80010f6:	f000 fb1b 	bl	8001730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000009c 	.word	0x2000009c

08001104 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <DMA2_Stream3_IRQHandler+0x10>)
 800110a:	f000 fb11 	bl	8001730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200000fc 	.word	0x200000fc

08001118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <SystemInit+0x20>)
 800111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <SystemInit+0x20>)
 8001124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800113c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001174 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001142:	490e      	ldr	r1, [pc, #56]	; (800117c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001144:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001158:	4c0b      	ldr	r4, [pc, #44]	; (8001188 <LoopFillZerobss+0x26>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001166:	f7ff ffd7 	bl	8001118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116a:	f002 fe33 	bl	8003dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116e:	f7ff fd4f 	bl	8000c10 <main>
  bx  lr    
 8001172:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001174:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800117c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001180:	08003e6c 	.word	0x08003e6c
  ldr r2, =_sbss
 8001184:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001188:	20000160 	.word	0x20000160

0800118c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC_IRQHandler>
	...

08001190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0d      	ldr	r2, [pc, #52]	; (80011d0 <HAL_Init+0x40>)
 800119a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_Init+0x40>)
 80011a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <HAL_Init+0x40>)
 80011b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b8:	2003      	movs	r0, #3
 80011ba:	f000 f94f 	bl	800145c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011be:	2000      	movs	r0, #0
 80011c0:	f000 f808 	bl	80011d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c4:	f7ff ff38 	bl	8001038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023c00 	.word	0x40023c00

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_InitTick+0x54>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0x58>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f967 	bl	80014c6 <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00e      	b.n	8001220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d80a      	bhi.n	800121e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 f92f 	bl	8001472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <HAL_InitTick+0x5c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000004 	.word	0x20000004
 800122c:	2000000c 	.word	0x2000000c
 8001230:	20000008 	.word	0x20000008

08001234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_IncTick+0x20>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x24>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_IncTick+0x24>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	2000000c 	.word	0x2000000c
 8001258:	2000015c 	.word	0x2000015c

0800125c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_GetTick+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	2000015c 	.word	0x2000015c

08001274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff ffee 	bl	800125c <HAL_GetTick>
 8001280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128c:	d005      	beq.n	800129a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_Delay+0x44>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800129a:	bf00      	nop
 800129c:	f7ff ffde 	bl	800125c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8f7      	bhi.n	800129c <HAL_Delay+0x28>
  {
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000000c 	.word	0x2000000c

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	db0b      	blt.n	800134a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	4907      	ldr	r1, [pc, #28]	; (8001358 <__NVIC_EnableIRQ+0x38>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	095b      	lsrs	r3, r3, #5
 8001340:	2001      	movs	r0, #1
 8001342:	fa00 f202 	lsl.w	r2, r0, r2
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	; (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	; (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	; 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001428:	d301      	bcc.n	800142e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142a:	2301      	movs	r3, #1
 800142c:	e00f      	b.n	800144e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <SysTick_Config+0x40>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001436:	210f      	movs	r1, #15
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f7ff ff8e 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <SysTick_Config+0x40>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SysTick_Config+0x40>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff29 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001484:	f7ff ff3e 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f7ff ff8e 	bl	80013b0 <NVIC_EncodePriority>
 8001494:	4602      	mov	r2, r0
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff5d 	bl	800135c <__NVIC_SetPriority>
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff31 	bl	8001320 <__NVIC_EnableIRQ>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ffa2 	bl	8001418 <SysTick_Config>
 80014d4:	4603      	mov	r3, r0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff feb6 	bl	800125c <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e099      	b.n	8001630 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2202      	movs	r2, #2
 8001500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800151c:	e00f      	b.n	800153e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800151e:	f7ff fe9d 	bl	800125c <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b05      	cmp	r3, #5
 800152a:	d908      	bls.n	800153e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2220      	movs	r2, #32
 8001530:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2203      	movs	r2, #3
 8001536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e078      	b.n	8001630 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1e8      	bne.n	800151e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	4b38      	ldr	r3, [pc, #224]	; (8001638 <HAL_DMA_Init+0x158>)
 8001558:	4013      	ands	r3, r2
 800155a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800156a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001576:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001582:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	4313      	orrs	r3, r2
 800158e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	2b04      	cmp	r3, #4
 8001596:	d107      	bne.n	80015a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	4313      	orrs	r3, r2
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f023 0307 	bic.w	r3, r3, #7
 80015be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d117      	bne.n	8001602 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	4313      	orrs	r3, r2
 80015da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00e      	beq.n	8001602 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 fa91 	bl	8001b0c <DMA_CheckFifoParam>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d008      	beq.n	8001602 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2240      	movs	r2, #64	; 0x40
 80015f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015fe:	2301      	movs	r3, #1
 8001600:	e016      	b.n	8001630 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 fa48 	bl	8001aa0 <DMA_CalcBaseAndBitshift>
 8001610:	4603      	mov	r3, r0
 8001612:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001618:	223f      	movs	r2, #63	; 0x3f
 800161a:	409a      	lsls	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	f010803f 	.word	0xf010803f

0800163c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <HAL_DMA_Start_IT+0x26>
 800165e:	2302      	movs	r3, #2
 8001660:	e040      	b.n	80016e4 <HAL_DMA_Start_IT+0xa8>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b01      	cmp	r3, #1
 8001674:	d12f      	bne.n	80016d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2202      	movs	r2, #2
 800167a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 f9da 	bl	8001a44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001694:	223f      	movs	r2, #63	; 0x3f
 8001696:	409a      	lsls	r2, r3
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0216 	orr.w	r2, r2, #22
 80016aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d007      	beq.n	80016c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0208 	orr.w	r2, r2, #8
 80016c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0201 	orr.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	e005      	b.n	80016e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016de:	2302      	movs	r3, #2
 80016e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d004      	beq.n	800170a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2280      	movs	r2, #128	; 0x80
 8001704:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e00c      	b.n	8001724 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2205      	movs	r2, #5
 800170e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0201 	bic.w	r2, r2, #1
 8001720:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800173c:	4b8e      	ldr	r3, [pc, #568]	; (8001978 <HAL_DMA_IRQHandler+0x248>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a8e      	ldr	r2, [pc, #568]	; (800197c <HAL_DMA_IRQHandler+0x24c>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	0a9b      	lsrs	r3, r3, #10
 8001748:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175a:	2208      	movs	r2, #8
 800175c:	409a      	lsls	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4013      	ands	r3, r2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d01a      	beq.n	800179c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d013      	beq.n	800179c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0204 	bic.w	r2, r2, #4
 8001782:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001788:	2208      	movs	r2, #8
 800178a:	409a      	lsls	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001794:	f043 0201 	orr.w	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	2201      	movs	r2, #1
 80017a2:	409a      	lsls	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d012      	beq.n	80017d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017be:	2201      	movs	r2, #1
 80017c0:	409a      	lsls	r2, r3
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ca:	f043 0202 	orr.w	r2, r3, #2
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d6:	2204      	movs	r2, #4
 80017d8:	409a      	lsls	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4013      	ands	r3, r2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d012      	beq.n	8001808 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00b      	beq.n	8001808 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f4:	2204      	movs	r2, #4
 80017f6:	409a      	lsls	r2, r3
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001800:	f043 0204 	orr.w	r2, r3, #4
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	2210      	movs	r2, #16
 800180e:	409a      	lsls	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d043      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b00      	cmp	r3, #0
 8001824:	d03c      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	2210      	movs	r2, #16
 800182c:	409a      	lsls	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d018      	beq.n	8001872 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d108      	bne.n	8001860 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	2b00      	cmp	r3, #0
 8001854:	d024      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	4798      	blx	r3
 800185e:	e01f      	b.n	80018a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001864:	2b00      	cmp	r3, #0
 8001866:	d01b      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	4798      	blx	r3
 8001870:	e016      	b.n	80018a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187c:	2b00      	cmp	r3, #0
 800187e:	d107      	bne.n	8001890 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0208 	bic.w	r2, r2, #8
 800188e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a4:	2220      	movs	r2, #32
 80018a6:	409a      	lsls	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 808f 	beq.w	80019d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 8087 	beq.w	80019d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c6:	2220      	movs	r2, #32
 80018c8:	409a      	lsls	r2, r3
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b05      	cmp	r3, #5
 80018d8:	d136      	bne.n	8001948 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0216 	bic.w	r2, r2, #22
 80018e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	695a      	ldr	r2, [r3, #20]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d103      	bne.n	800190a <HAL_DMA_IRQHandler+0x1da>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0208 	bic.w	r2, r2, #8
 8001918:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191e:	223f      	movs	r2, #63	; 0x3f
 8001920:	409a      	lsls	r2, r3
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800193a:	2b00      	cmp	r3, #0
 800193c:	d07e      	beq.n	8001a3c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	4798      	blx	r3
        }
        return;
 8001946:	e079      	b.n	8001a3c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d01d      	beq.n	8001992 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10d      	bne.n	8001980 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001968:	2b00      	cmp	r3, #0
 800196a:	d031      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	4798      	blx	r3
 8001974:	e02c      	b.n	80019d0 <HAL_DMA_IRQHandler+0x2a0>
 8001976:	bf00      	nop
 8001978:	20000004 	.word	0x20000004
 800197c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001984:	2b00      	cmp	r3, #0
 8001986:	d023      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	4798      	blx	r3
 8001990:	e01e      	b.n	80019d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10f      	bne.n	80019c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0210 	bic.w	r2, r2, #16
 80019ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d032      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d022      	beq.n	8001a2a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2205      	movs	r2, #5
 80019e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	3301      	adds	r3, #1
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d307      	bcc.n	8001a18 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f2      	bne.n	80019fc <HAL_DMA_IRQHandler+0x2cc>
 8001a16:	e000      	b.n	8001a1a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a18:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	4798      	blx	r3
 8001a3a:	e000      	b.n	8001a3e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a3c:	bf00      	nop
    }
  }
}
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b40      	cmp	r3, #64	; 0x40
 8001a70:	d108      	bne.n	8001a84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a82:	e007      	b.n	8001a94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	60da      	str	r2, [r3, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	3b10      	subs	r3, #16
 8001ab0:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <DMA_CalcBaseAndBitshift+0x64>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001aba:	4a13      	ldr	r2, [pc, #76]	; (8001b08 <DMA_CalcBaseAndBitshift+0x68>)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d909      	bls.n	8001ae2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ad6:	f023 0303 	bic.w	r3, r3, #3
 8001ada:	1d1a      	adds	r2, r3, #4
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	659a      	str	r2, [r3, #88]	; 0x58
 8001ae0:	e007      	b.n	8001af2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001aea:	f023 0303 	bic.w	r3, r3, #3
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	aaaaaaab 	.word	0xaaaaaaab
 8001b08:	08003e54 	.word	0x08003e54

08001b0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d11f      	bne.n	8001b66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d856      	bhi.n	8001bda <DMA_CheckFifoParam+0xce>
 8001b2c:	a201      	add	r2, pc, #4	; (adr r2, 8001b34 <DMA_CheckFifoParam+0x28>)
 8001b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b32:	bf00      	nop
 8001b34:	08001b45 	.word	0x08001b45
 8001b38:	08001b57 	.word	0x08001b57
 8001b3c:	08001b45 	.word	0x08001b45
 8001b40:	08001bdb 	.word	0x08001bdb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d046      	beq.n	8001bde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b54:	e043      	b.n	8001bde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b5e:	d140      	bne.n	8001be2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b64:	e03d      	b.n	8001be2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b6e:	d121      	bne.n	8001bb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d837      	bhi.n	8001be6 <DMA_CheckFifoParam+0xda>
 8001b76:	a201      	add	r2, pc, #4	; (adr r2, 8001b7c <DMA_CheckFifoParam+0x70>)
 8001b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7c:	08001b8d 	.word	0x08001b8d
 8001b80:	08001b93 	.word	0x08001b93
 8001b84:	08001b8d 	.word	0x08001b8d
 8001b88:	08001ba5 	.word	0x08001ba5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8001b90:	e030      	b.n	8001bf4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d025      	beq.n	8001bea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ba2:	e022      	b.n	8001bea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bac:	d11f      	bne.n	8001bee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bb2:	e01c      	b.n	8001bee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d903      	bls.n	8001bc2 <DMA_CheckFifoParam+0xb6>
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d003      	beq.n	8001bc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bc0:	e018      	b.n	8001bf4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8001bc6:	e015      	b.n	8001bf4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00e      	beq.n	8001bf2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd8:	e00b      	b.n	8001bf2 <DMA_CheckFifoParam+0xe6>
      break;
 8001bda:	bf00      	nop
 8001bdc:	e00a      	b.n	8001bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bde:	bf00      	nop
 8001be0:	e008      	b.n	8001bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8001be2:	bf00      	nop
 8001be4:	e006      	b.n	8001bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8001be6:	bf00      	nop
 8001be8:	e004      	b.n	8001bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bea:	bf00      	nop
 8001bec:	e002      	b.n	8001bf4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001bee:	bf00      	nop
 8001bf0:	e000      	b.n	8001bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8001bf2:	bf00      	nop
    }
  } 
  
  return status; 
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	e16b      	b.n	8001ef8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c20:	2201      	movs	r2, #1
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	f040 815a 	bne.w	8001ef2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d005      	beq.n	8001c56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d130      	bne.n	8001cb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	2203      	movs	r2, #3
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f003 0201 	and.w	r2, r3, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d017      	beq.n	8001cf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d123      	bne.n	8001d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	08da      	lsrs	r2, r3, #3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3208      	adds	r2, #8
 8001d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	220f      	movs	r2, #15
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	691a      	ldr	r2, [r3, #16]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	08da      	lsrs	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3208      	adds	r2, #8
 8001d42:	69b9      	ldr	r1, [r7, #24]
 8001d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0203 	and.w	r2, r3, #3
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80b4 	beq.w	8001ef2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b60      	ldr	r3, [pc, #384]	; (8001f10 <HAL_GPIO_Init+0x30c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	4a5f      	ldr	r2, [pc, #380]	; (8001f10 <HAL_GPIO_Init+0x30c>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d98:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9a:	4b5d      	ldr	r3, [pc, #372]	; (8001f10 <HAL_GPIO_Init+0x30c>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001da6:	4a5b      	ldr	r2, [pc, #364]	; (8001f14 <HAL_GPIO_Init+0x310>)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	3302      	adds	r3, #2
 8001dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a52      	ldr	r2, [pc, #328]	; (8001f18 <HAL_GPIO_Init+0x314>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d02b      	beq.n	8001e2a <HAL_GPIO_Init+0x226>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a51      	ldr	r2, [pc, #324]	; (8001f1c <HAL_GPIO_Init+0x318>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d025      	beq.n	8001e26 <HAL_GPIO_Init+0x222>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a50      	ldr	r2, [pc, #320]	; (8001f20 <HAL_GPIO_Init+0x31c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01f      	beq.n	8001e22 <HAL_GPIO_Init+0x21e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4f      	ldr	r2, [pc, #316]	; (8001f24 <HAL_GPIO_Init+0x320>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d019      	beq.n	8001e1e <HAL_GPIO_Init+0x21a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4e      	ldr	r2, [pc, #312]	; (8001f28 <HAL_GPIO_Init+0x324>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <HAL_GPIO_Init+0x216>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4d      	ldr	r2, [pc, #308]	; (8001f2c <HAL_GPIO_Init+0x328>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00d      	beq.n	8001e16 <HAL_GPIO_Init+0x212>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4c      	ldr	r2, [pc, #304]	; (8001f30 <HAL_GPIO_Init+0x32c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d007      	beq.n	8001e12 <HAL_GPIO_Init+0x20e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4b      	ldr	r2, [pc, #300]	; (8001f34 <HAL_GPIO_Init+0x330>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d101      	bne.n	8001e0e <HAL_GPIO_Init+0x20a>
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	e00e      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e0e:	2308      	movs	r3, #8
 8001e10:	e00c      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e12:	2306      	movs	r3, #6
 8001e14:	e00a      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e16:	2305      	movs	r3, #5
 8001e18:	e008      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	e006      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e004      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e002      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	f002 0203 	and.w	r2, r2, #3
 8001e32:	0092      	lsls	r2, r2, #2
 8001e34:	4093      	lsls	r3, r2
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e3c:	4935      	ldr	r1, [pc, #212]	; (8001f14 <HAL_GPIO_Init+0x310>)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	3302      	adds	r3, #2
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e4a:	4b3b      	ldr	r3, [pc, #236]	; (8001f38 <HAL_GPIO_Init+0x334>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e6e:	4a32      	ldr	r2, [pc, #200]	; (8001f38 <HAL_GPIO_Init+0x334>)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e74:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <HAL_GPIO_Init+0x334>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e98:	4a27      	ldr	r2, [pc, #156]	; (8001f38 <HAL_GPIO_Init+0x334>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e9e:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <HAL_GPIO_Init+0x334>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ec2:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <HAL_GPIO_Init+0x334>)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_GPIO_Init+0x334>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eec:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <HAL_GPIO_Init+0x334>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	2b0f      	cmp	r3, #15
 8001efc:	f67f ae90 	bls.w	8001c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3724      	adds	r7, #36	; 0x24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40013800 	.word	0x40013800
 8001f18:	40020000 	.word	0x40020000
 8001f1c:	40020400 	.word	0x40020400
 8001f20:	40020800 	.word	0x40020800
 8001f24:	40020c00 	.word	0x40020c00
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40021400 	.word	0x40021400
 8001f30:	40021800 	.word	0x40021800
 8001f34:	40021c00 	.word	0x40021c00
 8001f38:	40013c00 	.word	0x40013c00

08001f3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	887b      	ldrh	r3, [r7, #2]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
 8001f58:	e001      	b.n	8001f5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f7c:	787b      	ldrb	r3, [r7, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f88:	e003      	b.n	8001f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f8a:	887b      	ldrh	r3, [r7, #2]
 8001f8c:	041a      	lsls	r2, r3, #16
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	619a      	str	r2, [r3, #24]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e267      	b.n	8002482 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d075      	beq.n	80020aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fbe:	4b88      	ldr	r3, [pc, #544]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d00c      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fca:	4b85      	ldr	r3, [pc, #532]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d112      	bne.n	8001ffc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd6:	4b82      	ldr	r3, [pc, #520]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe2:	d10b      	bne.n	8001ffc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	4b7e      	ldr	r3, [pc, #504]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d05b      	beq.n	80020a8 <HAL_RCC_OscConfig+0x108>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d157      	bne.n	80020a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e242      	b.n	8002482 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002004:	d106      	bne.n	8002014 <HAL_RCC_OscConfig+0x74>
 8002006:	4b76      	ldr	r3, [pc, #472]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a75      	ldr	r2, [pc, #468]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	e01d      	b.n	8002050 <HAL_RCC_OscConfig+0xb0>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x98>
 800201e:	4b70      	ldr	r3, [pc, #448]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a6f      	ldr	r2, [pc, #444]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 8002024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	4b6d      	ldr	r3, [pc, #436]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a6c      	ldr	r2, [pc, #432]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e00b      	b.n	8002050 <HAL_RCC_OscConfig+0xb0>
 8002038:	4b69      	ldr	r3, [pc, #420]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a68      	ldr	r2, [pc, #416]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 800203e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a65      	ldr	r2, [pc, #404]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 800204a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d013      	beq.n	8002080 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff f900 	bl	800125c <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002060:	f7ff f8fc 	bl	800125c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	; 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e207      	b.n	8002482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	4b5b      	ldr	r3, [pc, #364]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0xc0>
 800207e:	e014      	b.n	80020aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7ff f8ec 	bl	800125c <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002088:	f7ff f8e8 	bl	800125c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b64      	cmp	r3, #100	; 0x64
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e1f3      	b.n	8002482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209a:	4b51      	ldr	r3, [pc, #324]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0xe8>
 80020a6:	e000      	b.n	80020aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d063      	beq.n	800217e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020b6:	4b4a      	ldr	r3, [pc, #296]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00b      	beq.n	80020da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c2:	4b47      	ldr	r3, [pc, #284]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d11c      	bne.n	8002108 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ce:	4b44      	ldr	r3, [pc, #272]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d116      	bne.n	8002108 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020da:	4b41      	ldr	r3, [pc, #260]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <HAL_RCC_OscConfig+0x152>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e1c7      	b.n	8002482 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f2:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4937      	ldr	r1, [pc, #220]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002106:	e03a      	b.n	800217e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d020      	beq.n	8002152 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002110:	4b34      	ldr	r3, [pc, #208]	; (80021e4 <HAL_RCC_OscConfig+0x244>)
 8002112:	2201      	movs	r2, #1
 8002114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7ff f8a1 	bl	800125c <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800211e:	f7ff f89d 	bl	800125c <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e1a8      	b.n	8002482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213c:	4b28      	ldr	r3, [pc, #160]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4925      	ldr	r1, [pc, #148]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 800214c:	4313      	orrs	r3, r2
 800214e:	600b      	str	r3, [r1, #0]
 8002150:	e015      	b.n	800217e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002152:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <HAL_RCC_OscConfig+0x244>)
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7ff f880 	bl	800125c <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002160:	f7ff f87c 	bl	800125c <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e187      	b.n	8002482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d036      	beq.n	80021f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d016      	beq.n	80021c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HAL_RCC_OscConfig+0x248>)
 8002194:	2201      	movs	r2, #1
 8002196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002198:	f7ff f860 	bl	800125c <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a0:	f7ff f85c 	bl	800125c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e167      	b.n	8002482 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCC_OscConfig+0x240>)
 80021b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x200>
 80021be:	e01b      	b.n	80021f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c0:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <HAL_RCC_OscConfig+0x248>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c6:	f7ff f849 	bl	800125c <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021cc:	e00e      	b.n	80021ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ce:	f7ff f845 	bl	800125c <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d907      	bls.n	80021ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e150      	b.n	8002482 <HAL_RCC_OscConfig+0x4e2>
 80021e0:	40023800 	.word	0x40023800
 80021e4:	42470000 	.word	0x42470000
 80021e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ec:	4b88      	ldr	r3, [pc, #544]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 80021ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1ea      	bne.n	80021ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 8097 	beq.w	8002334 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220a:	4b81      	ldr	r3, [pc, #516]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10f      	bne.n	8002236 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	4b7d      	ldr	r3, [pc, #500]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a7c      	ldr	r2, [pc, #496]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 8002220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b7a      	ldr	r3, [pc, #488]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002232:	2301      	movs	r3, #1
 8002234:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002236:	4b77      	ldr	r3, [pc, #476]	; (8002414 <HAL_RCC_OscConfig+0x474>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	2b00      	cmp	r3, #0
 8002240:	d118      	bne.n	8002274 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002242:	4b74      	ldr	r3, [pc, #464]	; (8002414 <HAL_RCC_OscConfig+0x474>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a73      	ldr	r2, [pc, #460]	; (8002414 <HAL_RCC_OscConfig+0x474>)
 8002248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224e:	f7ff f805 	bl	800125c <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002256:	f7ff f801 	bl	800125c <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e10c      	b.n	8002482 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	4b6a      	ldr	r3, [pc, #424]	; (8002414 <HAL_RCC_OscConfig+0x474>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x2ea>
 800227c:	4b64      	ldr	r3, [pc, #400]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	4a63      	ldr	r2, [pc, #396]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6713      	str	r3, [r2, #112]	; 0x70
 8002288:	e01c      	b.n	80022c4 <HAL_RCC_OscConfig+0x324>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b05      	cmp	r3, #5
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0x30c>
 8002292:	4b5f      	ldr	r3, [pc, #380]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 8002294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002296:	4a5e      	ldr	r2, [pc, #376]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 8002298:	f043 0304 	orr.w	r3, r3, #4
 800229c:	6713      	str	r3, [r2, #112]	; 0x70
 800229e:	4b5c      	ldr	r3, [pc, #368]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	4a5b      	ldr	r2, [pc, #364]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6713      	str	r3, [r2, #112]	; 0x70
 80022aa:	e00b      	b.n	80022c4 <HAL_RCC_OscConfig+0x324>
 80022ac:	4b58      	ldr	r3, [pc, #352]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 80022ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b0:	4a57      	ldr	r2, [pc, #348]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 80022b2:	f023 0301 	bic.w	r3, r3, #1
 80022b6:	6713      	str	r3, [r2, #112]	; 0x70
 80022b8:	4b55      	ldr	r3, [pc, #340]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 80022ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022bc:	4a54      	ldr	r2, [pc, #336]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 80022be:	f023 0304 	bic.w	r3, r3, #4
 80022c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d015      	beq.n	80022f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022cc:	f7fe ffc6 	bl	800125c <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d2:	e00a      	b.n	80022ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d4:	f7fe ffc2 	bl	800125c <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e0cb      	b.n	8002482 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ea:	4b49      	ldr	r3, [pc, #292]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 80022ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0ee      	beq.n	80022d4 <HAL_RCC_OscConfig+0x334>
 80022f6:	e014      	b.n	8002322 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f8:	f7fe ffb0 	bl	800125c <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fe:	e00a      	b.n	8002316 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002300:	f7fe ffac 	bl	800125c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f241 3288 	movw	r2, #5000	; 0x1388
 800230e:	4293      	cmp	r3, r2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e0b5      	b.n	8002482 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002316:	4b3e      	ldr	r3, [pc, #248]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1ee      	bne.n	8002300 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d105      	bne.n	8002334 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002328:	4b39      	ldr	r3, [pc, #228]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	4a38      	ldr	r2, [pc, #224]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 800232e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002332:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80a1 	beq.w	8002480 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800233e:	4b34      	ldr	r3, [pc, #208]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b08      	cmp	r3, #8
 8002348:	d05c      	beq.n	8002404 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d141      	bne.n	80023d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002352:	4b31      	ldr	r3, [pc, #196]	; (8002418 <HAL_RCC_OscConfig+0x478>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7fe ff80 	bl	800125c <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002360:	f7fe ff7c 	bl	800125c <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e087      	b.n	8002482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002372:	4b27      	ldr	r3, [pc, #156]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69da      	ldr	r2, [r3, #28]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	019b      	lsls	r3, r3, #6
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	085b      	lsrs	r3, r3, #1
 8002396:	3b01      	subs	r3, #1
 8002398:	041b      	lsls	r3, r3, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	061b      	lsls	r3, r3, #24
 80023a2:	491b      	ldr	r1, [pc, #108]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a8:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <HAL_RCC_OscConfig+0x478>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7fe ff55 	bl	800125c <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b6:	f7fe ff51 	bl	800125c <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e05c      	b.n	8002482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x416>
 80023d4:	e054      	b.n	8002480 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <HAL_RCC_OscConfig+0x478>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7fe ff3e 	bl	800125c <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e4:	f7fe ff3a 	bl	800125c <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e045      	b.n	8002482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_RCC_OscConfig+0x470>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x444>
 8002402:	e03d      	b.n	8002480 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d107      	bne.n	800241c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e038      	b.n	8002482 <HAL_RCC_OscConfig+0x4e2>
 8002410:	40023800 	.word	0x40023800
 8002414:	40007000 	.word	0x40007000
 8002418:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_RCC_OscConfig+0x4ec>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d028      	beq.n	800247c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002434:	429a      	cmp	r2, r3
 8002436:	d121      	bne.n	800247c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	429a      	cmp	r2, r3
 8002444:	d11a      	bne.n	800247c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800244c:	4013      	ands	r3, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002452:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002454:	4293      	cmp	r3, r2
 8002456:	d111      	bne.n	800247c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	085b      	lsrs	r3, r3, #1
 8002464:	3b01      	subs	r3, #1
 8002466:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002468:	429a      	cmp	r2, r3
 800246a:	d107      	bne.n	800247c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800

08002490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0cc      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a4:	4b68      	ldr	r3, [pc, #416]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d90c      	bls.n	80024cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b65      	ldr	r3, [pc, #404]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b63      	ldr	r3, [pc, #396]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0b8      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d020      	beq.n	800251a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e4:	4b59      	ldr	r3, [pc, #356]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a58      	ldr	r2, [pc, #352]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024fc:	4b53      	ldr	r3, [pc, #332]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	4a52      	ldr	r2, [pc, #328]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002506:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002508:	4b50      	ldr	r3, [pc, #320]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	494d      	ldr	r1, [pc, #308]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d044      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d107      	bne.n	800253e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	4b47      	ldr	r3, [pc, #284]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d119      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e07f      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d003      	beq.n	800254e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800254a:	2b03      	cmp	r3, #3
 800254c:	d107      	bne.n	800255e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254e:	4b3f      	ldr	r3, [pc, #252]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e06f      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255e:	4b3b      	ldr	r3, [pc, #236]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e067      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800256e:	4b37      	ldr	r3, [pc, #220]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f023 0203 	bic.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4934      	ldr	r1, [pc, #208]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	4313      	orrs	r3, r2
 800257e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002580:	f7fe fe6c 	bl	800125c <HAL_GetTick>
 8002584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	e00a      	b.n	800259e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002588:	f7fe fe68 	bl	800125c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	; 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e04f      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	4b2b      	ldr	r3, [pc, #172]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 020c 	and.w	r2, r3, #12
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d1eb      	bne.n	8002588 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025b0:	4b25      	ldr	r3, [pc, #148]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d20c      	bcs.n	80025d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b20      	ldr	r3, [pc, #128]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e032      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4916      	ldr	r1, [pc, #88]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	490e      	ldr	r1, [pc, #56]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002616:	f000 f821 	bl	800265c <HAL_RCC_GetSysClockFreq>
 800261a:	4602      	mov	r2, r0
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	490a      	ldr	r1, [pc, #40]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	5ccb      	ldrb	r3, [r1, r3]
 800262a:	fa22 f303 	lsr.w	r3, r2, r3
 800262e:	4a09      	ldr	r2, [pc, #36]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fdcc 	bl	80011d4 <HAL_InitTick>

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023c00 	.word	0x40023c00
 800264c:	40023800 	.word	0x40023800
 8002650:	08003e44 	.word	0x08003e44
 8002654:	20000004 	.word	0x20000004
 8002658:	20000008 	.word	0x20000008

0800265c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800265c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002660:	b094      	sub	sp, #80	; 0x50
 8002662:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	647b      	str	r3, [r7, #68]	; 0x44
 8002668:	2300      	movs	r3, #0
 800266a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800266c:	2300      	movs	r3, #0
 800266e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002674:	4b79      	ldr	r3, [pc, #484]	; (800285c <HAL_RCC_GetSysClockFreq+0x200>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 030c 	and.w	r3, r3, #12
 800267c:	2b08      	cmp	r3, #8
 800267e:	d00d      	beq.n	800269c <HAL_RCC_GetSysClockFreq+0x40>
 8002680:	2b08      	cmp	r3, #8
 8002682:	f200 80e1 	bhi.w	8002848 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x34>
 800268a:	2b04      	cmp	r3, #4
 800268c:	d003      	beq.n	8002696 <HAL_RCC_GetSysClockFreq+0x3a>
 800268e:	e0db      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002690:	4b73      	ldr	r3, [pc, #460]	; (8002860 <HAL_RCC_GetSysClockFreq+0x204>)
 8002692:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002694:	e0db      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002696:	4b73      	ldr	r3, [pc, #460]	; (8002864 <HAL_RCC_GetSysClockFreq+0x208>)
 8002698:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800269a:	e0d8      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800269c:	4b6f      	ldr	r3, [pc, #444]	; (800285c <HAL_RCC_GetSysClockFreq+0x200>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a6:	4b6d      	ldr	r3, [pc, #436]	; (800285c <HAL_RCC_GetSysClockFreq+0x200>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d063      	beq.n	800277a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b2:	4b6a      	ldr	r3, [pc, #424]	; (800285c <HAL_RCC_GetSysClockFreq+0x200>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	099b      	lsrs	r3, r3, #6
 80026b8:	2200      	movs	r2, #0
 80026ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80026bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c4:	633b      	str	r3, [r7, #48]	; 0x30
 80026c6:	2300      	movs	r3, #0
 80026c8:	637b      	str	r3, [r7, #52]	; 0x34
 80026ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026ce:	4622      	mov	r2, r4
 80026d0:	462b      	mov	r3, r5
 80026d2:	f04f 0000 	mov.w	r0, #0
 80026d6:	f04f 0100 	mov.w	r1, #0
 80026da:	0159      	lsls	r1, r3, #5
 80026dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026e0:	0150      	lsls	r0, r2, #5
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4621      	mov	r1, r4
 80026e8:	1a51      	subs	r1, r2, r1
 80026ea:	6139      	str	r1, [r7, #16]
 80026ec:	4629      	mov	r1, r5
 80026ee:	eb63 0301 	sbc.w	r3, r3, r1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002700:	4659      	mov	r1, fp
 8002702:	018b      	lsls	r3, r1, #6
 8002704:	4651      	mov	r1, sl
 8002706:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800270a:	4651      	mov	r1, sl
 800270c:	018a      	lsls	r2, r1, #6
 800270e:	4651      	mov	r1, sl
 8002710:	ebb2 0801 	subs.w	r8, r2, r1
 8002714:	4659      	mov	r1, fp
 8002716:	eb63 0901 	sbc.w	r9, r3, r1
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002726:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800272a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800272e:	4690      	mov	r8, r2
 8002730:	4699      	mov	r9, r3
 8002732:	4623      	mov	r3, r4
 8002734:	eb18 0303 	adds.w	r3, r8, r3
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	462b      	mov	r3, r5
 800273c:	eb49 0303 	adc.w	r3, r9, r3
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800274e:	4629      	mov	r1, r5
 8002750:	024b      	lsls	r3, r1, #9
 8002752:	4621      	mov	r1, r4
 8002754:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002758:	4621      	mov	r1, r4
 800275a:	024a      	lsls	r2, r1, #9
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002762:	2200      	movs	r2, #0
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
 8002766:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002768:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800276c:	f7fd fd2c 	bl	80001c8 <__aeabi_uldivmod>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4613      	mov	r3, r2
 8002776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002778:	e058      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277a:	4b38      	ldr	r3, [pc, #224]	; (800285c <HAL_RCC_GetSysClockFreq+0x200>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	099b      	lsrs	r3, r3, #6
 8002780:	2200      	movs	r2, #0
 8002782:	4618      	mov	r0, r3
 8002784:	4611      	mov	r1, r2
 8002786:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800278a:	623b      	str	r3, [r7, #32]
 800278c:	2300      	movs	r3, #0
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
 8002790:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002794:	4642      	mov	r2, r8
 8002796:	464b      	mov	r3, r9
 8002798:	f04f 0000 	mov.w	r0, #0
 800279c:	f04f 0100 	mov.w	r1, #0
 80027a0:	0159      	lsls	r1, r3, #5
 80027a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a6:	0150      	lsls	r0, r2, #5
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4641      	mov	r1, r8
 80027ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80027b2:	4649      	mov	r1, r9
 80027b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027cc:	ebb2 040a 	subs.w	r4, r2, sl
 80027d0:	eb63 050b 	sbc.w	r5, r3, fp
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	00eb      	lsls	r3, r5, #3
 80027de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027e2:	00e2      	lsls	r2, r4, #3
 80027e4:	4614      	mov	r4, r2
 80027e6:	461d      	mov	r5, r3
 80027e8:	4643      	mov	r3, r8
 80027ea:	18e3      	adds	r3, r4, r3
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	464b      	mov	r3, r9
 80027f0:	eb45 0303 	adc.w	r3, r5, r3
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002802:	4629      	mov	r1, r5
 8002804:	028b      	lsls	r3, r1, #10
 8002806:	4621      	mov	r1, r4
 8002808:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800280c:	4621      	mov	r1, r4
 800280e:	028a      	lsls	r2, r1, #10
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002816:	2200      	movs	r2, #0
 8002818:	61bb      	str	r3, [r7, #24]
 800281a:	61fa      	str	r2, [r7, #28]
 800281c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002820:	f7fd fcd2 	bl	80001c8 <__aeabi_uldivmod>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4613      	mov	r3, r2
 800282a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_GetSysClockFreq+0x200>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	0c1b      	lsrs	r3, r3, #16
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	3301      	adds	r3, #1
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800283c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800283e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002846:	e002      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_RCC_GetSysClockFreq+0x204>)
 800284a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800284c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800284e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002850:	4618      	mov	r0, r3
 8002852:	3750      	adds	r7, #80	; 0x50
 8002854:	46bd      	mov	sp, r7
 8002856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	00f42400 	.word	0x00f42400
 8002864:	007a1200 	.word	0x007a1200

08002868 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e07b      	b.n	8002972 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	2b00      	cmp	r3, #0
 8002880:	d108      	bne.n	8002894 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800288a:	d009      	beq.n	80028a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	61da      	str	r2, [r3, #28]
 8002892:	e005      	b.n	80028a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe fb08 	bl	8000ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002924:	ea42 0103 	orr.w	r1, r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	f003 0104 	and.w	r1, r3, #4
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	f003 0210 	and.w	r2, r3, #16
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	69da      	ldr	r2, [r3, #28]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002960:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b088      	sub	sp, #32
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	4613      	mov	r3, r2
 8002988:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_SPI_Transmit+0x22>
 8002998:	2302      	movs	r3, #2
 800299a:	e126      	b.n	8002bea <HAL_SPI_Transmit+0x270>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029a4:	f7fe fc5a 	bl	800125c <HAL_GetTick>
 80029a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d002      	beq.n	80029c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
 80029bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029be:	e10b      	b.n	8002bd8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_SPI_Transmit+0x52>
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d102      	bne.n	80029d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029d0:	e102      	b.n	8002bd8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2203      	movs	r2, #3
 80029d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	88fa      	ldrh	r2, [r7, #6]
 80029ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	88fa      	ldrh	r2, [r7, #6]
 80029f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a18:	d10f      	bne.n	8002a3a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a44:	2b40      	cmp	r3, #64	; 0x40
 8002a46:	d007      	beq.n	8002a58 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a60:	d14b      	bne.n	8002afa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_SPI_Transmit+0xf6>
 8002a6a:	8afb      	ldrh	r3, [r7, #22]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d13e      	bne.n	8002aee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	881a      	ldrh	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a80:	1c9a      	adds	r2, r3, #2
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a94:	e02b      	b.n	8002aee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d112      	bne.n	8002aca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	881a      	ldrh	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	1c9a      	adds	r2, r3, #2
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ac8:	e011      	b.n	8002aee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aca:	f7fe fbc7 	bl	800125c <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d803      	bhi.n	8002ae2 <HAL_SPI_Transmit+0x168>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d102      	bne.n	8002ae8 <HAL_SPI_Transmit+0x16e>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002aec:	e074      	b.n	8002bd8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1ce      	bne.n	8002a96 <HAL_SPI_Transmit+0x11c>
 8002af8:	e04c      	b.n	8002b94 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <HAL_SPI_Transmit+0x18e>
 8002b02:	8afb      	ldrh	r3, [r7, #22]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d140      	bne.n	8002b8a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	330c      	adds	r3, #12
 8002b12:	7812      	ldrb	r2, [r2, #0]
 8002b14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b2e:	e02c      	b.n	8002b8a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d113      	bne.n	8002b66 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	330c      	adds	r3, #12
 8002b48:	7812      	ldrb	r2, [r2, #0]
 8002b4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b64:	e011      	b.n	8002b8a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b66:	f7fe fb79 	bl	800125c <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d803      	bhi.n	8002b7e <HAL_SPI_Transmit+0x204>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7c:	d102      	bne.n	8002b84 <HAL_SPI_Transmit+0x20a>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b88:	e026      	b.n	8002bd8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1cd      	bne.n	8002b30 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	6839      	ldr	r1, [r7, #0]
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f001 f8d9 	bl	8003d50 <SPI_EndRxTxTransaction>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10a      	bne.n	8002bc8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	77fb      	strb	r3, [r7, #31]
 8002bd4:	e000      	b.n	8002bd8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002bd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002be8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3720      	adds	r7, #32
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b088      	sub	sp, #32
 8002bf6:	af02      	add	r7, sp, #8
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c0e:	d112      	bne.n	8002c36 <HAL_SPI_Receive+0x44>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10e      	bne.n	8002c36 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c20:	88fa      	ldrh	r2, [r7, #6]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	4613      	mov	r3, r2
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 f8f1 	bl	8002e14 <HAL_SPI_TransmitReceive>
 8002c32:	4603      	mov	r3, r0
 8002c34:	e0ea      	b.n	8002e0c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_SPI_Receive+0x52>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e0e3      	b.n	8002e0c <HAL_SPI_Receive+0x21a>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c4c:	f7fe fb06 	bl	800125c <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d002      	beq.n	8002c64 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c62:	e0ca      	b.n	8002dfa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_SPI_Receive+0x7e>
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c74:	e0c1      	b.n	8002dfa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2204      	movs	r2, #4
 8002c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	88fa      	ldrh	r2, [r7, #6]
 8002c8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	88fa      	ldrh	r2, [r7, #6]
 8002c94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cbc:	d10f      	bne.n	8002cde <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ccc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce8:	2b40      	cmp	r3, #64	; 0x40
 8002cea:	d007      	beq.n	8002cfc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cfa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d162      	bne.n	8002dca <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d04:	e02e      	b.n	8002d64 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d115      	bne.n	8002d40 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f103 020c 	add.w	r2, r3, #12
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	7812      	ldrb	r2, [r2, #0]
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d3e:	e011      	b.n	8002d64 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d40:	f7fe fa8c 	bl	800125c <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d803      	bhi.n	8002d58 <HAL_SPI_Receive+0x166>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d56:	d102      	bne.n	8002d5e <HAL_SPI_Receive+0x16c>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d102      	bne.n	8002d64 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d62:	e04a      	b.n	8002dfa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1cb      	bne.n	8002d06 <HAL_SPI_Receive+0x114>
 8002d6e:	e031      	b.n	8002dd4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d113      	bne.n	8002da6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	b292      	uxth	r2, r2
 8002d8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	1c9a      	adds	r2, r3, #2
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002da4:	e011      	b.n	8002dca <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002da6:	f7fe fa59 	bl	800125c <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d803      	bhi.n	8002dbe <HAL_SPI_Receive+0x1cc>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d102      	bne.n	8002dc4 <HAL_SPI_Receive+0x1d2>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d102      	bne.n	8002dca <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002dc8:	e017      	b.n	8002dfa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1cd      	bne.n	8002d70 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	6839      	ldr	r1, [r7, #0]
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 ff53 	bl	8003c84 <SPI_EndRxTransaction>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	75fb      	strb	r3, [r7, #23]
 8002df6:	e000      	b.n	8002dfa <HAL_SPI_Receive+0x208>
  }

error :
 8002df8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08c      	sub	sp, #48	; 0x30
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e22:	2301      	movs	r3, #1
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_SPI_TransmitReceive+0x26>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e18a      	b.n	8003150 <HAL_SPI_TransmitReceive+0x33c>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e42:	f7fe fa0b 	bl	800125c <HAL_GetTick>
 8002e46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d00f      	beq.n	8002e84 <HAL_SPI_TransmitReceive+0x70>
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e6a:	d107      	bne.n	8002e7c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d103      	bne.n	8002e7c <HAL_SPI_TransmitReceive+0x68>
 8002e74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d003      	beq.n	8002e84 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e82:	e15b      	b.n	800313c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_SPI_TransmitReceive+0x82>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <HAL_SPI_TransmitReceive+0x82>
 8002e90:	887b      	ldrh	r3, [r7, #2]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d103      	bne.n	8002e9e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e9c:	e14e      	b.n	800313c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d003      	beq.n	8002eb2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2205      	movs	r2, #5
 8002eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	887a      	ldrh	r2, [r7, #2]
 8002ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	887a      	ldrh	r2, [r7, #2]
 8002ed4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	887a      	ldrh	r2, [r7, #2]
 8002eda:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef2:	2b40      	cmp	r3, #64	; 0x40
 8002ef4:	d007      	beq.n	8002f06 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f0e:	d178      	bne.n	8003002 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <HAL_SPI_TransmitReceive+0x10a>
 8002f18:	8b7b      	ldrh	r3, [r7, #26]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d166      	bne.n	8002fec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	881a      	ldrh	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	1c9a      	adds	r2, r3, #2
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f42:	e053      	b.n	8002fec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d11b      	bne.n	8002f8a <HAL_SPI_TransmitReceive+0x176>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d016      	beq.n	8002f8a <HAL_SPI_TransmitReceive+0x176>
 8002f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d113      	bne.n	8002f8a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	881a      	ldrh	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	1c9a      	adds	r2, r3, #2
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d119      	bne.n	8002fcc <HAL_SPI_TransmitReceive+0x1b8>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d014      	beq.n	8002fcc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	b292      	uxth	r2, r2
 8002fae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb4:	1c9a      	adds	r2, r3, #2
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fcc:	f7fe f946 	bl	800125c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d807      	bhi.n	8002fec <HAL_SPI_TransmitReceive+0x1d8>
 8002fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe2:	d003      	beq.n	8002fec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fea:	e0a7      	b.n	800313c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1a6      	bne.n	8002f44 <HAL_SPI_TransmitReceive+0x130>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1a1      	bne.n	8002f44 <HAL_SPI_TransmitReceive+0x130>
 8003000:	e07c      	b.n	80030fc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_SPI_TransmitReceive+0x1fc>
 800300a:	8b7b      	ldrh	r3, [r7, #26]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d16b      	bne.n	80030e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	330c      	adds	r3, #12
 800301a:	7812      	ldrb	r2, [r2, #0]
 800301c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003036:	e057      	b.n	80030e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b02      	cmp	r3, #2
 8003044:	d11c      	bne.n	8003080 <HAL_SPI_TransmitReceive+0x26c>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d017      	beq.n	8003080 <HAL_SPI_TransmitReceive+0x26c>
 8003050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003052:	2b01      	cmp	r3, #1
 8003054:	d114      	bne.n	8003080 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	330c      	adds	r3, #12
 8003060:	7812      	ldrb	r2, [r2, #0]
 8003062:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b01      	cmp	r3, #1
 800308c:	d119      	bne.n	80030c2 <HAL_SPI_TransmitReceive+0x2ae>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d014      	beq.n	80030c2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030be:	2301      	movs	r3, #1
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030c2:	f7fe f8cb 	bl	800125c <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d803      	bhi.n	80030da <HAL_SPI_TransmitReceive+0x2c6>
 80030d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d102      	bne.n	80030e0 <HAL_SPI_TransmitReceive+0x2cc>
 80030da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d103      	bne.n	80030e8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030e6:	e029      	b.n	800313c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1a2      	bne.n	8003038 <HAL_SPI_TransmitReceive+0x224>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d19d      	bne.n	8003038 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fe25 	bl	8003d50 <SPI_EndRxTxTransaction>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d006      	beq.n	800311a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2220      	movs	r2, #32
 8003116:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003118:	e010      	b.n	800313c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10b      	bne.n	800313a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	e000      	b.n	800313c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800313a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800314c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003150:	4618      	mov	r0, r3
 8003152:	3730      	adds	r7, #48	; 0x30
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	4613      	mov	r3, r2
 8003164:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_SPI_Transmit_DMA+0x20>
 8003174:	2302      	movs	r3, #2
 8003176:	e09b      	b.n	80032b0 <HAL_SPI_Transmit_DMA+0x158>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d002      	beq.n	8003192 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800318c:	2302      	movs	r3, #2
 800318e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003190:	e089      	b.n	80032a6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <HAL_SPI_Transmit_DMA+0x46>
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d102      	bne.n	80031a4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031a2:	e080      	b.n	80032a6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2203      	movs	r2, #3
 80031a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	88fa      	ldrh	r2, [r7, #6]
 80031c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ea:	d10f      	bne.n	800320c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800320a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003210:	4a29      	ldr	r2, [pc, #164]	; (80032b8 <HAL_SPI_Transmit_DMA+0x160>)
 8003212:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003218:	4a28      	ldr	r2, [pc, #160]	; (80032bc <HAL_SPI_Transmit_DMA+0x164>)
 800321a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003220:	4a27      	ldr	r2, [pc, #156]	; (80032c0 <HAL_SPI_Transmit_DMA+0x168>)
 8003222:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003228:	2200      	movs	r2, #0
 800322a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	4619      	mov	r1, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	330c      	adds	r3, #12
 800323c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003242:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003244:	f7fe f9fa 	bl	800163c <HAL_DMA_Start_IT>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00c      	beq.n	8003268 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	f043 0210 	orr.w	r2, r3, #16
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003266:	e01e      	b.n	80032a6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b40      	cmp	r3, #64	; 0x40
 8003274:	d007      	beq.n	8003286 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003284:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0220 	orr.w	r2, r2, #32
 8003294:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0202 	orr.w	r2, r2, #2
 80032a4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	08003ab9 	.word	0x08003ab9
 80032bc:	080038d9 	.word	0x080038d9
 80032c0:	08003b0d 	.word	0x08003b0d

080032c4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	4613      	mov	r3, r2
 80032d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d110      	bne.n	8003300 <HAL_SPI_Receive_DMA+0x3c>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032e6:	d10b      	bne.n	8003300 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2204      	movs	r2, #4
 80032ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f8ac 	bl	8003454 <HAL_SPI_TransmitReceive_DMA>
 80032fc:	4603      	mov	r3, r0
 80032fe:	e09f      	b.n	8003440 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_SPI_Receive_DMA+0x4a>
 800330a:	2302      	movs	r3, #2
 800330c:	e098      	b.n	8003440 <HAL_SPI_Receive_DMA+0x17c>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b01      	cmp	r3, #1
 8003320:	d002      	beq.n	8003328 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8003322:	2302      	movs	r3, #2
 8003324:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003326:	e086      	b.n	8003436 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_SPI_Receive_DMA+0x70>
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d102      	bne.n	800333a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003338:	e07d      	b.n	8003436 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2204      	movs	r2, #4
 800333e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	88fa      	ldrh	r2, [r7, #6]
 8003352:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	88fa      	ldrh	r2, [r7, #6]
 8003358:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800337a:	d10f      	bne.n	800339c <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800338a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800339a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a0:	4a29      	ldr	r2, [pc, #164]	; (8003448 <HAL_SPI_Receive_DMA+0x184>)
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a8:	4a28      	ldr	r2, [pc, #160]	; (800344c <HAL_SPI_Receive_DMA+0x188>)
 80033aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b0:	4a27      	ldr	r2, [pc, #156]	; (8003450 <HAL_SPI_Receive_DMA+0x18c>)
 80033b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b8:	2200      	movs	r2, #0
 80033ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	330c      	adds	r3, #12
 80033c6:	4619      	mov	r1, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80033d4:	f7fe f932 	bl	800163c <HAL_DMA_Start_IT>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00c      	beq.n	80033f8 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e2:	f043 0210 	orr.w	r2, r3, #16
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80033f6:	e01e      	b.n	8003436 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003402:	2b40      	cmp	r3, #64	; 0x40
 8003404:	d007      	beq.n	8003416 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0220 	orr.w	r2, r2, #32
 8003424:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0201 	orr.w	r2, r2, #1
 8003434:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800343e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	08003ad5 	.word	0x08003ad5
 800344c:	08003981 	.word	0x08003981
 8003450:	08003b0d 	.word	0x08003b0d

08003454 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003470:	2302      	movs	r3, #2
 8003472:	e0e3      	b.n	800363c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003482:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800348a:	7dbb      	ldrb	r3, [r7, #22]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d00d      	beq.n	80034ac <HAL_SPI_TransmitReceive_DMA+0x58>
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003496:	d106      	bne.n	80034a6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80034a0:	7dbb      	ldrb	r3, [r7, #22]
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d002      	beq.n	80034ac <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80034a6:	2302      	movs	r3, #2
 80034a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034aa:	e0c2      	b.n	8003632 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_SPI_TransmitReceive_DMA+0x6a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_SPI_TransmitReceive_DMA+0x6a>
 80034b8:	887b      	ldrh	r3, [r7, #2]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d102      	bne.n	80034c4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034c2:	e0b6      	b.n	8003632 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d003      	beq.n	80034d8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2205      	movs	r2, #5
 80034d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	887a      	ldrh	r2, [r7, #2]
 80034e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	887a      	ldrh	r2, [r7, #2]
 80034ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	887a      	ldrh	r2, [r7, #2]
 80034fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	887a      	ldrh	r2, [r7, #2]
 8003500:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b04      	cmp	r3, #4
 8003518:	d108      	bne.n	800352c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351e:	4a49      	ldr	r2, [pc, #292]	; (8003644 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003520:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003526:	4a48      	ldr	r2, [pc, #288]	; (8003648 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003528:	63da      	str	r2, [r3, #60]	; 0x3c
 800352a:	e007      	b.n	800353c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003530:	4a46      	ldr	r2, [pc, #280]	; (800364c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8003532:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003538:	4a45      	ldr	r2, [pc, #276]	; (8003650 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800353a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003540:	4a44      	ldr	r2, [pc, #272]	; (8003654 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003542:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003548:	2200      	movs	r2, #0
 800354a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	330c      	adds	r3, #12
 8003556:	4619      	mov	r1, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003562:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003564:	f7fe f86a 	bl	800163c <HAL_DMA_Start_IT>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00c      	beq.n	8003588 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003572:	f043 0210 	orr.w	r2, r3, #16
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003586:	e054      	b.n	8003632 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359c:	2200      	movs	r2, #0
 800359e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a4:	2200      	movs	r2, #0
 80035a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ac:	2200      	movs	r2, #0
 80035ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b4:	2200      	movs	r2, #0
 80035b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	4619      	mov	r1, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	330c      	adds	r3, #12
 80035c8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80035d0:	f7fe f834 	bl	800163c <HAL_DMA_Start_IT>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00c      	beq.n	80035f4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035de:	f043 0210 	orr.w	r2, r3, #16
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80035f2:	e01e      	b.n	8003632 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b40      	cmp	r3, #64	; 0x40
 8003600:	d007      	beq.n	8003612 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003610:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0220 	orr.w	r2, r2, #32
 8003620:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0202 	orr.w	r2, r2, #2
 8003630:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800363a:	7dfb      	ldrb	r3, [r7, #23]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	08003ad5 	.word	0x08003ad5
 8003648:	08003981 	.word	0x08003981
 800364c:	08003af1 	.word	0x08003af1
 8003650:	08003a29 	.word	0x08003a29
 8003654:	08003b0d 	.word	0x08003b0d

08003658 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	099b      	lsrs	r3, r3, #6
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10f      	bne.n	800369c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	099b      	lsrs	r3, r3, #6
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d004      	beq.n	800369c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	4798      	blx	r3
    return;
 800369a:	e0d7      	b.n	800384c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	085b      	lsrs	r3, r3, #1
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <HAL_SPI_IRQHandler+0x66>
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	09db      	lsrs	r3, r3, #7
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d004      	beq.n	80036be <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4798      	blx	r3
    return;
 80036bc:	e0c6      	b.n	800384c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10c      	bne.n	80036e4 <HAL_SPI_IRQHandler+0x8c>
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	099b      	lsrs	r3, r3, #6
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80b4 	beq.w	800384c <HAL_SPI_IRQHandler+0x1f4>
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80ad 	beq.w	800384c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	099b      	lsrs	r3, r3, #6
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d023      	beq.n	8003746 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b03      	cmp	r3, #3
 8003708:	d011      	beq.n	800372e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	f043 0204 	orr.w	r2, r3, #4
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	e00b      	b.n	8003746 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	693b      	ldr	r3, [r7, #16]
        return;
 8003744:	e082      	b.n	800384c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	095b      	lsrs	r3, r3, #5
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d014      	beq.n	800377c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003756:	f043 0201 	orr.w	r2, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	0a1b      	lsrs	r3, r3, #8
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00c      	beq.n	80037a2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378c:	f043 0208 	orr.w	r2, r3, #8
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003794:	2300      	movs	r3, #0
 8003796:	60bb      	str	r3, [r7, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d04f      	beq.n	800384a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037b8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d104      	bne.n	80037d6 <HAL_SPI_IRQHandler+0x17e>
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d034      	beq.n	8003840 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0203 	bic.w	r2, r2, #3
 80037e4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d011      	beq.n	8003812 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f2:	4a18      	ldr	r2, [pc, #96]	; (8003854 <HAL_SPI_IRQHandler+0x1fc>)
 80037f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fd ff76 	bl	80016ec <HAL_DMA_Abort_IT>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003816:	2b00      	cmp	r3, #0
 8003818:	d016      	beq.n	8003848 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381e:	4a0d      	ldr	r2, [pc, #52]	; (8003854 <HAL_SPI_IRQHandler+0x1fc>)
 8003820:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd ff60 	bl	80016ec <HAL_DMA_Abort_IT>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003836:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800383e:	e003      	b.n	8003848 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f831 	bl	80038a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003846:	e000      	b.n	800384a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003848:	bf00      	nop
    return;
 800384a:	bf00      	nop
  }
}
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	08003b4d 	.word	0x08003b4d

08003858 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038ca:	b2db      	uxtb	r3, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038e6:	f7fd fcb9 	bl	800125c <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fa:	d03b      	beq.n	8003974 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0220 	bic.w	r2, r2, #32
 800390a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0202 	bic.w	r2, r2, #2
 800391a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	2164      	movs	r1, #100	; 0x64
 8003920:	6978      	ldr	r0, [r7, #20]
 8003922:	f000 fa15 	bl	8003d50 <SPI_EndRxTxTransaction>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003930:	f043 0220 	orr.w	r2, r3, #32
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10a      	bne.n	8003956 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2200      	movs	r2, #0
 800395a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800396c:	6978      	ldr	r0, [r7, #20]
 800396e:	f7ff ff9b 	bl	80038a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003972:	e002      	b.n	800397a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003974:	6978      	ldr	r0, [r7, #20]
 8003976:	f7fd fa3b 	bl	8000df0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800398e:	f7fd fc65 	bl	800125c <HAL_GetTick>
 8003992:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a2:	d03b      	beq.n	8003a1c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0220 	bic.w	r2, r2, #32
 80039b2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10d      	bne.n	80039d8 <SPI_DMAReceiveCplt+0x58>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039c4:	d108      	bne.n	80039d8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0203 	bic.w	r2, r2, #3
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	e007      	b.n	80039e8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	2164      	movs	r1, #100	; 0x64
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f949 	bl	8003c84 <SPI_EndRxTransaction>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7ff ff47 	bl	80038a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003a1a:	e002      	b.n	8003a22 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f7fd fa01 	bl	8000e24 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a36:	f7fd fc11 	bl	800125c <HAL_GetTick>
 8003a3a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a4a:	d02f      	beq.n	8003aac <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0220 	bic.w	r2, r2, #32
 8003a5a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	2164      	movs	r1, #100	; 0x64
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f975 	bl	8003d50 <SPI_EndRxTxTransaction>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a70:	f043 0220 	orr.w	r2, r3, #32
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0203 	bic.w	r2, r2, #3
 8003a86:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f7ff feff 	bl	80038a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003aaa:	e002      	b.n	8003ab2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f7ff fed3 	bl	8003858 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f7ff fed0 	bl	800386c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f7ff fecc 	bl	8003880 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ae8:	bf00      	nop
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f7ff fec8 	bl	8003894 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b04:	bf00      	nop
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0203 	bic.w	r2, r2, #3
 8003b28:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	f043 0210 	orr.w	r2, r3, #16
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f7ff feb2 	bl	80038a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b44:	bf00      	nop
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f7ff fe9e 	bl	80038a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b6c:	bf00      	nop
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b84:	f7fd fb6a 	bl	800125c <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	4413      	add	r3, r2
 8003b92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b94:	f7fd fb62 	bl	800125c <HAL_GetTick>
 8003b98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b9a:	4b39      	ldr	r3, [pc, #228]	; (8003c80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	015b      	lsls	r3, r3, #5
 8003ba0:	0d1b      	lsrs	r3, r3, #20
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	fb02 f303 	mul.w	r3, r2, r3
 8003ba8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003baa:	e054      	b.n	8003c56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb2:	d050      	beq.n	8003c56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bb4:	f7fd fb52 	bl	800125c <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	69fa      	ldr	r2, [r7, #28]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d902      	bls.n	8003bca <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d13d      	bne.n	8003c46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be2:	d111      	bne.n	8003c08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bec:	d004      	beq.n	8003bf8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf6:	d107      	bne.n	8003c08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c10:	d10f      	bne.n	8003c32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e017      	b.n	8003c76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	bf0c      	ite	eq
 8003c66:	2301      	moveq	r3, #1
 8003c68:	2300      	movne	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d19b      	bne.n	8003bac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000004 	.word	0x20000004

08003c84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c98:	d111      	bne.n	8003cbe <SPI_EndRxTransaction+0x3a>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca2:	d004      	beq.n	8003cae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cac:	d107      	bne.n	8003cbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cbc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cc6:	d12a      	bne.n	8003d1e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd0:	d012      	beq.n	8003cf8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2180      	movs	r1, #128	; 0x80
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f7ff ff49 	bl	8003b74 <SPI_WaitFlagStateUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d02d      	beq.n	8003d44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cec:	f043 0220 	orr.w	r2, r3, #32
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e026      	b.n	8003d46 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2101      	movs	r1, #1
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f7ff ff36 	bl	8003b74 <SPI_WaitFlagStateUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01a      	beq.n	8003d44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d12:	f043 0220 	orr.w	r2, r3, #32
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e013      	b.n	8003d46 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2200      	movs	r2, #0
 8003d26:	2101      	movs	r1, #1
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f7ff ff23 	bl	8003b74 <SPI_WaitFlagStateUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d007      	beq.n	8003d44 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e000      	b.n	8003d46 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <SPI_EndRxTxTransaction+0x7c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1b      	ldr	r2, [pc, #108]	; (8003dd0 <SPI_EndRxTxTransaction+0x80>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	0d5b      	lsrs	r3, r3, #21
 8003d68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d6c:	fb02 f303 	mul.w	r3, r2, r3
 8003d70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d7a:	d112      	bne.n	8003da2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2200      	movs	r2, #0
 8003d84:	2180      	movs	r1, #128	; 0x80
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f7ff fef4 	bl	8003b74 <SPI_WaitFlagStateUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d016      	beq.n	8003dc0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d96:	f043 0220 	orr.w	r2, r3, #32
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e00f      	b.n	8003dc2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db8:	2b80      	cmp	r3, #128	; 0x80
 8003dba:	d0f2      	beq.n	8003da2 <SPI_EndRxTxTransaction+0x52>
 8003dbc:	e000      	b.n	8003dc0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003dbe:	bf00      	nop
  }

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000004 	.word	0x20000004
 8003dd0:	165e9f81 	.word	0x165e9f81

08003dd4 <__libc_init_array>:
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	4d0d      	ldr	r5, [pc, #52]	; (8003e0c <__libc_init_array+0x38>)
 8003dd8:	4c0d      	ldr	r4, [pc, #52]	; (8003e10 <__libc_init_array+0x3c>)
 8003dda:	1b64      	subs	r4, r4, r5
 8003ddc:	10a4      	asrs	r4, r4, #2
 8003dde:	2600      	movs	r6, #0
 8003de0:	42a6      	cmp	r6, r4
 8003de2:	d109      	bne.n	8003df8 <__libc_init_array+0x24>
 8003de4:	4d0b      	ldr	r5, [pc, #44]	; (8003e14 <__libc_init_array+0x40>)
 8003de6:	4c0c      	ldr	r4, [pc, #48]	; (8003e18 <__libc_init_array+0x44>)
 8003de8:	f000 f820 	bl	8003e2c <_init>
 8003dec:	1b64      	subs	r4, r4, r5
 8003dee:	10a4      	asrs	r4, r4, #2
 8003df0:	2600      	movs	r6, #0
 8003df2:	42a6      	cmp	r6, r4
 8003df4:	d105      	bne.n	8003e02 <__libc_init_array+0x2e>
 8003df6:	bd70      	pop	{r4, r5, r6, pc}
 8003df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dfc:	4798      	blx	r3
 8003dfe:	3601      	adds	r6, #1
 8003e00:	e7ee      	b.n	8003de0 <__libc_init_array+0xc>
 8003e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e06:	4798      	blx	r3
 8003e08:	3601      	adds	r6, #1
 8003e0a:	e7f2      	b.n	8003df2 <__libc_init_array+0x1e>
 8003e0c:	08003e64 	.word	0x08003e64
 8003e10:	08003e64 	.word	0x08003e64
 8003e14:	08003e64 	.word	0x08003e64
 8003e18:	08003e68 	.word	0x08003e68

08003e1c <memset>:
 8003e1c:	4402      	add	r2, r0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d100      	bne.n	8003e26 <memset+0xa>
 8003e24:	4770      	bx	lr
 8003e26:	f803 1b01 	strb.w	r1, [r3], #1
 8003e2a:	e7f9      	b.n	8003e20 <memset+0x4>

08003e2c <_init>:
 8003e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2e:	bf00      	nop
 8003e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e32:	bc08      	pop	{r3}
 8003e34:	469e      	mov	lr, r3
 8003e36:	4770      	bx	lr

08003e38 <_fini>:
 8003e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3a:	bf00      	nop
 8003e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3e:	bc08      	pop	{r3}
 8003e40:	469e      	mov	lr, r3
 8003e42:	4770      	bx	lr
