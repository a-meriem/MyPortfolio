
Euro_Navigation_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a94  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b10  08007d30  08007d30  00017d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009840  08009840  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08009840  08009840  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009840  08009840  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009840  08009840  00019840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009844  08009844  00019844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  24000000  08009848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  24000080  080098c8  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000468  080098c8  00020468  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ecb  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f6  00000000  00000000  00031f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00034370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  000352c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000399c5  00000000  00000000  000360f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132a3  00000000  00000000  0006fabd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017dce8  00000000  00000000  00082d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00200a48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004414  00000000  00000000  00200a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000080 	.word	0x24000080
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007d14 	.word	0x08007d14

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000084 	.word	0x24000084
 80002d4:	08007d14 	.word	0x08007d14

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <Nav_vNavigationRoutine>:
extern double Nav_KpAngle_d       ;
extern double Nav_KiAngle_d       ;
extern double Nav_KdAngle_d       ;

void Nav_vNavigationRoutine()
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	Nav_vFeedbackRoutine();
 8000408:	f000 f80a 	bl	8000420 <Nav_vFeedbackRoutine>
	Nav_vPidDistance();
 800040c:	f000 f96c 	bl	80006e8 <Nav_vPidDistance>
	Nav_vPidAngle();
 8000410:	f000 f9b8 	bl	8000784 <Nav_vPidAngle>
	Nav_vCalculateMotorsCommand();
 8000414:	f000 fa04 	bl	8000820 <Nav_vCalculateMotorsCommand>
	Nav_vMotorsRoutine();
 8000418:	f000 fb00 	bl	8000a1c <Nav_vMotorsRoutine>
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}

08000420 <Nav_vFeedbackRoutine>:


void Nav_vFeedbackRoutine()
{
 8000420:	b580      	push	{r7, lr}
 8000422:	ed2d 8b02 	vpush	{d8}
 8000426:	af00      	add	r7, sp, #0
	//Read ticks from encoder mode timers
	if  ( ENCODER_RIGHT->CNT > 0 )
 8000428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800042c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800042e:	2b00      	cmp	r3, #0
 8000430:	d00a      	beq.n	8000448 <Nav_vFeedbackRoutine+0x28>
	{
		Nav_RightTicks_i32 = ( (int32_t) ( ENCODER_RIGHT->CNT - ( ENCODER_RIGHT->ARR / 2 ) ) )   ;
 8000432:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000436:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800043c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800043e:	085b      	lsrs	r3, r3, #1
 8000440:	1ad3      	subs	r3, r2, r3
 8000442:	461a      	mov	r2, r3
 8000444:	4b90      	ldr	r3, [pc, #576]	; (8000688 <Nav_vFeedbackRoutine+0x268>)
 8000446:	601a      	str	r2, [r3, #0]
	}

	if( ENCODER_LEFT->CNT > 0 )
 8000448:	4b90      	ldr	r3, [pc, #576]	; (800068c <Nav_vFeedbackRoutine+0x26c>)
 800044a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044c:	2b00      	cmp	r3, #0
 800044e:	d008      	beq.n	8000462 <Nav_vFeedbackRoutine+0x42>
	{

		Nav_LeftTicks_i32 =( (int32_t) ( ENCODER_LEFT->CNT - ( ENCODER_LEFT->ARR / 2 ) ) )   ;
 8000450:	4b8e      	ldr	r3, [pc, #568]	; (800068c <Nav_vFeedbackRoutine+0x26c>)
 8000452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000454:	4b8d      	ldr	r3, [pc, #564]	; (800068c <Nav_vFeedbackRoutine+0x26c>)
 8000456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000458:	085b      	lsrs	r3, r3, #1
 800045a:	1ad3      	subs	r3, r2, r3
 800045c:	461a      	mov	r2, r3
 800045e:	4b8c      	ldr	r3, [pc, #560]	; (8000690 <Nav_vFeedbackRoutine+0x270>)
 8000460:	601a      	str	r2, [r3, #0]
	}

	//convert measured distance from ticks to mm for every encoder
	Nav_MeasuredDistanceRight_mm_d = (double) ( Nav_RightTicks_i32 * Nav_ConvertRight_Ticks2mm_d ) ;
 8000462:	4b89      	ldr	r3, [pc, #548]	; (8000688 <Nav_vFeedbackRoutine+0x268>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	ee07 3a90 	vmov	s15, r3
 800046a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800046e:	4b89      	ldr	r3, [pc, #548]	; (8000694 <Nav_vFeedbackRoutine+0x274>)
 8000470:	ed93 7b00 	vldr	d7, [r3]
 8000474:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000478:	4b87      	ldr	r3, [pc, #540]	; (8000698 <Nav_vFeedbackRoutine+0x278>)
 800047a:	ed83 7b00 	vstr	d7, [r3]
	Nav_MeasuredDistanceLeft_mm_d  = (double) ( Nav_LeftTicks_i32  * Nav_ConvertLeft_Ticks2mm_d  ) ;
 800047e:	4b84      	ldr	r3, [pc, #528]	; (8000690 <Nav_vFeedbackRoutine+0x270>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	ee07 3a90 	vmov	s15, r3
 8000486:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800048a:	4b84      	ldr	r3, [pc, #528]	; (800069c <Nav_vFeedbackRoutine+0x27c>)
 800048c:	ed93 7b00 	vldr	d7, [r3]
 8000490:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000494:	4b82      	ldr	r3, [pc, #520]	; (80006a0 <Nav_vFeedbackRoutine+0x280>)
 8000496:	ed83 7b00 	vstr	d7, [r3]

	//Measure distance of robot center ( (right + left)/2 )
	Nav_MeasuredDistance_mm_d = (double) ( ( Nav_MeasuredDistanceRight_mm_d   +  Nav_MeasuredDistanceLeft_mm_d ) / 2.0  ) ;
 800049a:	4b7f      	ldr	r3, [pc, #508]	; (8000698 <Nav_vFeedbackRoutine+0x278>)
 800049c:	ed93 6b00 	vldr	d6, [r3]
 80004a0:	4b7f      	ldr	r3, [pc, #508]	; (80006a0 <Nav_vFeedbackRoutine+0x280>)
 80004a2:	ed93 7b00 	vldr	d7, [r3]
 80004a6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80004aa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80004ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80004b2:	4b7c      	ldr	r3, [pc, #496]	; (80006a4 <Nav_vFeedbackRoutine+0x284>)
 80004b4:	ed83 7b00 	vstr	d7, [r3]

	//Measure linear velocity
	Nav_MeasuredVelocity_mm_d = Nav_MeasuredDistance_mm_d - Nav_PrevMeasuredDistance_mm_d ;
 80004b8:	4b7a      	ldr	r3, [pc, #488]	; (80006a4 <Nav_vFeedbackRoutine+0x284>)
 80004ba:	ed93 6b00 	vldr	d6, [r3]
 80004be:	4b7a      	ldr	r3, [pc, #488]	; (80006a8 <Nav_vFeedbackRoutine+0x288>)
 80004c0:	ed93 7b00 	vldr	d7, [r3]
 80004c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80004c8:	4b78      	ldr	r3, [pc, #480]	; (80006ac <Nav_vFeedbackRoutine+0x28c>)
 80004ca:	ed83 7b00 	vstr	d7, [r3]
	Nav_PrevMeasuredDistance_mm_d = Nav_MeasuredDistance_mm_d;
 80004ce:	4b75      	ldr	r3, [pc, #468]	; (80006a4 <Nav_vFeedbackRoutine+0x284>)
 80004d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004d4:	4974      	ldr	r1, [pc, #464]	; (80006a8 <Nav_vFeedbackRoutine+0x288>)
 80004d6:	e9c1 2300 	strd	r2, r3, [r1]

	//Measure local angle of robot center
	Nav_MeasuredAngle_rad_d =  ( double ) ( ( Nav_MeasuredDistanceRight_mm_d   -  Nav_MeasuredDistanceLeft_mm_d ) / TRACK_MM )   ;
 80004da:	4b6f      	ldr	r3, [pc, #444]	; (8000698 <Nav_vFeedbackRoutine+0x278>)
 80004dc:	ed93 6b00 	vldr	d6, [r3]
 80004e0:	4b6f      	ldr	r3, [pc, #444]	; (80006a0 <Nav_vFeedbackRoutine+0x280>)
 80004e2:	ed93 7b00 	vldr	d7, [r3]
 80004e6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80004ea:	ed9f 5b61 	vldr	d5, [pc, #388]	; 8000670 <Nav_vFeedbackRoutine+0x250>
 80004ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80004f2:	4b6f      	ldr	r3, [pc, #444]	; (80006b0 <Nav_vFeedbackRoutine+0x290>)
 80004f4:	ed83 7b00 	vstr	d7, [r3]

	//Measure angular velocity
	Nav_MeasuredAngularVelocity_rad_d = Nav_MeasuredAngle_rad_d - Nav_PrevMeasuredAngle_rad_d ;
 80004f8:	4b6d      	ldr	r3, [pc, #436]	; (80006b0 <Nav_vFeedbackRoutine+0x290>)
 80004fa:	ed93 6b00 	vldr	d6, [r3]
 80004fe:	4b6d      	ldr	r3, [pc, #436]	; (80006b4 <Nav_vFeedbackRoutine+0x294>)
 8000500:	ed93 7b00 	vldr	d7, [r3]
 8000504:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000508:	4b6b      	ldr	r3, [pc, #428]	; (80006b8 <Nav_vFeedbackRoutine+0x298>)
 800050a:	ed83 7b00 	vstr	d7, [r3]
	Nav_PrevMeasuredAngle_rad_d = Nav_MeasuredAngle_rad_d ;
 800050e:	4b68      	ldr	r3, [pc, #416]	; (80006b0 <Nav_vFeedbackRoutine+0x290>)
 8000510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000514:	4967      	ldr	r1, [pc, #412]	; (80006b4 <Nav_vFeedbackRoutine+0x294>)
 8000516:	e9c1 2300 	strd	r2, r3, [r1]

	Nav_MeasuredAngularVelocity_deg_d = (double) ( ( Nav_MeasuredAngularVelocity_rad_d / M_PI ) * 180.0 ) ;
 800051a:	4b67      	ldr	r3, [pc, #412]	; (80006b8 <Nav_vFeedbackRoutine+0x298>)
 800051c:	ed93 6b00 	vldr	d6, [r3]
 8000520:	ed9f 5b55 	vldr	d5, [pc, #340]	; 8000678 <Nav_vFeedbackRoutine+0x258>
 8000524:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000528:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8000680 <Nav_vFeedbackRoutine+0x260>
 800052c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000530:	4b62      	ldr	r3, [pc, #392]	; (80006bc <Nav_vFeedbackRoutine+0x29c>)
 8000532:	ed83 7b00 	vstr	d7, [r3]

	//Measure global angle of robot center
	Nav_CurrentAngle_rad_d += Nav_MeasuredAngularVelocity_rad_d ;
 8000536:	4b62      	ldr	r3, [pc, #392]	; (80006c0 <Nav_vFeedbackRoutine+0x2a0>)
 8000538:	ed93 6b00 	vldr	d6, [r3]
 800053c:	4b5e      	ldr	r3, [pc, #376]	; (80006b8 <Nav_vFeedbackRoutine+0x298>)
 800053e:	ed93 7b00 	vldr	d7, [r3]
 8000542:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000546:	4b5e      	ldr	r3, [pc, #376]	; (80006c0 <Nav_vFeedbackRoutine+0x2a0>)
 8000548:	ed83 7b00 	vstr	d7, [r3]
	Nav_CurrentAngle_deg_d =  (double) ( ( Nav_CurrentAngle_rad_d / M_PI ) * 180.0 ) ;
 800054c:	4b5c      	ldr	r3, [pc, #368]	; (80006c0 <Nav_vFeedbackRoutine+0x2a0>)
 800054e:	ed93 6b00 	vldr	d6, [r3]
 8000552:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8000678 <Nav_vFeedbackRoutine+0x258>
 8000556:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800055a:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8000680 <Nav_vFeedbackRoutine+0x260>
 800055e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000562:	4b58      	ldr	r3, [pc, #352]	; (80006c4 <Nav_vFeedbackRoutine+0x2a4>)
 8000564:	ed83 7b00 	vstr	d7, [r3]

	Nav_AverageAngle_rad_d = ( ( Nav_CurrentAngle_rad_d + Nav_PrevAngle_rad_d ) / 2 ) ;
 8000568:	4b55      	ldr	r3, [pc, #340]	; (80006c0 <Nav_vFeedbackRoutine+0x2a0>)
 800056a:	ed93 6b00 	vldr	d6, [r3]
 800056e:	4b56      	ldr	r3, [pc, #344]	; (80006c8 <Nav_vFeedbackRoutine+0x2a8>)
 8000570:	ed93 7b00 	vldr	d7, [r3]
 8000574:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000578:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800057c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000580:	4b52      	ldr	r3, [pc, #328]	; (80006cc <Nav_vFeedbackRoutine+0x2ac>)
 8000582:	ed83 7b00 	vstr	d7, [r3]
	Nav_PrevAngle_rad_d = Nav_CurrentAngle_rad_d;
 8000586:	4b4e      	ldr	r3, [pc, #312]	; (80006c0 <Nav_vFeedbackRoutine+0x2a0>)
 8000588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800058c:	494e      	ldr	r1, [pc, #312]	; (80006c8 <Nav_vFeedbackRoutine+0x2a8>)
 800058e:	e9c1 2300 	strd	r2, r3, [r1]

	if ( Nav_MeasuredAngularVelocity_rad_d ==0 )
 8000592:	4b49      	ldr	r3, [pc, #292]	; (80006b8 <Nav_vFeedbackRoutine+0x298>)
 8000594:	ed93 7b00 	vldr	d7, [r3]
 8000598:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800059c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005a0:	d106      	bne.n	80005b0 <Nav_vFeedbackRoutine+0x190>
	{
		Nav_CurveCoefficient_d = 1;
 80005a2:	494b      	ldr	r1, [pc, #300]	; (80006d0 <Nav_vFeedbackRoutine+0x2b0>)
 80005a4:	f04f 0200 	mov.w	r2, #0
 80005a8:	4b4a      	ldr	r3, [pc, #296]	; (80006d4 <Nav_vFeedbackRoutine+0x2b4>)
 80005aa:	e9c1 2300 	strd	r2, r3, [r1]
 80005ae:	e018      	b.n	80005e2 <Nav_vFeedbackRoutine+0x1c2>
	}
	else
	{
		Nav_CurveCoefficient_d = ( sin( Nav_MeasuredAngularVelocity_rad_d / 2 ) ) / (Nav_MeasuredAngularVelocity_rad_d / 2 ) ;
 80005b0:	4b41      	ldr	r3, [pc, #260]	; (80006b8 <Nav_vFeedbackRoutine+0x298>)
 80005b2:	ed93 7b00 	vldr	d7, [r3]
 80005b6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80005ba:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80005be:	eeb0 0b46 	vmov.f64	d0, d6
 80005c2:	f006 fb5d 	bl	8006c80 <sin>
 80005c6:	eeb0 5b40 	vmov.f64	d5, d0
 80005ca:	4b3b      	ldr	r3, [pc, #236]	; (80006b8 <Nav_vFeedbackRoutine+0x298>)
 80005cc:	ed93 7b00 	vldr	d7, [r3]
 80005d0:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80005d4:	ee87 6b04 	vdiv.f64	d6, d7, d4
 80005d8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80005dc:	4b3c      	ldr	r3, [pc, #240]	; (80006d0 <Nav_vFeedbackRoutine+0x2b0>)
 80005de:	ed83 7b00 	vstr	d7, [r3]
	}

	//Measure X and Y of robot center
	Nav_DeltaX_mm_d = ( Nav_CurveCoefficient_d * Nav_MeasuredVelocity_mm_d )*cos( Nav_AverageAngle_rad_d ) ;
 80005e2:	4b3b      	ldr	r3, [pc, #236]	; (80006d0 <Nav_vFeedbackRoutine+0x2b0>)
 80005e4:	ed93 6b00 	vldr	d6, [r3]
 80005e8:	4b30      	ldr	r3, [pc, #192]	; (80006ac <Nav_vFeedbackRoutine+0x28c>)
 80005ea:	ed93 7b00 	vldr	d7, [r3]
 80005ee:	ee26 8b07 	vmul.f64	d8, d6, d7
 80005f2:	4b36      	ldr	r3, [pc, #216]	; (80006cc <Nav_vFeedbackRoutine+0x2ac>)
 80005f4:	ed93 7b00 	vldr	d7, [r3]
 80005f8:	eeb0 0b47 	vmov.f64	d0, d7
 80005fc:	f006 faf4 	bl	8006be8 <cos>
 8000600:	eeb0 7b40 	vmov.f64	d7, d0
 8000604:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000608:	4b33      	ldr	r3, [pc, #204]	; (80006d8 <Nav_vFeedbackRoutine+0x2b8>)
 800060a:	ed83 7b00 	vstr	d7, [r3]
	Nav_DeltaY_mm_d = ( Nav_CurveCoefficient_d * Nav_MeasuredVelocity_mm_d )*sin( Nav_AverageAngle_rad_d ) ;
 800060e:	4b30      	ldr	r3, [pc, #192]	; (80006d0 <Nav_vFeedbackRoutine+0x2b0>)
 8000610:	ed93 6b00 	vldr	d6, [r3]
 8000614:	4b25      	ldr	r3, [pc, #148]	; (80006ac <Nav_vFeedbackRoutine+0x28c>)
 8000616:	ed93 7b00 	vldr	d7, [r3]
 800061a:	ee26 8b07 	vmul.f64	d8, d6, d7
 800061e:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <Nav_vFeedbackRoutine+0x2ac>)
 8000620:	ed93 7b00 	vldr	d7, [r3]
 8000624:	eeb0 0b47 	vmov.f64	d0, d7
 8000628:	f006 fb2a 	bl	8006c80 <sin>
 800062c:	eeb0 7b40 	vmov.f64	d7, d0
 8000630:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <Nav_vFeedbackRoutine+0x2bc>)
 8000636:	ed83 7b00 	vstr	d7, [r3]

	Nav_CurrentX_mm_d +=  Nav_DeltaX_mm_d  ;
 800063a:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <Nav_vFeedbackRoutine+0x2c0>)
 800063c:	ed93 6b00 	vldr	d6, [r3]
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <Nav_vFeedbackRoutine+0x2b8>)
 8000642:	ed93 7b00 	vldr	d7, [r3]
 8000646:	ee36 7b07 	vadd.f64	d7, d6, d7
 800064a:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <Nav_vFeedbackRoutine+0x2c0>)
 800064c:	ed83 7b00 	vstr	d7, [r3]
	Nav_CurrentY_mm_d +=  Nav_DeltaY_mm_d  ;
 8000650:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <Nav_vFeedbackRoutine+0x2c4>)
 8000652:	ed93 6b00 	vldr	d6, [r3]
 8000656:	4b21      	ldr	r3, [pc, #132]	; (80006dc <Nav_vFeedbackRoutine+0x2bc>)
 8000658:	ed93 7b00 	vldr	d7, [r3]
 800065c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <Nav_vFeedbackRoutine+0x2c4>)
 8000662:	ed83 7b00 	vstr	d7, [r3]
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	ecbd 8b02 	vpop	{d8}
 800066e:	bd80      	pop	{r7, pc}
 8000670:	00000000 	.word	0x00000000
 8000674:	40718400 	.word	0x40718400
 8000678:	54442d18 	.word	0x54442d18
 800067c:	400921fb 	.word	0x400921fb
 8000680:	00000000 	.word	0x00000000
 8000684:	40668000 	.word	0x40668000
 8000688:	24000178 	.word	0x24000178
 800068c:	40000c00 	.word	0x40000c00
 8000690:	2400017c 	.word	0x2400017c
 8000694:	24000188 	.word	0x24000188
 8000698:	24000198 	.word	0x24000198
 800069c:	24000180 	.word	0x24000180
 80006a0:	24000190 	.word	0x24000190
 80006a4:	240001a0 	.word	0x240001a0
 80006a8:	240001a8 	.word	0x240001a8
 80006ac:	240002a8 	.word	0x240002a8
 80006b0:	240001c8 	.word	0x240001c8
 80006b4:	240001d0 	.word	0x240001d0
 80006b8:	240002b0 	.word	0x240002b0
 80006bc:	240002b8 	.word	0x240002b8
 80006c0:	240001e8 	.word	0x240001e8
 80006c4:	24000200 	.word	0x24000200
 80006c8:	240001f0 	.word	0x240001f0
 80006cc:	240001f8 	.word	0x240001f8
 80006d0:	240001e0 	.word	0x240001e0
 80006d4:	3ff00000 	.word	0x3ff00000
 80006d8:	24000208 	.word	0x24000208
 80006dc:	24000210 	.word	0x24000210
 80006e0:	24000218 	.word	0x24000218
 80006e4:	24000220 	.word	0x24000220

080006e8 <Nav_vPidDistance>:



void Nav_vPidDistance()
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
	//Calculate Distance Error
	Nav_DistanceError_d = Nav_CurrentTargetDistance_mm_d -  Nav_MeasuredDistance_mm_d ;
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <Nav_vPidDistance+0x78>)
 80006ee:	ed93 6b00 	vldr	d6, [r3]
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <Nav_vPidDistance+0x7c>)
 80006f4:	ed93 7b00 	vldr	d7, [r3]
 80006f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <Nav_vPidDistance+0x80>)
 80006fe:	ed83 7b00 	vstr	d7, [r3]

	//Calculate the sum of distance Error using the Integral Term of the PID
	Nav_SumDistanceError_d = Nav_KiDistance_d * Nav_DistanceError_d + Nav_SumDistanceError_d ;
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <Nav_vPidDistance+0x84>)
 8000704:	ed93 6b00 	vldr	d6, [r3]
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <Nav_vPidDistance+0x80>)
 800070a:	ed93 7b00 	vldr	d7, [r3]
 800070e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <Nav_vPidDistance+0x88>)
 8000714:	ed93 7b00 	vldr	d7, [r3]
 8000718:	ee36 7b07 	vadd.f64	d7, d6, d7
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <Nav_vPidDistance+0x88>)
 800071e:	ed83 7b00 	vstr	d7, [r3]

	//Calculate the Output of the distance PID block
	Nav_PID_DistanceOutput_d = ( double ) ( ( Nav_KpDistance_d *  Nav_DistanceError_d ) - ( Nav_KdDistance_d * Nav_MeasuredVelocity_mm_d ) + Nav_SumDistanceError_d  );
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <Nav_vPidDistance+0x8c>)
 8000724:	ed93 6b00 	vldr	d6, [r3]
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <Nav_vPidDistance+0x80>)
 800072a:	ed93 7b00 	vldr	d7, [r3]
 800072e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <Nav_vPidDistance+0x90>)
 8000734:	ed93 5b00 	vldr	d5, [r3]
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <Nav_vPidDistance+0x94>)
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000742:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <Nav_vPidDistance+0x88>)
 8000748:	ed93 7b00 	vldr	d7, [r3]
 800074c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000750:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <Nav_vPidDistance+0x98>)
 8000752:	ed83 7b00 	vstr	d7, [r3]
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	24000268 	.word	0x24000268
 8000764:	240001a0 	.word	0x240001a0
 8000768:	240002c8 	.word	0x240002c8
 800076c:	24000150 	.word	0x24000150
 8000770:	240002d0 	.word	0x240002d0
 8000774:	24000148 	.word	0x24000148
 8000778:	24000158 	.word	0x24000158
 800077c:	240002a8 	.word	0x240002a8
 8000780:	240002d8 	.word	0x240002d8

08000784 <Nav_vPidAngle>:

void Nav_vPidAngle()
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
	//Calculate Angle Error
	Nav_AngleError_d =  Nav_CurrentTargetAngle_deg_d - Nav_CurrentAngle_deg_d ;
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <Nav_vPidAngle+0x78>)
 800078a:	ed93 6b00 	vldr	d6, [r3]
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <Nav_vPidAngle+0x7c>)
 8000790:	ed93 7b00 	vldr	d7, [r3]
 8000794:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <Nav_vPidAngle+0x80>)
 800079a:	ed83 7b00 	vstr	d7, [r3]

	//Calculate the sum of Angle Error using the Integral Term of the PID
	Nav_SumAngleError_d = Nav_KiAngle_d * Nav_AngleError_d + Nav_SumAngleError_d ;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <Nav_vPidAngle+0x84>)
 80007a0:	ed93 6b00 	vldr	d6, [r3]
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <Nav_vPidAngle+0x80>)
 80007a6:	ed93 7b00 	vldr	d7, [r3]
 80007aa:	ee26 6b07 	vmul.f64	d6, d6, d7
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <Nav_vPidAngle+0x88>)
 80007b0:	ed93 7b00 	vldr	d7, [r3]
 80007b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <Nav_vPidAngle+0x88>)
 80007ba:	ed83 7b00 	vstr	d7, [r3]

	//Calculate the Output of the Angle PID block
	Nav_PID_AngleOutput_d = ( double ) ( ( Nav_KpAngle_d *  Nav_AngleError_d ) - ( Nav_KdAngle_d * Nav_MeasuredAngularVelocity_deg_d ) + Nav_SumAngleError_d  ) ;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <Nav_vPidAngle+0x8c>)
 80007c0:	ed93 6b00 	vldr	d6, [r3]
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <Nav_vPidAngle+0x80>)
 80007c6:	ed93 7b00 	vldr	d7, [r3]
 80007ca:	ee26 6b07 	vmul.f64	d6, d6, d7
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <Nav_vPidAngle+0x90>)
 80007d0:	ed93 5b00 	vldr	d5, [r3]
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <Nav_vPidAngle+0x94>)
 80007d6:	ed93 7b00 	vldr	d7, [r3]
 80007da:	ee25 7b07 	vmul.f64	d7, d5, d7
 80007de:	ee36 6b47 	vsub.f64	d6, d6, d7
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <Nav_vPidAngle+0x88>)
 80007e4:	ed93 7b00 	vldr	d7, [r3]
 80007e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007ec:	4b0b      	ldr	r3, [pc, #44]	; (800081c <Nav_vPidAngle+0x98>)
 80007ee:	ed83 7b00 	vstr	d7, [r3]
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	24000280 	.word	0x24000280
 8000800:	24000200 	.word	0x24000200
 8000804:	240002e0 	.word	0x240002e0
 8000808:	24000168 	.word	0x24000168
 800080c:	240002e8 	.word	0x240002e8
 8000810:	24000160 	.word	0x24000160
 8000814:	24000170 	.word	0x24000170
 8000818:	240002b8 	.word	0x240002b8
 800081c:	240002f0 	.word	0x240002f0

08000820 <Nav_vCalculateMotorsCommand>:


void Nav_vCalculateMotorsCommand()
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
	//Calculate each motor command using the output of the distance PID and Angle PID blocks
	Nav_RightMotorCommand_i32 = ( int32_t ) ( Nav_PID_DistanceOutput_d + Nav_PID_AngleOutput_d )   ;
 8000824:	4b74      	ldr	r3, [pc, #464]	; (80009f8 <Nav_vCalculateMotorsCommand+0x1d8>)
 8000826:	ed93 6b00 	vldr	d6, [r3]
 800082a:	4b74      	ldr	r3, [pc, #464]	; (80009fc <Nav_vCalculateMotorsCommand+0x1dc>)
 800082c:	ed93 7b00 	vldr	d7, [r3]
 8000830:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000834:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000838:	ee17 2a90 	vmov	r2, s15
 800083c:	4b70      	ldr	r3, [pc, #448]	; (8000a00 <Nav_vCalculateMotorsCommand+0x1e0>)
 800083e:	601a      	str	r2, [r3, #0]
	Nav_LeftMotorCommand_i32  = ( int32_t ) ( Nav_PID_DistanceOutput_d - Nav_PID_AngleOutput_d )   ;
 8000840:	4b6d      	ldr	r3, [pc, #436]	; (80009f8 <Nav_vCalculateMotorsCommand+0x1d8>)
 8000842:	ed93 6b00 	vldr	d6, [r3]
 8000846:	4b6d      	ldr	r3, [pc, #436]	; (80009fc <Nav_vCalculateMotorsCommand+0x1dc>)
 8000848:	ed93 7b00 	vldr	d7, [r3]
 800084c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000850:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000854:	ee17 2a90 	vmov	r2, s15
 8000858:	4b6a      	ldr	r3, [pc, #424]	; (8000a04 <Nav_vCalculateMotorsCommand+0x1e4>)
 800085a:	601a      	str	r2, [r3, #0]

	// Right Motor Direction Settings
	if( Nav_RightMotorCommand_i32 >= 0.0 )
 800085c:	4b68      	ldr	r3, [pc, #416]	; (8000a00 <Nav_vCalculateMotorsCommand+0x1e0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	db03      	blt.n	800086c <Nav_vCalculateMotorsCommand+0x4c>
	{
		Nav_RightMotorDirection_i8 = MOTOR_DIRECTION_FORWARD ;
 8000864:	4b68      	ldr	r3, [pc, #416]	; (8000a08 <Nav_vCalculateMotorsCommand+0x1e8>)
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
 800086a:	e010      	b.n	800088e <Nav_vCalculateMotorsCommand+0x6e>
	}
	else
	{
		Nav_RightMotorDirection_i8 = MOTOR_DIRECTION_REVERSE ;
 800086c:	4b66      	ldr	r3, [pc, #408]	; (8000a08 <Nav_vCalculateMotorsCommand+0x1e8>)
 800086e:	22ff      	movs	r2, #255	; 0xff
 8000870:	701a      	strb	r2, [r3, #0]
		Nav_RightMotorCommand_i32 = fabs( Nav_RightMotorCommand_i32 );
 8000872:	4b63      	ldr	r3, [pc, #396]	; (8000a00 <Nav_vCalculateMotorsCommand+0x1e0>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	ee07 3a90 	vmov	s15, r3
 800087a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800087e:	eeb0 7bc7 	vabs.f64	d7, d7
 8000882:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000886:	ee17 2a90 	vmov	r2, s15
 800088a:	4b5d      	ldr	r3, [pc, #372]	; (8000a00 <Nav_vCalculateMotorsCommand+0x1e0>)
 800088c:	601a      	str	r2, [r3, #0]
	}
	//Left Motor Direction Settings
	if( Nav_LeftMotorCommand_i32 >= 0.0 )
 800088e:	4b5d      	ldr	r3, [pc, #372]	; (8000a04 <Nav_vCalculateMotorsCommand+0x1e4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	db03      	blt.n	800089e <Nav_vCalculateMotorsCommand+0x7e>
	{
		Nav_LeftMotorDirection_i8 = MOTOR_DIRECTION_FORWARD ;
 8000896:	4b5d      	ldr	r3, [pc, #372]	; (8000a0c <Nav_vCalculateMotorsCommand+0x1ec>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	e010      	b.n	80008c0 <Nav_vCalculateMotorsCommand+0xa0>
	}
	else
	{
		Nav_LeftMotorDirection_i8 = MOTOR_DIRECTION_REVERSE ;
 800089e:	4b5b      	ldr	r3, [pc, #364]	; (8000a0c <Nav_vCalculateMotorsCommand+0x1ec>)
 80008a0:	22ff      	movs	r2, #255	; 0xff
 80008a2:	701a      	strb	r2, [r3, #0]
		Nav_LeftMotorCommand_i32 = fabs( Nav_LeftMotorCommand_i32 );
 80008a4:	4b57      	ldr	r3, [pc, #348]	; (8000a04 <Nav_vCalculateMotorsCommand+0x1e4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008b0:	eeb0 7bc7 	vabs.f64	d7, d7
 80008b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80008b8:	ee17 2a90 	vmov	r2, s15
 80008bc:	4b51      	ldr	r3, [pc, #324]	; (8000a04 <Nav_vCalculateMotorsCommand+0x1e4>)
 80008be:	601a      	str	r2, [r3, #0]
	}

	//Right Motor Maximum Command Settings
	if(Nav_RightMotorCommand_i32 > MAXIMUM_MOTOR_COMMAND )
 80008c0:	4b4f      	ldr	r3, [pc, #316]	; (8000a00 <Nav_vCalculateMotorsCommand+0x1e0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80008c8:	4293      	cmp	r3, r2
 80008ca:	dd03      	ble.n	80008d4 <Nav_vCalculateMotorsCommand+0xb4>
	{
		Nav_RightMotorCommand_i32 = MAXIMUM_MOTOR_COMMAND ;
 80008cc:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <Nav_vCalculateMotorsCommand+0x1e0>)
 80008ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80008d2:	601a      	str	r2, [r3, #0]
	}
	//Left Motor Maximum Command Settings
	if(Nav_LeftMotorCommand_i32 > MAXIMUM_MOTOR_COMMAND )
 80008d4:	4b4b      	ldr	r3, [pc, #300]	; (8000a04 <Nav_vCalculateMotorsCommand+0x1e4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80008dc:	4293      	cmp	r3, r2
 80008de:	dd03      	ble.n	80008e8 <Nav_vCalculateMotorsCommand+0xc8>
	{
		Nav_LeftMotorCommand_i32 = MAXIMUM_MOTOR_COMMAND ;
 80008e0:	4b48      	ldr	r3, [pc, #288]	; (8000a04 <Nav_vCalculateMotorsCommand+0x1e4>)
 80008e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80008e6:	601a      	str	r2, [r3, #0]
	}

	Nav_RightMotorCommand_i32 = ( int32_t ) ( ( (double) ( (MOTOR_PWM->ARR )  *  Nav_RightMotorCommand_i32 )  / MAXIMUM_MOTOR_COMMAND )  ) ;
 80008e8:	4b49      	ldr	r3, [pc, #292]	; (8000a10 <Nav_vCalculateMotorsCommand+0x1f0>)
 80008ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ec:	4a44      	ldr	r2, [pc, #272]	; (8000a00 <Nav_vCalculateMotorsCommand+0x1e0>)
 80008ee:	6812      	ldr	r2, [r2, #0]
 80008f0:	fb02 f303 	mul.w	r3, r2, r3
 80008f4:	ee07 3a90 	vmov	s15, r3
 80008f8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80008fc:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 80009f0 <Nav_vCalculateMotorsCommand+0x1d0>
 8000900:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000904:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000908:	ee17 2a90 	vmov	r2, s15
 800090c:	4b3c      	ldr	r3, [pc, #240]	; (8000a00 <Nav_vCalculateMotorsCommand+0x1e0>)
 800090e:	601a      	str	r2, [r3, #0]
	Nav_LeftMotorCommand_i32  = ( int32_t ) ( ( (double) ( (MOTOR_PWM->ARR )  *  Nav_LeftMotorCommand_i32 )   / MAXIMUM_MOTOR_COMMAND )  ) ;
 8000910:	4b3f      	ldr	r3, [pc, #252]	; (8000a10 <Nav_vCalculateMotorsCommand+0x1f0>)
 8000912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000914:	4a3b      	ldr	r2, [pc, #236]	; (8000a04 <Nav_vCalculateMotorsCommand+0x1e4>)
 8000916:	6812      	ldr	r2, [r2, #0]
 8000918:	fb02 f303 	mul.w	r3, r2, r3
 800091c:	ee07 3a90 	vmov	s15, r3
 8000920:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000924:	ed9f 5b32 	vldr	d5, [pc, #200]	; 80009f0 <Nav_vCalculateMotorsCommand+0x1d0>
 8000928:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800092c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000930:	ee17 2a90 	vmov	r2, s15
 8000934:	4b33      	ldr	r3, [pc, #204]	; (8000a04 <Nav_vCalculateMotorsCommand+0x1e4>)
 8000936:	601a      	str	r2, [r3, #0]

	if ( Nav_RightMotorDirection_i8 == MOTOR_DIRECTION_FORWARD )
 8000938:	4b33      	ldr	r3, [pc, #204]	; (8000a08 <Nav_vCalculateMotorsCommand+0x1e8>)
 800093a:	f993 3000 	ldrsb.w	r3, [r3]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d10d      	bne.n	800095e <Nav_vCalculateMotorsCommand+0x13e>
	{
		if ( ( Nav_RightMotorCommand_i32 > MINIMUM_SATURATION_COMMAND)
 8000942:	4b2f      	ldr	r3, [pc, #188]	; (8000a00 <Nav_vCalculateMotorsCommand+0x1e0>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b32      	cmp	r3, #50	; 0x32
 8000948:	dd17      	ble.n	800097a <Nav_vCalculateMotorsCommand+0x15a>
				&& ( Nav_RightMotorCommand_i32 < MINIMUM_RIGHT_MOTOR_FORWARD_COMMAND ) )
 800094a:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <Nav_vCalculateMotorsCommand+0x1e0>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8000952:	da12      	bge.n	800097a <Nav_vCalculateMotorsCommand+0x15a>
		{
			Nav_RightMotorCommand_i32 = MINIMUM_RIGHT_MOTOR_FORWARD_COMMAND;
 8000954:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <Nav_vCalculateMotorsCommand+0x1e0>)
 8000956:	f44f 7211 	mov.w	r2, #580	; 0x244
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	e00d      	b.n	800097a <Nav_vCalculateMotorsCommand+0x15a>
		}
	}
	else
	{
		if ((Nav_RightMotorCommand_i32 > MINIMUM_SATURATION_COMMAND)
 800095e:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <Nav_vCalculateMotorsCommand+0x1e0>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b32      	cmp	r3, #50	; 0x32
 8000964:	dd09      	ble.n	800097a <Nav_vCalculateMotorsCommand+0x15a>
				&& (Nav_RightMotorCommand_i32 < MINIMUM_RIGHT_MOTOR_REVERSE_COMMAND))
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <Nav_vCalculateMotorsCommand+0x1e0>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f240 2216 	movw	r2, #534	; 0x216
 800096e:	4293      	cmp	r3, r2
 8000970:	dc03      	bgt.n	800097a <Nav_vCalculateMotorsCommand+0x15a>
		{
			Nav_RightMotorCommand_i32 = MINIMUM_RIGHT_MOTOR_REVERSE_COMMAND;
 8000972:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <Nav_vCalculateMotorsCommand+0x1e0>)
 8000974:	f240 2217 	movw	r2, #535	; 0x217
 8000978:	601a      	str	r2, [r3, #0]
		}
	}


	if (  Nav_LeftMotorDirection_i8 == MOTOR_DIRECTION_FORWARD )
 800097a:	4b24      	ldr	r3, [pc, #144]	; (8000a0c <Nav_vCalculateMotorsCommand+0x1ec>)
 800097c:	f993 3000 	ldrsb.w	r3, [r3]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d10d      	bne.n	80009a0 <Nav_vCalculateMotorsCommand+0x180>
	{
		if(( Nav_LeftMotorCommand_i32 > MINIMUM_SATURATION_COMMAND )
 8000984:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <Nav_vCalculateMotorsCommand+0x1e4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b32      	cmp	r3, #50	; 0x32
 800098a:	dd16      	ble.n	80009ba <Nav_vCalculateMotorsCommand+0x19a>
				&& (Nav_LeftMotorCommand_i32 < MINIMUM_LEFT_MOTOR_FORWARD_COMMAND)  )
 800098c:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <Nav_vCalculateMotorsCommand+0x1e4>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8000994:	da11      	bge.n	80009ba <Nav_vCalculateMotorsCommand+0x19a>
		{
			Nav_LeftMotorCommand_i32 = MINIMUM_LEFT_MOTOR_FORWARD_COMMAND;
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <Nav_vCalculateMotorsCommand+0x1e4>)
 8000998:	f44f 7225 	mov.w	r2, #660	; 0x294
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	e00c      	b.n	80009ba <Nav_vCalculateMotorsCommand+0x19a>
		}
	}
	else
	{
		if( ( Nav_LeftMotorCommand_i32 > MINIMUM_SATURATION_COMMAND )
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <Nav_vCalculateMotorsCommand+0x1e4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b32      	cmp	r3, #50	; 0x32
 80009a6:	dd08      	ble.n	80009ba <Nav_vCalculateMotorsCommand+0x19a>
				&& (Nav_LeftMotorCommand_i32 < MINIMUM_LEFT_MOTOR_REVERSE_COMMAND)  )
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <Nav_vCalculateMotorsCommand+0x1e4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 80009b0:	da03      	bge.n	80009ba <Nav_vCalculateMotorsCommand+0x19a>
		{
			Nav_LeftMotorCommand_i32 = MINIMUM_LEFT_MOTOR_REVERSE_COMMAND;
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <Nav_vCalculateMotorsCommand+0x1e4>)
 80009b4:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
 80009b8:	601a      	str	r2, [r3, #0]
		}
	}

	//MONITORING
	MONITOR_RightMotorCommand_i32 = Nav_RightMotorDirection_i8 * Nav_RightMotorCommand_i32 ;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <Nav_vCalculateMotorsCommand+0x1e8>)
 80009bc:	f993 3000 	ldrsb.w	r3, [r3]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <Nav_vCalculateMotorsCommand+0x1e0>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	fb02 f303 	mul.w	r3, r2, r3
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <Nav_vCalculateMotorsCommand+0x1f4>)
 80009cc:	6013      	str	r3, [r2, #0]
	MONITOR_LeftMotorCommand_i32  = Nav_LeftMotorDirection_i8 * Nav_LeftMotorCommand_i32  ;
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <Nav_vCalculateMotorsCommand+0x1ec>)
 80009d0:	f993 3000 	ldrsb.w	r3, [r3]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <Nav_vCalculateMotorsCommand+0x1e4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	fb02 f303 	mul.w	r3, r2, r3
 80009de:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <Nav_vCalculateMotorsCommand+0x1f8>)
 80009e0:	6013      	str	r3, [r2, #0]
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	f3af 8000 	nop.w
 80009f0:	00000000 	.word	0x00000000
 80009f4:	40b38800 	.word	0x40b38800
 80009f8:	240002d8 	.word	0x240002d8
 80009fc:	240002f0 	.word	0x240002f0
 8000a00:	240002f8 	.word	0x240002f8
 8000a04:	240002fc 	.word	0x240002fc
 8000a08:	24000009 	.word	0x24000009
 8000a0c:	2400000a 	.word	0x2400000a
 8000a10:	40010000 	.word	0x40010000
 8000a14:	24000300 	.word	0x24000300
 8000a18:	24000304 	.word	0x24000304

08000a1c <Nav_vMotorsRoutine>:


void Nav_vMotorsRoutine()
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

	if (Nav_LeftMotorDirection_i8 == MOTOR_DIRECTION_FORWARD)
 8000a20:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <Nav_vMotorsRoutine+0x78>)
 8000a22:	f993 3000 	ldrsb.w	r3, [r3]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d107      	bne.n	8000a3a <Nav_vMotorsRoutine+0x1e>
	{
		MOTOR_PWM->LEFT_FORWARD = Nav_LeftMotorCommand_i32 ;
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <Nav_vMotorsRoutine+0x7c>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <Nav_vMotorsRoutine+0x80>)
 8000a30:	63da      	str	r2, [r3, #60]	; 0x3c
		MOTOR_PWM->LEFT_REVERSE = 0 ;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <Nav_vMotorsRoutine+0x80>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	641a      	str	r2, [r3, #64]	; 0x40
 8000a38:	e00c      	b.n	8000a54 <Nav_vMotorsRoutine+0x38>
	}
	else if ( Nav_LeftMotorDirection_i8 == MOTOR_DIRECTION_REVERSE )
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <Nav_vMotorsRoutine+0x78>)
 8000a3c:	f993 3000 	ldrsb.w	r3, [r3]
 8000a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a44:	d106      	bne.n	8000a54 <Nav_vMotorsRoutine+0x38>
	{
		MOTOR_PWM->LEFT_REVERSE= Nav_LeftMotorCommand_i32  ;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <Nav_vMotorsRoutine+0x7c>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <Nav_vMotorsRoutine+0x80>)
 8000a4c:	641a      	str	r2, [r3, #64]	; 0x40
		MOTOR_PWM->LEFT_FORWARD = 0 ;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <Nav_vMotorsRoutine+0x80>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	if (Nav_RightMotorDirection_i8 == MOTOR_DIRECTION_FORWARD )
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <Nav_vMotorsRoutine+0x84>)
 8000a56:	f993 3000 	ldrsb.w	r3, [r3]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d107      	bne.n	8000a6e <Nav_vMotorsRoutine+0x52>
	{
		MOTOR_PWM->RIGHT_FORWARD = Nav_RightMotorCommand_i32 ;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <Nav_vMotorsRoutine+0x88>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <Nav_vMotorsRoutine+0x80>)
 8000a64:	639a      	str	r2, [r3, #56]	; 0x38
		MOTOR_PWM->RIGHT_REVERSE = 0;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <Nav_vMotorsRoutine+0x80>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	635a      	str	r2, [r3, #52]	; 0x34
	{
		MOTOR_PWM->RIGHT_REVERSE =  Nav_RightMotorCommand_i32  ;
		MOTOR_PWM->RIGHT_FORWARD = 0 ;
	}

}
 8000a6c:	e00c      	b.n	8000a88 <Nav_vMotorsRoutine+0x6c>
	else if (Nav_RightMotorDirection_i8 == MOTOR_DIRECTION_REVERSE )
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <Nav_vMotorsRoutine+0x84>)
 8000a70:	f993 3000 	ldrsb.w	r3, [r3]
 8000a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a78:	d106      	bne.n	8000a88 <Nav_vMotorsRoutine+0x6c>
		MOTOR_PWM->RIGHT_REVERSE =  Nav_RightMotorCommand_i32  ;
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <Nav_vMotorsRoutine+0x88>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <Nav_vMotorsRoutine+0x80>)
 8000a80:	635a      	str	r2, [r3, #52]	; 0x34
		MOTOR_PWM->RIGHT_FORWARD = 0 ;
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <Nav_vMotorsRoutine+0x80>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	2400000a 	.word	0x2400000a
 8000a98:	240002fc 	.word	0x240002fc
 8000a9c:	40010000 	.word	0x40010000
 8000aa0:	24000009 	.word	0x24000009
 8000aa4:	240002f8 	.word	0x240002f8

08000aa8 <Nav_vExecutePath>:
  * @param  none
  * @retval void
  */

void Nav_vExecutePath()
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	switch ( Nav_ExecutePath_State_en )
 8000aae:	4b39      	ldr	r3, [pc, #228]	; (8000b94 <Nav_vExecutePath+0xec>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d868      	bhi.n	8000b88 <Nav_vExecutePath+0xe0>
 8000ab6:	a201      	add	r2, pc, #4	; (adr r2, 8000abc <Nav_vExecutePath+0x14>)
 8000ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abc:	08000acd 	.word	0x08000acd
 8000ac0:	08000ad5 	.word	0x08000ad5
 8000ac4:	08000af1 	.word	0x08000af1
 8000ac8:	08000b89 	.word	0x08000b89
	{

	case Nav_ExecutePath_Idle_en :
	{
		Nav_ExecutePath_State_en = Nav_ExecutePath_SetNextTarget_en;
 8000acc:	4b31      	ldr	r3, [pc, #196]	; (8000b94 <Nav_vExecutePath+0xec>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
	}break;
 8000ad2:	e059      	b.n	8000b88 <Nav_vExecutePath+0xe0>


	case Nav_ExecutePath_SetNextTarget_en :
	{
		if ( Nav_CurrentTargetNumber_u8 < ( Nav_NumberOfTargets_u8 ) )
 8000ad4:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <Nav_vExecutePath+0xf0>)
 8000ad6:	781a      	ldrb	r2, [r3, #0]
 8000ad8:	4b30      	ldr	r3, [pc, #192]	; (8000b9c <Nav_vExecutePath+0xf4>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d203      	bcs.n	8000ae8 <Nav_vExecutePath+0x40>
		{
			Nav_ExecutePath_State_en = Nav_ExecutePath_GoToXY_en;
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <Nav_vExecutePath+0xec>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			Nav_ExecutePath_State_en = Nav_ExecutePath_Finished_en ;
		}
	}break;
 8000ae6:	e04f      	b.n	8000b88 <Nav_vExecutePath+0xe0>
			Nav_ExecutePath_State_en = Nav_ExecutePath_Finished_en ;
 8000ae8:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <Nav_vExecutePath+0xec>)
 8000aea:	2203      	movs	r2, #3
 8000aec:	701a      	strb	r2, [r3, #0]
	}break;
 8000aee:	e04b      	b.n	8000b88 <Nav_vExecutePath+0xe0>

	case Nav_ExecutePath_GoToXY_en :
	{
		if( Nav_GoToXY_State_en == Nav_GoToXY_Idle_en )
 8000af0:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <Nav_vExecutePath+0xf8>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d133      	bne.n	8000b60 <Nav_vExecutePath+0xb8>
		{
			Nav_TargetX_mm_d = Nav_XYTargets_ad[Nav_CurrentTargetNumber_u8][0];
 8000af8:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <Nav_vExecutePath+0xf0>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4a29      	ldr	r2, [pc, #164]	; (8000ba4 <Nav_vExecutePath+0xfc>)
 8000afe:	015b      	lsls	r3, r3, #5
 8000b00:	4413      	add	r3, r2
 8000b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b06:	4928      	ldr	r1, [pc, #160]	; (8000ba8 <Nav_vExecutePath+0x100>)
 8000b08:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TargetY_mm_d = Nav_XYTargets_ad[Nav_CurrentTargetNumber_u8][1];
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <Nav_vExecutePath+0xf0>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4a24      	ldr	r2, [pc, #144]	; (8000ba4 <Nav_vExecutePath+0xfc>)
 8000b12:	015b      	lsls	r3, r3, #5
 8000b14:	4413      	add	r3, r2
 8000b16:	3308      	adds	r3, #8
 8000b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b1c:	4923      	ldr	r1, [pc, #140]	; (8000bac <Nav_vExecutePath+0x104>)
 8000b1e:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TargetArrivingAngle_deg_d = Nav_XYTargets_ad[Nav_CurrentTargetNumber_u8][2];
 8000b22:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <Nav_vExecutePath+0xf0>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4a1f      	ldr	r2, [pc, #124]	; (8000ba4 <Nav_vExecutePath+0xfc>)
 8000b28:	015b      	lsls	r3, r3, #5
 8000b2a:	4413      	add	r3, r2
 8000b2c:	3310      	adds	r3, #16
 8000b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b32:	491f      	ldr	r1, [pc, #124]	; (8000bb0 <Nav_vExecutePath+0x108>)
 8000b34:	e9c1 2300 	strd	r2, r3, [r1]
			ROBOT_Direction = Nav_XYTargets_ad[Nav_CurrentTargetNumber_u8][3] ;
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <Nav_vExecutePath+0xf0>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <Nav_vExecutePath+0xfc>)
 8000b3e:	015b      	lsls	r3, r3, #5
 8000b40:	4413      	add	r3, r2
 8000b42:	3318      	adds	r3, #24
 8000b44:	ed93 7b00 	vldr	d7, [r3]
 8000b48:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b4c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b50:	793b      	ldrb	r3, [r7, #4]
 8000b52:	b25a      	sxtb	r2, r3
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <Nav_vExecutePath+0x10c>)
 8000b56:	701a      	strb	r2, [r3, #0]

			Nav_GoToXY_State_en = Nav_GoToXY_Rotate_en;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <Nav_vExecutePath+0xf8>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			Nav_vGoToXYStateMachine_BOB();
		}
	}break;
 8000b5e:	e012      	b.n	8000b86 <Nav_vExecutePath+0xde>
		else if ( Nav_GoToXY_State_en == Nav_GoToXY_Finished_en )
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <Nav_vExecutePath+0xf8>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b06      	cmp	r3, #6
 8000b66:	d10c      	bne.n	8000b82 <Nav_vExecutePath+0xda>
			Nav_CurrentTargetNumber_u8++;
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <Nav_vExecutePath+0xf0>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <Nav_vExecutePath+0xf0>)
 8000b72:	701a      	strb	r2, [r3, #0]
			Nav_ExecutePath_State_en = Nav_ExecutePath_SetNextTarget_en ;
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <Nav_vExecutePath+0xec>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
			Nav_GoToXY_State_en = Nav_GoToXY_Idle_en ;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <Nav_vExecutePath+0xf8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
	}break;
 8000b80:	e001      	b.n	8000b86 <Nav_vExecutePath+0xde>
			Nav_vGoToXYStateMachine_BOB();
 8000b82:	f000 f819 	bl	8000bb8 <Nav_vGoToXYStateMachine_BOB>
	}break;
 8000b86:	bf00      	nop

	}break;

	}

	Nav_vNavigationRoutine();
 8000b88:	f7ff fc3c 	bl	8000404 <Nav_vNavigationRoutine>

}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2400009c 	.word	0x2400009c
 8000b98:	24000140 	.word	0x24000140
 8000b9c:	24000141 	.word	0x24000141
 8000ba0:	2400009f 	.word	0x2400009f
 8000ba4:	240000a0 	.word	0x240000a0
 8000ba8:	24000238 	.word	0x24000238
 8000bac:	24000240 	.word	0x24000240
 8000bb0:	24000248 	.word	0x24000248
 8000bb4:	2400000b 	.word	0x2400000b

08000bb8 <Nav_vGoToXYStateMachine_BOB>:
  * @param  none
  * @retval void
  */

void Nav_vGoToXYStateMachine_BOB()
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	switch( Nav_GoToXY_State_en )
 8000bbc:	4bb4      	ldr	r3, [pc, #720]	; (8000e90 <Nav_vGoToXYStateMachine_BOB+0x2d8>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b06      	cmp	r3, #6
 8000bc2:	f200 81cc 	bhi.w	8000f5e <Nav_vGoToXYStateMachine_BOB+0x3a6>
 8000bc6:	a201      	add	r2, pc, #4	; (adr r2, 8000bcc <Nav_vGoToXYStateMachine_BOB+0x14>)
 8000bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bcc:	08000f59 	.word	0x08000f59
 8000bd0:	08000be9 	.word	0x08000be9
 8000bd4:	08000d3b 	.word	0x08000d3b
 8000bd8:	08000e01 	.word	0x08000e01
 8000bdc:	08000f2b 	.word	0x08000f2b
 8000be0:	08000f3d 	.word	0x08000f3d
 8000be4:	08000f59 	.word	0x08000f59

	}break;

	case Nav_GoToXY_Rotate_en :
	{
		if ( Nav_TrajectoryState_en == Nav_Trajectory_Idle_en )
 8000be8:	4baa      	ldr	r3, [pc, #680]	; (8000e94 <Nav_vGoToXYStateMachine_BOB+0x2dc>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f040 8096 	bne.w	8000d1e <Nav_vGoToXYStateMachine_BOB+0x166>
		{

			if ( ROBOT_Direction == ROBOT_Going_Forward )
 8000bf2:	4ba9      	ldr	r3, [pc, #676]	; (8000e98 <Nav_vGoToXYStateMachine_BOB+0x2e0>)
 8000bf4:	f993 3000 	ldrsb.w	r3, [r3]
 8000bf8:	2b03      	cmp	r3, #3
 8000bfa:	d130      	bne.n	8000c5e <Nav_vGoToXYStateMachine_BOB+0xa6>
			{
				Nav_TargetAngle_deg_d = ( atan2( (Nav_TargetY_mm_d - Nav_CurrentY_mm_d) ,(Nav_TargetX_mm_d - Nav_CurrentX_mm_d ) ) * 180.0 ) / M_PI;
 8000bfc:	4ba7      	ldr	r3, [pc, #668]	; (8000e9c <Nav_vGoToXYStateMachine_BOB+0x2e4>)
 8000bfe:	ed93 6b00 	vldr	d6, [r3]
 8000c02:	4ba7      	ldr	r3, [pc, #668]	; (8000ea0 <Nav_vGoToXYStateMachine_BOB+0x2e8>)
 8000c04:	ed93 7b00 	vldr	d7, [r3]
 8000c08:	ee36 5b47 	vsub.f64	d5, d6, d7
 8000c0c:	4ba5      	ldr	r3, [pc, #660]	; (8000ea4 <Nav_vGoToXYStateMachine_BOB+0x2ec>)
 8000c0e:	ed93 6b00 	vldr	d6, [r3]
 8000c12:	4ba5      	ldr	r3, [pc, #660]	; (8000ea8 <Nav_vGoToXYStateMachine_BOB+0x2f0>)
 8000c14:	ed93 7b00 	vldr	d7, [r3]
 8000c18:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c1c:	eeb0 1b47 	vmov.f64	d1, d7
 8000c20:	eeb0 0b45 	vmov.f64	d0, d5
 8000c24:	f006 f878 	bl	8006d18 <atan2>
 8000c28:	eeb0 7b40 	vmov.f64	d7, d0
 8000c2c:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8000e60 <Nav_vGoToXYStateMachine_BOB+0x2a8>
 8000c30:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c34:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 8000e68 <Nav_vGoToXYStateMachine_BOB+0x2b0>
 8000c38:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c3c:	4b9b      	ldr	r3, [pc, #620]	; (8000eac <Nav_vGoToXYStateMachine_BOB+0x2f4>)
 8000c3e:	ed83 7b00 	vstr	d7, [r3]
				Nav_RemainingAngle_deg_d =  Nav_TargetAngle_deg_d - Nav_CurrentTargetAngle_deg_d ;
 8000c42:	4b9a      	ldr	r3, [pc, #616]	; (8000eac <Nav_vGoToXYStateMachine_BOB+0x2f4>)
 8000c44:	ed93 6b00 	vldr	d6, [r3]
 8000c48:	4b99      	ldr	r3, [pc, #612]	; (8000eb0 <Nav_vGoToXYStateMachine_BOB+0x2f8>)
 8000c4a:	ed93 7b00 	vldr	d7, [r3]
 8000c4e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c52:	4b98      	ldr	r3, [pc, #608]	; (8000eb4 <Nav_vGoToXYStateMachine_BOB+0x2fc>)
 8000c54:	ed83 7b00 	vstr	d7, [r3]
				Nav_vSaturateRemainingAngle();
 8000c58:	f001 ff22 	bl	8002aa0 <Nav_vSaturateRemainingAngle>
 8000c5c:	e034      	b.n	8000cc8 <Nav_vGoToXYStateMachine_BOB+0x110>
			}
			else if ( ROBOT_Direction == ROBOT_Going_Backward )
 8000c5e:	4b8e      	ldr	r3, [pc, #568]	; (8000e98 <Nav_vGoToXYStateMachine_BOB+0x2e0>)
 8000c60:	f993 3000 	ldrsb.w	r3, [r3]
 8000c64:	2b04      	cmp	r3, #4
 8000c66:	d12f      	bne.n	8000cc8 <Nav_vGoToXYStateMachine_BOB+0x110>
			{
				Nav_TargetAngle_deg_d = ( atan2( (Nav_CurrentY_mm_d - Nav_TargetY_mm_d) ,(Nav_CurrentX_mm_d - Nav_TargetX_mm_d ) ) * 180.0 ) / M_PI;
 8000c68:	4b8d      	ldr	r3, [pc, #564]	; (8000ea0 <Nav_vGoToXYStateMachine_BOB+0x2e8>)
 8000c6a:	ed93 6b00 	vldr	d6, [r3]
 8000c6e:	4b8b      	ldr	r3, [pc, #556]	; (8000e9c <Nav_vGoToXYStateMachine_BOB+0x2e4>)
 8000c70:	ed93 7b00 	vldr	d7, [r3]
 8000c74:	ee36 5b47 	vsub.f64	d5, d6, d7
 8000c78:	4b8b      	ldr	r3, [pc, #556]	; (8000ea8 <Nav_vGoToXYStateMachine_BOB+0x2f0>)
 8000c7a:	ed93 6b00 	vldr	d6, [r3]
 8000c7e:	4b89      	ldr	r3, [pc, #548]	; (8000ea4 <Nav_vGoToXYStateMachine_BOB+0x2ec>)
 8000c80:	ed93 7b00 	vldr	d7, [r3]
 8000c84:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c88:	eeb0 1b47 	vmov.f64	d1, d7
 8000c8c:	eeb0 0b45 	vmov.f64	d0, d5
 8000c90:	f006 f842 	bl	8006d18 <atan2>
 8000c94:	eeb0 7b40 	vmov.f64	d7, d0
 8000c98:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8000e60 <Nav_vGoToXYStateMachine_BOB+0x2a8>
 8000c9c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ca0:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8000e68 <Nav_vGoToXYStateMachine_BOB+0x2b0>
 8000ca4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ca8:	4b80      	ldr	r3, [pc, #512]	; (8000eac <Nav_vGoToXYStateMachine_BOB+0x2f4>)
 8000caa:	ed83 7b00 	vstr	d7, [r3]
				Nav_RemainingAngle_deg_d =  Nav_TargetAngle_deg_d - Nav_CurrentTargetAngle_deg_d ;
 8000cae:	4b7f      	ldr	r3, [pc, #508]	; (8000eac <Nav_vGoToXYStateMachine_BOB+0x2f4>)
 8000cb0:	ed93 6b00 	vldr	d6, [r3]
 8000cb4:	4b7e      	ldr	r3, [pc, #504]	; (8000eb0 <Nav_vGoToXYStateMachine_BOB+0x2f8>)
 8000cb6:	ed93 7b00 	vldr	d7, [r3]
 8000cba:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000cbe:	4b7d      	ldr	r3, [pc, #500]	; (8000eb4 <Nav_vGoToXYStateMachine_BOB+0x2fc>)
 8000cc0:	ed83 7b00 	vstr	d7, [r3]
				Nav_vSaturateRemainingAngle();
 8000cc4:	f001 feec 	bl	8002aa0 <Nav_vSaturateRemainingAngle>

			}

			if( Nav_RemainingAngle_deg_d > 0.0 )
 8000cc8:	4b7a      	ldr	r3, [pc, #488]	; (8000eb4 <Nav_vGoToXYStateMachine_BOB+0x2fc>)
 8000cca:	ed93 7b00 	vldr	d7, [r3]
 8000cce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd6:	dd0f      	ble.n	8000cf8 <Nav_vGoToXYStateMachine_BOB+0x140>
			{
				Nav_MaxAngularVelocity_d = 150 ;
 8000cd8:	4977      	ldr	r1, [pc, #476]	; (8000eb8 <Nav_vGoToXYStateMachine_BOB+0x300>)
 8000cda:	a365      	add	r3, pc, #404	; (adr r3, 8000e70 <Nav_vGoToXYStateMachine_BOB+0x2b8>)
 8000cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce0:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_AngularAcc_d = 230 ;
 8000ce4:	4975      	ldr	r1, [pc, #468]	; (8000ebc <Nav_vGoToXYStateMachine_BOB+0x304>)
 8000ce6:	a364      	add	r3, pc, #400	; (adr r3, 8000e78 <Nav_vGoToXYStateMachine_BOB+0x2c0>)
 8000ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cec:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrajectoryMode_en = Nav_ForwardAngularTrajectory_en;
 8000cf0:	4b73      	ldr	r3, [pc, #460]	; (8000ec0 <Nav_vGoToXYStateMachine_BOB+0x308>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e00e      	b.n	8000d16 <Nav_vGoToXYStateMachine_BOB+0x15e>
			}
			else
			{
				Nav_MaxAngularVelocity_d = -150.0 ;
 8000cf8:	496f      	ldr	r1, [pc, #444]	; (8000eb8 <Nav_vGoToXYStateMachine_BOB+0x300>)
 8000cfa:	f04f 0200 	mov.w	r2, #0
 8000cfe:	4b71      	ldr	r3, [pc, #452]	; (8000ec4 <Nav_vGoToXYStateMachine_BOB+0x30c>)
 8000d00:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_AngularAcc_d = -230.0 ;
 8000d04:	496d      	ldr	r1, [pc, #436]	; (8000ebc <Nav_vGoToXYStateMachine_BOB+0x304>)
 8000d06:	f04f 0200 	mov.w	r2, #0
 8000d0a:	4b6f      	ldr	r3, [pc, #444]	; (8000ec8 <Nav_vGoToXYStateMachine_BOB+0x310>)
 8000d0c:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrajectoryMode_en = Nav_ReverseAngularTrajectory_en;
 8000d10:	4b6b      	ldr	r3, [pc, #428]	; (8000ec0 <Nav_vGoToXYStateMachine_BOB+0x308>)
 8000d12:	2203      	movs	r2, #3
 8000d14:	701a      	strb	r2, [r3, #0]
			}

			Nav_TrajectoryState_en = Nav_Trajectory_ResetVariables_en;
 8000d16:	4b5f      	ldr	r3, [pc, #380]	; (8000e94 <Nav_vGoToXYStateMachine_BOB+0x2dc>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			Nav_vIndependantTrajectoryStateMachine();
		}
	}break;
 8000d1c:	e11f      	b.n	8000f5e <Nav_vGoToXYStateMachine_BOB+0x3a6>
		else if ( Nav_TrajectoryState_en == Nav_Trajectory_Finish_en)
 8000d1e:	4b5d      	ldr	r3, [pc, #372]	; (8000e94 <Nav_vGoToXYStateMachine_BOB+0x2dc>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b08      	cmp	r3, #8
 8000d24:	d106      	bne.n	8000d34 <Nav_vGoToXYStateMachine_BOB+0x17c>
			Nav_GoToXY_State_en = Nav_GoToXY_Forward_en;
 8000d26:	4b5a      	ldr	r3, [pc, #360]	; (8000e90 <Nav_vGoToXYStateMachine_BOB+0x2d8>)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	701a      	strb	r2, [r3, #0]
			Nav_TrajectoryState_en = Nav_Trajectory_Idle_en;
 8000d2c:	4b59      	ldr	r3, [pc, #356]	; (8000e94 <Nav_vGoToXYStateMachine_BOB+0x2dc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
	}break;
 8000d32:	e114      	b.n	8000f5e <Nav_vGoToXYStateMachine_BOB+0x3a6>
			Nav_vIndependantTrajectoryStateMachine();
 8000d34:	f000 f924 	bl	8000f80 <Nav_vIndependantTrajectoryStateMachine>
	}break;
 8000d38:	e111      	b.n	8000f5e <Nav_vGoToXYStateMachine_BOB+0x3a6>

	case Nav_GoToXY_Forward_en :
	{
		if ( Nav_TrajectoryState_en == Nav_Trajectory_Idle_en )
 8000d3a:	4b56      	ldr	r3, [pc, #344]	; (8000e94 <Nav_vGoToXYStateMachine_BOB+0x2dc>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d130      	bne.n	8000da4 <Nav_vGoToXYStateMachine_BOB+0x1ec>
		{
			if (ROBOT_Direction == ROBOT_Going_Forward )
 8000d42:	4b55      	ldr	r3, [pc, #340]	; (8000e98 <Nav_vGoToXYStateMachine_BOB+0x2e0>)
 8000d44:	f993 3000 	ldrsb.w	r3, [r3]
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	d112      	bne.n	8000d72 <Nav_vGoToXYStateMachine_BOB+0x1ba>
			{
				Nav_TrajectoryMode_en = Nav_ForwardLinearTrajectory_en;
 8000d4c:	4b5c      	ldr	r3, [pc, #368]	; (8000ec0 <Nav_vGoToXYStateMachine_BOB+0x308>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
				Nav_MaxVelocity_d = 500 ; //400 ; //300 ;//700
 8000d52:	495e      	ldr	r1, [pc, #376]	; (8000ecc <Nav_vGoToXYStateMachine_BOB+0x314>)
 8000d54:	f04f 0200 	mov.w	r2, #0
 8000d58:	4b5d      	ldr	r3, [pc, #372]	; (8000ed0 <Nav_vGoToXYStateMachine_BOB+0x318>)
 8000d5a:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_Acc_d = 400 ;//1500
 8000d5e:	495d      	ldr	r1, [pc, #372]	; (8000ed4 <Nav_vGoToXYStateMachine_BOB+0x31c>)
 8000d60:	f04f 0200 	mov.w	r2, #0
 8000d64:	4b5c      	ldr	r3, [pc, #368]	; (8000ed8 <Nav_vGoToXYStateMachine_BOB+0x320>)
 8000d66:	e9c1 2300 	strd	r2, r3, [r1]
				//Nav_TargetDistance_mm_d = sqrt ( pow( Nav_TargetX_mm_d - Nav_CurrentX_mm_d ,2 ) + pow( Nav_TargetY_mm_d - Nav_CurrentY_mm_d , 2 ) ) ;
				Nav_TrajectoryState_en = Nav_Trajectory_ResetVariables_en;
 8000d6a:	4b4a      	ldr	r3, [pc, #296]	; (8000e94 <Nav_vGoToXYStateMachine_BOB+0x2dc>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			Nav_vIndependantTrajectoryStateMachine();
		}
	}break;
 8000d70:	e0f4      	b.n	8000f5c <Nav_vGoToXYStateMachine_BOB+0x3a4>
			else if ( ROBOT_Direction == ROBOT_Going_Backward)
 8000d72:	4b49      	ldr	r3, [pc, #292]	; (8000e98 <Nav_vGoToXYStateMachine_BOB+0x2e0>)
 8000d74:	f993 3000 	ldrsb.w	r3, [r3]
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	f040 80ef 	bne.w	8000f5c <Nav_vGoToXYStateMachine_BOB+0x3a4>
				Nav_TrajectoryMode_en = Nav_ReverseLinearTrajectory_en;
 8000d7e:	4b50      	ldr	r3, [pc, #320]	; (8000ec0 <Nav_vGoToXYStateMachine_BOB+0x308>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
				Nav_MaxVelocity_d = - 500 ; //400 ; //300 ;//700
 8000d84:	4951      	ldr	r1, [pc, #324]	; (8000ecc <Nav_vGoToXYStateMachine_BOB+0x314>)
 8000d86:	a33e      	add	r3, pc, #248	; (adr r3, 8000e80 <Nav_vGoToXYStateMachine_BOB+0x2c8>)
 8000d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8c:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_Acc_d = - 400 ;//1500
 8000d90:	4950      	ldr	r1, [pc, #320]	; (8000ed4 <Nav_vGoToXYStateMachine_BOB+0x31c>)
 8000d92:	f04f 0200 	mov.w	r2, #0
 8000d96:	4b51      	ldr	r3, [pc, #324]	; (8000edc <Nav_vGoToXYStateMachine_BOB+0x324>)
 8000d98:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrajectoryState_en = Nav_Trajectory_ResetVariables_en;
 8000d9c:	4b3d      	ldr	r3, [pc, #244]	; (8000e94 <Nav_vGoToXYStateMachine_BOB+0x2dc>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
	}break;
 8000da2:	e0db      	b.n	8000f5c <Nav_vGoToXYStateMachine_BOB+0x3a4>
		else if ((Nav_TrajectoryState_en == Nav_Trajectory_Finish_en  ) && ( Nav_TargetArrivingAngle_deg_d != Nav_No_Rotate_After))
 8000da4:	4b3b      	ldr	r3, [pc, #236]	; (8000e94 <Nav_vGoToXYStateMachine_BOB+0x2dc>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b08      	cmp	r3, #8
 8000daa:	d110      	bne.n	8000dce <Nav_vGoToXYStateMachine_BOB+0x216>
 8000dac:	4b4c      	ldr	r3, [pc, #304]	; (8000ee0 <Nav_vGoToXYStateMachine_BOB+0x328>)
 8000dae:	ed93 7b00 	vldr	d7, [r3]
 8000db2:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8000e88 <Nav_vGoToXYStateMachine_BOB+0x2d0>
 8000db6:	eeb4 7b46 	vcmp.f64	d7, d6
 8000dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dbe:	d006      	beq.n	8000dce <Nav_vGoToXYStateMachine_BOB+0x216>
			Nav_GoToXY_State_en = Nav_GoToXY_RotateAfter_en;
 8000dc0:	4b33      	ldr	r3, [pc, #204]	; (8000e90 <Nav_vGoToXYStateMachine_BOB+0x2d8>)
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	701a      	strb	r2, [r3, #0]
			Nav_TrajectoryState_en = Nav_Trajectory_Idle_en;
 8000dc6:	4b33      	ldr	r3, [pc, #204]	; (8000e94 <Nav_vGoToXYStateMachine_BOB+0x2dc>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	e017      	b.n	8000dfe <Nav_vGoToXYStateMachine_BOB+0x246>
		else if ((Nav_TrajectoryState_en == Nav_Trajectory_Finish_en ) && ( Nav_TargetArrivingAngle_deg_d == Nav_No_Rotate_After))
 8000dce:	4b31      	ldr	r3, [pc, #196]	; (8000e94 <Nav_vGoToXYStateMachine_BOB+0x2dc>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b08      	cmp	r3, #8
 8000dd4:	d110      	bne.n	8000df8 <Nav_vGoToXYStateMachine_BOB+0x240>
 8000dd6:	4b42      	ldr	r3, [pc, #264]	; (8000ee0 <Nav_vGoToXYStateMachine_BOB+0x328>)
 8000dd8:	ed93 7b00 	vldr	d7, [r3]
 8000ddc:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8000e88 <Nav_vGoToXYStateMachine_BOB+0x2d0>
 8000de0:	eeb4 7b46 	vcmp.f64	d7, d6
 8000de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de8:	d106      	bne.n	8000df8 <Nav_vGoToXYStateMachine_BOB+0x240>
			Nav_GoToXY_State_en = Nav_GoToXY_Finished_en ;
 8000dea:	4b29      	ldr	r3, [pc, #164]	; (8000e90 <Nav_vGoToXYStateMachine_BOB+0x2d8>)
 8000dec:	2206      	movs	r2, #6
 8000dee:	701a      	strb	r2, [r3, #0]
			Nav_TrajectoryState_en = Nav_Trajectory_Idle_en;
 8000df0:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <Nav_vGoToXYStateMachine_BOB+0x2dc>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
 8000df6:	e002      	b.n	8000dfe <Nav_vGoToXYStateMachine_BOB+0x246>
			Nav_vIndependantTrajectoryStateMachine();
 8000df8:	f000 f8c2 	bl	8000f80 <Nav_vIndependantTrajectoryStateMachine>
	}break;
 8000dfc:	e0ae      	b.n	8000f5c <Nav_vGoToXYStateMachine_BOB+0x3a4>
 8000dfe:	e0ad      	b.n	8000f5c <Nav_vGoToXYStateMachine_BOB+0x3a4>

	case Nav_GoToXY_RotateAfter_en :
	{

		if ( Nav_TrajectoryState_en == Nav_Trajectory_Idle_en )
 8000e00:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <Nav_vGoToXYStateMachine_BOB+0x2dc>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f040 8082 	bne.w	8000f0e <Nav_vGoToXYStateMachine_BOB+0x356>
		{
			Nav_TargetAngle_deg_d = Nav_TargetArrivingAngle_deg_d;
 8000e0a:	4b35      	ldr	r3, [pc, #212]	; (8000ee0 <Nav_vGoToXYStateMachine_BOB+0x328>)
 8000e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e10:	4926      	ldr	r1, [pc, #152]	; (8000eac <Nav_vGoToXYStateMachine_BOB+0x2f4>)
 8000e12:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_RemainingAngle_deg_d =  Nav_TargetAngle_deg_d - Nav_CurrentTargetAngle_deg_d ;
 8000e16:	4b25      	ldr	r3, [pc, #148]	; (8000eac <Nav_vGoToXYStateMachine_BOB+0x2f4>)
 8000e18:	ed93 6b00 	vldr	d6, [r3]
 8000e1c:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <Nav_vGoToXYStateMachine_BOB+0x2f8>)
 8000e1e:	ed93 7b00 	vldr	d7, [r3]
 8000e22:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000e26:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <Nav_vGoToXYStateMachine_BOB+0x2fc>)
 8000e28:	ed83 7b00 	vstr	d7, [r3]
			Nav_vSaturateRemainingAngle();
 8000e2c:	f001 fe38 	bl	8002aa0 <Nav_vSaturateRemainingAngle>
			if( Nav_RemainingAngle_deg_d > 0.0 )
 8000e30:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <Nav_vGoToXYStateMachine_BOB+0x2fc>)
 8000e32:	ed93 7b00 	vldr	d7, [r3]
 8000e36:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3e:	dd53      	ble.n	8000ee8 <Nav_vGoToXYStateMachine_BOB+0x330>
			{
				Nav_MaxAngularVelocity_d = 200 ;
 8000e40:	491d      	ldr	r1, [pc, #116]	; (8000eb8 <Nav_vGoToXYStateMachine_BOB+0x300>)
 8000e42:	f04f 0200 	mov.w	r2, #0
 8000e46:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <Nav_vGoToXYStateMachine_BOB+0x32c>)
 8000e48:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_AngularAcc_d = 230 ;
 8000e4c:	491b      	ldr	r1, [pc, #108]	; (8000ebc <Nav_vGoToXYStateMachine_BOB+0x304>)
 8000e4e:	a30a      	add	r3, pc, #40	; (adr r3, 8000e78 <Nav_vGoToXYStateMachine_BOB+0x2c0>)
 8000e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e54:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrajectoryMode_en = Nav_ForwardAngularTrajectory_en;
 8000e58:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <Nav_vGoToXYStateMachine_BOB+0x308>)
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	701a      	strb	r2, [r3, #0]
 8000e5e:	e052      	b.n	8000f06 <Nav_vGoToXYStateMachine_BOB+0x34e>
 8000e60:	00000000 	.word	0x00000000
 8000e64:	40668000 	.word	0x40668000
 8000e68:	54442d18 	.word	0x54442d18
 8000e6c:	400921fb 	.word	0x400921fb
 8000e70:	00000000 	.word	0x00000000
 8000e74:	4062c000 	.word	0x4062c000
 8000e78:	00000000 	.word	0x00000000
 8000e7c:	406cc000 	.word	0x406cc000
 8000e80:	00000000 	.word	0x00000000
 8000e84:	c07f4000 	.word	0xc07f4000
 8000e88:	00000000 	.word	0x00000000
 8000e8c:	408f4000 	.word	0x408f4000
 8000e90:	2400009f 	.word	0x2400009f
 8000e94:	2400009d 	.word	0x2400009d
 8000e98:	2400000b 	.word	0x2400000b
 8000e9c:	24000240 	.word	0x24000240
 8000ea0:	24000220 	.word	0x24000220
 8000ea4:	24000238 	.word	0x24000238
 8000ea8:	24000218 	.word	0x24000218
 8000eac:	24000278 	.word	0x24000278
 8000eb0:	24000280 	.word	0x24000280
 8000eb4:	240001d8 	.word	0x240001d8
 8000eb8:	24000320 	.word	0x24000320
 8000ebc:	24000318 	.word	0x24000318
 8000ec0:	2400009e 	.word	0x2400009e
 8000ec4:	c062c000 	.word	0xc062c000
 8000ec8:	c06cc000 	.word	0xc06cc000
 8000ecc:	24000310 	.word	0x24000310
 8000ed0:	407f4000 	.word	0x407f4000
 8000ed4:	24000308 	.word	0x24000308
 8000ed8:	40790000 	.word	0x40790000
 8000edc:	c0790000 	.word	0xc0790000
 8000ee0:	24000248 	.word	0x24000248
 8000ee4:	40690000 	.word	0x40690000
			}
			else
			{
				Nav_MaxAngularVelocity_d = -150.0 ;
 8000ee8:	491e      	ldr	r1, [pc, #120]	; (8000f64 <Nav_vGoToXYStateMachine_BOB+0x3ac>)
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <Nav_vGoToXYStateMachine_BOB+0x3b0>)
 8000ef0:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_AngularAcc_d = -230.0 ;
 8000ef4:	491d      	ldr	r1, [pc, #116]	; (8000f6c <Nav_vGoToXYStateMachine_BOB+0x3b4>)
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <Nav_vGoToXYStateMachine_BOB+0x3b8>)
 8000efc:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrajectoryMode_en = Nav_ReverseAngularTrajectory_en;
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <Nav_vGoToXYStateMachine_BOB+0x3bc>)
 8000f02:	2203      	movs	r2, #3
 8000f04:	701a      	strb	r2, [r3, #0]
			}

			Nav_TrajectoryState_en = Nav_Trajectory_ResetVariables_en;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <Nav_vGoToXYStateMachine_BOB+0x3c0>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			Nav_vIndependantTrajectoryStateMachine();
		}
	}break;
 8000f0c:	e027      	b.n	8000f5e <Nav_vGoToXYStateMachine_BOB+0x3a6>
		else if ( Nav_TrajectoryState_en == Nav_Trajectory_Finish_en)
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <Nav_vGoToXYStateMachine_BOB+0x3c0>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b08      	cmp	r3, #8
 8000f14:	d106      	bne.n	8000f24 <Nav_vGoToXYStateMachine_BOB+0x36c>
			Nav_GoToXY_State_en = Nav_GoToXY_Finished_en;
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <Nav_vGoToXYStateMachine_BOB+0x3c4>)
 8000f18:	2206      	movs	r2, #6
 8000f1a:	701a      	strb	r2, [r3, #0]
			Nav_TrajectoryState_en = Nav_Trajectory_Idle_en;
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <Nav_vGoToXYStateMachine_BOB+0x3c0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
	}break;
 8000f22:	e01c      	b.n	8000f5e <Nav_vGoToXYStateMachine_BOB+0x3a6>
			Nav_vIndependantTrajectoryStateMachine();
 8000f24:	f000 f82c 	bl	8000f80 <Nav_vIndependantTrajectoryStateMachine>
	}break;
 8000f28:	e019      	b.n	8000f5e <Nav_vGoToXYStateMachine_BOB+0x3a6>
	case Nav_GoToXY_OrderSuddenStop_en :
	{
		Nav_GoToXY_State_en = Nav_GoToXY_ExecuteSuddenStop_en;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <Nav_vGoToXYStateMachine_BOB+0x3c4>)
 8000f2c:	2205      	movs	r2, #5
 8000f2e:	701a      	strb	r2, [r3, #0]
		Nav_TrajectoryState_en = Nav_Trajectory_OrderSuddenStop_en ; // A redefinir Nav_Trajectory_ExecuteSuddenStop_en
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <Nav_vGoToXYStateMachine_BOB+0x3c0>)
 8000f32:	2205      	movs	r2, #5
 8000f34:	701a      	strb	r2, [r3, #0]
		Nav_vIndependantTrajectoryStateMachine();
 8000f36:	f000 f823 	bl	8000f80 <Nav_vIndependantTrajectoryStateMachine>

	}break;
 8000f3a:	e010      	b.n	8000f5e <Nav_vGoToXYStateMachine_BOB+0x3a6>
	case Nav_GoToXY_ExecuteSuddenStop_en :
	{
		if ( Nav_TrajectoryState_en == Nav_Trajectory_Finish_en) // Is it necessary to 	do this checking ?
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <Nav_vGoToXYStateMachine_BOB+0x3c0>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b08      	cmp	r3, #8
 8000f42:	d106      	bne.n	8000f52 <Nav_vGoToXYStateMachine_BOB+0x39a>
		{
			Nav_GoToXY_State_en = Nav_GoToXY_Finished_en;
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <Nav_vGoToXYStateMachine_BOB+0x3c4>)
 8000f46:	2206      	movs	r2, #6
 8000f48:	701a      	strb	r2, [r3, #0]
			Nav_TrajectoryState_en = Nav_Trajectory_Idle_en;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <Nav_vGoToXYStateMachine_BOB+0x3c0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
		else
		{
			Nav_vIndependantTrajectoryStateMachine();
		}

	}break;
 8000f50:	e005      	b.n	8000f5e <Nav_vGoToXYStateMachine_BOB+0x3a6>
			Nav_vIndependantTrajectoryStateMachine();
 8000f52:	f000 f815 	bl	8000f80 <Nav_vIndependantTrajectoryStateMachine>
	}break;
 8000f56:	e002      	b.n	8000f5e <Nav_vGoToXYStateMachine_BOB+0x3a6>
	}break;
 8000f58:	bf00      	nop
 8000f5a:	e000      	b.n	8000f5e <Nav_vGoToXYStateMachine_BOB+0x3a6>
	}break;
 8000f5c:	bf00      	nop
	{
		//	Nav_Navigator_CurrentState_en = Nav_Navigator_WaitForOrders_en ;

	}break;
	}
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	24000320 	.word	0x24000320
 8000f68:	c062c000 	.word	0xc062c000
 8000f6c:	24000318 	.word	0x24000318
 8000f70:	c06cc000 	.word	0xc06cc000
 8000f74:	2400009e 	.word	0x2400009e
 8000f78:	2400009d 	.word	0x2400009d
 8000f7c:	2400009f 	.word	0x2400009f

08000f80 <Nav_vIndependantTrajectoryStateMachine>:

void Nav_vIndependantTrajectoryStateMachine()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	ed2d 8b02 	vpush	{d8}
 8000f86:	af00      	add	r7, sp, #0
	switch(Nav_TrajectoryState_en)
 8000f88:	4ba3      	ldr	r3, [pc, #652]	; (8001218 <Nav_vIndependantTrajectoryStateMachine+0x298>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	f200 863a 	bhi.w	8001c06 <Nav_vIndependantTrajectoryStateMachine+0xc86>
 8000f92:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <Nav_vIndependantTrajectoryStateMachine+0x18>)
 8000f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f98:	08001b75 	.word	0x08001b75
 8000f9c:	08000fbd 	.word	0x08000fbd
 8000fa0:	0800104f 	.word	0x0800104f
 8000fa4:	0800130d 	.word	0x0800130d
 8000fa8:	0800132b 	.word	0x0800132b
 8000fac:	080019dd 	.word	0x080019dd
 8000fb0:	08001abb 	.word	0x08001abb
 8000fb4:	08001b5b 	.word	0x08001b5b
 8000fb8:	08001b75 	.word	0x08001b75
	}break;

	case Nav_Trajectory_ResetVariables_en :
	{
		//reset the current sample
		Nav_CurrentSample_u32 = 0;
 8000fbc:	4b97      	ldr	r3, [pc, #604]	; (800121c <Nav_vIndependantTrajectoryStateMachine+0x29c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
		Nav_TrapezePhase_en = Nav_Trapeze_Accelerating_en;
 8000fc2:	4b97      	ldr	r3, [pc, #604]	; (8001220 <Nav_vIndependantTrajectoryStateMachine+0x2a0>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
		//reset measuring variables
		ENCODER_RIGHT->CNT = ENCODER_RIGHT->ARR / 2 ;
 8000fc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd2:	085b      	lsrs	r3, r3, #1
 8000fd4:	6253      	str	r3, [r2, #36]	; 0x24
		ENCODER_LEFT->CNT = ENCODER_LEFT->ARR / 2 ;
 8000fd6:	4b93      	ldr	r3, [pc, #588]	; (8001224 <Nav_vIndependantTrajectoryStateMachine+0x2a4>)
 8000fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fda:	4a92      	ldr	r2, [pc, #584]	; (8001224 <Nav_vIndependantTrajectoryStateMachine+0x2a4>)
 8000fdc:	085b      	lsrs	r3, r3, #1
 8000fde:	6253      	str	r3, [r2, #36]	; 0x24
		Nav_PrevMeasuredDistance_mm_d = 0.0 ;
 8000fe0:	4991      	ldr	r1, [pc, #580]	; (8001228 <Nav_vIndependantTrajectoryStateMachine+0x2a8>)
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_PrevMeasuredAngle_rad_d   = 0.0 ;
 8000fee:	498f      	ldr	r1, [pc, #572]	; (800122c <Nav_vIndependantTrajectoryStateMachine+0x2ac>)
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	e9c1 2300 	strd	r2, r3, [r1]
		//Nav_PrevMeasuredAngle_deg_d   = 0.0 ;
		Nav_vFeedbackRoutine();
 8000ffc:	f7ff fa10 	bl	8000420 <Nav_vFeedbackRoutine>

		//reset the Target Distance variables
		Nav_CurrentTargetDistance_mm_d = 0.0 ;
 8001000:	498b      	ldr	r1, [pc, #556]	; (8001230 <Nav_vIndependantTrajectoryStateMachine+0x2b0>)
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	f04f 0300 	mov.w	r3, #0
 800100a:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_PrevTargetDistance_mm_d = 0.0 ;
 800100e:	4989      	ldr	r1, [pc, #548]	; (8001234 <Nav_vIndependantTrajectoryStateMachine+0x2b4>)
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	e9c1 2300 	strd	r2, r3, [r1]

		Nav_PrevTargetAngle_deg_d = Nav_CurrentTargetAngle_deg_d;
 800101c:	4b86      	ldr	r3, [pc, #536]	; (8001238 <Nav_vIndependantTrajectoryStateMachine+0x2b8>)
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	4986      	ldr	r1, [pc, #536]	; (800123c <Nav_vIndependantTrajectoryStateMachine+0x2bc>)
 8001024:	e9c1 2300 	strd	r2, r3, [r1]

		//reset the pid variables
		Nav_SumDistanceError_d = 0.0 ;
 8001028:	4985      	ldr	r1, [pc, #532]	; (8001240 <Nav_vIndependantTrajectoryStateMachine+0x2c0>)
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_SumAngleError_d = 0.0 ;
 8001036:	4983      	ldr	r1, [pc, #524]	; (8001244 <Nav_vIndependantTrajectoryStateMachine+0x2c4>)
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrajectoryState_en = Nav_Trajectory_SetPath_en;
 8001044:	4b74      	ldr	r3, [pc, #464]	; (8001218 <Nav_vIndependantTrajectoryStateMachine+0x298>)
 8001046:	2202      	movs	r2, #2
 8001048:	701a      	strb	r2, [r3, #0]
	}break;
 800104a:	f000 bddc 	b.w	8001c06 <Nav_vIndependantTrajectoryStateMachine+0xc86>

	case Nav_Trajectory_SetPath_en :
	{

		//		Nav_RemainingDistance_mm_d = Nav_TargetDistance_mm_d - ( Nav_CurrentTargetDistance_mm_d -  Nav_MeasuredDistance_mm_d );
		if ( Nav_TrajectoryMode_en == Nav_ForwardLinearTrajectory_en )
 800104e:	4b7e      	ldr	r3, [pc, #504]	; (8001248 <Nav_vIndependantTrajectoryStateMachine+0x2c8>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d13c      	bne.n	80010d0 <Nav_vIndependantTrajectoryStateMachine+0x150>
		{
			Nav_MaxVelocity_d = Nav_MaxVelocity_d * SAMPLING_PERIOD ;
 8001056:	4b7d      	ldr	r3, [pc, #500]	; (800124c <Nav_vIndependantTrajectoryStateMachine+0x2cc>)
 8001058:	ed93 7b00 	vldr	d7, [r3]
 800105c:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 80011d8 <Nav_vIndependantTrajectoryStateMachine+0x258>
 8001060:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001064:	4b79      	ldr	r3, [pc, #484]	; (800124c <Nav_vIndependantTrajectoryStateMachine+0x2cc>)
 8001066:	ed83 7b00 	vstr	d7, [r3]
			Nav_Acc_d = Nav_Acc_d * SAMPLING_PERIOD * SAMPLING_PERIOD ;
 800106a:	4b79      	ldr	r3, [pc, #484]	; (8001250 <Nav_vIndependantTrajectoryStateMachine+0x2d0>)
 800106c:	ed93 7b00 	vldr	d7, [r3]
 8001070:	ed9f 6b59 	vldr	d6, [pc, #356]	; 80011d8 <Nav_vIndependantTrajectoryStateMachine+0x258>
 8001074:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001078:	ed9f 6b57 	vldr	d6, [pc, #348]	; 80011d8 <Nav_vIndependantTrajectoryStateMachine+0x258>
 800107c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001080:	4b73      	ldr	r3, [pc, #460]	; (8001250 <Nav_vIndependantTrajectoryStateMachine+0x2d0>)
 8001082:	ed83 7b00 	vstr	d7, [r3]
			FORWARD_LINEAR_TRAJECTORY_PID
 8001086:	4973      	ldr	r1, [pc, #460]	; (8001254 <Nav_vIndependantTrajectoryStateMachine+0x2d4>)
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b72      	ldr	r3, [pc, #456]	; (8001258 <Nav_vIndependantTrajectoryStateMachine+0x2d8>)
 800108e:	e9c1 2300 	strd	r2, r3, [r1]
 8001092:	4972      	ldr	r1, [pc, #456]	; (800125c <Nav_vIndependantTrajectoryStateMachine+0x2dc>)
 8001094:	a352      	add	r3, pc, #328	; (adr r3, 80011e0 <Nav_vIndependantTrajectoryStateMachine+0x260>)
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	e9c1 2300 	strd	r2, r3, [r1]
 800109e:	4970      	ldr	r1, [pc, #448]	; (8001260 <Nav_vIndependantTrajectoryStateMachine+0x2e0>)
 80010a0:	a351      	add	r3, pc, #324	; (adr r3, 80011e8 <Nav_vIndependantTrajectoryStateMachine+0x268>)
 80010a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a6:	e9c1 2300 	strd	r2, r3, [r1]
 80010aa:	496e      	ldr	r1, [pc, #440]	; (8001264 <Nav_vIndependantTrajectoryStateMachine+0x2e4>)
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	4b6d      	ldr	r3, [pc, #436]	; (8001268 <Nav_vIndependantTrajectoryStateMachine+0x2e8>)
 80010b2:	e9c1 2300 	strd	r2, r3, [r1]
 80010b6:	496d      	ldr	r1, [pc, #436]	; (800126c <Nav_vIndependantTrajectoryStateMachine+0x2ec>)
 80010b8:	a34d      	add	r3, pc, #308	; (adr r3, 80011f0 <Nav_vIndependantTrajectoryStateMachine+0x270>)
 80010ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010be:	e9c1 2300 	strd	r2, r3, [r1]
 80010c2:	496b      	ldr	r1, [pc, #428]	; (8001270 <Nav_vIndependantTrajectoryStateMachine+0x2f0>)
 80010c4:	a34c      	add	r3, pc, #304	; (adr r3, 80011f8 <Nav_vIndependantTrajectoryStateMachine+0x278>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	e9c1 2300 	strd	r2, r3, [r1]
 80010ce:	e115      	b.n	80012fc <Nav_vIndependantTrajectoryStateMachine+0x37c>
		}
		else if ( Nav_TrajectoryMode_en == Nav_ReverseLinearTrajectory_en )
 80010d0:	4b5d      	ldr	r3, [pc, #372]	; (8001248 <Nav_vIndependantTrajectoryStateMachine+0x2c8>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d13c      	bne.n	8001152 <Nav_vIndependantTrajectoryStateMachine+0x1d2>
		{
			Nav_MaxVelocity_d = Nav_MaxVelocity_d * SAMPLING_PERIOD ;
 80010d8:	4b5c      	ldr	r3, [pc, #368]	; (800124c <Nav_vIndependantTrajectoryStateMachine+0x2cc>)
 80010da:	ed93 7b00 	vldr	d7, [r3]
 80010de:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 80011d8 <Nav_vIndependantTrajectoryStateMachine+0x258>
 80010e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010e6:	4b59      	ldr	r3, [pc, #356]	; (800124c <Nav_vIndependantTrajectoryStateMachine+0x2cc>)
 80010e8:	ed83 7b00 	vstr	d7, [r3]
			Nav_Acc_d = Nav_Acc_d * SAMPLING_PERIOD * SAMPLING_PERIOD ;
 80010ec:	4b58      	ldr	r3, [pc, #352]	; (8001250 <Nav_vIndependantTrajectoryStateMachine+0x2d0>)
 80010ee:	ed93 7b00 	vldr	d7, [r3]
 80010f2:	ed9f 6b39 	vldr	d6, [pc, #228]	; 80011d8 <Nav_vIndependantTrajectoryStateMachine+0x258>
 80010f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010fa:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80011d8 <Nav_vIndependantTrajectoryStateMachine+0x258>
 80010fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001102:	4b53      	ldr	r3, [pc, #332]	; (8001250 <Nav_vIndependantTrajectoryStateMachine+0x2d0>)
 8001104:	ed83 7b00 	vstr	d7, [r3]
			REVERSE_LINEAR_TRAJECTORY_PID
 8001108:	4952      	ldr	r1, [pc, #328]	; (8001254 <Nav_vIndependantTrajectoryStateMachine+0x2d4>)
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	4b52      	ldr	r3, [pc, #328]	; (8001258 <Nav_vIndependantTrajectoryStateMachine+0x2d8>)
 8001110:	e9c1 2300 	strd	r2, r3, [r1]
 8001114:	4951      	ldr	r1, [pc, #324]	; (800125c <Nav_vIndependantTrajectoryStateMachine+0x2dc>)
 8001116:	a332      	add	r3, pc, #200	; (adr r3, 80011e0 <Nav_vIndependantTrajectoryStateMachine+0x260>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	e9c1 2300 	strd	r2, r3, [r1]
 8001120:	494f      	ldr	r1, [pc, #316]	; (8001260 <Nav_vIndependantTrajectoryStateMachine+0x2e0>)
 8001122:	a331      	add	r3, pc, #196	; (adr r3, 80011e8 <Nav_vIndependantTrajectoryStateMachine+0x268>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	e9c1 2300 	strd	r2, r3, [r1]
 800112c:	494d      	ldr	r1, [pc, #308]	; (8001264 <Nav_vIndependantTrajectoryStateMachine+0x2e4>)
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	4b4d      	ldr	r3, [pc, #308]	; (8001268 <Nav_vIndependantTrajectoryStateMachine+0x2e8>)
 8001134:	e9c1 2300 	strd	r2, r3, [r1]
 8001138:	494c      	ldr	r1, [pc, #304]	; (800126c <Nav_vIndependantTrajectoryStateMachine+0x2ec>)
 800113a:	a32d      	add	r3, pc, #180	; (adr r3, 80011f0 <Nav_vIndependantTrajectoryStateMachine+0x270>)
 800113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001140:	e9c1 2300 	strd	r2, r3, [r1]
 8001144:	494a      	ldr	r1, [pc, #296]	; (8001270 <Nav_vIndependantTrajectoryStateMachine+0x2f0>)
 8001146:	a32c      	add	r3, pc, #176	; (adr r3, 80011f8 <Nav_vIndependantTrajectoryStateMachine+0x278>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	e9c1 2300 	strd	r2, r3, [r1]
 8001150:	e0d4      	b.n	80012fc <Nav_vIndependantTrajectoryStateMachine+0x37c>
		}
		else if ( Nav_TrajectoryMode_en == Nav_ForwardAngularTrajectory_en )
 8001152:	4b3d      	ldr	r3, [pc, #244]	; (8001248 <Nav_vIndependantTrajectoryStateMachine+0x2c8>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b02      	cmp	r3, #2
 8001158:	f040 8090 	bne.w	800127c <Nav_vIndependantTrajectoryStateMachine+0x2fc>
		{
			Nav_MaxAngularVelocity_d = Nav_MaxAngularVelocity_d * SAMPLING_PERIOD ;
 800115c:	4b45      	ldr	r3, [pc, #276]	; (8001274 <Nav_vIndependantTrajectoryStateMachine+0x2f4>)
 800115e:	ed93 7b00 	vldr	d7, [r3]
 8001162:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 80011d8 <Nav_vIndependantTrajectoryStateMachine+0x258>
 8001166:	ee27 7b06 	vmul.f64	d7, d7, d6
 800116a:	4b42      	ldr	r3, [pc, #264]	; (8001274 <Nav_vIndependantTrajectoryStateMachine+0x2f4>)
 800116c:	ed83 7b00 	vstr	d7, [r3]
			Nav_AngularAcc_d = Nav_AngularAcc_d * SAMPLING_PERIOD * SAMPLING_PERIOD;
 8001170:	4b41      	ldr	r3, [pc, #260]	; (8001278 <Nav_vIndependantTrajectoryStateMachine+0x2f8>)
 8001172:	ed93 7b00 	vldr	d7, [r3]
 8001176:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80011d8 <Nav_vIndependantTrajectoryStateMachine+0x258>
 800117a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800117e:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80011d8 <Nav_vIndependantTrajectoryStateMachine+0x258>
 8001182:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001186:	4b3c      	ldr	r3, [pc, #240]	; (8001278 <Nav_vIndependantTrajectoryStateMachine+0x2f8>)
 8001188:	ed83 7b00 	vstr	d7, [r3]
			FORWARD_ANGULAR_TRAJECTORY_PID
 800118c:	4931      	ldr	r1, [pc, #196]	; (8001254 <Nav_vIndependantTrajectoryStateMachine+0x2d4>)
 800118e:	a31c      	add	r3, pc, #112	; (adr r3, 8001200 <Nav_vIndependantTrajectoryStateMachine+0x280>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	e9c1 2300 	strd	r2, r3, [r1]
 8001198:	4930      	ldr	r1, [pc, #192]	; (800125c <Nav_vIndependantTrajectoryStateMachine+0x2dc>)
 800119a:	a311      	add	r3, pc, #68	; (adr r3, 80011e0 <Nav_vIndependantTrajectoryStateMachine+0x260>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	e9c1 2300 	strd	r2, r3, [r1]
 80011a4:	492e      	ldr	r1, [pc, #184]	; (8001260 <Nav_vIndependantTrajectoryStateMachine+0x2e0>)
 80011a6:	a310      	add	r3, pc, #64	; (adr r3, 80011e8 <Nav_vIndependantTrajectoryStateMachine+0x268>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	e9c1 2300 	strd	r2, r3, [r1]
 80011b0:	492c      	ldr	r1, [pc, #176]	; (8001264 <Nav_vIndependantTrajectoryStateMachine+0x2e4>)
 80011b2:	a315      	add	r3, pc, #84	; (adr r3, 8001208 <Nav_vIndependantTrajectoryStateMachine+0x288>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	e9c1 2300 	strd	r2, r3, [r1]
 80011bc:	492b      	ldr	r1, [pc, #172]	; (800126c <Nav_vIndependantTrajectoryStateMachine+0x2ec>)
 80011be:	a30c      	add	r3, pc, #48	; (adr r3, 80011f0 <Nav_vIndependantTrajectoryStateMachine+0x270>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	e9c1 2300 	strd	r2, r3, [r1]
 80011c8:	4929      	ldr	r1, [pc, #164]	; (8001270 <Nav_vIndependantTrajectoryStateMachine+0x2f0>)
 80011ca:	a311      	add	r3, pc, #68	; (adr r3, 8001210 <Nav_vIndependantTrajectoryStateMachine+0x290>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	e9c1 2300 	strd	r2, r3, [r1]
 80011d4:	e092      	b.n	80012fc <Nav_vIndependantTrajectoryStateMachine+0x37c>
 80011d6:	bf00      	nop
 80011d8:	47ae147b 	.word	0x47ae147b
 80011dc:	3f747ae1 	.word	0x3f747ae1
 80011e0:	ceb32be7 	.word	0xceb32be7
 80011e4:	3f61cd19 	.word	0x3f61cd19
 80011e8:	01b00368 	.word	0x01b00368
 80011ec:	409020b1 	.word	0x409020b1
 80011f0:	94162a97 	.word	0x94162a97
 80011f4:	3f804fa9 	.word	0x3f804fa9
 80011f8:	cafb3b75 	.word	0xcafb3b75
 80011fc:	40972203 	.word	0x40972203
 8001200:	b1f40372 	.word	0xb1f40372
 8001204:	405ea0f1 	.word	0x405ea0f1
 8001208:	44185dc5 	.word	0x44185dc5
 800120c:	40722b5f 	.word	0x40722b5f
 8001210:	e57d9dbb 	.word	0xe57d9dbb
 8001214:	40a06901 	.word	0x40a06901
 8001218:	2400009d 	.word	0x2400009d
 800121c:	24000328 	.word	0x24000328
 8001220:	24000008 	.word	0x24000008
 8001224:	40000c00 	.word	0x40000c00
 8001228:	240001a8 	.word	0x240001a8
 800122c:	240001d0 	.word	0x240001d0
 8001230:	24000268 	.word	0x24000268
 8001234:	24000270 	.word	0x24000270
 8001238:	24000280 	.word	0x24000280
 800123c:	24000288 	.word	0x24000288
 8001240:	240002d0 	.word	0x240002d0
 8001244:	240002e8 	.word	0x240002e8
 8001248:	2400009e 	.word	0x2400009e
 800124c:	24000310 	.word	0x24000310
 8001250:	24000308 	.word	0x24000308
 8001254:	24000148 	.word	0x24000148
 8001258:	405e0000 	.word	0x405e0000
 800125c:	24000150 	.word	0x24000150
 8001260:	24000158 	.word	0x24000158
 8001264:	24000160 	.word	0x24000160
 8001268:	40590000 	.word	0x40590000
 800126c:	24000168 	.word	0x24000168
 8001270:	24000170 	.word	0x24000170
 8001274:	24000320 	.word	0x24000320
 8001278:	24000318 	.word	0x24000318
		}
		else if ( Nav_TrajectoryMode_en == Nav_ReverseAngularTrajectory_en )
 800127c:	4baa      	ldr	r3, [pc, #680]	; (8001528 <Nav_vIndependantTrajectoryStateMachine+0x5a8>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b03      	cmp	r3, #3
 8001282:	d13b      	bne.n	80012fc <Nav_vIndependantTrajectoryStateMachine+0x37c>
		{
			Nav_MaxAngularVelocity_d = Nav_MaxAngularVelocity_d * SAMPLING_PERIOD ;
 8001284:	4ba9      	ldr	r3, [pc, #676]	; (800152c <Nav_vIndependantTrajectoryStateMachine+0x5ac>)
 8001286:	ed93 7b00 	vldr	d7, [r3]
 800128a:	ed9f 6b95 	vldr	d6, [pc, #596]	; 80014e0 <Nav_vIndependantTrajectoryStateMachine+0x560>
 800128e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001292:	4ba6      	ldr	r3, [pc, #664]	; (800152c <Nav_vIndependantTrajectoryStateMachine+0x5ac>)
 8001294:	ed83 7b00 	vstr	d7, [r3]
			Nav_AngularAcc_d = Nav_AngularAcc_d * SAMPLING_PERIOD * SAMPLING_PERIOD;
 8001298:	4ba5      	ldr	r3, [pc, #660]	; (8001530 <Nav_vIndependantTrajectoryStateMachine+0x5b0>)
 800129a:	ed93 7b00 	vldr	d7, [r3]
 800129e:	ed9f 6b90 	vldr	d6, [pc, #576]	; 80014e0 <Nav_vIndependantTrajectoryStateMachine+0x560>
 80012a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012a6:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 80014e0 <Nav_vIndependantTrajectoryStateMachine+0x560>
 80012aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012ae:	4ba0      	ldr	r3, [pc, #640]	; (8001530 <Nav_vIndependantTrajectoryStateMachine+0x5b0>)
 80012b0:	ed83 7b00 	vstr	d7, [r3]
			FORWARD_ANGULAR_TRAJECTORY_PID
 80012b4:	499f      	ldr	r1, [pc, #636]	; (8001534 <Nav_vIndependantTrajectoryStateMachine+0x5b4>)
 80012b6:	a38c      	add	r3, pc, #560	; (adr r3, 80014e8 <Nav_vIndependantTrajectoryStateMachine+0x568>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	e9c1 2300 	strd	r2, r3, [r1]
 80012c0:	499d      	ldr	r1, [pc, #628]	; (8001538 <Nav_vIndependantTrajectoryStateMachine+0x5b8>)
 80012c2:	a38b      	add	r3, pc, #556	; (adr r3, 80014f0 <Nav_vIndependantTrajectoryStateMachine+0x570>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	e9c1 2300 	strd	r2, r3, [r1]
 80012cc:	499b      	ldr	r1, [pc, #620]	; (800153c <Nav_vIndependantTrajectoryStateMachine+0x5bc>)
 80012ce:	a38a      	add	r3, pc, #552	; (adr r3, 80014f8 <Nav_vIndependantTrajectoryStateMachine+0x578>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	e9c1 2300 	strd	r2, r3, [r1]
 80012d8:	4999      	ldr	r1, [pc, #612]	; (8001540 <Nav_vIndependantTrajectoryStateMachine+0x5c0>)
 80012da:	a389      	add	r3, pc, #548	; (adr r3, 8001500 <Nav_vIndependantTrajectoryStateMachine+0x580>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	e9c1 2300 	strd	r2, r3, [r1]
 80012e4:	4997      	ldr	r1, [pc, #604]	; (8001544 <Nav_vIndependantTrajectoryStateMachine+0x5c4>)
 80012e6:	a388      	add	r3, pc, #544	; (adr r3, 8001508 <Nav_vIndependantTrajectoryStateMachine+0x588>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	e9c1 2300 	strd	r2, r3, [r1]
 80012f0:	4995      	ldr	r1, [pc, #596]	; (8001548 <Nav_vIndependantTrajectoryStateMachine+0x5c8>)
 80012f2:	a387      	add	r3, pc, #540	; (adr r3, 8001510 <Nav_vIndependantTrajectoryStateMachine+0x590>)
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	e9c1 2300 	strd	r2, r3, [r1]
		}
		Nav_Counter_u32 = 0 ;
 80012fc:	4b93      	ldr	r3, [pc, #588]	; (800154c <Nav_vIndependantTrajectoryStateMachine+0x5cc>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
		Nav_TrajectoryState_en = Nav_Trajectory_WaitToExecute_en;
 8001302:	4b93      	ldr	r3, [pc, #588]	; (8001550 <Nav_vIndependantTrajectoryStateMachine+0x5d0>)
 8001304:	2203      	movs	r2, #3
 8001306:	701a      	strb	r2, [r3, #0]
	}break;
 8001308:	f000 bc7d 	b.w	8001c06 <Nav_vIndependantTrajectoryStateMachine+0xc86>

	case Nav_Trajectory_WaitToExecute_en :
	{
		Nav_Counter_u32++;
 800130c:	4b8f      	ldr	r3, [pc, #572]	; (800154c <Nav_vIndependantTrajectoryStateMachine+0x5cc>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	4a8e      	ldr	r2, [pc, #568]	; (800154c <Nav_vIndependantTrajectoryStateMachine+0x5cc>)
 8001314:	6013      	str	r3, [r2, #0]
		if (Nav_Counter_u32 > 2)
 8001316:	4b8d      	ldr	r3, [pc, #564]	; (800154c <Nav_vIndependantTrajectoryStateMachine+0x5cc>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b02      	cmp	r3, #2
 800131c:	f240 842c 	bls.w	8001b78 <Nav_vIndependantTrajectoryStateMachine+0xbf8>
		{
			Nav_TrajectoryState_en = Nav_Trajectory_Execute_en;
 8001320:	4b8b      	ldr	r3, [pc, #556]	; (8001550 <Nav_vIndependantTrajectoryStateMachine+0x5d0>)
 8001322:	2204      	movs	r2, #4
 8001324:	701a      	strb	r2, [r3, #0]
		}
	}break;
 8001326:	f000 bc27 	b.w	8001b78 <Nav_vIndependantTrajectoryStateMachine+0xbf8>

	case Nav_Trajectory_Execute_en :
	{
		Nav_CurrentSample_u32++;
 800132a:	4b8a      	ldr	r3, [pc, #552]	; (8001554 <Nav_vIndependantTrajectoryStateMachine+0x5d4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	4a88      	ldr	r2, [pc, #544]	; (8001554 <Nav_vIndependantTrajectoryStateMachine+0x5d4>)
 8001332:	6013      	str	r3, [r2, #0]
		if  ( Nav_TrajectoryMode_en == Nav_ForwardLinearTrajectory_en )
 8001334:	4b7c      	ldr	r3, [pc, #496]	; (8001528 <Nav_vIndependantTrajectoryStateMachine+0x5a8>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	f040 8127 	bne.w	800158c <Nav_vIndependantTrajectoryStateMachine+0x60c>
		{
			Nav_TargetDistance_mm_d = sqrt ( pow( Nav_TargetX_mm_d - Nav_CurrentX_mm_d ,2 ) + pow( Nav_TargetY_mm_d - Nav_CurrentY_mm_d , 2 ) ) ;
 800133e:	4b86      	ldr	r3, [pc, #536]	; (8001558 <Nav_vIndependantTrajectoryStateMachine+0x5d8>)
 8001340:	ed93 6b00 	vldr	d6, [r3]
 8001344:	4b85      	ldr	r3, [pc, #532]	; (800155c <Nav_vIndependantTrajectoryStateMachine+0x5dc>)
 8001346:	ed93 7b00 	vldr	d7, [r3]
 800134a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800134e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001352:	eeb0 0b47 	vmov.f64	d0, d7
 8001356:	f005 f9f3 	bl	8006740 <pow>
 800135a:	eeb0 8b40 	vmov.f64	d8, d0
 800135e:	4b80      	ldr	r3, [pc, #512]	; (8001560 <Nav_vIndependantTrajectoryStateMachine+0x5e0>)
 8001360:	ed93 6b00 	vldr	d6, [r3]
 8001364:	4b7f      	ldr	r3, [pc, #508]	; (8001564 <Nav_vIndependantTrajectoryStateMachine+0x5e4>)
 8001366:	ed93 7b00 	vldr	d7, [r3]
 800136a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800136e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001372:	eeb0 0b47 	vmov.f64	d0, d7
 8001376:	f005 f9e3 	bl	8006740 <pow>
 800137a:	eeb0 7b40 	vmov.f64	d7, d0
 800137e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001382:	eeb0 0b47 	vmov.f64	d0, d7
 8001386:	f005 fccb 	bl	8006d20 <sqrt>
 800138a:	eeb0 7b40 	vmov.f64	d7, d0
 800138e:	4b76      	ldr	r3, [pc, #472]	; (8001568 <Nav_vIndependantTrajectoryStateMachine+0x5e8>)
 8001390:	ed83 7b00 	vstr	d7, [r3]
			Nav_RemainingDistance_mm_d = Nav_TargetDistance_mm_d - ( Nav_CurrentTargetDistance_mm_d -  Nav_MeasuredDistance_mm_d );
 8001394:	4b74      	ldr	r3, [pc, #464]	; (8001568 <Nav_vIndependantTrajectoryStateMachine+0x5e8>)
 8001396:	ed93 6b00 	vldr	d6, [r3]
 800139a:	4b74      	ldr	r3, [pc, #464]	; (800156c <Nav_vIndependantTrajectoryStateMachine+0x5ec>)
 800139c:	ed93 5b00 	vldr	d5, [r3]
 80013a0:	4b73      	ldr	r3, [pc, #460]	; (8001570 <Nav_vIndependantTrajectoryStateMachine+0x5f0>)
 80013a2:	ed93 7b00 	vldr	d7, [r3]
 80013a6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80013aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80013ae:	4b71      	ldr	r3, [pc, #452]	; (8001574 <Nav_vIndependantTrajectoryStateMachine+0x5f4>)
 80013b0:	ed83 7b00 	vstr	d7, [r3]
			Nav_LimitDistance_mm_d = sqrt ( pow( Nav_TargetX_mm_d - Nav_CurrentTargetX_mm_d ,2 ) + pow( Nav_TargetY_mm_d - Nav_CurrentTargetY_mm_d , 2 ) ) ;
 80013b4:	4b68      	ldr	r3, [pc, #416]	; (8001558 <Nav_vIndependantTrajectoryStateMachine+0x5d8>)
 80013b6:	ed93 6b00 	vldr	d6, [r3]
 80013ba:	4b6f      	ldr	r3, [pc, #444]	; (8001578 <Nav_vIndependantTrajectoryStateMachine+0x5f8>)
 80013bc:	ed93 7b00 	vldr	d7, [r3]
 80013c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80013c4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80013c8:	eeb0 0b47 	vmov.f64	d0, d7
 80013cc:	f005 f9b8 	bl	8006740 <pow>
 80013d0:	eeb0 8b40 	vmov.f64	d8, d0
 80013d4:	4b62      	ldr	r3, [pc, #392]	; (8001560 <Nav_vIndependantTrajectoryStateMachine+0x5e0>)
 80013d6:	ed93 6b00 	vldr	d6, [r3]
 80013da:	4b68      	ldr	r3, [pc, #416]	; (800157c <Nav_vIndependantTrajectoryStateMachine+0x5fc>)
 80013dc:	ed93 7b00 	vldr	d7, [r3]
 80013e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80013e4:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80013e8:	eeb0 0b47 	vmov.f64	d0, d7
 80013ec:	f005 f9a8 	bl	8006740 <pow>
 80013f0:	eeb0 7b40 	vmov.f64	d7, d0
 80013f4:	ee38 7b07 	vadd.f64	d7, d8, d7
 80013f8:	eeb0 0b47 	vmov.f64	d0, d7
 80013fc:	f005 fc90 	bl	8006d20 <sqrt>
 8001400:	eeb0 7b40 	vmov.f64	d7, d0
 8001404:	4b5e      	ldr	r3, [pc, #376]	; (8001580 <Nav_vIndependantTrajectoryStateMachine+0x600>)
 8001406:	ed83 7b00 	vstr	d7, [r3]
			if( Nav_LimitDistance_mm_d > 10.0)
 800140a:	4b5d      	ldr	r3, [pc, #372]	; (8001580 <Nav_vIndependantTrajectoryStateMachine+0x600>)
 800140c:	ed93 7b00 	vldr	d7, [r3]
 8001410:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001414:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141c:	dd5a      	ble.n	80014d4 <Nav_vIndependantTrajectoryStateMachine+0x554>
			{
				Nav_CurrentTargetX_mm_d = Nav_CurrentX_mm_d + ( Nav_CurrentTargetDistance_mm_d -  Nav_MeasuredDistance_mm_d )*cos( Nav_CurrentAngle_rad_d ) ;
 800141e:	4b53      	ldr	r3, [pc, #332]	; (800156c <Nav_vIndependantTrajectoryStateMachine+0x5ec>)
 8001420:	ed93 6b00 	vldr	d6, [r3]
 8001424:	4b52      	ldr	r3, [pc, #328]	; (8001570 <Nav_vIndependantTrajectoryStateMachine+0x5f0>)
 8001426:	ed93 7b00 	vldr	d7, [r3]
 800142a:	ee36 8b47 	vsub.f64	d8, d6, d7
 800142e:	4b55      	ldr	r3, [pc, #340]	; (8001584 <Nav_vIndependantTrajectoryStateMachine+0x604>)
 8001430:	ed93 7b00 	vldr	d7, [r3]
 8001434:	eeb0 0b47 	vmov.f64	d0, d7
 8001438:	f005 fbd6 	bl	8006be8 <cos>
 800143c:	eeb0 7b40 	vmov.f64	d7, d0
 8001440:	ee28 6b07 	vmul.f64	d6, d8, d7
 8001444:	4b45      	ldr	r3, [pc, #276]	; (800155c <Nav_vIndependantTrajectoryStateMachine+0x5dc>)
 8001446:	ed93 7b00 	vldr	d7, [r3]
 800144a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800144e:	4b4a      	ldr	r3, [pc, #296]	; (8001578 <Nav_vIndependantTrajectoryStateMachine+0x5f8>)
 8001450:	ed83 7b00 	vstr	d7, [r3]
				Nav_CurrentTargetY_mm_d = Nav_CurrentY_mm_d + ( Nav_CurrentTargetDistance_mm_d -  Nav_MeasuredDistance_mm_d )*sin( Nav_CurrentAngle_rad_d ) ;
 8001454:	4b45      	ldr	r3, [pc, #276]	; (800156c <Nav_vIndependantTrajectoryStateMachine+0x5ec>)
 8001456:	ed93 6b00 	vldr	d6, [r3]
 800145a:	4b45      	ldr	r3, [pc, #276]	; (8001570 <Nav_vIndependantTrajectoryStateMachine+0x5f0>)
 800145c:	ed93 7b00 	vldr	d7, [r3]
 8001460:	ee36 8b47 	vsub.f64	d8, d6, d7
 8001464:	4b47      	ldr	r3, [pc, #284]	; (8001584 <Nav_vIndependantTrajectoryStateMachine+0x604>)
 8001466:	ed93 7b00 	vldr	d7, [r3]
 800146a:	eeb0 0b47 	vmov.f64	d0, d7
 800146e:	f005 fc07 	bl	8006c80 <sin>
 8001472:	eeb0 7b40 	vmov.f64	d7, d0
 8001476:	ee28 6b07 	vmul.f64	d6, d8, d7
 800147a:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <Nav_vIndependantTrajectoryStateMachine+0x5e4>)
 800147c:	ed93 7b00 	vldr	d7, [r3]
 8001480:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001484:	4b3d      	ldr	r3, [pc, #244]	; (800157c <Nav_vIndependantTrajectoryStateMachine+0x5fc>)
 8001486:	ed83 7b00 	vstr	d7, [r3]
				Nav_CurrentTargetAngle_deg_d = ( atan2( (Nav_TargetY_mm_d - Nav_CurrentTargetY_mm_d) ,(Nav_TargetX_mm_d - Nav_CurrentTargetX_mm_d ) ) * 180.0 ) / M_PI;
 800148a:	4b35      	ldr	r3, [pc, #212]	; (8001560 <Nav_vIndependantTrajectoryStateMachine+0x5e0>)
 800148c:	ed93 6b00 	vldr	d6, [r3]
 8001490:	4b3a      	ldr	r3, [pc, #232]	; (800157c <Nav_vIndependantTrajectoryStateMachine+0x5fc>)
 8001492:	ed93 7b00 	vldr	d7, [r3]
 8001496:	ee36 5b47 	vsub.f64	d5, d6, d7
 800149a:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <Nav_vIndependantTrajectoryStateMachine+0x5d8>)
 800149c:	ed93 6b00 	vldr	d6, [r3]
 80014a0:	4b35      	ldr	r3, [pc, #212]	; (8001578 <Nav_vIndependantTrajectoryStateMachine+0x5f8>)
 80014a2:	ed93 7b00 	vldr	d7, [r3]
 80014a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014aa:	eeb0 1b47 	vmov.f64	d1, d7
 80014ae:	eeb0 0b45 	vmov.f64	d0, d5
 80014b2:	f005 fc31 	bl	8006d18 <atan2>
 80014b6:	eeb0 7b40 	vmov.f64	d7, d0
 80014ba:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8001518 <Nav_vIndependantTrajectoryStateMachine+0x598>
 80014be:	ee27 6b06 	vmul.f64	d6, d7, d6
 80014c2:	ed9f 5b17 	vldr	d5, [pc, #92]	; 8001520 <Nav_vIndependantTrajectoryStateMachine+0x5a0>
 80014c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014ca:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <Nav_vIndependantTrajectoryStateMachine+0x608>)
 80014cc:	ed83 7b00 	vstr	d7, [r3]

				Nav_vCurrentTargetAngleFollower();
 80014d0:	f001 fb4a 	bl	8002b68 <Nav_vCurrentTargetAngleFollower>
			}
			Nav_TrapezeLinearVelocity2();
 80014d4:	f000 fbfe 	bl	8001cd4 <Nav_TrapezeLinearVelocity2>
			Nav_vTargetDistanceCalculationRoutine();
 80014d8:	f001 faa4 	bl	8002a24 <Nav_vTargetDistanceCalculationRoutine>
 80014dc:	e22e      	b.n	800193c <Nav_vIndependantTrajectoryStateMachine+0x9bc>
 80014de:	bf00      	nop
 80014e0:	47ae147b 	.word	0x47ae147b
 80014e4:	3f747ae1 	.word	0x3f747ae1
 80014e8:	b1f40372 	.word	0xb1f40372
 80014ec:	405ea0f1 	.word	0x405ea0f1
 80014f0:	ceb32be7 	.word	0xceb32be7
 80014f4:	3f61cd19 	.word	0x3f61cd19
 80014f8:	01b00368 	.word	0x01b00368
 80014fc:	409020b1 	.word	0x409020b1
 8001500:	44185dc5 	.word	0x44185dc5
 8001504:	40722b5f 	.word	0x40722b5f
 8001508:	94162a97 	.word	0x94162a97
 800150c:	3f804fa9 	.word	0x3f804fa9
 8001510:	e57d9dbb 	.word	0xe57d9dbb
 8001514:	40a06901 	.word	0x40a06901
 8001518:	00000000 	.word	0x00000000
 800151c:	40668000 	.word	0x40668000
 8001520:	54442d18 	.word	0x54442d18
 8001524:	400921fb 	.word	0x400921fb
 8001528:	2400009e 	.word	0x2400009e
 800152c:	24000320 	.word	0x24000320
 8001530:	24000318 	.word	0x24000318
 8001534:	24000148 	.word	0x24000148
 8001538:	24000150 	.word	0x24000150
 800153c:	24000158 	.word	0x24000158
 8001540:	24000160 	.word	0x24000160
 8001544:	24000168 	.word	0x24000168
 8001548:	24000170 	.word	0x24000170
 800154c:	24000330 	.word	0x24000330
 8001550:	2400009d 	.word	0x2400009d
 8001554:	24000328 	.word	0x24000328
 8001558:	24000238 	.word	0x24000238
 800155c:	24000218 	.word	0x24000218
 8001560:	24000240 	.word	0x24000240
 8001564:	24000220 	.word	0x24000220
 8001568:	24000258 	.word	0x24000258
 800156c:	24000268 	.word	0x24000268
 8001570:	240001a0 	.word	0x240001a0
 8001574:	24000260 	.word	0x24000260
 8001578:	24000228 	.word	0x24000228
 800157c:	24000230 	.word	0x24000230
 8001580:	240001b0 	.word	0x240001b0
 8001584:	240001e8 	.word	0x240001e8
 8001588:	24000280 	.word	0x24000280
		}
		else if ( Nav_TrajectoryMode_en == Nav_ReverseLinearTrajectory_en )
 800158c:	4bbe      	ldr	r3, [pc, #760]	; (8001888 <Nav_vIndependantTrajectoryStateMachine+0x908>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	f040 80d7 	bne.w	8001744 <Nav_vIndependantTrajectoryStateMachine+0x7c4>
		{
			Nav_TargetDistance_mm_d = - sqrt ( pow( Nav_TargetX_mm_d - Nav_CurrentX_mm_d ,2 ) + pow( Nav_TargetY_mm_d - Nav_CurrentY_mm_d , 2 ) ) ;
 8001596:	4bbd      	ldr	r3, [pc, #756]	; (800188c <Nav_vIndependantTrajectoryStateMachine+0x90c>)
 8001598:	ed93 6b00 	vldr	d6, [r3]
 800159c:	4bbc      	ldr	r3, [pc, #752]	; (8001890 <Nav_vIndependantTrajectoryStateMachine+0x910>)
 800159e:	ed93 7b00 	vldr	d7, [r3]
 80015a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80015a6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015aa:	eeb0 0b47 	vmov.f64	d0, d7
 80015ae:	f005 f8c7 	bl	8006740 <pow>
 80015b2:	eeb0 8b40 	vmov.f64	d8, d0
 80015b6:	4bb7      	ldr	r3, [pc, #732]	; (8001894 <Nav_vIndependantTrajectoryStateMachine+0x914>)
 80015b8:	ed93 6b00 	vldr	d6, [r3]
 80015bc:	4bb6      	ldr	r3, [pc, #728]	; (8001898 <Nav_vIndependantTrajectoryStateMachine+0x918>)
 80015be:	ed93 7b00 	vldr	d7, [r3]
 80015c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80015c6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80015ca:	eeb0 0b47 	vmov.f64	d0, d7
 80015ce:	f005 f8b7 	bl	8006740 <pow>
 80015d2:	eeb0 7b40 	vmov.f64	d7, d0
 80015d6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80015da:	eeb0 0b47 	vmov.f64	d0, d7
 80015de:	f005 fb9f 	bl	8006d20 <sqrt>
 80015e2:	eeb0 7b40 	vmov.f64	d7, d0
 80015e6:	eeb1 7b47 	vneg.f64	d7, d7
 80015ea:	4bac      	ldr	r3, [pc, #688]	; (800189c <Nav_vIndependantTrajectoryStateMachine+0x91c>)
 80015ec:	ed83 7b00 	vstr	d7, [r3]
			Nav_RemainingDistance_mm_d = Nav_TargetDistance_mm_d - ( Nav_CurrentTargetDistance_mm_d -  Nav_MeasuredDistance_mm_d );
 80015f0:	4baa      	ldr	r3, [pc, #680]	; (800189c <Nav_vIndependantTrajectoryStateMachine+0x91c>)
 80015f2:	ed93 6b00 	vldr	d6, [r3]
 80015f6:	4baa      	ldr	r3, [pc, #680]	; (80018a0 <Nav_vIndependantTrajectoryStateMachine+0x920>)
 80015f8:	ed93 5b00 	vldr	d5, [r3]
 80015fc:	4ba9      	ldr	r3, [pc, #676]	; (80018a4 <Nav_vIndependantTrajectoryStateMachine+0x924>)
 80015fe:	ed93 7b00 	vldr	d7, [r3]
 8001602:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001606:	ee36 7b47 	vsub.f64	d7, d6, d7
 800160a:	4ba7      	ldr	r3, [pc, #668]	; (80018a8 <Nav_vIndependantTrajectoryStateMachine+0x928>)
 800160c:	ed83 7b00 	vstr	d7, [r3]
			Nav_LimitDistance_mm_d = sqrt ( pow( Nav_TargetX_mm_d - Nav_CurrentTargetX_mm_d ,2 ) + pow( Nav_TargetY_mm_d - Nav_CurrentTargetY_mm_d , 2 ) ) ;
 8001610:	4b9e      	ldr	r3, [pc, #632]	; (800188c <Nav_vIndependantTrajectoryStateMachine+0x90c>)
 8001612:	ed93 6b00 	vldr	d6, [r3]
 8001616:	4ba5      	ldr	r3, [pc, #660]	; (80018ac <Nav_vIndependantTrajectoryStateMachine+0x92c>)
 8001618:	ed93 7b00 	vldr	d7, [r3]
 800161c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001620:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001624:	eeb0 0b47 	vmov.f64	d0, d7
 8001628:	f005 f88a 	bl	8006740 <pow>
 800162c:	eeb0 8b40 	vmov.f64	d8, d0
 8001630:	4b98      	ldr	r3, [pc, #608]	; (8001894 <Nav_vIndependantTrajectoryStateMachine+0x914>)
 8001632:	ed93 6b00 	vldr	d6, [r3]
 8001636:	4b9e      	ldr	r3, [pc, #632]	; (80018b0 <Nav_vIndependantTrajectoryStateMachine+0x930>)
 8001638:	ed93 7b00 	vldr	d7, [r3]
 800163c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001640:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001644:	eeb0 0b47 	vmov.f64	d0, d7
 8001648:	f005 f87a 	bl	8006740 <pow>
 800164c:	eeb0 7b40 	vmov.f64	d7, d0
 8001650:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001654:	eeb0 0b47 	vmov.f64	d0, d7
 8001658:	f005 fb62 	bl	8006d20 <sqrt>
 800165c:	eeb0 7b40 	vmov.f64	d7, d0
 8001660:	4b94      	ldr	r3, [pc, #592]	; (80018b4 <Nav_vIndependantTrajectoryStateMachine+0x934>)
 8001662:	ed83 7b00 	vstr	d7, [r3]
			if( Nav_LimitDistance_mm_d > 10.0)
 8001666:	4b93      	ldr	r3, [pc, #588]	; (80018b4 <Nav_vIndependantTrajectoryStateMachine+0x934>)
 8001668:	ed93 7b00 	vldr	d7, [r3]
 800166c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001670:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	dd5f      	ble.n	800173a <Nav_vIndependantTrajectoryStateMachine+0x7ba>
			{
				Nav_CurrentTargetX_mm_d = Nav_CurrentX_mm_d + ( Nav_CurrentTargetDistance_mm_d -  Nav_MeasuredDistance_mm_d )*cos( Nav_CurrentAngle_rad_d ) ;
 800167a:	4b89      	ldr	r3, [pc, #548]	; (80018a0 <Nav_vIndependantTrajectoryStateMachine+0x920>)
 800167c:	ed93 6b00 	vldr	d6, [r3]
 8001680:	4b88      	ldr	r3, [pc, #544]	; (80018a4 <Nav_vIndependantTrajectoryStateMachine+0x924>)
 8001682:	ed93 7b00 	vldr	d7, [r3]
 8001686:	ee36 8b47 	vsub.f64	d8, d6, d7
 800168a:	4b8b      	ldr	r3, [pc, #556]	; (80018b8 <Nav_vIndependantTrajectoryStateMachine+0x938>)
 800168c:	ed93 7b00 	vldr	d7, [r3]
 8001690:	eeb0 0b47 	vmov.f64	d0, d7
 8001694:	f005 faa8 	bl	8006be8 <cos>
 8001698:	eeb0 7b40 	vmov.f64	d7, d0
 800169c:	ee28 6b07 	vmul.f64	d6, d8, d7
 80016a0:	4b7b      	ldr	r3, [pc, #492]	; (8001890 <Nav_vIndependantTrajectoryStateMachine+0x910>)
 80016a2:	ed93 7b00 	vldr	d7, [r3]
 80016a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016aa:	4b80      	ldr	r3, [pc, #512]	; (80018ac <Nav_vIndependantTrajectoryStateMachine+0x92c>)
 80016ac:	ed83 7b00 	vstr	d7, [r3]
				Nav_CurrentTargetY_mm_d = Nav_CurrentY_mm_d + ( Nav_CurrentTargetDistance_mm_d -  Nav_MeasuredDistance_mm_d )*sin( Nav_CurrentAngle_rad_d ) ;
 80016b0:	4b7b      	ldr	r3, [pc, #492]	; (80018a0 <Nav_vIndependantTrajectoryStateMachine+0x920>)
 80016b2:	ed93 6b00 	vldr	d6, [r3]
 80016b6:	4b7b      	ldr	r3, [pc, #492]	; (80018a4 <Nav_vIndependantTrajectoryStateMachine+0x924>)
 80016b8:	ed93 7b00 	vldr	d7, [r3]
 80016bc:	ee36 8b47 	vsub.f64	d8, d6, d7
 80016c0:	4b7d      	ldr	r3, [pc, #500]	; (80018b8 <Nav_vIndependantTrajectoryStateMachine+0x938>)
 80016c2:	ed93 7b00 	vldr	d7, [r3]
 80016c6:	eeb0 0b47 	vmov.f64	d0, d7
 80016ca:	f005 fad9 	bl	8006c80 <sin>
 80016ce:	eeb0 7b40 	vmov.f64	d7, d0
 80016d2:	ee28 6b07 	vmul.f64	d6, d8, d7
 80016d6:	4b70      	ldr	r3, [pc, #448]	; (8001898 <Nav_vIndependantTrajectoryStateMachine+0x918>)
 80016d8:	ed93 7b00 	vldr	d7, [r3]
 80016dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016e0:	4b73      	ldr	r3, [pc, #460]	; (80018b0 <Nav_vIndependantTrajectoryStateMachine+0x930>)
 80016e2:	ed83 7b00 	vstr	d7, [r3]
				Nav_CurrentTargetAngle_deg_d = ( atan2( (Nav_CurrentTargetY_mm_d - Nav_TargetY_mm_d ) ,(Nav_CurrentTargetX_mm_d - Nav_TargetX_mm_d ) ) * 180.0 ) / M_PI;
 80016e6:	4b72      	ldr	r3, [pc, #456]	; (80018b0 <Nav_vIndependantTrajectoryStateMachine+0x930>)
 80016e8:	ed93 6b00 	vldr	d6, [r3]
 80016ec:	4b69      	ldr	r3, [pc, #420]	; (8001894 <Nav_vIndependantTrajectoryStateMachine+0x914>)
 80016ee:	ed93 7b00 	vldr	d7, [r3]
 80016f2:	ee36 5b47 	vsub.f64	d5, d6, d7
 80016f6:	4b6d      	ldr	r3, [pc, #436]	; (80018ac <Nav_vIndependantTrajectoryStateMachine+0x92c>)
 80016f8:	ed93 6b00 	vldr	d6, [r3]
 80016fc:	4b63      	ldr	r3, [pc, #396]	; (800188c <Nav_vIndependantTrajectoryStateMachine+0x90c>)
 80016fe:	ed93 7b00 	vldr	d7, [r3]
 8001702:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001706:	eeb0 1b47 	vmov.f64	d1, d7
 800170a:	eeb0 0b45 	vmov.f64	d0, d5
 800170e:	f005 fb03 	bl	8006d18 <atan2>
 8001712:	eeb0 7b40 	vmov.f64	d7, d0
 8001716:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8001878 <Nav_vIndependantTrajectoryStateMachine+0x8f8>
 800171a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800171e:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8001880 <Nav_vIndependantTrajectoryStateMachine+0x900>
 8001722:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001726:	4b65      	ldr	r3, [pc, #404]	; (80018bc <Nav_vIndependantTrajectoryStateMachine+0x93c>)
 8001728:	ed83 7b00 	vstr	d7, [r3]
				Nav_Test_enter_2 ++ ;
 800172c:	4b64      	ldr	r3, [pc, #400]	; (80018c0 <Nav_vIndependantTrajectoryStateMachine+0x940>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	3301      	adds	r3, #1
 8001732:	4a63      	ldr	r2, [pc, #396]	; (80018c0 <Nav_vIndependantTrajectoryStateMachine+0x940>)
 8001734:	6013      	str	r3, [r2, #0]
				Nav_vCurrentTargetAngleFollower();
 8001736:	f001 fa17 	bl	8002b68 <Nav_vCurrentTargetAngleFollower>
				//Nav_CurrentTargetAngle_deg_d=0;
			}
			Nav_TrapezeReverseLinearVelocity2();
 800173a:	f000 fc6f 	bl	800201c <Nav_TrapezeReverseLinearVelocity2>
			Nav_vTargetDistanceCalculationRoutine();
 800173e:	f001 f971 	bl	8002a24 <Nav_vTargetDistanceCalculationRoutine>
 8001742:	e0fb      	b.n	800193c <Nav_vIndependantTrajectoryStateMachine+0x9bc>
			//			Nav_Going_BackwardTargetY_mm_d = 2 * Nav_CurrentY_mm_d - Nav_TargetY_mm_d ;
			//			Nav_TargetAngle_deg_d = ( atan2( (Nav_Going_BackwardTargetY_mm_d - Nav_CurrentY_mm_d) ,(Nav_Going_BackwardTargetX_mm_d - Nav_CurrentX_mm_d ) ) * 180.0 ) / M_PI;


		}
		else if ( Nav_TrajectoryMode_en == Nav_ForwardAngularTrajectory_en )
 8001744:	4b50      	ldr	r3, [pc, #320]	; (8001888 <Nav_vIndependantTrajectoryStateMachine+0x908>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d161      	bne.n	8001810 <Nav_vIndependantTrajectoryStateMachine+0x890>
		{
			if ( Nav_GoToXY_State_en == Nav_GoToXY_Rotate_en ) // because in the rotate after state we need to go to a constant target angle
 800174c:	4b5d      	ldr	r3, [pc, #372]	; (80018c4 <Nav_vIndependantTrajectoryStateMachine+0x944>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d14b      	bne.n	80017ec <Nav_vIndependantTrajectoryStateMachine+0x86c>
			{
				if (ROBOT_Direction == ROBOT_Going_Forward)
 8001754:	4b5c      	ldr	r3, [pc, #368]	; (80018c8 <Nav_vIndependantTrajectoryStateMachine+0x948>)
 8001756:	f993 3000 	ldrsb.w	r3, [r3]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d123      	bne.n	80017a6 <Nav_vIndependantTrajectoryStateMachine+0x826>
				{
					Nav_TargetAngle_deg_d = ( atan2( (Nav_TargetY_mm_d - Nav_CurrentY_mm_d) ,(Nav_TargetX_mm_d - Nav_CurrentX_mm_d ) ) * 180.0 ) / M_PI;
 800175e:	4b4d      	ldr	r3, [pc, #308]	; (8001894 <Nav_vIndependantTrajectoryStateMachine+0x914>)
 8001760:	ed93 6b00 	vldr	d6, [r3]
 8001764:	4b4c      	ldr	r3, [pc, #304]	; (8001898 <Nav_vIndependantTrajectoryStateMachine+0x918>)
 8001766:	ed93 7b00 	vldr	d7, [r3]
 800176a:	ee36 5b47 	vsub.f64	d5, d6, d7
 800176e:	4b47      	ldr	r3, [pc, #284]	; (800188c <Nav_vIndependantTrajectoryStateMachine+0x90c>)
 8001770:	ed93 6b00 	vldr	d6, [r3]
 8001774:	4b46      	ldr	r3, [pc, #280]	; (8001890 <Nav_vIndependantTrajectoryStateMachine+0x910>)
 8001776:	ed93 7b00 	vldr	d7, [r3]
 800177a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800177e:	eeb0 1b47 	vmov.f64	d1, d7
 8001782:	eeb0 0b45 	vmov.f64	d0, d5
 8001786:	f005 fac7 	bl	8006d18 <atan2>
 800178a:	eeb0 7b40 	vmov.f64	d7, d0
 800178e:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8001878 <Nav_vIndependantTrajectoryStateMachine+0x8f8>
 8001792:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001796:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8001880 <Nav_vIndependantTrajectoryStateMachine+0x900>
 800179a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800179e:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <Nav_vIndependantTrajectoryStateMachine+0x94c>)
 80017a0:	ed83 7b00 	vstr	d7, [r3]
 80017a4:	e022      	b.n	80017ec <Nav_vIndependantTrajectoryStateMachine+0x86c>
				}
				else
				{
					Nav_TargetAngle_deg_d = ( atan2( (Nav_CurrentY_mm_d - Nav_TargetY_mm_d) ,(Nav_CurrentX_mm_d - Nav_TargetX_mm_d ) ) * 180.0 ) / M_PI;
 80017a6:	4b3c      	ldr	r3, [pc, #240]	; (8001898 <Nav_vIndependantTrajectoryStateMachine+0x918>)
 80017a8:	ed93 6b00 	vldr	d6, [r3]
 80017ac:	4b39      	ldr	r3, [pc, #228]	; (8001894 <Nav_vIndependantTrajectoryStateMachine+0x914>)
 80017ae:	ed93 7b00 	vldr	d7, [r3]
 80017b2:	ee36 5b47 	vsub.f64	d5, d6, d7
 80017b6:	4b36      	ldr	r3, [pc, #216]	; (8001890 <Nav_vIndependantTrajectoryStateMachine+0x910>)
 80017b8:	ed93 6b00 	vldr	d6, [r3]
 80017bc:	4b33      	ldr	r3, [pc, #204]	; (800188c <Nav_vIndependantTrajectoryStateMachine+0x90c>)
 80017be:	ed93 7b00 	vldr	d7, [r3]
 80017c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017c6:	eeb0 1b47 	vmov.f64	d1, d7
 80017ca:	eeb0 0b45 	vmov.f64	d0, d5
 80017ce:	f005 faa3 	bl	8006d18 <atan2>
 80017d2:	eeb0 7b40 	vmov.f64	d7, d0
 80017d6:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8001878 <Nav_vIndependantTrajectoryStateMachine+0x8f8>
 80017da:	ee27 6b06 	vmul.f64	d6, d7, d6
 80017de:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8001880 <Nav_vIndependantTrajectoryStateMachine+0x900>
 80017e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017e6:	4b39      	ldr	r3, [pc, #228]	; (80018cc <Nav_vIndependantTrajectoryStateMachine+0x94c>)
 80017e8:	ed83 7b00 	vstr	d7, [r3]
				}
			}
			Nav_RemainingAngle_deg_d =  Nav_TargetAngle_deg_d - Nav_CurrentTargetAngle_deg_d  ;
 80017ec:	4b37      	ldr	r3, [pc, #220]	; (80018cc <Nav_vIndependantTrajectoryStateMachine+0x94c>)
 80017ee:	ed93 6b00 	vldr	d6, [r3]
 80017f2:	4b32      	ldr	r3, [pc, #200]	; (80018bc <Nav_vIndependantTrajectoryStateMachine+0x93c>)
 80017f4:	ed93 7b00 	vldr	d7, [r3]
 80017f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017fc:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <Nav_vIndependantTrajectoryStateMachine+0x950>)
 80017fe:	ed83 7b00 	vstr	d7, [r3]
			Nav_vSaturateRemainingAngle();
 8001802:	f001 f94d 	bl	8002aa0 <Nav_vSaturateRemainingAngle>
			Nav_TrapezeAngularVelocity2();
 8001806:	f000 fdad 	bl	8002364 <Nav_TrapezeAngularVelocity2>
			Nav_vTargetAngleCalculationRoutine();
 800180a:	f001 f929 	bl	8002a60 <Nav_vTargetAngleCalculationRoutine>
 800180e:	e095      	b.n	800193c <Nav_vIndependantTrajectoryStateMachine+0x9bc>
		}
		else if ( Nav_TrajectoryMode_en == Nav_ReverseAngularTrajectory_en )
 8001810:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <Nav_vIndependantTrajectoryStateMachine+0x908>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b03      	cmp	r3, #3
 8001816:	f040 8091 	bne.w	800193c <Nav_vIndependantTrajectoryStateMachine+0x9bc>
		{
			if ( Nav_GoToXY_State_en == Nav_GoToXY_Rotate_en )
 800181a:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <Nav_vIndependantTrajectoryStateMachine+0x944>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d17b      	bne.n	800191a <Nav_vIndependantTrajectoryStateMachine+0x99a>
			{
				if ( ROBOT_Direction == ROBOT_Going_Forward)
 8001822:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <Nav_vIndependantTrajectoryStateMachine+0x948>)
 8001824:	f993 3000 	ldrsb.w	r3, [r3]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d153      	bne.n	80018d4 <Nav_vIndependantTrajectoryStateMachine+0x954>
				{
					Nav_TargetAngle_deg_d = ( atan2( (Nav_TargetY_mm_d - Nav_CurrentY_mm_d) ,(Nav_TargetX_mm_d - Nav_CurrentX_mm_d ) ) * 180.0 ) / M_PI;
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <Nav_vIndependantTrajectoryStateMachine+0x914>)
 800182e:	ed93 6b00 	vldr	d6, [r3]
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <Nav_vIndependantTrajectoryStateMachine+0x918>)
 8001834:	ed93 7b00 	vldr	d7, [r3]
 8001838:	ee36 5b47 	vsub.f64	d5, d6, d7
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <Nav_vIndependantTrajectoryStateMachine+0x90c>)
 800183e:	ed93 6b00 	vldr	d6, [r3]
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <Nav_vIndependantTrajectoryStateMachine+0x910>)
 8001844:	ed93 7b00 	vldr	d7, [r3]
 8001848:	ee36 7b47 	vsub.f64	d7, d6, d7
 800184c:	eeb0 1b47 	vmov.f64	d1, d7
 8001850:	eeb0 0b45 	vmov.f64	d0, d5
 8001854:	f005 fa60 	bl	8006d18 <atan2>
 8001858:	eeb0 7b40 	vmov.f64	d7, d0
 800185c:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8001878 <Nav_vIndependantTrajectoryStateMachine+0x8f8>
 8001860:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001864:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8001880 <Nav_vIndependantTrajectoryStateMachine+0x900>
 8001868:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <Nav_vIndependantTrajectoryStateMachine+0x94c>)
 800186e:	ed83 7b00 	vstr	d7, [r3]
 8001872:	e052      	b.n	800191a <Nav_vIndependantTrajectoryStateMachine+0x99a>
 8001874:	f3af 8000 	nop.w
 8001878:	00000000 	.word	0x00000000
 800187c:	40668000 	.word	0x40668000
 8001880:	54442d18 	.word	0x54442d18
 8001884:	400921fb 	.word	0x400921fb
 8001888:	2400009e 	.word	0x2400009e
 800188c:	24000238 	.word	0x24000238
 8001890:	24000218 	.word	0x24000218
 8001894:	24000240 	.word	0x24000240
 8001898:	24000220 	.word	0x24000220
 800189c:	24000258 	.word	0x24000258
 80018a0:	24000268 	.word	0x24000268
 80018a4:	240001a0 	.word	0x240001a0
 80018a8:	24000260 	.word	0x24000260
 80018ac:	24000228 	.word	0x24000228
 80018b0:	24000230 	.word	0x24000230
 80018b4:	240001b0 	.word	0x240001b0
 80018b8:	240001e8 	.word	0x240001e8
 80018bc:	24000280 	.word	0x24000280
 80018c0:	24000250 	.word	0x24000250
 80018c4:	2400009f 	.word	0x2400009f
 80018c8:	2400000b 	.word	0x2400000b
 80018cc:	24000278 	.word	0x24000278
 80018d0:	240001d8 	.word	0x240001d8
				}
				else
				{
					Nav_TargetAngle_deg_d = ( atan2( (Nav_CurrentY_mm_d - Nav_TargetY_mm_d) ,(Nav_CurrentX_mm_d - Nav_TargetX_mm_d ) ) * 180.0 ) / M_PI;
 80018d4:	4bb4      	ldr	r3, [pc, #720]	; (8001ba8 <Nav_vIndependantTrajectoryStateMachine+0xc28>)
 80018d6:	ed93 6b00 	vldr	d6, [r3]
 80018da:	4bb4      	ldr	r3, [pc, #720]	; (8001bac <Nav_vIndependantTrajectoryStateMachine+0xc2c>)
 80018dc:	ed93 7b00 	vldr	d7, [r3]
 80018e0:	ee36 5b47 	vsub.f64	d5, d6, d7
 80018e4:	4bb2      	ldr	r3, [pc, #712]	; (8001bb0 <Nav_vIndependantTrajectoryStateMachine+0xc30>)
 80018e6:	ed93 6b00 	vldr	d6, [r3]
 80018ea:	4bb2      	ldr	r3, [pc, #712]	; (8001bb4 <Nav_vIndependantTrajectoryStateMachine+0xc34>)
 80018ec:	ed93 7b00 	vldr	d7, [r3]
 80018f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018f4:	eeb0 1b47 	vmov.f64	d1, d7
 80018f8:	eeb0 0b45 	vmov.f64	d0, d5
 80018fc:	f005 fa0c 	bl	8006d18 <atan2>
 8001900:	eeb0 7b40 	vmov.f64	d7, d0
 8001904:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 8001b80 <Nav_vIndependantTrajectoryStateMachine+0xc00>
 8001908:	ee27 6b06 	vmul.f64	d6, d7, d6
 800190c:	ed9f 5b9e 	vldr	d5, [pc, #632]	; 8001b88 <Nav_vIndependantTrajectoryStateMachine+0xc08>
 8001910:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001914:	4ba8      	ldr	r3, [pc, #672]	; (8001bb8 <Nav_vIndependantTrajectoryStateMachine+0xc38>)
 8001916:	ed83 7b00 	vstr	d7, [r3]
				}
			}
			Nav_RemainingAngle_deg_d =  Nav_TargetAngle_deg_d - Nav_CurrentTargetAngle_deg_d  ;
 800191a:	4ba7      	ldr	r3, [pc, #668]	; (8001bb8 <Nav_vIndependantTrajectoryStateMachine+0xc38>)
 800191c:	ed93 6b00 	vldr	d6, [r3]
 8001920:	4ba6      	ldr	r3, [pc, #664]	; (8001bbc <Nav_vIndependantTrajectoryStateMachine+0xc3c>)
 8001922:	ed93 7b00 	vldr	d7, [r3]
 8001926:	ee36 7b47 	vsub.f64	d7, d6, d7
 800192a:	4ba5      	ldr	r3, [pc, #660]	; (8001bc0 <Nav_vIndependantTrajectoryStateMachine+0xc40>)
 800192c:	ed83 7b00 	vstr	d7, [r3]
			Nav_vSaturateRemainingAngle();
 8001930:	f001 f8b6 	bl	8002aa0 <Nav_vSaturateRemainingAngle>
			Nav_TrapezeReverseAngularVelocity2();
 8001934:	f000 fec8 	bl	80026c8 <Nav_TrapezeReverseAngularVelocity2>
			Nav_vTargetAngleCalculationRoutine();
 8001938:	f001 f892 	bl	8002a60 <Nav_vTargetAngleCalculationRoutine>
		}
		if( ( Nav_CurrentSample_u32 > Nav_AccelerationSamples_u32 )
 800193c:	4ba1      	ldr	r3, [pc, #644]	; (8001bc4 <Nav_vIndependantTrajectoryStateMachine+0xc44>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4ba1      	ldr	r3, [pc, #644]	; (8001bc8 <Nav_vIndependantTrajectoryStateMachine+0xc48>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	f240 8119 	bls.w	8001b7c <Nav_vIndependantTrajectoryStateMachine+0xbfc>
				&& ( Nav_TargetLinearVelocity_d == 0 )
 800194a:	4ba0      	ldr	r3, [pc, #640]	; (8001bcc <Nav_vIndependantTrajectoryStateMachine+0xc4c>)
 800194c:	ed93 7b00 	vldr	d7, [r3]
 8001950:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001958:	f040 8110 	bne.w	8001b7c <Nav_vIndependantTrajectoryStateMachine+0xbfc>
				&& ( fabs (Nav_TargetAngularVelocity_d) < 0.0001 )
 800195c:	4b9c      	ldr	r3, [pc, #624]	; (8001bd0 <Nav_vIndependantTrajectoryStateMachine+0xc50>)
 800195e:	ed93 7b00 	vldr	d7, [r3]
 8001962:	eeb0 7bc7 	vabs.f64	d7, d7
 8001966:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8001b90 <Nav_vIndependantTrajectoryStateMachine+0xc10>
 800196a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800196e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001972:	d400      	bmi.n	8001976 <Nav_vIndependantTrajectoryStateMachine+0x9f6>
		{
			Nav_Counter_u32 = 0 ;
			Nav_TrajectoryState_en = Nav_Trajectory_WaitAfterArriving_en;
		}

	}break;
 8001974:	e102      	b.n	8001b7c <Nav_vIndependantTrajectoryStateMachine+0xbfc>
				&& ( Nav_MeasuredVelocity_mm_d == 0 )
 8001976:	4b97      	ldr	r3, [pc, #604]	; (8001bd4 <Nav_vIndependantTrajectoryStateMachine+0xc54>)
 8001978:	ed93 7b00 	vldr	d7, [r3]
 800197c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001984:	f040 80fa 	bne.w	8001b7c <Nav_vIndependantTrajectoryStateMachine+0xbfc>
				&& ( Nav_MeasuredAngularVelocity_deg_d == 0 )
 8001988:	4b93      	ldr	r3, [pc, #588]	; (8001bd8 <Nav_vIndependantTrajectoryStateMachine+0xc58>)
 800198a:	ed93 7b00 	vldr	d7, [r3]
 800198e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001996:	f040 80f1 	bne.w	8001b7c <Nav_vIndependantTrajectoryStateMachine+0xbfc>
				&& ( fabs( Nav_DistanceError_d ) < 1.5 )
 800199a:	4b90      	ldr	r3, [pc, #576]	; (8001bdc <Nav_vIndependantTrajectoryStateMachine+0xc5c>)
 800199c:	ed93 7b00 	vldr	d7, [r3]
 80019a0:	eeb0 7bc7 	vabs.f64	d7, d7
 80019a4:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80019a8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80019ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b0:	d400      	bmi.n	80019b4 <Nav_vIndependantTrajectoryStateMachine+0xa34>
	}break;
 80019b2:	e0e3      	b.n	8001b7c <Nav_vIndependantTrajectoryStateMachine+0xbfc>
				&& ( fabs( Nav_AngleError_d ) < 1.5 ) )
 80019b4:	4b8a      	ldr	r3, [pc, #552]	; (8001be0 <Nav_vIndependantTrajectoryStateMachine+0xc60>)
 80019b6:	ed93 7b00 	vldr	d7, [r3]
 80019ba:	eeb0 7bc7 	vabs.f64	d7, d7
 80019be:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80019c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	d400      	bmi.n	80019ce <Nav_vIndependantTrajectoryStateMachine+0xa4e>
	}break;
 80019cc:	e0d6      	b.n	8001b7c <Nav_vIndependantTrajectoryStateMachine+0xbfc>
			Nav_Counter_u32 = 0 ;
 80019ce:	4b85      	ldr	r3, [pc, #532]	; (8001be4 <Nav_vIndependantTrajectoryStateMachine+0xc64>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
			Nav_TrajectoryState_en = Nav_Trajectory_WaitAfterArriving_en;
 80019d4:	4b84      	ldr	r3, [pc, #528]	; (8001be8 <Nav_vIndependantTrajectoryStateMachine+0xc68>)
 80019d6:	2207      	movs	r2, #7
 80019d8:	701a      	strb	r2, [r3, #0]
	}break;
 80019da:	e0cf      	b.n	8001b7c <Nav_vIndependantTrajectoryStateMachine+0xbfc>
	case Nav_Trajectory_OrderSuddenStop_en :
	{
		Nav_TrapezePhase_en = Nav_Trapeze_OrderUrgentDecelerating_en ;
 80019dc:	4b83      	ldr	r3, [pc, #524]	; (8001bec <Nav_vIndependantTrajectoryStateMachine+0xc6c>)
 80019de:	2204      	movs	r2, #4
 80019e0:	701a      	strb	r2, [r3, #0]

		Nav_TrajectoryState_en = Nav_Trajectory_ExecuteSuddenStop_en ;
 80019e2:	4b81      	ldr	r3, [pc, #516]	; (8001be8 <Nav_vIndependantTrajectoryStateMachine+0xc68>)
 80019e4:	2206      	movs	r2, #6
 80019e6:	701a      	strb	r2, [r3, #0]
		if ( Nav_TrajectoryMode_en == Nav_ForwardLinearTrajectory_en )
 80019e8:	4b81      	ldr	r3, [pc, #516]	; (8001bf0 <Nav_vIndependantTrajectoryStateMachine+0xc70>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d106      	bne.n	80019fe <Nav_vIndependantTrajectoryStateMachine+0xa7e>
		{
			Nav_Acc_d = 16000 * SAMPLING_PERIOD * SAMPLING_PERIOD ;//4000
 80019f0:	4980      	ldr	r1, [pc, #512]	; (8001bf4 <Nav_vIndependantTrajectoryStateMachine+0xc74>)
 80019f2:	a369      	add	r3, pc, #420	; (adr r3, 8001b98 <Nav_vIndependantTrajectoryStateMachine+0xc18>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	e9c1 2300 	strd	r2, r3, [r1]
 80019fc:	e037      	b.n	8001a6e <Nav_vIndependantTrajectoryStateMachine+0xaee>
		}
		else if ( Nav_TrajectoryMode_en == Nav_ReverseLinearTrajectory_en )
 80019fe:	4b7c      	ldr	r3, [pc, #496]	; (8001bf0 <Nav_vIndependantTrajectoryStateMachine+0xc70>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d10e      	bne.n	8001a24 <Nav_vIndependantTrajectoryStateMachine+0xaa4>
		{
			Nav_Acc_d = Nav_Acc_d * SAMPLING_PERIOD * SAMPLING_PERIOD ;
 8001a06:	4b7b      	ldr	r3, [pc, #492]	; (8001bf4 <Nav_vIndependantTrajectoryStateMachine+0xc74>)
 8001a08:	ed93 7b00 	vldr	d7, [r3]
 8001a0c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8001ba0 <Nav_vIndependantTrajectoryStateMachine+0xc20>
 8001a10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a14:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8001ba0 <Nav_vIndependantTrajectoryStateMachine+0xc20>
 8001a18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a1c:	4b75      	ldr	r3, [pc, #468]	; (8001bf4 <Nav_vIndependantTrajectoryStateMachine+0xc74>)
 8001a1e:	ed83 7b00 	vstr	d7, [r3]
 8001a22:	e024      	b.n	8001a6e <Nav_vIndependantTrajectoryStateMachine+0xaee>
		}
		else if ( Nav_TrajectoryMode_en == Nav_ForwardAngularTrajectory_en )
 8001a24:	4b72      	ldr	r3, [pc, #456]	; (8001bf0 <Nav_vIndependantTrajectoryStateMachine+0xc70>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d10e      	bne.n	8001a4a <Nav_vIndependantTrajectoryStateMachine+0xaca>
		{
			Nav_AngularAcc_d = Nav_AngularAcc_d * SAMPLING_PERIOD * SAMPLING_PERIOD;
 8001a2c:	4b72      	ldr	r3, [pc, #456]	; (8001bf8 <Nav_vIndependantTrajectoryStateMachine+0xc78>)
 8001a2e:	ed93 7b00 	vldr	d7, [r3]
 8001a32:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8001ba0 <Nav_vIndependantTrajectoryStateMachine+0xc20>
 8001a36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a3a:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8001ba0 <Nav_vIndependantTrajectoryStateMachine+0xc20>
 8001a3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a42:	4b6d      	ldr	r3, [pc, #436]	; (8001bf8 <Nav_vIndependantTrajectoryStateMachine+0xc78>)
 8001a44:	ed83 7b00 	vstr	d7, [r3]
 8001a48:	e011      	b.n	8001a6e <Nav_vIndependantTrajectoryStateMachine+0xaee>
		}
		else if ( Nav_TrajectoryMode_en == Nav_ReverseAngularTrajectory_en )
 8001a4a:	4b69      	ldr	r3, [pc, #420]	; (8001bf0 <Nav_vIndependantTrajectoryStateMachine+0xc70>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d10d      	bne.n	8001a6e <Nav_vIndependantTrajectoryStateMachine+0xaee>
		{
			Nav_AngularAcc_d = Nav_AngularAcc_d * SAMPLING_PERIOD * SAMPLING_PERIOD;
 8001a52:	4b69      	ldr	r3, [pc, #420]	; (8001bf8 <Nav_vIndependantTrajectoryStateMachine+0xc78>)
 8001a54:	ed93 7b00 	vldr	d7, [r3]
 8001a58:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8001ba0 <Nav_vIndependantTrajectoryStateMachine+0xc20>
 8001a5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a60:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8001ba0 <Nav_vIndependantTrajectoryStateMachine+0xc20>
 8001a64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a68:	4b63      	ldr	r3, [pc, #396]	; (8001bf8 <Nav_vIndependantTrajectoryStateMachine+0xc78>)
 8001a6a:	ed83 7b00 	vstr	d7, [r3]
		}
		Nav_CurrentSample_u32++;
 8001a6e:	4b55      	ldr	r3, [pc, #340]	; (8001bc4 <Nav_vIndependantTrajectoryStateMachine+0xc44>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	3301      	adds	r3, #1
 8001a74:	4a53      	ldr	r2, [pc, #332]	; (8001bc4 <Nav_vIndependantTrajectoryStateMachine+0xc44>)
 8001a76:	6013      	str	r3, [r2, #0]
		if (  Nav_TrajectoryMode_en == Nav_ForwardLinearTrajectory_en )
 8001a78:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <Nav_vIndependantTrajectoryStateMachine+0xc70>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d104      	bne.n	8001a8a <Nav_vIndependantTrajectoryStateMachine+0xb0a>
		{
			Nav_TrapezeLinearVelocity2();
 8001a80:	f000 f928 	bl	8001cd4 <Nav_TrapezeLinearVelocity2>
			Nav_vTargetDistanceCalculationRoutine();
 8001a84:	f000 ffce 	bl	8002a24 <Nav_vTargetDistanceCalculationRoutine>
		else if ( Nav_TrajectoryMode_en == Nav_ReverseAngularTrajectory_en )
		{
			Nav_TrapezeReverseAngularVelocity2();
			Nav_vTargetAngleCalculationRoutine();
		}
	}break;
 8001a88:	e0b8      	b.n	8001bfc <Nav_vIndependantTrajectoryStateMachine+0xc7c>
		else if ( Nav_TrajectoryMode_en == Nav_ReverseLinearTrajectory_en )
 8001a8a:	4b59      	ldr	r3, [pc, #356]	; (8001bf0 <Nav_vIndependantTrajectoryStateMachine+0xc70>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	f000 80b4 	beq.w	8001bfc <Nav_vIndependantTrajectoryStateMachine+0xc7c>
		else if ( Nav_TrajectoryMode_en == Nav_ForwardAngularTrajectory_en )
 8001a94:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <Nav_vIndependantTrajectoryStateMachine+0xc70>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d104      	bne.n	8001aa6 <Nav_vIndependantTrajectoryStateMachine+0xb26>
			Nav_TrapezeAngularVelocity2();
 8001a9c:	f000 fc62 	bl	8002364 <Nav_TrapezeAngularVelocity2>
			Nav_vTargetAngleCalculationRoutine();
 8001aa0:	f000 ffde 	bl	8002a60 <Nav_vTargetAngleCalculationRoutine>
	}break;
 8001aa4:	e0aa      	b.n	8001bfc <Nav_vIndependantTrajectoryStateMachine+0xc7c>
		else if ( Nav_TrajectoryMode_en == Nav_ReverseAngularTrajectory_en )
 8001aa6:	4b52      	ldr	r3, [pc, #328]	; (8001bf0 <Nav_vIndependantTrajectoryStateMachine+0xc70>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	f040 80a6 	bne.w	8001bfc <Nav_vIndependantTrajectoryStateMachine+0xc7c>
			Nav_TrapezeReverseAngularVelocity2();
 8001ab0:	f000 fe0a 	bl	80026c8 <Nav_TrapezeReverseAngularVelocity2>
			Nav_vTargetAngleCalculationRoutine();
 8001ab4:	f000 ffd4 	bl	8002a60 <Nav_vTargetAngleCalculationRoutine>
	}break;
 8001ab8:	e0a0      	b.n	8001bfc <Nav_vIndependantTrajectoryStateMachine+0xc7c>
	case Nav_Trajectory_ExecuteSuddenStop_en :
	{

		Nav_CurrentSample_u32++;
 8001aba:	4b42      	ldr	r3, [pc, #264]	; (8001bc4 <Nav_vIndependantTrajectoryStateMachine+0xc44>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	4a40      	ldr	r2, [pc, #256]	; (8001bc4 <Nav_vIndependantTrajectoryStateMachine+0xc44>)
 8001ac2:	6013      	str	r3, [r2, #0]
		if ( ( Nav_TrajectoryMode_en == Nav_ForwardLinearTrajectory_en ) || ( Nav_TrajectoryMode_en == Nav_ReverseLinearTrajectory_en ) )
 8001ac4:	4b4a      	ldr	r3, [pc, #296]	; (8001bf0 <Nav_vIndependantTrajectoryStateMachine+0xc70>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <Nav_vIndependantTrajectoryStateMachine+0xb54>
 8001acc:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <Nav_vIndependantTrajectoryStateMachine+0xc70>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d104      	bne.n	8001ade <Nav_vIndependantTrajectoryStateMachine+0xb5e>
		{
			Nav_TrapezeLinearVelocity2();
 8001ad4:	f000 f8fe 	bl	8001cd4 <Nav_TrapezeLinearVelocity2>
			Nav_vTargetDistanceCalculationRoutine();
 8001ad8:	f000 ffa4 	bl	8002a24 <Nav_vTargetDistanceCalculationRoutine>
 8001adc:	e010      	b.n	8001b00 <Nav_vIndependantTrajectoryStateMachine+0xb80>
		}
		else if ( Nav_TrajectoryMode_en == Nav_ForwardAngularTrajectory_en )
 8001ade:	4b44      	ldr	r3, [pc, #272]	; (8001bf0 <Nav_vIndependantTrajectoryStateMachine+0xc70>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d104      	bne.n	8001af0 <Nav_vIndependantTrajectoryStateMachine+0xb70>
		{
			Nav_TrapezeAngularVelocity2();
 8001ae6:	f000 fc3d 	bl	8002364 <Nav_TrapezeAngularVelocity2>
			Nav_vTargetAngleCalculationRoutine();
 8001aea:	f000 ffb9 	bl	8002a60 <Nav_vTargetAngleCalculationRoutine>
 8001aee:	e007      	b.n	8001b00 <Nav_vIndependantTrajectoryStateMachine+0xb80>
		}
		else if ( Nav_TrajectoryMode_en == Nav_ReverseAngularTrajectory_en )
 8001af0:	4b3f      	ldr	r3, [pc, #252]	; (8001bf0 <Nav_vIndependantTrajectoryStateMachine+0xc70>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d103      	bne.n	8001b00 <Nav_vIndependantTrajectoryStateMachine+0xb80>
		{
			Nav_TrapezeReverseAngularVelocity2();
 8001af8:	f000 fde6 	bl	80026c8 <Nav_TrapezeReverseAngularVelocity2>
			Nav_vTargetAngleCalculationRoutine();
 8001afc:	f000 ffb0 	bl	8002a60 <Nav_vTargetAngleCalculationRoutine>
		}
		if( ( Nav_CurrentSample_u32 > Nav_AccelerationSamples_u32 )
 8001b00:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <Nav_vIndependantTrajectoryStateMachine+0xc44>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <Nav_vIndependantTrajectoryStateMachine+0xc48>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d979      	bls.n	8001c00 <Nav_vIndependantTrajectoryStateMachine+0xc80>
				&& ( Nav_TargetLinearVelocity_d == 0 )
 8001b0c:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <Nav_vIndependantTrajectoryStateMachine+0xc4c>)
 8001b0e:	ed93 7b00 	vldr	d7, [r3]
 8001b12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1a:	d171      	bne.n	8001c00 <Nav_vIndependantTrajectoryStateMachine+0xc80>
				&& ( Nav_TargetAngularVelocity_d == 0 )
 8001b1c:	4b2c      	ldr	r3, [pc, #176]	; (8001bd0 <Nav_vIndependantTrajectoryStateMachine+0xc50>)
 8001b1e:	ed93 7b00 	vldr	d7, [r3]
 8001b22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2a:	d169      	bne.n	8001c00 <Nav_vIndependantTrajectoryStateMachine+0xc80>
				&& ( Nav_MeasuredVelocity_mm_d == 0 )
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <Nav_vIndependantTrajectoryStateMachine+0xc54>)
 8001b2e:	ed93 7b00 	vldr	d7, [r3]
 8001b32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3a:	d161      	bne.n	8001c00 <Nav_vIndependantTrajectoryStateMachine+0xc80>
				&& ( Nav_MeasuredAngularVelocity_deg_d == 0 ))
 8001b3c:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <Nav_vIndependantTrajectoryStateMachine+0xc58>)
 8001b3e:	ed93 7b00 	vldr	d7, [r3]
 8001b42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4a:	d159      	bne.n	8001c00 <Nav_vIndependantTrajectoryStateMachine+0xc80>
		{
			Nav_Counter_u32 = 0 ;
 8001b4c:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <Nav_vIndependantTrajectoryStateMachine+0xc64>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
			Nav_TrajectoryState_en = Nav_Trajectory_WaitAfterArriving_en;
 8001b52:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <Nav_vIndependantTrajectoryStateMachine+0xc68>)
 8001b54:	2207      	movs	r2, #7
 8001b56:	701a      	strb	r2, [r3, #0]
		}

	}break;
 8001b58:	e052      	b.n	8001c00 <Nav_vIndependantTrajectoryStateMachine+0xc80>

	case Nav_Trajectory_WaitAfterArriving_en :
	{
		Nav_Counter_u32++;
 8001b5a:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <Nav_vIndependantTrajectoryStateMachine+0xc64>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	4a20      	ldr	r2, [pc, #128]	; (8001be4 <Nav_vIndependantTrajectoryStateMachine+0xc64>)
 8001b62:	6013      	str	r3, [r2, #0]
		if (Nav_Counter_u32 > 2)
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <Nav_vIndependantTrajectoryStateMachine+0xc64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d94b      	bls.n	8001c04 <Nav_vIndependantTrajectoryStateMachine+0xc84>
		{
			Nav_TrajectoryState_en = Nav_Trajectory_Finish_en;
 8001b6c:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <Nav_vIndependantTrajectoryStateMachine+0xc68>)
 8001b6e:	2208      	movs	r2, #8
 8001b70:	701a      	strb	r2, [r3, #0]

		}
	}break;
 8001b72:	e047      	b.n	8001c04 <Nav_vIndependantTrajectoryStateMachine+0xc84>
	}break;
 8001b74:	bf00      	nop
 8001b76:	e046      	b.n	8001c06 <Nav_vIndependantTrajectoryStateMachine+0xc86>
	}break;
 8001b78:	bf00      	nop
 8001b7a:	e044      	b.n	8001c06 <Nav_vIndependantTrajectoryStateMachine+0xc86>
	}break;
 8001b7c:	bf00      	nop
 8001b7e:	e042      	b.n	8001c06 <Nav_vIndependantTrajectoryStateMachine+0xc86>
 8001b80:	00000000 	.word	0x00000000
 8001b84:	40668000 	.word	0x40668000
 8001b88:	54442d18 	.word	0x54442d18
 8001b8c:	400921fb 	.word	0x400921fb
 8001b90:	eb1c432d 	.word	0xeb1c432d
 8001b94:	3f1a36e2 	.word	0x3f1a36e2
 8001b98:	9999999a 	.word	0x9999999a
 8001b9c:	3fd99999 	.word	0x3fd99999
 8001ba0:	47ae147b 	.word	0x47ae147b
 8001ba4:	3f747ae1 	.word	0x3f747ae1
 8001ba8:	24000220 	.word	0x24000220
 8001bac:	24000240 	.word	0x24000240
 8001bb0:	24000218 	.word	0x24000218
 8001bb4:	24000238 	.word	0x24000238
 8001bb8:	24000278 	.word	0x24000278
 8001bbc:	24000280 	.word	0x24000280
 8001bc0:	240001d8 	.word	0x240001d8
 8001bc4:	24000328 	.word	0x24000328
 8001bc8:	2400032c 	.word	0x2400032c
 8001bcc:	24000290 	.word	0x24000290
 8001bd0:	24000298 	.word	0x24000298
 8001bd4:	240002a8 	.word	0x240002a8
 8001bd8:	240002b8 	.word	0x240002b8
 8001bdc:	240002c8 	.word	0x240002c8
 8001be0:	240002e0 	.word	0x240002e0
 8001be4:	24000330 	.word	0x24000330
 8001be8:	2400009d 	.word	0x2400009d
 8001bec:	24000008 	.word	0x24000008
 8001bf0:	2400009e 	.word	0x2400009e
 8001bf4:	24000308 	.word	0x24000308
 8001bf8:	24000318 	.word	0x24000318
	}break;
 8001bfc:	bf00      	nop
 8001bfe:	e002      	b.n	8001c06 <Nav_vIndependantTrajectoryStateMachine+0xc86>
	}break;
 8001c00:	bf00      	nop
 8001c02:	e000      	b.n	8001c06 <Nav_vIndependantTrajectoryStateMachine+0xc86>
	}break;
 8001c04:	bf00      	nop
	{

	}break;
	}

}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	ecbd 8b02 	vpop	{d8}
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <Nav_vNavigatorInit>:

/* Private user code ---------------------------------------------------------*/


void Nav_vNavigatorInit()
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
	Nav_ConvertRight_Ticks2mm_d = ( M_PI * WHEEL_DIAMETER_MM ) / ENCODER_RESOLUTION  ;
 8001c14:	4926      	ldr	r1, [pc, #152]	; (8001cb0 <Nav_vNavigatorInit+0xa0>)
 8001c16:	a322      	add	r3, pc, #136	; (adr r3, 8001ca0 <Nav_vNavigatorInit+0x90>)
 8001c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1c:	e9c1 2300 	strd	r2, r3, [r1]
	Nav_ConvertLeft_Ticks2mm_d  = (  M_PI * WHEEL_DIAMETER_MM * LEFT_WHEEL_GAIN ) / ENCODER_RESOLUTION  ;
 8001c20:	4924      	ldr	r1, [pc, #144]	; (8001cb4 <Nav_vNavigatorInit+0xa4>)
 8001c22:	a321      	add	r3, pc, #132	; (adr r3, 8001ca8 <Nav_vNavigatorInit+0x98>)
 8001c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c28:	e9c1 2300 	strd	r2, r3, [r1]
	//	Nav_PrevTargetAngle_deg_d = 180 ;
	//	Nav_NumberOfTargets_u8 = 4 ; // DYNAMICCCCC
	//


	Nav_NumberOfTargets_u8 = 2 ; // DYNAMICCCCC
 8001c2c:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <Nav_vNavigatorInit+0xa8>)
 8001c2e:	2202      	movs	r2, #2
 8001c30:	701a      	strb	r2, [r3, #0]

	Nav_XYTargets_ad[0][0] = 500.0 	; 	Nav_XYTargets_ad[0][1] = 0.0	; 	Nav_XYTargets_ad[0][2] = 90.0 ;   Nav_XYTargets_ad[0][3] = ROBOT_Going_Forward ;
 8001c32:	4922      	ldr	r1, [pc, #136]	; (8001cbc <Nav_vNavigatorInit+0xac>)
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <Nav_vNavigatorInit+0xb0>)
 8001c3a:	e9c1 2300 	strd	r2, r3, [r1]
 8001c3e:	491f      	ldr	r1, [pc, #124]	; (8001cbc <Nav_vNavigatorInit+0xac>)
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001c4c:	491b      	ldr	r1, [pc, #108]	; (8001cbc <Nav_vNavigatorInit+0xac>)
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <Nav_vNavigatorInit+0xb4>)
 8001c54:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001c58:	4918      	ldr	r1, [pc, #96]	; (8001cbc <Nav_vNavigatorInit+0xac>)
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <Nav_vNavigatorInit+0xb8>)
 8001c60:	e9c1 2306 	strd	r2, r3, [r1, #24]

	Nav_XYTargets_ad[1][0] = 1000.0	; 	Nav_XYTargets_ad[1][1] = 0.0	;	Nav_XYTargets_ad[1][2] = 30.0 ;   Nav_XYTargets_ad[1][3] = ROBOT_Going_Forward ;
 8001c64:	4915      	ldr	r1, [pc, #84]	; (8001cbc <Nav_vNavigatorInit+0xac>)
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <Nav_vNavigatorInit+0xbc>)
 8001c6c:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001c70:	4912      	ldr	r1, [pc, #72]	; (8001cbc <Nav_vNavigatorInit+0xac>)
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8001c7e:	490f      	ldr	r1, [pc, #60]	; (8001cbc <Nav_vNavigatorInit+0xac>)
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <Nav_vNavigatorInit+0xc0>)
 8001c86:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 8001c8a:	490c      	ldr	r1, [pc, #48]	; (8001cbc <Nav_vNavigatorInit+0xac>)
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <Nav_vNavigatorInit+0xb8>)
 8001c92:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	//	Nav_XYTargets_ad[2][0] = 1125.0 ; 	Nav_XYTargets_ad[2][1] = 225.0 ;	Nav_XYTargets_ad[2][2] = 1000.0 ;   Nav_XYTargets_ad[2][3] = ROBOT_Going_Forward ;
	//
	//	Nav_XYTargets_ad[3][0] = 1125.0 	;   Nav_XYTargets_ad[3][1] = 385.0 	;	Nav_XYTargets_ad[3][2] = 1000.0 ;   Nav_XYTargets_ad[3][3]  = ROBOT_Going_Backward ;


}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	c07353bf 	.word	0xc07353bf
 8001ca4:	3fb7ef5c 	.word	0x3fb7ef5c
 8001ca8:	de4edde6 	.word	0xde4edde6
 8001cac:	3fb804ce 	.word	0x3fb804ce
 8001cb0:	24000188 	.word	0x24000188
 8001cb4:	24000180 	.word	0x24000180
 8001cb8:	24000141 	.word	0x24000141
 8001cbc:	240000a0 	.word	0x240000a0
 8001cc0:	407f4000 	.word	0x407f4000
 8001cc4:	40568000 	.word	0x40568000
 8001cc8:	40080000 	.word	0x40080000
 8001ccc:	408f4000 	.word	0x408f4000
 8001cd0:	403e0000 	.word	0x403e0000

08001cd4 <Nav_TrapezeLinearVelocity2>:



void Nav_TrapezeLinearVelocity2()
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
	switch( Nav_TrapezePhase_en )
 8001cd8:	4ba3      	ldr	r3, [pc, #652]	; (8001f68 <Nav_TrapezeLinearVelocity2+0x294>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b06      	cmp	r3, #6
 8001cde:	f200 818b 	bhi.w	8001ff8 <Nav_TrapezeLinearVelocity2+0x324>
 8001ce2:	a201      	add	r2, pc, #4	; (adr r2, 8001ce8 <Nav_TrapezeLinearVelocity2+0x14>)
 8001ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce8:	08001ff7 	.word	0x08001ff7
 8001cec:	08001d05 	.word	0x08001d05
 8001cf0:	08001e25 	.word	0x08001e25
 8001cf4:	08001e93 	.word	0x08001e93
 8001cf8:	08001f49 	.word	0x08001f49
 8001cfc:	08001f8d 	.word	0x08001f8d
 8001d00:	08001fe1 	.word	0x08001fe1
	{

	}break;
	case Nav_Trapeze_Accelerating_en:
	{
		Nav_ReferenceDistance_d = (Nav_TargetLinearVelocity_d * Nav_TargetLinearVelocity_d) / ( 2 * Nav_Acc_d ) ;
 8001d04:	4b99      	ldr	r3, [pc, #612]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001d06:	ed93 6b00 	vldr	d6, [r3]
 8001d0a:	4b98      	ldr	r3, [pc, #608]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001d0c:	ed93 7b00 	vldr	d7, [r3]
 8001d10:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001d14:	4b96      	ldr	r3, [pc, #600]	; (8001f70 <Nav_TrapezeLinearVelocity2+0x29c>)
 8001d16:	ed93 7b00 	vldr	d7, [r3]
 8001d1a:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001d1e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001d22:	4b94      	ldr	r3, [pc, #592]	; (8001f74 <Nav_TrapezeLinearVelocity2+0x2a0>)
 8001d24:	ed83 7b00 	vstr	d7, [r3]

		if( Nav_RemainingDistance_mm_d < 2.0 )
 8001d28:	4b93      	ldr	r3, [pc, #588]	; (8001f78 <Nav_TrapezeLinearVelocity2+0x2a4>)
 8001d2a:	ed93 7b00 	vldr	d7, [r3]
 8001d2e:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001d32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3a:	d537      	bpl.n	8001dac <Nav_TrapezeLinearVelocity2+0xd8>
		{
			if( Nav_RemainingDistance_mm_d > Nav_ReferenceDistance_d )
 8001d3c:	4b8e      	ldr	r3, [pc, #568]	; (8001f78 <Nav_TrapezeLinearVelocity2+0x2a4>)
 8001d3e:	ed93 6b00 	vldr	d6, [r3]
 8001d42:	4b8c      	ldr	r3, [pc, #560]	; (8001f74 <Nav_TrapezeLinearVelocity2+0x2a0>)
 8001d44:	ed93 7b00 	vldr	d7, [r3]
 8001d48:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d50:	dd1d      	ble.n	8001d8e <Nav_TrapezeLinearVelocity2+0xba>
			{
				if ( Nav_TargetLinearVelocity_d < Nav_MaxVelocity_d )
 8001d52:	4b86      	ldr	r3, [pc, #536]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001d54:	ed93 6b00 	vldr	d6, [r3]
 8001d58:	4b88      	ldr	r3, [pc, #544]	; (8001f7c <Nav_TrapezeLinearVelocity2+0x2a8>)
 8001d5a:	ed93 7b00 	vldr	d7, [r3]
 8001d5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d66:	d50e      	bpl.n	8001d86 <Nav_TrapezeLinearVelocity2+0xb2>
				{
					Nav_TargetLinearVelocity_d = Nav_Acc_d * Nav_CurrentSample_u32 ;
 8001d68:	4b85      	ldr	r3, [pc, #532]	; (8001f80 <Nav_TrapezeLinearVelocity2+0x2ac>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	ee07 3a90 	vmov	s15, r3
 8001d70:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001d74:	4b7e      	ldr	r3, [pc, #504]	; (8001f70 <Nav_TrapezeLinearVelocity2+0x29c>)
 8001d76:	ed93 7b00 	vldr	d7, [r3]
 8001d7a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d7e:	4b7b      	ldr	r3, [pc, #492]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001d80:	ed83 7b00 	vstr	d7, [r3]
		}




	}break;
 8001d84:	e138      	b.n	8001ff8 <Nav_TrapezeLinearVelocity2+0x324>
					Nav_TrapezePhase_en = Nav_Trapeze_ConstantVelocity_en;
 8001d86:	4b78      	ldr	r3, [pc, #480]	; (8001f68 <Nav_TrapezeLinearVelocity2+0x294>)
 8001d88:	2202      	movs	r2, #2
 8001d8a:	701a      	strb	r2, [r3, #0]
	}break;
 8001d8c:	e134      	b.n	8001ff8 <Nav_TrapezeLinearVelocity2+0x324>
				Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8001d8e:	4b7c      	ldr	r3, [pc, #496]	; (8001f80 <Nav_TrapezeLinearVelocity2+0x2ac>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	4a7b      	ldr	r2, [pc, #492]	; (8001f84 <Nav_TrapezeLinearVelocity2+0x2b0>)
 8001d96:	6013      	str	r3, [r2, #0]
				Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 8001d98:	4b74      	ldr	r3, [pc, #464]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9e:	497a      	ldr	r1, [pc, #488]	; (8001f88 <Nav_TrapezeLinearVelocity2+0x2b4>)
 8001da0:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 8001da4:	4b70      	ldr	r3, [pc, #448]	; (8001f68 <Nav_TrapezeLinearVelocity2+0x294>)
 8001da6:	2203      	movs	r2, #3
 8001da8:	701a      	strb	r2, [r3, #0]
	}break;
 8001daa:	e125      	b.n	8001ff8 <Nav_TrapezeLinearVelocity2+0x324>
			if( Nav_RemainingDistance_mm_d > ( Nav_ReferenceDistance_d + 2.0 ) )
 8001dac:	4b71      	ldr	r3, [pc, #452]	; (8001f74 <Nav_TrapezeLinearVelocity2+0x2a0>)
 8001dae:	ed93 7b00 	vldr	d7, [r3]
 8001db2:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001db6:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001dba:	4b6f      	ldr	r3, [pc, #444]	; (8001f78 <Nav_TrapezeLinearVelocity2+0x2a4>)
 8001dbc:	ed93 7b00 	vldr	d7, [r3]
 8001dc0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc8:	d51d      	bpl.n	8001e06 <Nav_TrapezeLinearVelocity2+0x132>
				if ( Nav_TargetLinearVelocity_d < Nav_MaxVelocity_d )
 8001dca:	4b68      	ldr	r3, [pc, #416]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001dcc:	ed93 6b00 	vldr	d6, [r3]
 8001dd0:	4b6a      	ldr	r3, [pc, #424]	; (8001f7c <Nav_TrapezeLinearVelocity2+0x2a8>)
 8001dd2:	ed93 7b00 	vldr	d7, [r3]
 8001dd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dde:	d50e      	bpl.n	8001dfe <Nav_TrapezeLinearVelocity2+0x12a>
					Nav_TargetLinearVelocity_d = Nav_Acc_d * Nav_CurrentSample_u32 ;
 8001de0:	4b67      	ldr	r3, [pc, #412]	; (8001f80 <Nav_TrapezeLinearVelocity2+0x2ac>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	ee07 3a90 	vmov	s15, r3
 8001de8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001dec:	4b60      	ldr	r3, [pc, #384]	; (8001f70 <Nav_TrapezeLinearVelocity2+0x29c>)
 8001dee:	ed93 7b00 	vldr	d7, [r3]
 8001df2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001df6:	4b5d      	ldr	r3, [pc, #372]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001df8:	ed83 7b00 	vstr	d7, [r3]
	}break;
 8001dfc:	e0fc      	b.n	8001ff8 <Nav_TrapezeLinearVelocity2+0x324>
					Nav_TrapezePhase_en = Nav_Trapeze_ConstantVelocity_en;
 8001dfe:	4b5a      	ldr	r3, [pc, #360]	; (8001f68 <Nav_TrapezeLinearVelocity2+0x294>)
 8001e00:	2202      	movs	r2, #2
 8001e02:	701a      	strb	r2, [r3, #0]
	}break;
 8001e04:	e0f8      	b.n	8001ff8 <Nav_TrapezeLinearVelocity2+0x324>
				Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8001e06:	4b5e      	ldr	r3, [pc, #376]	; (8001f80 <Nav_TrapezeLinearVelocity2+0x2ac>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	4a5d      	ldr	r2, [pc, #372]	; (8001f84 <Nav_TrapezeLinearVelocity2+0x2b0>)
 8001e0e:	6013      	str	r3, [r2, #0]
				Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 8001e10:	4b56      	ldr	r3, [pc, #344]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	495c      	ldr	r1, [pc, #368]	; (8001f88 <Nav_TrapezeLinearVelocity2+0x2b4>)
 8001e18:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 8001e1c:	4b52      	ldr	r3, [pc, #328]	; (8001f68 <Nav_TrapezeLinearVelocity2+0x294>)
 8001e1e:	2203      	movs	r2, #3
 8001e20:	701a      	strb	r2, [r3, #0]
	}break;
 8001e22:	e0e9      	b.n	8001ff8 <Nav_TrapezeLinearVelocity2+0x324>

	case Nav_Trapeze_ConstantVelocity_en:
	{
		Nav_ReferenceDistance_d = (Nav_TargetLinearVelocity_d * Nav_TargetLinearVelocity_d) / ( 2 * Nav_Acc_d ) ;
 8001e24:	4b51      	ldr	r3, [pc, #324]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001e26:	ed93 6b00 	vldr	d6, [r3]
 8001e2a:	4b50      	ldr	r3, [pc, #320]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001e2c:	ed93 7b00 	vldr	d7, [r3]
 8001e30:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001e34:	4b4e      	ldr	r3, [pc, #312]	; (8001f70 <Nav_TrapezeLinearVelocity2+0x29c>)
 8001e36:	ed93 7b00 	vldr	d7, [r3]
 8001e3a:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001e3e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e42:	4b4c      	ldr	r3, [pc, #304]	; (8001f74 <Nav_TrapezeLinearVelocity2+0x2a0>)
 8001e44:	ed83 7b00 	vstr	d7, [r3]
		if( Nav_RemainingDistance_mm_d > ( Nav_ReferenceDistance_d + 2.0 ) )
 8001e48:	4b4a      	ldr	r3, [pc, #296]	; (8001f74 <Nav_TrapezeLinearVelocity2+0x2a0>)
 8001e4a:	ed93 7b00 	vldr	d7, [r3]
 8001e4e:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8001e52:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001e56:	4b48      	ldr	r3, [pc, #288]	; (8001f78 <Nav_TrapezeLinearVelocity2+0x2a4>)
 8001e58:	ed93 7b00 	vldr	d7, [r3]
 8001e5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e64:	d506      	bpl.n	8001e74 <Nav_TrapezeLinearVelocity2+0x1a0>
		{
			Nav_TargetLinearVelocity_d = Nav_MaxVelocity_d ;
 8001e66:	4b45      	ldr	r3, [pc, #276]	; (8001f7c <Nav_TrapezeLinearVelocity2+0x2a8>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	493f      	ldr	r1, [pc, #252]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001e6e:	e9c1 2300 	strd	r2, r3, [r1]
		{
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
			Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
			Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
		}
	}break;
 8001e72:	e0c1      	b.n	8001ff8 <Nav_TrapezeLinearVelocity2+0x324>
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8001e74:	4b42      	ldr	r3, [pc, #264]	; (8001f80 <Nav_TrapezeLinearVelocity2+0x2ac>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	4a42      	ldr	r2, [pc, #264]	; (8001f84 <Nav_TrapezeLinearVelocity2+0x2b0>)
 8001e7c:	6013      	str	r3, [r2, #0]
			Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	4940      	ldr	r1, [pc, #256]	; (8001f88 <Nav_TrapezeLinearVelocity2+0x2b4>)
 8001e86:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 8001e8a:	4b37      	ldr	r3, [pc, #220]	; (8001f68 <Nav_TrapezeLinearVelocity2+0x294>)
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	701a      	strb	r2, [r3, #0]
	}break;
 8001e90:	e0b2      	b.n	8001ff8 <Nav_TrapezeLinearVelocity2+0x324>

	case Nav_Trapeze_Decelerating_en:
	{
		Nav_ReferenceDistance_d = (Nav_TargetLinearVelocity_d * Nav_TargetLinearVelocity_d) / ( 2 * Nav_Acc_d ) ;
 8001e92:	4b36      	ldr	r3, [pc, #216]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001e94:	ed93 6b00 	vldr	d6, [r3]
 8001e98:	4b34      	ldr	r3, [pc, #208]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001e9a:	ed93 7b00 	vldr	d7, [r3]
 8001e9e:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001ea2:	4b33      	ldr	r3, [pc, #204]	; (8001f70 <Nav_TrapezeLinearVelocity2+0x29c>)
 8001ea4:	ed93 7b00 	vldr	d7, [r3]
 8001ea8:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001eac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001eb0:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <Nav_TrapezeLinearVelocity2+0x2a0>)
 8001eb2:	ed83 7b00 	vstr	d7, [r3]

		if( Nav_RemainingDistance_mm_d >= Nav_ReferenceDistance_d )
 8001eb6:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <Nav_TrapezeLinearVelocity2+0x2a4>)
 8001eb8:	ed93 6b00 	vldr	d6, [r3]
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <Nav_TrapezeLinearVelocity2+0x2a0>)
 8001ebe:	ed93 7b00 	vldr	d7, [r3]
 8001ec2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eca:	db0b      	blt.n	8001ee4 <Nav_TrapezeLinearVelocity2+0x210>
		{
			Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 8001ecc:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed2:	492d      	ldr	r1, [pc, #180]	; (8001f88 <Nav_TrapezeLinearVelocity2+0x2b4>)
 8001ed4:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8001ed8:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <Nav_TrapezeLinearVelocity2+0x2ac>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	4a29      	ldr	r2, [pc, #164]	; (8001f84 <Nav_TrapezeLinearVelocity2+0x2b0>)
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e015      	b.n	8001f10 <Nav_TrapezeLinearVelocity2+0x23c>
		}
		else
		{
			Nav_TargetLinearVelocity_d = Nav_ReferenceLinearVelocity_d - ( Nav_Acc_d * ( Nav_CurrentSample_u32 -Nav_AccelerationSamples_u32 ) )  ;
 8001ee4:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <Nav_TrapezeLinearVelocity2+0x2b4>)
 8001ee6:	ed93 6b00 	vldr	d6, [r3]
 8001eea:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <Nav_TrapezeLinearVelocity2+0x2ac>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <Nav_TrapezeLinearVelocity2+0x2b0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	ee07 3a90 	vmov	s15, r3
 8001ef8:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8001efc:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <Nav_TrapezeLinearVelocity2+0x29c>)
 8001efe:	ed93 7b00 	vldr	d7, [r3]
 8001f02:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001f06:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001f0c:	ed83 7b00 	vstr	d7, [r3]
		}

		if( ( Nav_RemainingDistance_mm_d <= 0.0 ) || ( Nav_TargetLinearVelocity_d <= 0.0) )
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <Nav_TrapezeLinearVelocity2+0x2a4>)
 8001f12:	ed93 7b00 	vldr	d7, [r3]
 8001f16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1e:	d908      	bls.n	8001f32 <Nav_TrapezeLinearVelocity2+0x25e>
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001f22:	ed93 7b00 	vldr	d7, [r3]
 8001f26:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2e:	d900      	bls.n	8001f32 <Nav_TrapezeLinearVelocity2+0x25e>
		{
			Nav_TargetLinearVelocity_d = 0 ;
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
		}

	}break;
 8001f30:	e062      	b.n	8001ff8 <Nav_TrapezeLinearVelocity2+0x324>
			Nav_TargetLinearVelocity_d = 0 ;
 8001f32:	490e      	ldr	r1, [pc, #56]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <Nav_TrapezeLinearVelocity2+0x294>)
 8001f42:	2206      	movs	r2, #6
 8001f44:	701a      	strb	r2, [r3, #0]
	}break;
 8001f46:	e057      	b.n	8001ff8 <Nav_TrapezeLinearVelocity2+0x324>
	case Nav_Trapeze_OrderUrgentDecelerating_en:
	{
		Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8001f48:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <Nav_TrapezeLinearVelocity2+0x2ac>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	4a0d      	ldr	r2, [pc, #52]	; (8001f84 <Nav_TrapezeLinearVelocity2+0x2b0>)
 8001f50:	6013      	str	r3, [r2, #0]
		Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <Nav_TrapezeLinearVelocity2+0x298>)
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	490b      	ldr	r1, [pc, #44]	; (8001f88 <Nav_TrapezeLinearVelocity2+0x2b4>)
 8001f5a:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrapezePhase_en = Nav_Trapeze_UrgentDecelerating_en;
 8001f5e:	4b02      	ldr	r3, [pc, #8]	; (8001f68 <Nav_TrapezeLinearVelocity2+0x294>)
 8001f60:	2205      	movs	r2, #5
 8001f62:	701a      	strb	r2, [r3, #0]
	}break;
 8001f64:	e048      	b.n	8001ff8 <Nav_TrapezeLinearVelocity2+0x324>
 8001f66:	bf00      	nop
 8001f68:	24000008 	.word	0x24000008
 8001f6c:	24000290 	.word	0x24000290
 8001f70:	24000308 	.word	0x24000308
 8001f74:	240001c0 	.word	0x240001c0
 8001f78:	24000260 	.word	0x24000260
 8001f7c:	24000310 	.word	0x24000310
 8001f80:	24000328 	.word	0x24000328
 8001f84:	2400032c 	.word	0x2400032c
 8001f88:	240002c0 	.word	0x240002c0
	case Nav_Trapeze_UrgentDecelerating_en:
	{
		Nav_TargetLinearVelocity_d = Nav_ReferenceLinearVelocity_d - ( Nav_Acc_d * ( Nav_CurrentSample_u32 -Nav_AccelerationSamples_u32 ) )  ;
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <Nav_TrapezeLinearVelocity2+0x330>)
 8001f8e:	ed93 6b00 	vldr	d6, [r3]
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <Nav_TrapezeLinearVelocity2+0x334>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	4b1d      	ldr	r3, [pc, #116]	; (800200c <Nav_TrapezeLinearVelocity2+0x338>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	ee07 3a90 	vmov	s15, r3
 8001fa0:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <Nav_TrapezeLinearVelocity2+0x33c>)
 8001fa6:	ed93 7b00 	vldr	d7, [r3]
 8001faa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001fae:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001fb2:	4b18      	ldr	r3, [pc, #96]	; (8002014 <Nav_TrapezeLinearVelocity2+0x340>)
 8001fb4:	ed83 7b00 	vstr	d7, [r3]
		if(  Nav_TargetLinearVelocity_d < 0.0)
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <Nav_TrapezeLinearVelocity2+0x340>)
 8001fba:	ed93 7b00 	vldr	d7, [r3]
 8001fbe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc6:	d400      	bmi.n	8001fca <Nav_TrapezeLinearVelocity2+0x2f6>
		{
			Nav_TargetLinearVelocity_d = 0 ;
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
		}
	}break;
 8001fc8:	e016      	b.n	8001ff8 <Nav_TrapezeLinearVelocity2+0x324>
			Nav_TargetLinearVelocity_d = 0 ;
 8001fca:	4912      	ldr	r1, [pc, #72]	; (8002014 <Nav_TrapezeLinearVelocity2+0x340>)
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <Nav_TrapezeLinearVelocity2+0x344>)
 8001fda:	2206      	movs	r2, #6
 8001fdc:	701a      	strb	r2, [r3, #0]
	}break;
 8001fde:	e00b      	b.n	8001ff8 <Nav_TrapezeLinearVelocity2+0x324>


	case Nav_Trapeze_Finished_en:
	{
		Nav_TargetLinearVelocity_d = 0.0 ;
 8001fe0:	490c      	ldr	r1, [pc, #48]	; (8002014 <Nav_TrapezeLinearVelocity2+0x340>)
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrapezePhase_en = Nav_Trapeze_Idle_en ;
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <Nav_TrapezeLinearVelocity2+0x344>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
	}break;
 8001ff4:	e000      	b.n	8001ff8 <Nav_TrapezeLinearVelocity2+0x324>
	}break;
 8001ff6:	bf00      	nop

	}
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	240002c0 	.word	0x240002c0
 8002008:	24000328 	.word	0x24000328
 800200c:	2400032c 	.word	0x2400032c
 8002010:	24000308 	.word	0x24000308
 8002014:	24000290 	.word	0x24000290
 8002018:	24000008 	.word	0x24000008

0800201c <Nav_TrapezeReverseLinearVelocity2>:

void Nav_TrapezeReverseLinearVelocity2()
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
	switch( Nav_TrapezePhase_en )
 8002020:	4ba3      	ldr	r3, [pc, #652]	; (80022b0 <Nav_TrapezeReverseLinearVelocity2+0x294>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b06      	cmp	r3, #6
 8002026:	f200 818b 	bhi.w	8002340 <Nav_TrapezeReverseLinearVelocity2+0x324>
 800202a:	a201      	add	r2, pc, #4	; (adr r2, 8002030 <Nav_TrapezeReverseLinearVelocity2+0x14>)
 800202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002030:	0800233f 	.word	0x0800233f
 8002034:	0800204d 	.word	0x0800204d
 8002038:	0800216d 	.word	0x0800216d
 800203c:	080021db 	.word	0x080021db
 8002040:	08002291 	.word	0x08002291
 8002044:	080022d5 	.word	0x080022d5
 8002048:	08002329 	.word	0x08002329

	}break;
	case Nav_Trapeze_Accelerating_en:
	{

		Nav_ReferenceDistance_d = (Nav_TargetLinearVelocity_d * Nav_TargetLinearVelocity_d) / ( 2 * Nav_Acc_d ) ;
 800204c:	4b99      	ldr	r3, [pc, #612]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 800204e:	ed93 6b00 	vldr	d6, [r3]
 8002052:	4b98      	ldr	r3, [pc, #608]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 8002054:	ed93 7b00 	vldr	d7, [r3]
 8002058:	ee26 5b07 	vmul.f64	d5, d6, d7
 800205c:	4b96      	ldr	r3, [pc, #600]	; (80022b8 <Nav_TrapezeReverseLinearVelocity2+0x29c>)
 800205e:	ed93 7b00 	vldr	d7, [r3]
 8002062:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002066:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800206a:	4b94      	ldr	r3, [pc, #592]	; (80022bc <Nav_TrapezeReverseLinearVelocity2+0x2a0>)
 800206c:	ed83 7b00 	vstr	d7, [r3]
		if( Nav_RemainingDistance_mm_d > (-2.0) )
 8002070:	4b93      	ldr	r3, [pc, #588]	; (80022c0 <Nav_TrapezeReverseLinearVelocity2+0x2a4>)
 8002072:	ed93 7b00 	vldr	d7, [r3]
 8002076:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 800207a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002082:	dd37      	ble.n	80020f4 <Nav_TrapezeReverseLinearVelocity2+0xd8>
		{
			if( Nav_RemainingDistance_mm_d <  Nav_ReferenceDistance_d  )
 8002084:	4b8e      	ldr	r3, [pc, #568]	; (80022c0 <Nav_TrapezeReverseLinearVelocity2+0x2a4>)
 8002086:	ed93 6b00 	vldr	d6, [r3]
 800208a:	4b8c      	ldr	r3, [pc, #560]	; (80022bc <Nav_TrapezeReverseLinearVelocity2+0x2a0>)
 800208c:	ed93 7b00 	vldr	d7, [r3]
 8002090:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002098:	d51d      	bpl.n	80020d6 <Nav_TrapezeReverseLinearVelocity2+0xba>
			{
				if ( Nav_TargetLinearVelocity_d > Nav_MaxVelocity_d )
 800209a:	4b86      	ldr	r3, [pc, #536]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 800209c:	ed93 6b00 	vldr	d6, [r3]
 80020a0:	4b88      	ldr	r3, [pc, #544]	; (80022c4 <Nav_TrapezeReverseLinearVelocity2+0x2a8>)
 80020a2:	ed93 7b00 	vldr	d7, [r3]
 80020a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80020aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ae:	dd0e      	ble.n	80020ce <Nav_TrapezeReverseLinearVelocity2+0xb2>
				{
					Nav_TargetLinearVelocity_d = Nav_Acc_d * Nav_CurrentSample_u32 ;
 80020b0:	4b85      	ldr	r3, [pc, #532]	; (80022c8 <Nav_TrapezeReverseLinearVelocity2+0x2ac>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80020bc:	4b7e      	ldr	r3, [pc, #504]	; (80022b8 <Nav_TrapezeReverseLinearVelocity2+0x29c>)
 80020be:	ed93 7b00 	vldr	d7, [r3]
 80020c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80020c6:	4b7b      	ldr	r3, [pc, #492]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 80020c8:	ed83 7b00 	vstr	d7, [r3]
				Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
			}
		}

	}break;
 80020cc:	e138      	b.n	8002340 <Nav_TrapezeReverseLinearVelocity2+0x324>
					Nav_TrapezePhase_en = Nav_Trapeze_ConstantVelocity_en;
 80020ce:	4b78      	ldr	r3, [pc, #480]	; (80022b0 <Nav_TrapezeReverseLinearVelocity2+0x294>)
 80020d0:	2202      	movs	r2, #2
 80020d2:	701a      	strb	r2, [r3, #0]
	}break;
 80020d4:	e134      	b.n	8002340 <Nav_TrapezeReverseLinearVelocity2+0x324>
				Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 80020d6:	4b7c      	ldr	r3, [pc, #496]	; (80022c8 <Nav_TrapezeReverseLinearVelocity2+0x2ac>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3b01      	subs	r3, #1
 80020dc:	4a7b      	ldr	r2, [pc, #492]	; (80022cc <Nav_TrapezeReverseLinearVelocity2+0x2b0>)
 80020de:	6013      	str	r3, [r2, #0]
				Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 80020e0:	4b74      	ldr	r3, [pc, #464]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 80020e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e6:	497a      	ldr	r1, [pc, #488]	; (80022d0 <Nav_TrapezeReverseLinearVelocity2+0x2b4>)
 80020e8:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 80020ec:	4b70      	ldr	r3, [pc, #448]	; (80022b0 <Nav_TrapezeReverseLinearVelocity2+0x294>)
 80020ee:	2203      	movs	r2, #3
 80020f0:	701a      	strb	r2, [r3, #0]
	}break;
 80020f2:	e125      	b.n	8002340 <Nav_TrapezeReverseLinearVelocity2+0x324>
			if( Nav_RemainingDistance_mm_d <  ( Nav_ReferenceDistance_d - 2.0 ) )
 80020f4:	4b71      	ldr	r3, [pc, #452]	; (80022bc <Nav_TrapezeReverseLinearVelocity2+0x2a0>)
 80020f6:	ed93 7b00 	vldr	d7, [r3]
 80020fa:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80020fe:	ee37 6b46 	vsub.f64	d6, d7, d6
 8002102:	4b6f      	ldr	r3, [pc, #444]	; (80022c0 <Nav_TrapezeReverseLinearVelocity2+0x2a4>)
 8002104:	ed93 7b00 	vldr	d7, [r3]
 8002108:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800210c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002110:	dd1d      	ble.n	800214e <Nav_TrapezeReverseLinearVelocity2+0x132>
				if ( Nav_TargetLinearVelocity_d > Nav_MaxVelocity_d )
 8002112:	4b68      	ldr	r3, [pc, #416]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 8002114:	ed93 6b00 	vldr	d6, [r3]
 8002118:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <Nav_TrapezeReverseLinearVelocity2+0x2a8>)
 800211a:	ed93 7b00 	vldr	d7, [r3]
 800211e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002126:	dd0e      	ble.n	8002146 <Nav_TrapezeReverseLinearVelocity2+0x12a>
					Nav_TargetLinearVelocity_d = Nav_Acc_d * Nav_CurrentSample_u32 ;
 8002128:	4b67      	ldr	r3, [pc, #412]	; (80022c8 <Nav_TrapezeReverseLinearVelocity2+0x2ac>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	ee07 3a90 	vmov	s15, r3
 8002130:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002134:	4b60      	ldr	r3, [pc, #384]	; (80022b8 <Nav_TrapezeReverseLinearVelocity2+0x29c>)
 8002136:	ed93 7b00 	vldr	d7, [r3]
 800213a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800213e:	4b5d      	ldr	r3, [pc, #372]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 8002140:	ed83 7b00 	vstr	d7, [r3]
	}break;
 8002144:	e0fc      	b.n	8002340 <Nav_TrapezeReverseLinearVelocity2+0x324>
					Nav_TrapezePhase_en = Nav_Trapeze_ConstantVelocity_en;
 8002146:	4b5a      	ldr	r3, [pc, #360]	; (80022b0 <Nav_TrapezeReverseLinearVelocity2+0x294>)
 8002148:	2202      	movs	r2, #2
 800214a:	701a      	strb	r2, [r3, #0]
	}break;
 800214c:	e0f8      	b.n	8002340 <Nav_TrapezeReverseLinearVelocity2+0x324>
				Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 800214e:	4b5e      	ldr	r3, [pc, #376]	; (80022c8 <Nav_TrapezeReverseLinearVelocity2+0x2ac>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3b01      	subs	r3, #1
 8002154:	4a5d      	ldr	r2, [pc, #372]	; (80022cc <Nav_TrapezeReverseLinearVelocity2+0x2b0>)
 8002156:	6013      	str	r3, [r2, #0]
				Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 8002158:	4b56      	ldr	r3, [pc, #344]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 800215a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215e:	495c      	ldr	r1, [pc, #368]	; (80022d0 <Nav_TrapezeReverseLinearVelocity2+0x2b4>)
 8002160:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 8002164:	4b52      	ldr	r3, [pc, #328]	; (80022b0 <Nav_TrapezeReverseLinearVelocity2+0x294>)
 8002166:	2203      	movs	r2, #3
 8002168:	701a      	strb	r2, [r3, #0]
	}break;
 800216a:	e0e9      	b.n	8002340 <Nav_TrapezeReverseLinearVelocity2+0x324>

	case Nav_Trapeze_ConstantVelocity_en:
	{
		Nav_ReferenceDistance_d = (Nav_TargetLinearVelocity_d * Nav_TargetLinearVelocity_d) / ( 2 * Nav_Acc_d ) ;
 800216c:	4b51      	ldr	r3, [pc, #324]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 800216e:	ed93 6b00 	vldr	d6, [r3]
 8002172:	4b50      	ldr	r3, [pc, #320]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 8002174:	ed93 7b00 	vldr	d7, [r3]
 8002178:	ee26 5b07 	vmul.f64	d5, d6, d7
 800217c:	4b4e      	ldr	r3, [pc, #312]	; (80022b8 <Nav_TrapezeReverseLinearVelocity2+0x29c>)
 800217e:	ed93 7b00 	vldr	d7, [r3]
 8002182:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002186:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800218a:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <Nav_TrapezeReverseLinearVelocity2+0x2a0>)
 800218c:	ed83 7b00 	vstr	d7, [r3]
		if( Nav_RemainingDistance_mm_d < ( Nav_ReferenceDistance_d - 2.0 ) )
 8002190:	4b4a      	ldr	r3, [pc, #296]	; (80022bc <Nav_TrapezeReverseLinearVelocity2+0x2a0>)
 8002192:	ed93 7b00 	vldr	d7, [r3]
 8002196:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800219a:	ee37 6b46 	vsub.f64	d6, d7, d6
 800219e:	4b48      	ldr	r3, [pc, #288]	; (80022c0 <Nav_TrapezeReverseLinearVelocity2+0x2a4>)
 80021a0:	ed93 7b00 	vldr	d7, [r3]
 80021a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80021a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ac:	dd06      	ble.n	80021bc <Nav_TrapezeReverseLinearVelocity2+0x1a0>
		{
			Nav_TargetLinearVelocity_d = Nav_MaxVelocity_d ;
 80021ae:	4b45      	ldr	r3, [pc, #276]	; (80022c4 <Nav_TrapezeReverseLinearVelocity2+0x2a8>)
 80021b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b4:	493f      	ldr	r1, [pc, #252]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 80021b6:	e9c1 2300 	strd	r2, r3, [r1]
		{
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
			Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
			Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
		}
	}break;
 80021ba:	e0c1      	b.n	8002340 <Nav_TrapezeReverseLinearVelocity2+0x324>
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 80021bc:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <Nav_TrapezeReverseLinearVelocity2+0x2ac>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	4a42      	ldr	r2, [pc, #264]	; (80022cc <Nav_TrapezeReverseLinearVelocity2+0x2b0>)
 80021c4:	6013      	str	r3, [r2, #0]
			Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 80021c6:	4b3b      	ldr	r3, [pc, #236]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 80021c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021cc:	4940      	ldr	r1, [pc, #256]	; (80022d0 <Nav_TrapezeReverseLinearVelocity2+0x2b4>)
 80021ce:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 80021d2:	4b37      	ldr	r3, [pc, #220]	; (80022b0 <Nav_TrapezeReverseLinearVelocity2+0x294>)
 80021d4:	2203      	movs	r2, #3
 80021d6:	701a      	strb	r2, [r3, #0]
	}break;
 80021d8:	e0b2      	b.n	8002340 <Nav_TrapezeReverseLinearVelocity2+0x324>

	case Nav_Trapeze_Decelerating_en:
	{
		Nav_ReferenceDistance_d = (Nav_TargetLinearVelocity_d * Nav_TargetLinearVelocity_d) / ( 2 * Nav_Acc_d ) ;
 80021da:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 80021dc:	ed93 6b00 	vldr	d6, [r3]
 80021e0:	4b34      	ldr	r3, [pc, #208]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 80021e2:	ed93 7b00 	vldr	d7, [r3]
 80021e6:	ee26 5b07 	vmul.f64	d5, d6, d7
 80021ea:	4b33      	ldr	r3, [pc, #204]	; (80022b8 <Nav_TrapezeReverseLinearVelocity2+0x29c>)
 80021ec:	ed93 7b00 	vldr	d7, [r3]
 80021f0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80021f4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80021f8:	4b30      	ldr	r3, [pc, #192]	; (80022bc <Nav_TrapezeReverseLinearVelocity2+0x2a0>)
 80021fa:	ed83 7b00 	vstr	d7, [r3]

		if( Nav_RemainingDistance_mm_d <= Nav_ReferenceDistance_d )
 80021fe:	4b30      	ldr	r3, [pc, #192]	; (80022c0 <Nav_TrapezeReverseLinearVelocity2+0x2a4>)
 8002200:	ed93 6b00 	vldr	d6, [r3]
 8002204:	4b2d      	ldr	r3, [pc, #180]	; (80022bc <Nav_TrapezeReverseLinearVelocity2+0x2a0>)
 8002206:	ed93 7b00 	vldr	d7, [r3]
 800220a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800220e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002212:	d80b      	bhi.n	800222c <Nav_TrapezeReverseLinearVelocity2+0x210>
		{
			Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 8002214:	4b27      	ldr	r3, [pc, #156]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 8002216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221a:	492d      	ldr	r1, [pc, #180]	; (80022d0 <Nav_TrapezeReverseLinearVelocity2+0x2b4>)
 800221c:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002220:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <Nav_TrapezeReverseLinearVelocity2+0x2ac>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	3b01      	subs	r3, #1
 8002226:	4a29      	ldr	r2, [pc, #164]	; (80022cc <Nav_TrapezeReverseLinearVelocity2+0x2b0>)
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e015      	b.n	8002258 <Nav_TrapezeReverseLinearVelocity2+0x23c>
		}
		else
		{
			Nav_TargetLinearVelocity_d = Nav_ReferenceLinearVelocity_d - ( Nav_Acc_d * ( Nav_CurrentSample_u32 -Nav_AccelerationSamples_u32 ) )  ;
 800222c:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <Nav_TrapezeReverseLinearVelocity2+0x2b4>)
 800222e:	ed93 6b00 	vldr	d6, [r3]
 8002232:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <Nav_TrapezeReverseLinearVelocity2+0x2ac>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4b25      	ldr	r3, [pc, #148]	; (80022cc <Nav_TrapezeReverseLinearVelocity2+0x2b0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	ee07 3a90 	vmov	s15, r3
 8002240:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8002244:	4b1c      	ldr	r3, [pc, #112]	; (80022b8 <Nav_TrapezeReverseLinearVelocity2+0x29c>)
 8002246:	ed93 7b00 	vldr	d7, [r3]
 800224a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800224e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 8002254:	ed83 7b00 	vstr	d7, [r3]
		}

		if( ( Nav_RemainingDistance_mm_d >= 0.0 ) || ( Nav_TargetLinearVelocity_d >= 0.0) )
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <Nav_TrapezeReverseLinearVelocity2+0x2a4>)
 800225a:	ed93 7b00 	vldr	d7, [r3]
 800225e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002266:	da08      	bge.n	800227a <Nav_TrapezeReverseLinearVelocity2+0x25e>
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 800226a:	ed93 7b00 	vldr	d7, [r3]
 800226e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002276:	da00      	bge.n	800227a <Nav_TrapezeReverseLinearVelocity2+0x25e>
		{
			Nav_TargetLinearVelocity_d = 0 ;
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
		}

	}break;
 8002278:	e062      	b.n	8002340 <Nav_TrapezeReverseLinearVelocity2+0x324>
			Nav_TargetLinearVelocity_d = 0 ;
 800227a:	490e      	ldr	r1, [pc, #56]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <Nav_TrapezeReverseLinearVelocity2+0x294>)
 800228a:	2206      	movs	r2, #6
 800228c:	701a      	strb	r2, [r3, #0]
	}break;
 800228e:	e057      	b.n	8002340 <Nav_TrapezeReverseLinearVelocity2+0x324>
	case Nav_Trapeze_OrderUrgentDecelerating_en:
	{
		Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <Nav_TrapezeReverseLinearVelocity2+0x2ac>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3b01      	subs	r3, #1
 8002296:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <Nav_TrapezeReverseLinearVelocity2+0x2b0>)
 8002298:	6013      	str	r3, [r2, #0]
		Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <Nav_TrapezeReverseLinearVelocity2+0x298>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	490b      	ldr	r1, [pc, #44]	; (80022d0 <Nav_TrapezeReverseLinearVelocity2+0x2b4>)
 80022a2:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrapezePhase_en = Nav_Trapeze_UrgentDecelerating_en;
 80022a6:	4b02      	ldr	r3, [pc, #8]	; (80022b0 <Nav_TrapezeReverseLinearVelocity2+0x294>)
 80022a8:	2205      	movs	r2, #5
 80022aa:	701a      	strb	r2, [r3, #0]
	}break;
 80022ac:	e048      	b.n	8002340 <Nav_TrapezeReverseLinearVelocity2+0x324>
 80022ae:	bf00      	nop
 80022b0:	24000008 	.word	0x24000008
 80022b4:	24000290 	.word	0x24000290
 80022b8:	24000308 	.word	0x24000308
 80022bc:	240001c0 	.word	0x240001c0
 80022c0:	24000260 	.word	0x24000260
 80022c4:	24000310 	.word	0x24000310
 80022c8:	24000328 	.word	0x24000328
 80022cc:	2400032c 	.word	0x2400032c
 80022d0:	240002c0 	.word	0x240002c0
	case Nav_Trapeze_UrgentDecelerating_en:
	{
		Nav_TargetLinearVelocity_d = Nav_ReferenceLinearVelocity_d - ( Nav_Acc_d * ( Nav_CurrentSample_u32 -Nav_AccelerationSamples_u32 ) )  ;
 80022d4:	4b1d      	ldr	r3, [pc, #116]	; (800234c <Nav_TrapezeReverseLinearVelocity2+0x330>)
 80022d6:	ed93 6b00 	vldr	d6, [r3]
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <Nav_TrapezeReverseLinearVelocity2+0x334>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <Nav_TrapezeReverseLinearVelocity2+0x338>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	ee07 3a90 	vmov	s15, r3
 80022e8:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80022ec:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <Nav_TrapezeReverseLinearVelocity2+0x33c>)
 80022ee:	ed93 7b00 	vldr	d7, [r3]
 80022f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80022f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80022fa:	4b18      	ldr	r3, [pc, #96]	; (800235c <Nav_TrapezeReverseLinearVelocity2+0x340>)
 80022fc:	ed83 7b00 	vstr	d7, [r3]
		if(  Nav_TargetLinearVelocity_d >= 0.0)
 8002300:	4b16      	ldr	r3, [pc, #88]	; (800235c <Nav_TrapezeReverseLinearVelocity2+0x340>)
 8002302:	ed93 7b00 	vldr	d7, [r3]
 8002306:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800230a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230e:	da00      	bge.n	8002312 <Nav_TrapezeReverseLinearVelocity2+0x2f6>
		{
			Nav_TargetLinearVelocity_d = 0 ;
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
		}
	}break;
 8002310:	e016      	b.n	8002340 <Nav_TrapezeReverseLinearVelocity2+0x324>
			Nav_TargetLinearVelocity_d = 0 ;
 8002312:	4912      	ldr	r1, [pc, #72]	; (800235c <Nav_TrapezeReverseLinearVelocity2+0x340>)
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <Nav_TrapezeReverseLinearVelocity2+0x344>)
 8002322:	2206      	movs	r2, #6
 8002324:	701a      	strb	r2, [r3, #0]
	}break;
 8002326:	e00b      	b.n	8002340 <Nav_TrapezeReverseLinearVelocity2+0x324>


	case Nav_Trapeze_Finished_en:
	{
		Nav_TargetLinearVelocity_d = 0.0 ;
 8002328:	490c      	ldr	r1, [pc, #48]	; (800235c <Nav_TrapezeReverseLinearVelocity2+0x340>)
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrapezePhase_en = Nav_Trapeze_Idle_en ;
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <Nav_TrapezeReverseLinearVelocity2+0x344>)
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
	}break;
 800233c:	e000      	b.n	8002340 <Nav_TrapezeReverseLinearVelocity2+0x324>
	}break;
 800233e:	bf00      	nop

	}
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	240002c0 	.word	0x240002c0
 8002350:	24000328 	.word	0x24000328
 8002354:	2400032c 	.word	0x2400032c
 8002358:	24000308 	.word	0x24000308
 800235c:	24000290 	.word	0x24000290
 8002360:	24000008 	.word	0x24000008

08002364 <Nav_TrapezeAngularVelocity2>:


void Nav_TrapezeAngularVelocity2()
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
	switch( Nav_TrapezePhase_en )
 8002368:	4ba3      	ldr	r3, [pc, #652]	; (80025f8 <Nav_TrapezeAngularVelocity2+0x294>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b06      	cmp	r3, #6
 800236e:	f200 8197 	bhi.w	80026a0 <Nav_TrapezeAngularVelocity2+0x33c>
 8002372:	a201      	add	r2, pc, #4	; (adr r2, 8002378 <Nav_TrapezeAngularVelocity2+0x14>)
 8002374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002378:	0800269f 	.word	0x0800269f
 800237c:	08002395 	.word	0x08002395
 8002380:	080024b5 	.word	0x080024b5
 8002384:	08002523 	.word	0x08002523
 8002388:	080025d9 	.word	0x080025d9
 800238c:	08002625 	.word	0x08002625
 8002390:	08002689 	.word	0x08002689
	{

	}break;
	case Nav_Trapeze_Accelerating_en:
	{
		Nav_ReferenceAngle_deg_d = ( Nav_TargetAngularVelocity_d * Nav_TargetAngularVelocity_d) / ( 2 * Nav_AngularAcc_d ) ;
 8002394:	4b99      	ldr	r3, [pc, #612]	; (80025fc <Nav_TrapezeAngularVelocity2+0x298>)
 8002396:	ed93 6b00 	vldr	d6, [r3]
 800239a:	4b98      	ldr	r3, [pc, #608]	; (80025fc <Nav_TrapezeAngularVelocity2+0x298>)
 800239c:	ed93 7b00 	vldr	d7, [r3]
 80023a0:	ee26 5b07 	vmul.f64	d5, d6, d7
 80023a4:	4b96      	ldr	r3, [pc, #600]	; (8002600 <Nav_TrapezeAngularVelocity2+0x29c>)
 80023a6:	ed93 7b00 	vldr	d7, [r3]
 80023aa:	ee37 6b07 	vadd.f64	d6, d7, d7
 80023ae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80023b2:	4b94      	ldr	r3, [pc, #592]	; (8002604 <Nav_TrapezeAngularVelocity2+0x2a0>)
 80023b4:	ed83 7b00 	vstr	d7, [r3]

		if( Nav_RemainingAngle_deg_d < 2.0 )
 80023b8:	4b93      	ldr	r3, [pc, #588]	; (8002608 <Nav_TrapezeAngularVelocity2+0x2a4>)
 80023ba:	ed93 7b00 	vldr	d7, [r3]
 80023be:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80023c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80023c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ca:	d537      	bpl.n	800243c <Nav_TrapezeAngularVelocity2+0xd8>
		{
			if( Nav_RemainingAngle_deg_d > Nav_ReferenceAngle_deg_d )
 80023cc:	4b8e      	ldr	r3, [pc, #568]	; (8002608 <Nav_TrapezeAngularVelocity2+0x2a4>)
 80023ce:	ed93 6b00 	vldr	d6, [r3]
 80023d2:	4b8c      	ldr	r3, [pc, #560]	; (8002604 <Nav_TrapezeAngularVelocity2+0x2a0>)
 80023d4:	ed93 7b00 	vldr	d7, [r3]
 80023d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80023dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e0:	dd1d      	ble.n	800241e <Nav_TrapezeAngularVelocity2+0xba>
			{
				if ( Nav_TargetAngularVelocity_d < Nav_MaxAngularVelocity_d  )
 80023e2:	4b86      	ldr	r3, [pc, #536]	; (80025fc <Nav_TrapezeAngularVelocity2+0x298>)
 80023e4:	ed93 6b00 	vldr	d6, [r3]
 80023e8:	4b88      	ldr	r3, [pc, #544]	; (800260c <Nav_TrapezeAngularVelocity2+0x2a8>)
 80023ea:	ed93 7b00 	vldr	d7, [r3]
 80023ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80023f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f6:	d50e      	bpl.n	8002416 <Nav_TrapezeAngularVelocity2+0xb2>
				{
					Nav_TargetAngularVelocity_d = Nav_AngularAcc_d * Nav_CurrentSample_u32 ;
 80023f8:	4b85      	ldr	r3, [pc, #532]	; (8002610 <Nav_TrapezeAngularVelocity2+0x2ac>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	ee07 3a90 	vmov	s15, r3
 8002400:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002404:	4b7e      	ldr	r3, [pc, #504]	; (8002600 <Nav_TrapezeAngularVelocity2+0x29c>)
 8002406:	ed93 7b00 	vldr	d7, [r3]
 800240a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800240e:	4b7b      	ldr	r3, [pc, #492]	; (80025fc <Nav_TrapezeAngularVelocity2+0x298>)
 8002410:	ed83 7b00 	vstr	d7, [r3]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
			}
		}


	}break;
 8002414:	e144      	b.n	80026a0 <Nav_TrapezeAngularVelocity2+0x33c>
					Nav_TrapezePhase_en = Nav_Trapeze_ConstantVelocity_en;
 8002416:	4b78      	ldr	r3, [pc, #480]	; (80025f8 <Nav_TrapezeAngularVelocity2+0x294>)
 8002418:	2202      	movs	r2, #2
 800241a:	701a      	strb	r2, [r3, #0]
	}break;
 800241c:	e140      	b.n	80026a0 <Nav_TrapezeAngularVelocity2+0x33c>
				Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 800241e:	4b7c      	ldr	r3, [pc, #496]	; (8002610 <Nav_TrapezeAngularVelocity2+0x2ac>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3b01      	subs	r3, #1
 8002424:	4a7b      	ldr	r2, [pc, #492]	; (8002614 <Nav_TrapezeAngularVelocity2+0x2b0>)
 8002426:	6013      	str	r3, [r2, #0]
				Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
 8002428:	4b74      	ldr	r3, [pc, #464]	; (80025fc <Nav_TrapezeAngularVelocity2+0x298>)
 800242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242e:	497a      	ldr	r1, [pc, #488]	; (8002618 <Nav_TrapezeAngularVelocity2+0x2b4>)
 8002430:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 8002434:	4b70      	ldr	r3, [pc, #448]	; (80025f8 <Nav_TrapezeAngularVelocity2+0x294>)
 8002436:	2203      	movs	r2, #3
 8002438:	701a      	strb	r2, [r3, #0]
	}break;
 800243a:	e131      	b.n	80026a0 <Nav_TrapezeAngularVelocity2+0x33c>
			if( Nav_RemainingAngle_deg_d > ( Nav_ReferenceAngle_deg_d + 2.0 ) )
 800243c:	4b71      	ldr	r3, [pc, #452]	; (8002604 <Nav_TrapezeAngularVelocity2+0x2a0>)
 800243e:	ed93 7b00 	vldr	d7, [r3]
 8002442:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8002446:	ee37 6b06 	vadd.f64	d6, d7, d6
 800244a:	4b6f      	ldr	r3, [pc, #444]	; (8002608 <Nav_TrapezeAngularVelocity2+0x2a4>)
 800244c:	ed93 7b00 	vldr	d7, [r3]
 8002450:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002458:	d51d      	bpl.n	8002496 <Nav_TrapezeAngularVelocity2+0x132>
				if ( Nav_TargetAngularVelocity_d < Nav_MaxAngularVelocity_d  )
 800245a:	4b68      	ldr	r3, [pc, #416]	; (80025fc <Nav_TrapezeAngularVelocity2+0x298>)
 800245c:	ed93 6b00 	vldr	d6, [r3]
 8002460:	4b6a      	ldr	r3, [pc, #424]	; (800260c <Nav_TrapezeAngularVelocity2+0x2a8>)
 8002462:	ed93 7b00 	vldr	d7, [r3]
 8002466:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246e:	d50e      	bpl.n	800248e <Nav_TrapezeAngularVelocity2+0x12a>
					Nav_TargetAngularVelocity_d = Nav_AngularAcc_d * Nav_CurrentSample_u32 ;
 8002470:	4b67      	ldr	r3, [pc, #412]	; (8002610 <Nav_TrapezeAngularVelocity2+0x2ac>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	ee07 3a90 	vmov	s15, r3
 8002478:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800247c:	4b60      	ldr	r3, [pc, #384]	; (8002600 <Nav_TrapezeAngularVelocity2+0x29c>)
 800247e:	ed93 7b00 	vldr	d7, [r3]
 8002482:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002486:	4b5d      	ldr	r3, [pc, #372]	; (80025fc <Nav_TrapezeAngularVelocity2+0x298>)
 8002488:	ed83 7b00 	vstr	d7, [r3]
	}break;
 800248c:	e108      	b.n	80026a0 <Nav_TrapezeAngularVelocity2+0x33c>
					Nav_TrapezePhase_en = Nav_Trapeze_ConstantVelocity_en;
 800248e:	4b5a      	ldr	r3, [pc, #360]	; (80025f8 <Nav_TrapezeAngularVelocity2+0x294>)
 8002490:	2202      	movs	r2, #2
 8002492:	701a      	strb	r2, [r3, #0]
	}break;
 8002494:	e104      	b.n	80026a0 <Nav_TrapezeAngularVelocity2+0x33c>
				Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002496:	4b5e      	ldr	r3, [pc, #376]	; (8002610 <Nav_TrapezeAngularVelocity2+0x2ac>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3b01      	subs	r3, #1
 800249c:	4a5d      	ldr	r2, [pc, #372]	; (8002614 <Nav_TrapezeAngularVelocity2+0x2b0>)
 800249e:	6013      	str	r3, [r2, #0]
				Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
 80024a0:	4b56      	ldr	r3, [pc, #344]	; (80025fc <Nav_TrapezeAngularVelocity2+0x298>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	495c      	ldr	r1, [pc, #368]	; (8002618 <Nav_TrapezeAngularVelocity2+0x2b4>)
 80024a8:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 80024ac:	4b52      	ldr	r3, [pc, #328]	; (80025f8 <Nav_TrapezeAngularVelocity2+0x294>)
 80024ae:	2203      	movs	r2, #3
 80024b0:	701a      	strb	r2, [r3, #0]
	}break;
 80024b2:	e0f5      	b.n	80026a0 <Nav_TrapezeAngularVelocity2+0x33c>

	case Nav_Trapeze_ConstantVelocity_en:
	{
		Nav_ReferenceAngle_deg_d = ( Nav_TargetAngularVelocity_d * Nav_TargetAngularVelocity_d) / ( 2 * Nav_AngularAcc_d ) ;
 80024b4:	4b51      	ldr	r3, [pc, #324]	; (80025fc <Nav_TrapezeAngularVelocity2+0x298>)
 80024b6:	ed93 6b00 	vldr	d6, [r3]
 80024ba:	4b50      	ldr	r3, [pc, #320]	; (80025fc <Nav_TrapezeAngularVelocity2+0x298>)
 80024bc:	ed93 7b00 	vldr	d7, [r3]
 80024c0:	ee26 5b07 	vmul.f64	d5, d6, d7
 80024c4:	4b4e      	ldr	r3, [pc, #312]	; (8002600 <Nav_TrapezeAngularVelocity2+0x29c>)
 80024c6:	ed93 7b00 	vldr	d7, [r3]
 80024ca:	ee37 6b07 	vadd.f64	d6, d7, d7
 80024ce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80024d2:	4b4c      	ldr	r3, [pc, #304]	; (8002604 <Nav_TrapezeAngularVelocity2+0x2a0>)
 80024d4:	ed83 7b00 	vstr	d7, [r3]
		if( Nav_RemainingAngle_deg_d > ( Nav_ReferenceAngle_deg_d + 2.0 ) )
 80024d8:	4b4a      	ldr	r3, [pc, #296]	; (8002604 <Nav_TrapezeAngularVelocity2+0x2a0>)
 80024da:	ed93 7b00 	vldr	d7, [r3]
 80024de:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80024e2:	ee37 6b06 	vadd.f64	d6, d7, d6
 80024e6:	4b48      	ldr	r3, [pc, #288]	; (8002608 <Nav_TrapezeAngularVelocity2+0x2a4>)
 80024e8:	ed93 7b00 	vldr	d7, [r3]
 80024ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80024f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f4:	d506      	bpl.n	8002504 <Nav_TrapezeAngularVelocity2+0x1a0>
		{
			Nav_TargetAngularVelocity_d = Nav_MaxAngularVelocity_d ;
 80024f6:	4b45      	ldr	r3, [pc, #276]	; (800260c <Nav_TrapezeAngularVelocity2+0x2a8>)
 80024f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fc:	493f      	ldr	r1, [pc, #252]	; (80025fc <Nav_TrapezeAngularVelocity2+0x298>)
 80024fe:	e9c1 2300 	strd	r2, r3, [r1]
		{
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
			Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
			Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
		}
	}break;
 8002502:	e0cd      	b.n	80026a0 <Nav_TrapezeAngularVelocity2+0x33c>
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002504:	4b42      	ldr	r3, [pc, #264]	; (8002610 <Nav_TrapezeAngularVelocity2+0x2ac>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	3b01      	subs	r3, #1
 800250a:	4a42      	ldr	r2, [pc, #264]	; (8002614 <Nav_TrapezeAngularVelocity2+0x2b0>)
 800250c:	6013      	str	r3, [r2, #0]
			Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
 800250e:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <Nav_TrapezeAngularVelocity2+0x298>)
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	4940      	ldr	r1, [pc, #256]	; (8002618 <Nav_TrapezeAngularVelocity2+0x2b4>)
 8002516:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 800251a:	4b37      	ldr	r3, [pc, #220]	; (80025f8 <Nav_TrapezeAngularVelocity2+0x294>)
 800251c:	2203      	movs	r2, #3
 800251e:	701a      	strb	r2, [r3, #0]
	}break;
 8002520:	e0be      	b.n	80026a0 <Nav_TrapezeAngularVelocity2+0x33c>

	case Nav_Trapeze_Decelerating_en:
	{
		Nav_ReferenceAngle_deg_d = ( Nav_TargetAngularVelocity_d * Nav_TargetAngularVelocity_d) / ( 2 * Nav_AngularAcc_d ) ;
 8002522:	4b36      	ldr	r3, [pc, #216]	; (80025fc <Nav_TrapezeAngularVelocity2+0x298>)
 8002524:	ed93 6b00 	vldr	d6, [r3]
 8002528:	4b34      	ldr	r3, [pc, #208]	; (80025fc <Nav_TrapezeAngularVelocity2+0x298>)
 800252a:	ed93 7b00 	vldr	d7, [r3]
 800252e:	ee26 5b07 	vmul.f64	d5, d6, d7
 8002532:	4b33      	ldr	r3, [pc, #204]	; (8002600 <Nav_TrapezeAngularVelocity2+0x29c>)
 8002534:	ed93 7b00 	vldr	d7, [r3]
 8002538:	ee37 6b07 	vadd.f64	d6, d7, d7
 800253c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002540:	4b30      	ldr	r3, [pc, #192]	; (8002604 <Nav_TrapezeAngularVelocity2+0x2a0>)
 8002542:	ed83 7b00 	vstr	d7, [r3]
		if( Nav_RemainingAngle_deg_d > Nav_ReferenceAngle_deg_d )
 8002546:	4b30      	ldr	r3, [pc, #192]	; (8002608 <Nav_TrapezeAngularVelocity2+0x2a4>)
 8002548:	ed93 6b00 	vldr	d6, [r3]
 800254c:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <Nav_TrapezeAngularVelocity2+0x2a0>)
 800254e:	ed93 7b00 	vldr	d7, [r3]
 8002552:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255a:	dd0b      	ble.n	8002574 <Nav_TrapezeAngularVelocity2+0x210>
		{
			Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
 800255c:	4b27      	ldr	r3, [pc, #156]	; (80025fc <Nav_TrapezeAngularVelocity2+0x298>)
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	492d      	ldr	r1, [pc, #180]	; (8002618 <Nav_TrapezeAngularVelocity2+0x2b4>)
 8002564:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002568:	4b29      	ldr	r3, [pc, #164]	; (8002610 <Nav_TrapezeAngularVelocity2+0x2ac>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3b01      	subs	r3, #1
 800256e:	4a29      	ldr	r2, [pc, #164]	; (8002614 <Nav_TrapezeAngularVelocity2+0x2b0>)
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e015      	b.n	80025a0 <Nav_TrapezeAngularVelocity2+0x23c>
		}
		else
		{
			Nav_TargetAngularVelocity_d = Nav_ReferenceAngularVelocity_d - ( Nav_AngularAcc_d * ( Nav_CurrentSample_u32 -Nav_AccelerationSamples_u32 ) )  ;
 8002574:	4b28      	ldr	r3, [pc, #160]	; (8002618 <Nav_TrapezeAngularVelocity2+0x2b4>)
 8002576:	ed93 6b00 	vldr	d6, [r3]
 800257a:	4b25      	ldr	r3, [pc, #148]	; (8002610 <Nav_TrapezeAngularVelocity2+0x2ac>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4b25      	ldr	r3, [pc, #148]	; (8002614 <Nav_TrapezeAngularVelocity2+0x2b0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	ee07 3a90 	vmov	s15, r3
 8002588:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 800258c:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <Nav_TrapezeAngularVelocity2+0x29c>)
 800258e:	ed93 7b00 	vldr	d7, [r3]
 8002592:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002596:	ee36 7b47 	vsub.f64	d7, d6, d7
 800259a:	4b18      	ldr	r3, [pc, #96]	; (80025fc <Nav_TrapezeAngularVelocity2+0x298>)
 800259c:	ed83 7b00 	vstr	d7, [r3]
		}

		if( ( Nav_RemainingAngle_deg_d <= 0.0 ) || (Nav_TargetAngularVelocity_d <= 0.0) )
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <Nav_TrapezeAngularVelocity2+0x2a4>)
 80025a2:	ed93 7b00 	vldr	d7, [r3]
 80025a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80025aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ae:	d908      	bls.n	80025c2 <Nav_TrapezeAngularVelocity2+0x25e>
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <Nav_TrapezeAngularVelocity2+0x298>)
 80025b2:	ed93 7b00 	vldr	d7, [r3]
 80025b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80025ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025be:	d900      	bls.n	80025c2 <Nav_TrapezeAngularVelocity2+0x25e>
		{
			Nav_TargetAngularVelocity_d = 0 ;
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
		}
	}break;
 80025c0:	e06e      	b.n	80026a0 <Nav_TrapezeAngularVelocity2+0x33c>
			Nav_TargetAngularVelocity_d = 0 ;
 80025c2:	490e      	ldr	r1, [pc, #56]	; (80025fc <Nav_TrapezeAngularVelocity2+0x298>)
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <Nav_TrapezeAngularVelocity2+0x294>)
 80025d2:	2206      	movs	r2, #6
 80025d4:	701a      	strb	r2, [r3, #0]
	}break;
 80025d6:	e063      	b.n	80026a0 <Nav_TrapezeAngularVelocity2+0x33c>
	case Nav_Trapeze_OrderUrgentDecelerating_en:
	{
		Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 80025d8:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <Nav_TrapezeAngularVelocity2+0x2ac>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	3b01      	subs	r3, #1
 80025de:	4a0d      	ldr	r2, [pc, #52]	; (8002614 <Nav_TrapezeAngularVelocity2+0x2b0>)
 80025e0:	6013      	str	r3, [r2, #0]
		Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <Nav_TrapezeAngularVelocity2+0x2b8>)
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	490d      	ldr	r1, [pc, #52]	; (8002620 <Nav_TrapezeAngularVelocity2+0x2bc>)
 80025ea:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrapezePhase_en = Nav_Trapeze_UrgentDecelerating_en;
 80025ee:	4b02      	ldr	r3, [pc, #8]	; (80025f8 <Nav_TrapezeAngularVelocity2+0x294>)
 80025f0:	2205      	movs	r2, #5
 80025f2:	701a      	strb	r2, [r3, #0]
	}break;
 80025f4:	e054      	b.n	80026a0 <Nav_TrapezeAngularVelocity2+0x33c>
 80025f6:	bf00      	nop
 80025f8:	24000008 	.word	0x24000008
 80025fc:	24000298 	.word	0x24000298
 8002600:	24000318 	.word	0x24000318
 8002604:	240001b8 	.word	0x240001b8
 8002608:	240001d8 	.word	0x240001d8
 800260c:	24000320 	.word	0x24000320
 8002610:	24000328 	.word	0x24000328
 8002614:	2400032c 	.word	0x2400032c
 8002618:	240002a0 	.word	0x240002a0
 800261c:	24000290 	.word	0x24000290
 8002620:	240002c0 	.word	0x240002c0
	case Nav_Trapeze_UrgentDecelerating_en :
	{
		Nav_TargetAngularVelocity_d = Nav_ReferenceAngularVelocity_d - ( Nav_AngularAcc_d * ( Nav_CurrentSample_u32 -Nav_AccelerationSamples_u32 ) )  ;
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <Nav_TrapezeAngularVelocity2+0x348>)
 8002626:	ed93 6b00 	vldr	d6, [r3]
 800262a:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <Nav_TrapezeAngularVelocity2+0x34c>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <Nav_TrapezeAngularVelocity2+0x350>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	ee07 3a90 	vmov	s15, r3
 8002638:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 800263c:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <Nav_TrapezeAngularVelocity2+0x354>)
 800263e:	ed93 7b00 	vldr	d7, [r3]
 8002642:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002646:	ee36 7b47 	vsub.f64	d7, d6, d7
 800264a:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <Nav_TrapezeAngularVelocity2+0x358>)
 800264c:	ed83 7b00 	vstr	d7, [r3]

		if( ( Nav_RemainingAngle_deg_d <= 0.0 ) || (Nav_TargetAngularVelocity_d <= 0.0) )
 8002650:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <Nav_TrapezeAngularVelocity2+0x35c>)
 8002652:	ed93 7b00 	vldr	d7, [r3]
 8002656:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800265a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265e:	d908      	bls.n	8002672 <Nav_TrapezeAngularVelocity2+0x30e>
 8002660:	4b16      	ldr	r3, [pc, #88]	; (80026bc <Nav_TrapezeAngularVelocity2+0x358>)
 8002662:	ed93 7b00 	vldr	d7, [r3]
 8002666:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800266a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266e:	d900      	bls.n	8002672 <Nav_TrapezeAngularVelocity2+0x30e>
		{
			Nav_TargetAngularVelocity_d = 0 ;
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
		}
	}break ;
 8002670:	e016      	b.n	80026a0 <Nav_TrapezeAngularVelocity2+0x33c>
			Nav_TargetAngularVelocity_d = 0 ;
 8002672:	4912      	ldr	r1, [pc, #72]	; (80026bc <Nav_TrapezeAngularVelocity2+0x358>)
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
 8002680:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <Nav_TrapezeAngularVelocity2+0x360>)
 8002682:	2206      	movs	r2, #6
 8002684:	701a      	strb	r2, [r3, #0]
	}break ;
 8002686:	e00b      	b.n	80026a0 <Nav_TrapezeAngularVelocity2+0x33c>
	case Nav_Trapeze_Finished_en:
	{
		Nav_TargetAngularVelocity_d = 0.0 ;
 8002688:	490c      	ldr	r1, [pc, #48]	; (80026bc <Nav_TrapezeAngularVelocity2+0x358>)
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrapezePhase_en = Nav_Trapeze_Idle_en ;
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <Nav_TrapezeAngularVelocity2+0x360>)
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
	}break;
 800269c:	e000      	b.n	80026a0 <Nav_TrapezeAngularVelocity2+0x33c>
	}break;
 800269e:	bf00      	nop

	}
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	240002a0 	.word	0x240002a0
 80026b0:	24000328 	.word	0x24000328
 80026b4:	2400032c 	.word	0x2400032c
 80026b8:	24000318 	.word	0x24000318
 80026bc:	24000298 	.word	0x24000298
 80026c0:	240001d8 	.word	0x240001d8
 80026c4:	24000008 	.word	0x24000008

080026c8 <Nav_TrapezeReverseAngularVelocity2>:

void Nav_TrapezeReverseAngularVelocity2()
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
	switch( Nav_TrapezePhase_en )
 80026cc:	4ba1      	ldr	r3, [pc, #644]	; (8002954 <Nav_TrapezeReverseAngularVelocity2+0x28c>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b06      	cmp	r3, #6
 80026d2:	f200 8193 	bhi.w	80029fc <Nav_TrapezeReverseAngularVelocity2+0x334>
 80026d6:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <Nav_TrapezeReverseAngularVelocity2+0x14>)
 80026d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026dc:	080029fb 	.word	0x080029fb
 80026e0:	080026f9 	.word	0x080026f9
 80026e4:	08002819 	.word	0x08002819
 80026e8:	0800287f 	.word	0x0800287f
 80026ec:	08002935 	.word	0x08002935
 80026f0:	08002981 	.word	0x08002981
 80026f4:	080029e5 	.word	0x080029e5
	{

	}break;
	case Nav_Trapeze_Accelerating_en:
	{
		Nav_ReferenceAngle_deg_d = ( Nav_TargetAngularVelocity_d * Nav_TargetAngularVelocity_d) / ( 2 * Nav_AngularAcc_d ) ;
 80026f8:	4b97      	ldr	r3, [pc, #604]	; (8002958 <Nav_TrapezeReverseAngularVelocity2+0x290>)
 80026fa:	ed93 6b00 	vldr	d6, [r3]
 80026fe:	4b96      	ldr	r3, [pc, #600]	; (8002958 <Nav_TrapezeReverseAngularVelocity2+0x290>)
 8002700:	ed93 7b00 	vldr	d7, [r3]
 8002704:	ee26 5b07 	vmul.f64	d5, d6, d7
 8002708:	4b94      	ldr	r3, [pc, #592]	; (800295c <Nav_TrapezeReverseAngularVelocity2+0x294>)
 800270a:	ed93 7b00 	vldr	d7, [r3]
 800270e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002712:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002716:	4b92      	ldr	r3, [pc, #584]	; (8002960 <Nav_TrapezeReverseAngularVelocity2+0x298>)
 8002718:	ed83 7b00 	vstr	d7, [r3]

		if( Nav_RemainingAngle_deg_d > (-2.0) )
 800271c:	4b91      	ldr	r3, [pc, #580]	; (8002964 <Nav_TrapezeReverseAngularVelocity2+0x29c>)
 800271e:	ed93 7b00 	vldr	d7, [r3]
 8002722:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8002726:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800272a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800272e:	dd37      	ble.n	80027a0 <Nav_TrapezeReverseAngularVelocity2+0xd8>
		{
			if( Nav_RemainingAngle_deg_d < Nav_ReferenceAngle_deg_d )
 8002730:	4b8c      	ldr	r3, [pc, #560]	; (8002964 <Nav_TrapezeReverseAngularVelocity2+0x29c>)
 8002732:	ed93 6b00 	vldr	d6, [r3]
 8002736:	4b8a      	ldr	r3, [pc, #552]	; (8002960 <Nav_TrapezeReverseAngularVelocity2+0x298>)
 8002738:	ed93 7b00 	vldr	d7, [r3]
 800273c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002744:	d51d      	bpl.n	8002782 <Nav_TrapezeReverseAngularVelocity2+0xba>
			{
				if ( Nav_TargetAngularVelocity_d > Nav_MaxAngularVelocity_d  )
 8002746:	4b84      	ldr	r3, [pc, #528]	; (8002958 <Nav_TrapezeReverseAngularVelocity2+0x290>)
 8002748:	ed93 6b00 	vldr	d6, [r3]
 800274c:	4b86      	ldr	r3, [pc, #536]	; (8002968 <Nav_TrapezeReverseAngularVelocity2+0x2a0>)
 800274e:	ed93 7b00 	vldr	d7, [r3]
 8002752:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275a:	dd0e      	ble.n	800277a <Nav_TrapezeReverseAngularVelocity2+0xb2>
				{
					Nav_TargetAngularVelocity_d = Nav_AngularAcc_d * Nav_CurrentSample_u32 ;
 800275c:	4b83      	ldr	r3, [pc, #524]	; (800296c <Nav_TrapezeReverseAngularVelocity2+0x2a4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	ee07 3a90 	vmov	s15, r3
 8002764:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002768:	4b7c      	ldr	r3, [pc, #496]	; (800295c <Nav_TrapezeReverseAngularVelocity2+0x294>)
 800276a:	ed93 7b00 	vldr	d7, [r3]
 800276e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002772:	4b79      	ldr	r3, [pc, #484]	; (8002958 <Nav_TrapezeReverseAngularVelocity2+0x290>)
 8002774:	ed83 7b00 	vstr	d7, [r3]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
			}
		}


	}break;
 8002778:	e140      	b.n	80029fc <Nav_TrapezeReverseAngularVelocity2+0x334>
					Nav_TrapezePhase_en = Nav_Trapeze_ConstantVelocity_en;
 800277a:	4b76      	ldr	r3, [pc, #472]	; (8002954 <Nav_TrapezeReverseAngularVelocity2+0x28c>)
 800277c:	2202      	movs	r2, #2
 800277e:	701a      	strb	r2, [r3, #0]
	}break;
 8002780:	e13c      	b.n	80029fc <Nav_TrapezeReverseAngularVelocity2+0x334>
				Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002782:	4b7a      	ldr	r3, [pc, #488]	; (800296c <Nav_TrapezeReverseAngularVelocity2+0x2a4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3b01      	subs	r3, #1
 8002788:	4a79      	ldr	r2, [pc, #484]	; (8002970 <Nav_TrapezeReverseAngularVelocity2+0x2a8>)
 800278a:	6013      	str	r3, [r2, #0]
				Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
 800278c:	4b72      	ldr	r3, [pc, #456]	; (8002958 <Nav_TrapezeReverseAngularVelocity2+0x290>)
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	4978      	ldr	r1, [pc, #480]	; (8002974 <Nav_TrapezeReverseAngularVelocity2+0x2ac>)
 8002794:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 8002798:	4b6e      	ldr	r3, [pc, #440]	; (8002954 <Nav_TrapezeReverseAngularVelocity2+0x28c>)
 800279a:	2203      	movs	r2, #3
 800279c:	701a      	strb	r2, [r3, #0]
	}break;
 800279e:	e12d      	b.n	80029fc <Nav_TrapezeReverseAngularVelocity2+0x334>
			if( Nav_RemainingAngle_deg_d < ( Nav_ReferenceAngle_deg_d - 2.0 ) )
 80027a0:	4b6f      	ldr	r3, [pc, #444]	; (8002960 <Nav_TrapezeReverseAngularVelocity2+0x298>)
 80027a2:	ed93 7b00 	vldr	d7, [r3]
 80027a6:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80027aa:	ee37 6b46 	vsub.f64	d6, d7, d6
 80027ae:	4b6d      	ldr	r3, [pc, #436]	; (8002964 <Nav_TrapezeReverseAngularVelocity2+0x29c>)
 80027b0:	ed93 7b00 	vldr	d7, [r3]
 80027b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80027b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027bc:	dd1d      	ble.n	80027fa <Nav_TrapezeReverseAngularVelocity2+0x132>
				if ( Nav_TargetAngularVelocity_d > Nav_MaxAngularVelocity_d  )
 80027be:	4b66      	ldr	r3, [pc, #408]	; (8002958 <Nav_TrapezeReverseAngularVelocity2+0x290>)
 80027c0:	ed93 6b00 	vldr	d6, [r3]
 80027c4:	4b68      	ldr	r3, [pc, #416]	; (8002968 <Nav_TrapezeReverseAngularVelocity2+0x2a0>)
 80027c6:	ed93 7b00 	vldr	d7, [r3]
 80027ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80027ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d2:	dd0e      	ble.n	80027f2 <Nav_TrapezeReverseAngularVelocity2+0x12a>
					Nav_TargetAngularVelocity_d = Nav_AngularAcc_d * Nav_CurrentSample_u32 ;
 80027d4:	4b65      	ldr	r3, [pc, #404]	; (800296c <Nav_TrapezeReverseAngularVelocity2+0x2a4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	ee07 3a90 	vmov	s15, r3
 80027dc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80027e0:	4b5e      	ldr	r3, [pc, #376]	; (800295c <Nav_TrapezeReverseAngularVelocity2+0x294>)
 80027e2:	ed93 7b00 	vldr	d7, [r3]
 80027e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80027ea:	4b5b      	ldr	r3, [pc, #364]	; (8002958 <Nav_TrapezeReverseAngularVelocity2+0x290>)
 80027ec:	ed83 7b00 	vstr	d7, [r3]
	}break;
 80027f0:	e104      	b.n	80029fc <Nav_TrapezeReverseAngularVelocity2+0x334>
					Nav_TrapezePhase_en = Nav_Trapeze_ConstantVelocity_en;
 80027f2:	4b58      	ldr	r3, [pc, #352]	; (8002954 <Nav_TrapezeReverseAngularVelocity2+0x28c>)
 80027f4:	2202      	movs	r2, #2
 80027f6:	701a      	strb	r2, [r3, #0]
	}break;
 80027f8:	e100      	b.n	80029fc <Nav_TrapezeReverseAngularVelocity2+0x334>
				Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 80027fa:	4b5c      	ldr	r3, [pc, #368]	; (800296c <Nav_TrapezeReverseAngularVelocity2+0x2a4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	3b01      	subs	r3, #1
 8002800:	4a5b      	ldr	r2, [pc, #364]	; (8002970 <Nav_TrapezeReverseAngularVelocity2+0x2a8>)
 8002802:	6013      	str	r3, [r2, #0]
				Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
 8002804:	4b54      	ldr	r3, [pc, #336]	; (8002958 <Nav_TrapezeReverseAngularVelocity2+0x290>)
 8002806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280a:	495a      	ldr	r1, [pc, #360]	; (8002974 <Nav_TrapezeReverseAngularVelocity2+0x2ac>)
 800280c:	e9c1 2300 	strd	r2, r3, [r1]
				Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 8002810:	4b50      	ldr	r3, [pc, #320]	; (8002954 <Nav_TrapezeReverseAngularVelocity2+0x28c>)
 8002812:	2203      	movs	r2, #3
 8002814:	701a      	strb	r2, [r3, #0]
	}break;
 8002816:	e0f1      	b.n	80029fc <Nav_TrapezeReverseAngularVelocity2+0x334>

	case Nav_Trapeze_ConstantVelocity_en:
	{
		Nav_ReferenceAngle_deg_d = ( Nav_TargetAngularVelocity_d * Nav_TargetAngularVelocity_d) / ( 2 * Nav_AngularAcc_d ) ;
 8002818:	4b4f      	ldr	r3, [pc, #316]	; (8002958 <Nav_TrapezeReverseAngularVelocity2+0x290>)
 800281a:	ed93 6b00 	vldr	d6, [r3]
 800281e:	4b4e      	ldr	r3, [pc, #312]	; (8002958 <Nav_TrapezeReverseAngularVelocity2+0x290>)
 8002820:	ed93 7b00 	vldr	d7, [r3]
 8002824:	ee26 5b07 	vmul.f64	d5, d6, d7
 8002828:	4b4c      	ldr	r3, [pc, #304]	; (800295c <Nav_TrapezeReverseAngularVelocity2+0x294>)
 800282a:	ed93 7b00 	vldr	d7, [r3]
 800282e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002832:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002836:	4b4a      	ldr	r3, [pc, #296]	; (8002960 <Nav_TrapezeReverseAngularVelocity2+0x298>)
 8002838:	ed83 7b00 	vstr	d7, [r3]
		if( Nav_RemainingAngle_deg_d < ( Nav_ReferenceAngle_deg_d /*- 2.0*/ ))
 800283c:	4b49      	ldr	r3, [pc, #292]	; (8002964 <Nav_TrapezeReverseAngularVelocity2+0x29c>)
 800283e:	ed93 6b00 	vldr	d6, [r3]
 8002842:	4b47      	ldr	r3, [pc, #284]	; (8002960 <Nav_TrapezeReverseAngularVelocity2+0x298>)
 8002844:	ed93 7b00 	vldr	d7, [r3]
 8002848:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800284c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002850:	d506      	bpl.n	8002860 <Nav_TrapezeReverseAngularVelocity2+0x198>
		{
			Nav_TargetAngularVelocity_d = Nav_MaxAngularVelocity_d ;
 8002852:	4b45      	ldr	r3, [pc, #276]	; (8002968 <Nav_TrapezeReverseAngularVelocity2+0x2a0>)
 8002854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002858:	493f      	ldr	r1, [pc, #252]	; (8002958 <Nav_TrapezeReverseAngularVelocity2+0x290>)
 800285a:	e9c1 2300 	strd	r2, r3, [r1]
		{
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
			Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
			Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
		}
	}break;
 800285e:	e0cd      	b.n	80029fc <Nav_TrapezeReverseAngularVelocity2+0x334>
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002860:	4b42      	ldr	r3, [pc, #264]	; (800296c <Nav_TrapezeReverseAngularVelocity2+0x2a4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	3b01      	subs	r3, #1
 8002866:	4a42      	ldr	r2, [pc, #264]	; (8002970 <Nav_TrapezeReverseAngularVelocity2+0x2a8>)
 8002868:	6013      	str	r3, [r2, #0]
			Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
 800286a:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <Nav_TrapezeReverseAngularVelocity2+0x290>)
 800286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002870:	4940      	ldr	r1, [pc, #256]	; (8002974 <Nav_TrapezeReverseAngularVelocity2+0x2ac>)
 8002872:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Decelerating_en;
 8002876:	4b37      	ldr	r3, [pc, #220]	; (8002954 <Nav_TrapezeReverseAngularVelocity2+0x28c>)
 8002878:	2203      	movs	r2, #3
 800287a:	701a      	strb	r2, [r3, #0]
	}break;
 800287c:	e0be      	b.n	80029fc <Nav_TrapezeReverseAngularVelocity2+0x334>

	case Nav_Trapeze_Decelerating_en:
	{
		Nav_ReferenceAngle_deg_d = ( Nav_TargetAngularVelocity_d * Nav_TargetAngularVelocity_d) / ( 2 * Nav_AngularAcc_d ) ;
 800287e:	4b36      	ldr	r3, [pc, #216]	; (8002958 <Nav_TrapezeReverseAngularVelocity2+0x290>)
 8002880:	ed93 6b00 	vldr	d6, [r3]
 8002884:	4b34      	ldr	r3, [pc, #208]	; (8002958 <Nav_TrapezeReverseAngularVelocity2+0x290>)
 8002886:	ed93 7b00 	vldr	d7, [r3]
 800288a:	ee26 5b07 	vmul.f64	d5, d6, d7
 800288e:	4b33      	ldr	r3, [pc, #204]	; (800295c <Nav_TrapezeReverseAngularVelocity2+0x294>)
 8002890:	ed93 7b00 	vldr	d7, [r3]
 8002894:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002898:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800289c:	4b30      	ldr	r3, [pc, #192]	; (8002960 <Nav_TrapezeReverseAngularVelocity2+0x298>)
 800289e:	ed83 7b00 	vstr	d7, [r3]
		if( Nav_RemainingAngle_deg_d < Nav_ReferenceAngle_deg_d )
 80028a2:	4b30      	ldr	r3, [pc, #192]	; (8002964 <Nav_TrapezeReverseAngularVelocity2+0x29c>)
 80028a4:	ed93 6b00 	vldr	d6, [r3]
 80028a8:	4b2d      	ldr	r3, [pc, #180]	; (8002960 <Nav_TrapezeReverseAngularVelocity2+0x298>)
 80028aa:	ed93 7b00 	vldr	d7, [r3]
 80028ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80028b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b6:	d50b      	bpl.n	80028d0 <Nav_TrapezeReverseAngularVelocity2+0x208>
		{
			Nav_ReferenceAngularVelocity_d = Nav_TargetAngularVelocity_d;
 80028b8:	4b27      	ldr	r3, [pc, #156]	; (8002958 <Nav_TrapezeReverseAngularVelocity2+0x290>)
 80028ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028be:	492d      	ldr	r1, [pc, #180]	; (8002974 <Nav_TrapezeReverseAngularVelocity2+0x2ac>)
 80028c0:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 80028c4:	4b29      	ldr	r3, [pc, #164]	; (800296c <Nav_TrapezeReverseAngularVelocity2+0x2a4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	4a29      	ldr	r2, [pc, #164]	; (8002970 <Nav_TrapezeReverseAngularVelocity2+0x2a8>)
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e015      	b.n	80028fc <Nav_TrapezeReverseAngularVelocity2+0x234>
		}
		else
		{
			Nav_TargetAngularVelocity_d = Nav_ReferenceAngularVelocity_d - ( Nav_AngularAcc_d * ( Nav_CurrentSample_u32 -Nav_AccelerationSamples_u32 ) )  ;
 80028d0:	4b28      	ldr	r3, [pc, #160]	; (8002974 <Nav_TrapezeReverseAngularVelocity2+0x2ac>)
 80028d2:	ed93 6b00 	vldr	d6, [r3]
 80028d6:	4b25      	ldr	r3, [pc, #148]	; (800296c <Nav_TrapezeReverseAngularVelocity2+0x2a4>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	4b25      	ldr	r3, [pc, #148]	; (8002970 <Nav_TrapezeReverseAngularVelocity2+0x2a8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	ee07 3a90 	vmov	s15, r3
 80028e4:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80028e8:	4b1c      	ldr	r3, [pc, #112]	; (800295c <Nav_TrapezeReverseAngularVelocity2+0x294>)
 80028ea:	ed93 7b00 	vldr	d7, [r3]
 80028ee:	ee25 7b07 	vmul.f64	d7, d5, d7
 80028f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80028f6:	4b18      	ldr	r3, [pc, #96]	; (8002958 <Nav_TrapezeReverseAngularVelocity2+0x290>)
 80028f8:	ed83 7b00 	vstr	d7, [r3]
		}

		if( ( Nav_RemainingAngle_deg_d >= 0.0 ) || (Nav_TargetAngularVelocity_d >= 0.0) )
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <Nav_TrapezeReverseAngularVelocity2+0x29c>)
 80028fe:	ed93 7b00 	vldr	d7, [r3]
 8002902:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	da08      	bge.n	800291e <Nav_TrapezeReverseAngularVelocity2+0x256>
 800290c:	4b12      	ldr	r3, [pc, #72]	; (8002958 <Nav_TrapezeReverseAngularVelocity2+0x290>)
 800290e:	ed93 7b00 	vldr	d7, [r3]
 8002912:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291a:	da00      	bge.n	800291e <Nav_TrapezeReverseAngularVelocity2+0x256>
		{
			Nav_TargetAngularVelocity_d = 0 ;
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
		}
	}break;
 800291c:	e06e      	b.n	80029fc <Nav_TrapezeReverseAngularVelocity2+0x334>
			Nav_TargetAngularVelocity_d = 0 ;
 800291e:	490e      	ldr	r1, [pc, #56]	; (8002958 <Nav_TrapezeReverseAngularVelocity2+0x290>)
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
 800292c:	4b09      	ldr	r3, [pc, #36]	; (8002954 <Nav_TrapezeReverseAngularVelocity2+0x28c>)
 800292e:	2206      	movs	r2, #6
 8002930:	701a      	strb	r2, [r3, #0]
	}break;
 8002932:	e063      	b.n	80029fc <Nav_TrapezeReverseAngularVelocity2+0x334>
	case Nav_Trapeze_OrderUrgentDecelerating_en:
	{
		Nav_AccelerationSamples_u32 = Nav_CurrentSample_u32 - 1;
 8002934:	4b0d      	ldr	r3, [pc, #52]	; (800296c <Nav_TrapezeReverseAngularVelocity2+0x2a4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3b01      	subs	r3, #1
 800293a:	4a0d      	ldr	r2, [pc, #52]	; (8002970 <Nav_TrapezeReverseAngularVelocity2+0x2a8>)
 800293c:	6013      	str	r3, [r2, #0]
		Nav_ReferenceLinearVelocity_d = Nav_TargetLinearVelocity_d;
 800293e:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <Nav_TrapezeReverseAngularVelocity2+0x2b0>)
 8002940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002944:	490d      	ldr	r1, [pc, #52]	; (800297c <Nav_TrapezeReverseAngularVelocity2+0x2b4>)
 8002946:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrapezePhase_en = Nav_Trapeze_UrgentDecelerating_en;
 800294a:	4b02      	ldr	r3, [pc, #8]	; (8002954 <Nav_TrapezeReverseAngularVelocity2+0x28c>)
 800294c:	2205      	movs	r2, #5
 800294e:	701a      	strb	r2, [r3, #0]
	}break;
 8002950:	e054      	b.n	80029fc <Nav_TrapezeReverseAngularVelocity2+0x334>
 8002952:	bf00      	nop
 8002954:	24000008 	.word	0x24000008
 8002958:	24000298 	.word	0x24000298
 800295c:	24000318 	.word	0x24000318
 8002960:	240001b8 	.word	0x240001b8
 8002964:	240001d8 	.word	0x240001d8
 8002968:	24000320 	.word	0x24000320
 800296c:	24000328 	.word	0x24000328
 8002970:	2400032c 	.word	0x2400032c
 8002974:	240002a0 	.word	0x240002a0
 8002978:	24000290 	.word	0x24000290
 800297c:	240002c0 	.word	0x240002c0
	case Nav_Trapeze_UrgentDecelerating_en :
	{
		Nav_TargetAngularVelocity_d = Nav_ReferenceAngularVelocity_d - ( Nav_AngularAcc_d * ( Nav_CurrentSample_u32 -Nav_AccelerationSamples_u32 ) )  ;
 8002980:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <Nav_TrapezeReverseAngularVelocity2+0x340>)
 8002982:	ed93 6b00 	vldr	d6, [r3]
 8002986:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <Nav_TrapezeReverseAngularVelocity2+0x344>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <Nav_TrapezeReverseAngularVelocity2+0x348>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	ee07 3a90 	vmov	s15, r3
 8002994:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8002998:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <Nav_TrapezeReverseAngularVelocity2+0x34c>)
 800299a:	ed93 7b00 	vldr	d7, [r3]
 800299e:	ee25 7b07 	vmul.f64	d7, d5, d7
 80029a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80029a6:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <Nav_TrapezeReverseAngularVelocity2+0x350>)
 80029a8:	ed83 7b00 	vstr	d7, [r3]
		if( ( Nav_RemainingAngle_deg_d >= 0.0 ) || (Nav_TargetAngularVelocity_d >= 0.0) )
 80029ac:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <Nav_TrapezeReverseAngularVelocity2+0x354>)
 80029ae:	ed93 7b00 	vldr	d7, [r3]
 80029b2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80029b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ba:	da08      	bge.n	80029ce <Nav_TrapezeReverseAngularVelocity2+0x306>
 80029bc:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <Nav_TrapezeReverseAngularVelocity2+0x350>)
 80029be:	ed93 7b00 	vldr	d7, [r3]
 80029c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ca:	da00      	bge.n	80029ce <Nav_TrapezeReverseAngularVelocity2+0x306>
		{
			Nav_TargetAngularVelocity_d = 0 ;
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
		}

	}break;
 80029cc:	e016      	b.n	80029fc <Nav_TrapezeReverseAngularVelocity2+0x334>
			Nav_TargetAngularVelocity_d = 0 ;
 80029ce:	4912      	ldr	r1, [pc, #72]	; (8002a18 <Nav_TrapezeReverseAngularVelocity2+0x350>)
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	e9c1 2300 	strd	r2, r3, [r1]
			Nav_TrapezePhase_en = Nav_Trapeze_Finished_en ;
 80029dc:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <Nav_TrapezeReverseAngularVelocity2+0x358>)
 80029de:	2206      	movs	r2, #6
 80029e0:	701a      	strb	r2, [r3, #0]
	}break;
 80029e2:	e00b      	b.n	80029fc <Nav_TrapezeReverseAngularVelocity2+0x334>

	case Nav_Trapeze_Finished_en:
	{
		Nav_TargetAngularVelocity_d = 0.0 ;
 80029e4:	490c      	ldr	r1, [pc, #48]	; (8002a18 <Nav_TrapezeReverseAngularVelocity2+0x350>)
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	e9c1 2300 	strd	r2, r3, [r1]
		Nav_TrapezePhase_en = Nav_Trapeze_Idle_en ;
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <Nav_TrapezeReverseAngularVelocity2+0x358>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
	}break;
 80029f8:	e000      	b.n	80029fc <Nav_TrapezeReverseAngularVelocity2+0x334>
	}break;
 80029fa:	bf00      	nop

	}

}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	240002a0 	.word	0x240002a0
 8002a0c:	24000328 	.word	0x24000328
 8002a10:	2400032c 	.word	0x2400032c
 8002a14:	24000318 	.word	0x24000318
 8002a18:	24000298 	.word	0x24000298
 8002a1c:	240001d8 	.word	0x240001d8
 8002a20:	24000008 	.word	0x24000008

08002a24 <Nav_vTargetDistanceCalculationRoutine>:



void Nav_vTargetDistanceCalculationRoutine()
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
	Nav_CurrentTargetDistance_mm_d = Nav_PrevTargetDistance_mm_d + Nav_TargetLinearVelocity_d ;
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <Nav_vTargetDistanceCalculationRoutine+0x30>)
 8002a2a:	ed93 6b00 	vldr	d6, [r3]
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <Nav_vTargetDistanceCalculationRoutine+0x34>)
 8002a30:	ed93 7b00 	vldr	d7, [r3]
 8002a34:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <Nav_vTargetDistanceCalculationRoutine+0x38>)
 8002a3a:	ed83 7b00 	vstr	d7, [r3]
	Nav_PrevTargetDistance_mm_d = Nav_CurrentTargetDistance_mm_d ;
 8002a3e:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <Nav_vTargetDistanceCalculationRoutine+0x38>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	4903      	ldr	r1, [pc, #12]	; (8002a54 <Nav_vTargetDistanceCalculationRoutine+0x30>)
 8002a46:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	24000270 	.word	0x24000270
 8002a58:	24000290 	.word	0x24000290
 8002a5c:	24000268 	.word	0x24000268

08002a60 <Nav_vTargetAngleCalculationRoutine>:

void Nav_vTargetAngleCalculationRoutine()
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
	Nav_CurrentTargetAngle_deg_d = Nav_PrevTargetAngle_deg_d + Nav_TargetAngularVelocity_d ;
 8002a64:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <Nav_vTargetAngleCalculationRoutine+0x30>)
 8002a66:	ed93 6b00 	vldr	d6, [r3]
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <Nav_vTargetAngleCalculationRoutine+0x34>)
 8002a6c:	ed93 7b00 	vldr	d7, [r3]
 8002a70:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <Nav_vTargetAngleCalculationRoutine+0x38>)
 8002a76:	ed83 7b00 	vstr	d7, [r3]
	Nav_PrevTargetAngle_deg_d = Nav_CurrentTargetAngle_deg_d;
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <Nav_vTargetAngleCalculationRoutine+0x38>)
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	4903      	ldr	r1, [pc, #12]	; (8002a90 <Nav_vTargetAngleCalculationRoutine+0x30>)
 8002a82:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002a86:	bf00      	nop
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	24000288 	.word	0x24000288
 8002a94:	24000298 	.word	0x24000298
 8002a98:	24000280 	.word	0x24000280
 8002a9c:	00000000 	.word	0x00000000

08002aa0 <Nav_vSaturateRemainingAngle>:



void Nav_vSaturateRemainingAngle()
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
	if( Nav_RemainingAngle_deg_d > 180 )
 8002aa4:	4b2e      	ldr	r3, [pc, #184]	; (8002b60 <Nav_vSaturateRemainingAngle+0xc0>)
 8002aa6:	ed93 7b00 	vldr	d7, [r3]
 8002aaa:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8002b38 <Nav_vSaturateRemainingAngle+0x98>
 8002aae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab6:	dd0a      	ble.n	8002ace <Nav_vSaturateRemainingAngle+0x2e>
	{
		Nav_RemainingAngle_deg_d -= 360;
 8002ab8:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <Nav_vSaturateRemainingAngle+0xc0>)
 8002aba:	ed93 7b00 	vldr	d7, [r3]
 8002abe:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8002b40 <Nav_vSaturateRemainingAngle+0xa0>
 8002ac2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ac6:	4b26      	ldr	r3, [pc, #152]	; (8002b60 <Nav_vSaturateRemainingAngle+0xc0>)
 8002ac8:	ed83 7b00 	vstr	d7, [r3]
 8002acc:	e013      	b.n	8002af6 <Nav_vSaturateRemainingAngle+0x56>
	}
	else if ( Nav_RemainingAngle_deg_d < -180 )
 8002ace:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <Nav_vSaturateRemainingAngle+0xc0>)
 8002ad0:	ed93 7b00 	vldr	d7, [r3]
 8002ad4:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8002b48 <Nav_vSaturateRemainingAngle+0xa8>
 8002ad8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae0:	d509      	bpl.n	8002af6 <Nav_vSaturateRemainingAngle+0x56>
	{
		Nav_RemainingAngle_deg_d += 360;
 8002ae2:	4b1f      	ldr	r3, [pc, #124]	; (8002b60 <Nav_vSaturateRemainingAngle+0xc0>)
 8002ae4:	ed93 7b00 	vldr	d7, [r3]
 8002ae8:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8002b40 <Nav_vSaturateRemainingAngle+0xa0>
 8002aec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002af0:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <Nav_vSaturateRemainingAngle+0xc0>)
 8002af2:	ed83 7b00 	vstr	d7, [r3]
	}
	if( (  Nav_RemainingAngle_deg_d > 177 )|| ( Nav_RemainingAngle_deg_d < -177 ) )
 8002af6:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <Nav_vSaturateRemainingAngle+0xc0>)
 8002af8:	ed93 7b00 	vldr	d7, [r3]
 8002afc:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8002b50 <Nav_vSaturateRemainingAngle+0xb0>
 8002b00:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b08:	dc0a      	bgt.n	8002b20 <Nav_vSaturateRemainingAngle+0x80>
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <Nav_vSaturateRemainingAngle+0xc0>)
 8002b0c:	ed93 7b00 	vldr	d7, [r3]
 8002b10:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8002b58 <Nav_vSaturateRemainingAngle+0xb8>
 8002b14:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	d400      	bmi.n	8002b20 <Nav_vSaturateRemainingAngle+0x80>
	{
		Nav_RemainingAngle_deg_d = 177;
	}
}
 8002b1e:	e005      	b.n	8002b2c <Nav_vSaturateRemainingAngle+0x8c>
		Nav_RemainingAngle_deg_d = 177;
 8002b20:	490f      	ldr	r1, [pc, #60]	; (8002b60 <Nav_vSaturateRemainingAngle+0xc0>)
 8002b22:	a30b      	add	r3, pc, #44	; (adr r3, 8002b50 <Nav_vSaturateRemainingAngle+0xb0>)
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	00000000 	.word	0x00000000
 8002b3c:	40668000 	.word	0x40668000
 8002b40:	00000000 	.word	0x00000000
 8002b44:	40768000 	.word	0x40768000
 8002b48:	00000000 	.word	0x00000000
 8002b4c:	c0668000 	.word	0xc0668000
 8002b50:	00000000 	.word	0x00000000
 8002b54:	40662000 	.word	0x40662000
 8002b58:	00000000 	.word	0x00000000
 8002b5c:	c0662000 	.word	0xc0662000
 8002b60:	240001d8 	.word	0x240001d8
 8002b64:	00000000 	.word	0x00000000

08002b68 <Nav_vCurrentTargetAngleFollower>:

void Nav_vCurrentTargetAngleFollower()
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0

	if( (Nav_CurrentTargetAngle_deg_d - Nav_CurrentAngle_deg_d) > 340.0  )
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <Nav_vCurrentTargetAngleFollower+0xe0>)
 8002b6e:	ed93 6b00 	vldr	d6, [r3]
 8002b72:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <Nav_vCurrentTargetAngleFollower+0xe4>)
 8002b74:	ed93 7b00 	vldr	d7, [r3]
 8002b78:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b7c:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8002c30 <Nav_vCurrentTargetAngleFollower+0xc8>
 8002b80:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b88:	dd1e      	ble.n	8002bc8 <Nav_vCurrentTargetAngleFollower+0x60>
	{
		Nav_CurrentAngle_deg_d += 360.0;
 8002b8a:	4b30      	ldr	r3, [pc, #192]	; (8002c4c <Nav_vCurrentTargetAngleFollower+0xe4>)
 8002b8c:	ed93 7b00 	vldr	d7, [r3]
 8002b90:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8002c38 <Nav_vCurrentTargetAngleFollower+0xd0>
 8002b94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b98:	4b2c      	ldr	r3, [pc, #176]	; (8002c4c <Nav_vCurrentTargetAngleFollower+0xe4>)
 8002b9a:	ed83 7b00 	vstr	d7, [r3]
		Nav_CurrentAngle_rad_d += M_2PI ;
 8002b9e:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <Nav_vCurrentTargetAngleFollower+0xe8>)
 8002ba0:	ed93 7b00 	vldr	d7, [r3]
 8002ba4:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8002c40 <Nav_vCurrentTargetAngleFollower+0xd8>
 8002ba8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002bac:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <Nav_vCurrentTargetAngleFollower+0xe8>)
 8002bae:	ed83 7b00 	vstr	d7, [r3]
		Nav_PrevAngle_rad_d += M_2PI ;
 8002bb2:	4b28      	ldr	r3, [pc, #160]	; (8002c54 <Nav_vCurrentTargetAngleFollower+0xec>)
 8002bb4:	ed93 7b00 	vldr	d7, [r3]
 8002bb8:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8002c40 <Nav_vCurrentTargetAngleFollower+0xd8>
 8002bbc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002bc0:	4b24      	ldr	r3, [pc, #144]	; (8002c54 <Nav_vCurrentTargetAngleFollower+0xec>)
 8002bc2:	ed83 7b00 	vstr	d7, [r3]

		Nav_CurrentAngle_deg_d -=  (double) 360.0;
		Nav_CurrentAngle_rad_d -=((double) M_2PI) ;
		Nav_PrevAngle_rad_d -=  ((double) M_2PI );
	}
}
 8002bc6:	e02d      	b.n	8002c24 <Nav_vCurrentTargetAngleFollower+0xbc>
	else if( ( Nav_CurrentAngle_deg_d - Nav_CurrentTargetAngle_deg_d) > 340.0 )
 8002bc8:	4b20      	ldr	r3, [pc, #128]	; (8002c4c <Nav_vCurrentTargetAngleFollower+0xe4>)
 8002bca:	ed93 6b00 	vldr	d6, [r3]
 8002bce:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <Nav_vCurrentTargetAngleFollower+0xe0>)
 8002bd0:	ed93 7b00 	vldr	d7, [r3]
 8002bd4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002bd8:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8002c30 <Nav_vCurrentTargetAngleFollower+0xc8>
 8002bdc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be4:	dc00      	bgt.n	8002be8 <Nav_vCurrentTargetAngleFollower+0x80>
}
 8002be6:	e01d      	b.n	8002c24 <Nav_vCurrentTargetAngleFollower+0xbc>
		Nav_CurrentAngle_deg_d -=  (double) 360.0;
 8002be8:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <Nav_vCurrentTargetAngleFollower+0xe4>)
 8002bea:	ed93 7b00 	vldr	d7, [r3]
 8002bee:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8002c38 <Nav_vCurrentTargetAngleFollower+0xd0>
 8002bf2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <Nav_vCurrentTargetAngleFollower+0xe4>)
 8002bf8:	ed83 7b00 	vstr	d7, [r3]
		Nav_CurrentAngle_rad_d -=((double) M_2PI) ;
 8002bfc:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <Nav_vCurrentTargetAngleFollower+0xe8>)
 8002bfe:	ed93 7b00 	vldr	d7, [r3]
 8002c02:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8002c40 <Nav_vCurrentTargetAngleFollower+0xd8>
 8002c06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c0a:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <Nav_vCurrentTargetAngleFollower+0xe8>)
 8002c0c:	ed83 7b00 	vstr	d7, [r3]
		Nav_PrevAngle_rad_d -=  ((double) M_2PI );
 8002c10:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <Nav_vCurrentTargetAngleFollower+0xec>)
 8002c12:	ed93 7b00 	vldr	d7, [r3]
 8002c16:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8002c40 <Nav_vCurrentTargetAngleFollower+0xd8>
 8002c1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <Nav_vCurrentTargetAngleFollower+0xec>)
 8002c20:	ed83 7b00 	vstr	d7, [r3]
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	00000000 	.word	0x00000000
 8002c34:	40754000 	.word	0x40754000
 8002c38:	00000000 	.word	0x00000000
 8002c3c:	40768000 	.word	0x40768000
 8002c40:	54442d18 	.word	0x54442d18
 8002c44:	401921fb 	.word	0x401921fb
 8002c48:	24000280 	.word	0x24000280
 8002c4c:	24000200 	.word	0x24000200
 8002c50:	240001e8 	.word	0x240001e8
 8002c54:	240001f0 	.word	0x240001f0

08002c58 <HAL_TIM_PeriodElapsedCallback>:
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)

{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

	if ( htim == &htim6 )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a04      	ldr	r2, [pc, #16]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d101      	bne.n	8002c6c <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		Nav_vExecutePath();
 8002c68:	f7fd ff1e 	bl	8000aa8 <Nav_vExecutePath>
	//		Nav_NavigatorMustAlert = 0 ;
	//		MASTER_Robot_State[1] = Nav_Navigator_Indicator ;
	//		ringbuff_write(rb_cm7_to_cm4 , MASTER_Robot_State , 2 * sizeof(float));
	//	}

}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	24000418 	.word	0x24000418

08002c78 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
	//uint32_t time, t1;

	/* 1. Start CPU2 core
	 * 2. Wait for CPU2 to enter low-power mode
	 */
	HAL_RCCEx_EnableBootCore(RCC_BOOT_C2);
 8002c7e:	2008      	movs	r0, #8
 8002c80:	f002 f8bc 	bl	8004dfc <HAL_RCCEx_EnableBootCore>
	WAIT_COND_WITH_TIMEOUT(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET, 0xFFFF);
 8002c84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	bf00      	nop
 8002c8c:	4b48      	ldr	r3, [pc, #288]	; (8002db0 <main+0x138>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d004      	beq.n	8002ca2 <main+0x2a>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1e5a      	subs	r2, r3, #1
 8002c9c:	60fa      	str	r2, [r7, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	dcf4      	bgt.n	8002c8c <main+0x14>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	da01      	bge.n	8002cac <main+0x34>
 8002ca8:	f000 fb4e 	bl	8003348 <Error_Handler>
	/* USER CODE END 1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002cac:	f000 fd12 	bl	80036d4 <HAL_Init>

	/* USER CODE BEGIN Init */
	Nav_vNavigatorInit();
 8002cb0:	f7fe ffae 	bl	8001c10 <Nav_vNavigatorInit>
	led_init();
 8002cb4:	f000 fb1a 	bl	80032ec <led_init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002cb8:	f000 f88e 	bl	8002dd8 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	ringbuff_init(rb_cm7_to_cm4, (void *)BUFFDATA_CM7_TO_CM4_ADDR, BUFFDATA_CM7_TO_CM4_LEN);
 8002cbc:	4b3d      	ldr	r3, [pc, #244]	; (8002db4 <main+0x13c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cc4:	493c      	ldr	r1, [pc, #240]	; (8002db8 <main+0x140>)
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fb44 	bl	8003354 <ringbuff_init>
	ringbuff_init(rb_cm4_to_cm7, (void *)BUFFDATA_CM4_TO_CM7_ADDR, BUFFDATA_CM4_TO_CM7_LEN);
 8002ccc:	4b3b      	ldr	r3, [pc, #236]	; (8002dbc <main+0x144>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cd4:	493a      	ldr	r1, [pc, #232]	; (8002dc0 <main+0x148>)
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fb3c 	bl	8003354 <ringbuff_init>

	/* Wakeup CPU2 */
	__HAL_RCC_HSEM_CLK_ENABLE();
 8002cdc:	4b34      	ldr	r3, [pc, #208]	; (8002db0 <main+0x138>)
 8002cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce2:	4a33      	ldr	r2, [pc, #204]	; (8002db0 <main+0x138>)
 8002ce4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cec:	4b30      	ldr	r3, [pc, #192]	; (8002db0 <main+0x138>)
 8002cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
	HSEM_TAKE_RELEASE(HSEM_WAKEUP_CPU2);
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f001 f86c 	bl	8003dd8 <HAL_HSEM_FastTake>
 8002d00:	2100      	movs	r1, #0
 8002d02:	2000      	movs	r0, #0
 8002d04:	f001 f882 	bl	8003e0c <HAL_HSEM_Release>
	WAIT_COND_WITH_TIMEOUT(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET, 0xFFFF);
 8002d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	bf00      	nop
 8002d10:	4b27      	ldr	r3, [pc, #156]	; (8002db0 <main+0x138>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d104      	bne.n	8002d26 <main+0xae>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	1e5a      	subs	r2, r3, #1
 8002d20:	60ba      	str	r2, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	dcf4      	bgt.n	8002d10 <main+0x98>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	da01      	bge.n	8002d30 <main+0xb8>
 8002d2c:	f000 fb0c 	bl	8003348 <Error_Handler>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002d30:	f000 fa86 	bl	8003240 <MX_GPIO_Init>
	MX_DMA_Init();
 8002d34:	f000 fa6a 	bl	800320c <MX_DMA_Init>
	MX_TIM2_Init();
 8002d38:	f000 f988 	bl	800304c <MX_TIM2_Init>
	MX_TIM1_Init();
 8002d3c:	f000 f8b6 	bl	8002eac <MX_TIM1_Init>
	MX_TIM6_Init();
 8002d40:	f000 fa2e 	bl	80031a0 <MX_TIM6_Init>
	MX_TIM5_Init();
 8002d44:	f000 f9d6 	bl	80030f4 <MX_TIM5_Init>
	/* USER CODE BEGIN 2 */
	//Start Position Timers
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1);
 8002d48:	2100      	movs	r1, #0
 8002d4a:	481e      	ldr	r0, [pc, #120]	; (8002dc4 <main+0x14c>)
 8002d4c:	f002 fb50 	bl	80053f0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_2);
 8002d50:	2104      	movs	r1, #4
 8002d52:	481c      	ldr	r0, [pc, #112]	; (8002dc4 <main+0x14c>)
 8002d54:	f002 fb4c 	bl	80053f0 <HAL_TIM_Encoder_Start>

	HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_1);
 8002d58:	2100      	movs	r1, #0
 8002d5a:	481b      	ldr	r0, [pc, #108]	; (8002dc8 <main+0x150>)
 8002d5c:	f002 fb48 	bl	80053f0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_2);
 8002d60:	2104      	movs	r1, #4
 8002d62:	4819      	ldr	r0, [pc, #100]	; (8002dc8 <main+0x150>)
 8002d64:	f002 fb44 	bl	80053f0 <HAL_TIM_Encoder_Start>

	TIM2->CNT=TIM2->ARR / 2 ;
 8002d68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d72:	085b      	lsrs	r3, r3, #1
 8002d74:	6253      	str	r3, [r2, #36]	; 0x24
	TIM5->CNT=TIM5->ARR / 2 ;
 8002d76:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <main+0x154>)
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <main+0x154>)
 8002d7c:	085b      	lsrs	r3, r3, #1
 8002d7e:	6253      	str	r3, [r2, #36]	; 0x24

	// Start PWM  Timers
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8002d80:	2100      	movs	r1, #0
 8002d82:	4813      	ldr	r0, [pc, #76]	; (8002dd0 <main+0x158>)
 8002d84:	f002 f980 	bl	8005088 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8002d88:	2104      	movs	r1, #4
 8002d8a:	4811      	ldr	r0, [pc, #68]	; (8002dd0 <main+0x158>)
 8002d8c:	f002 f97c 	bl	8005088 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8002d90:	2108      	movs	r1, #8
 8002d92:	480f      	ldr	r0, [pc, #60]	; (8002dd0 <main+0x158>)
 8002d94:	f002 f978 	bl	8005088 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8002d98:	210c      	movs	r1, #12
 8002d9a:	480d      	ldr	r0, [pc, #52]	; (8002dd0 <main+0x158>)
 8002d9c:	f002 f974 	bl	8005088 <HAL_TIM_PWM_Start>

	// Start base time timer
	HAL_Delay(2000) ;
 8002da0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002da4:	f000 fd28 	bl	80037f8 <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 8002da8:	480a      	ldr	r0, [pc, #40]	; (8002dd4 <main+0x15c>)
 8002daa:	f002 f893 	bl	8004ed4 <HAL_TIM_Base_Start_IT>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8002dae:	e7fe      	b.n	8002dae <main+0x136>
 8002db0:	58024400 	.word	0x58024400
 8002db4:	24000010 	.word	0x24000010
 8002db8:	38000438 	.word	0x38000438
 8002dbc:	2400000c 	.word	0x2400000c
 8002dc0:	3800001c 	.word	0x3800001c
 8002dc4:	24000380 	.word	0x24000380
 8002dc8:	240003cc 	.word	0x240003cc
 8002dcc:	40000c00 	.word	0x40000c00
 8002dd0:	24000334 	.word	0x24000334
 8002dd4:	24000418 	.word	0x24000418

08002dd8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b09c      	sub	sp, #112	; 0x70
 8002ddc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de2:	224c      	movs	r2, #76	; 0x4c
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f003 fc6c 	bl	80066c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	2220      	movs	r2, #32
 8002df0:	2100      	movs	r1, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 fc66 	bl	80066c4 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002df8:	2004      	movs	r0, #4
 8002dfa:	f001 f81b 	bl	8003e34 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	603b      	str	r3, [r7, #0]
 8002e02:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <SystemClock_Config+0xcc>)
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <SystemClock_Config+0xcc>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002e0e:	4b25      	ldr	r3, [pc, #148]	; (8002ea4 <SystemClock_Config+0xcc>)
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <SystemClock_Config+0xd0>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e20:	4a21      	ldr	r2, [pc, #132]	; (8002ea8 <SystemClock_Config+0xd0>)
 8002e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e26:	6193      	str	r3, [r2, #24]
 8002e28:	4b1f      	ldr	r3, [pc, #124]	; (8002ea8 <SystemClock_Config+0xd0>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002e34:	bf00      	nop
 8002e36:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <SystemClock_Config+0xd0>)
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e42:	d1f8      	bne.n	8002e36 <SystemClock_Config+0x5e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e44:	2302      	movs	r3, #2
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e4c:	2340      	movs	r3, #64	; 0x40
 8002e4e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002e50:	2300      	movs	r3, #0
 8002e52:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 f845 	bl	8003ee8 <HAL_RCC_OscConfig>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <SystemClock_Config+0x90>
	{
		Error_Handler();
 8002e64:	f000 fa70 	bl	8003348 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e68:	233f      	movs	r3, #63	; 0x3f
 8002e6a:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002e74:	2300      	movs	r3, #0
 8002e76:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002e7c:	2340      	movs	r3, #64	; 0x40
 8002e7e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002e84:	2300      	movs	r3, #0
 8002e86:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f001 fc85 	bl	800479c <HAL_RCC_ClockConfig>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8002e98:	f000 fa56 	bl	8003348 <Error_Handler>
	}
}
 8002e9c:	bf00      	nop
 8002e9e:	3770      	adds	r7, #112	; 0x70
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	58000400 	.word	0x58000400
 8002ea8:	58024800 	.word	0x58024800

08002eac <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b09a      	sub	sp, #104	; 0x68
 8002eb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002ecc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
 8002edc:	615a      	str	r2, [r3, #20]
 8002ede:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ee0:	1d3b      	adds	r3, r7, #4
 8002ee2:	222c      	movs	r2, #44	; 0x2c
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f003 fbec 	bl	80066c4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002eec:	4b55      	ldr	r3, [pc, #340]	; (8003044 <MX_TIM1_Init+0x198>)
 8002eee:	4a56      	ldr	r2, [pc, #344]	; (8003048 <MX_TIM1_Init+0x19c>)
 8002ef0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8002ef2:	4b54      	ldr	r3, [pc, #336]	; (8003044 <MX_TIM1_Init+0x198>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef8:	4b52      	ldr	r3, [pc, #328]	; (8003044 <MX_TIM1_Init+0x198>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 3200-1;
 8002efe:	4b51      	ldr	r3, [pc, #324]	; (8003044 <MX_TIM1_Init+0x198>)
 8002f00:	f640 427f 	movw	r2, #3199	; 0xc7f
 8002f04:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f06:	4b4f      	ldr	r3, [pc, #316]	; (8003044 <MX_TIM1_Init+0x198>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002f0c:	4b4d      	ldr	r3, [pc, #308]	; (8003044 <MX_TIM1_Init+0x198>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f12:	4b4c      	ldr	r3, [pc, #304]	; (8003044 <MX_TIM1_Init+0x198>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f18:	484a      	ldr	r0, [pc, #296]	; (8003044 <MX_TIM1_Init+0x198>)
 8002f1a:	f001 ff83 	bl	8004e24 <HAL_TIM_Base_Init>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8002f24:	f000 fa10 	bl	8003348 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f2c:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f32:	4619      	mov	r1, r3
 8002f34:	4843      	ldr	r0, [pc, #268]	; (8003044 <MX_TIM1_Init+0x198>)
 8002f36:	f002 fd1d 	bl	8005974 <HAL_TIM_ConfigClockSource>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8002f40:	f000 fa02 	bl	8003348 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f44:	483f      	ldr	r0, [pc, #252]	; (8003044 <MX_TIM1_Init+0x198>)
 8002f46:	f002 f83d 	bl	8004fc4 <HAL_TIM_PWM_Init>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8002f50:	f000 f9fa 	bl	8003348 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f54:	2300      	movs	r3, #0
 8002f56:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f64:	4619      	mov	r1, r3
 8002f66:	4837      	ldr	r0, [pc, #220]	; (8003044 <MX_TIM1_Init+0x198>)
 8002f68:	f003 fa58 	bl	800641c <HAL_TIMEx_MasterConfigSynchronization>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 8002f72:	f000 f9e9 	bl	8003348 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f76:	2360      	movs	r3, #96	; 0x60
 8002f78:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f82:	2300      	movs	r3, #0
 8002f84:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f96:	2200      	movs	r2, #0
 8002f98:	4619      	mov	r1, r3
 8002f9a:	482a      	ldr	r0, [pc, #168]	; (8003044 <MX_TIM1_Init+0x198>)
 8002f9c:	f002 fbd6 	bl	800574c <HAL_TIM_PWM_ConfigChannel>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 8002fa6:	f000 f9cf 	bl	8003348 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002faa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fae:	2204      	movs	r2, #4
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4824      	ldr	r0, [pc, #144]	; (8003044 <MX_TIM1_Init+0x198>)
 8002fb4:	f002 fbca 	bl	800574c <HAL_TIM_PWM_ConfigChannel>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_TIM1_Init+0x116>
	{
		Error_Handler();
 8002fbe:	f000 f9c3 	bl	8003348 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002fc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fc6:	2208      	movs	r2, #8
 8002fc8:	4619      	mov	r1, r3
 8002fca:	481e      	ldr	r0, [pc, #120]	; (8003044 <MX_TIM1_Init+0x198>)
 8002fcc:	f002 fbbe 	bl	800574c <HAL_TIM_PWM_ConfigChannel>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <MX_TIM1_Init+0x12e>
	{
		Error_Handler();
 8002fd6:	f000 f9b7 	bl	8003348 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002fda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fde:	220c      	movs	r2, #12
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4818      	ldr	r0, [pc, #96]	; (8003044 <MX_TIM1_Init+0x198>)
 8002fe4:	f002 fbb2 	bl	800574c <HAL_TIM_PWM_ConfigChannel>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_TIM1_Init+0x146>
	{
		Error_Handler();
 8002fee:	f000 f9ab 	bl	8003348 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800300a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003010:	2300      	movs	r3, #0
 8003012:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003014:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800301e:	2300      	movs	r3, #0
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003022:	1d3b      	adds	r3, r7, #4
 8003024:	4619      	mov	r1, r3
 8003026:	4807      	ldr	r0, [pc, #28]	; (8003044 <MX_TIM1_Init+0x198>)
 8003028:	f003 fa86 	bl	8006538 <HAL_TIMEx_ConfigBreakDeadTime>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_TIM1_Init+0x18a>
	{
		Error_Handler();
 8003032:	f000 f989 	bl	8003348 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8003036:	4803      	ldr	r0, [pc, #12]	; (8003044 <MX_TIM1_Init+0x198>)
 8003038:	f000 fab2 	bl	80035a0 <HAL_TIM_MspPostInit>

}
 800303c:	bf00      	nop
 800303e:	3768      	adds	r7, #104	; 0x68
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	24000334 	.word	0x24000334
 8003048:	40010000 	.word	0x40010000

0800304c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08c      	sub	sp, #48	; 0x30
 8003050:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8003052:	f107 030c 	add.w	r3, r7, #12
 8003056:	2224      	movs	r2, #36	; 0x24
 8003058:	2100      	movs	r1, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f003 fb32 	bl	80066c4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003060:	463b      	mov	r3, r7
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	605a      	str	r2, [r3, #4]
 8003068:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800306a:	4b21      	ldr	r3, [pc, #132]	; (80030f0 <MX_TIM2_Init+0xa4>)
 800306c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003070:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8003072:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <MX_TIM2_Init+0xa4>)
 8003074:	2200      	movs	r2, #0
 8003076:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <MX_TIM2_Init+0xa4>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 800307e:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <MX_TIM2_Init+0xa4>)
 8003080:	f04f 32ff 	mov.w	r2, #4294967295
 8003084:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003086:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <MX_TIM2_Init+0xa4>)
 8003088:	2200      	movs	r2, #0
 800308a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800308c:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <MX_TIM2_Init+0xa4>)
 800308e:	2200      	movs	r2, #0
 8003090:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003092:	2301      	movs	r3, #1
 8003094:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800309a:	2301      	movs	r3, #1
 800309c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80030a6:	2300      	movs	r3, #0
 80030a8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030aa:	2301      	movs	r3, #1
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80030ae:	2300      	movs	r3, #0
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80030b6:	f107 030c 	add.w	r3, r7, #12
 80030ba:	4619      	mov	r1, r3
 80030bc:	480c      	ldr	r0, [pc, #48]	; (80030f0 <MX_TIM2_Init+0xa4>)
 80030be:	f002 f8f1 	bl	80052a4 <HAL_TIM_Encoder_Init>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <MX_TIM2_Init+0x80>
	{
		Error_Handler();
 80030c8:	f000 f93e 	bl	8003348 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030cc:	2300      	movs	r3, #0
 80030ce:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030d4:	463b      	mov	r3, r7
 80030d6:	4619      	mov	r1, r3
 80030d8:	4805      	ldr	r0, [pc, #20]	; (80030f0 <MX_TIM2_Init+0xa4>)
 80030da:	f003 f99f 	bl	800641c <HAL_TIMEx_MasterConfigSynchronization>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <MX_TIM2_Init+0x9c>
	{
		Error_Handler();
 80030e4:	f000 f930 	bl	8003348 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80030e8:	bf00      	nop
 80030ea:	3730      	adds	r7, #48	; 0x30
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	24000380 	.word	0x24000380

080030f4 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08c      	sub	sp, #48	; 0x30
 80030f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 80030fa:	f107 030c 	add.w	r3, r7, #12
 80030fe:	2224      	movs	r2, #36	; 0x24
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f003 fade 	bl	80066c4 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003108:	463b      	mov	r3, r7
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	605a      	str	r2, [r3, #4]
 8003110:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003112:	4b21      	ldr	r3, [pc, #132]	; (8003198 <MX_TIM5_Init+0xa4>)
 8003114:	4a21      	ldr	r2, [pc, #132]	; (800319c <MX_TIM5_Init+0xa8>)
 8003116:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8003118:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <MX_TIM5_Init+0xa4>)
 800311a:	2200      	movs	r2, #0
 800311c:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800311e:	4b1e      	ldr	r3, [pc, #120]	; (8003198 <MX_TIM5_Init+0xa4>)
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8003124:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <MX_TIM5_Init+0xa4>)
 8003126:	f04f 32ff 	mov.w	r2, #4294967295
 800312a:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800312c:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <MX_TIM5_Init+0xa4>)
 800312e:	2200      	movs	r2, #0
 8003130:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003132:	4b19      	ldr	r3, [pc, #100]	; (8003198 <MX_TIM5_Init+0xa4>)
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003138:	2301      	movs	r3, #1
 800313a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800313c:	2300      	movs	r3, #0
 800313e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003140:	2301      	movs	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003144:	2300      	movs	r3, #0
 8003146:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800314c:	2300      	movs	r3, #0
 800314e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003150:	2301      	movs	r3, #1
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003154:	2300      	movs	r3, #0
 8003156:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800315c:	f107 030c 	add.w	r3, r7, #12
 8003160:	4619      	mov	r1, r3
 8003162:	480d      	ldr	r0, [pc, #52]	; (8003198 <MX_TIM5_Init+0xa4>)
 8003164:	f002 f89e 	bl	80052a4 <HAL_TIM_Encoder_Init>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <MX_TIM5_Init+0x7e>
	{
		Error_Handler();
 800316e:	f000 f8eb 	bl	8003348 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003172:	2300      	movs	r3, #0
 8003174:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800317a:	463b      	mov	r3, r7
 800317c:	4619      	mov	r1, r3
 800317e:	4806      	ldr	r0, [pc, #24]	; (8003198 <MX_TIM5_Init+0xa4>)
 8003180:	f003 f94c 	bl	800641c <HAL_TIMEx_MasterConfigSynchronization>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_TIM5_Init+0x9a>
	{
		Error_Handler();
 800318a:	f000 f8dd 	bl	8003348 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 800318e:	bf00      	nop
 8003190:	3730      	adds	r7, #48	; 0x30
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	240003cc 	.word	0x240003cc
 800319c:	40000c00 	.word	0x40000c00

080031a0 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031a6:	1d3b      	adds	r3, r7, #4
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80031b0:	4b14      	ldr	r3, [pc, #80]	; (8003204 <MX_TIM6_Init+0x64>)
 80031b2:	4a15      	ldr	r2, [pc, #84]	; (8003208 <MX_TIM6_Init+0x68>)
 80031b4:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 99;
 80031b6:	4b13      	ldr	r3, [pc, #76]	; (8003204 <MX_TIM6_Init+0x64>)
 80031b8:	2263      	movs	r2, #99	; 0x63
 80031ba:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031bc:	4b11      	ldr	r3, [pc, #68]	; (8003204 <MX_TIM6_Init+0x64>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 3199;
 80031c2:	4b10      	ldr	r3, [pc, #64]	; (8003204 <MX_TIM6_Init+0x64>)
 80031c4:	f640 427f 	movw	r2, #3199	; 0xc7f
 80031c8:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ca:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <MX_TIM6_Init+0x64>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80031d0:	480c      	ldr	r0, [pc, #48]	; (8003204 <MX_TIM6_Init+0x64>)
 80031d2:	f001 fe27 	bl	8004e24 <HAL_TIM_Base_Init>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <MX_TIM6_Init+0x40>
	{
		Error_Handler();
 80031dc:	f000 f8b4 	bl	8003348 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031e0:	2300      	movs	r3, #0
 80031e2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80031e8:	1d3b      	adds	r3, r7, #4
 80031ea:	4619      	mov	r1, r3
 80031ec:	4805      	ldr	r0, [pc, #20]	; (8003204 <MX_TIM6_Init+0x64>)
 80031ee:	f003 f915 	bl	800641c <HAL_TIMEx_MasterConfigSynchronization>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <MX_TIM6_Init+0x5c>
	{
		Error_Handler();
 80031f8:	f000 f8a6 	bl	8003348 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 80031fc:	bf00      	nop
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	24000418 	.word	0x24000418
 8003208:	40001000 	.word	0x40001000

0800320c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <MX_DMA_Init+0x30>)
 8003214:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003218:	4a08      	ldr	r2, [pc, #32]	; (800323c <MX_DMA_Init+0x30>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003222:	4b06      	ldr	r3, [pc, #24]	; (800323c <MX_DMA_Init+0x30>)
 8003224:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	607b      	str	r3, [r7, #4]
 800322e:	687b      	ldr	r3, [r7, #4]

}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	58024400 	.word	0x58024400

08003240 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003246:	4b28      	ldr	r3, [pc, #160]	; (80032e8 <MX_GPIO_Init+0xa8>)
 8003248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800324c:	4a26      	ldr	r2, [pc, #152]	; (80032e8 <MX_GPIO_Init+0xa8>)
 800324e:	f043 0304 	orr.w	r3, r3, #4
 8003252:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003256:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <MX_GPIO_Init+0xa8>)
 8003258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003264:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <MX_GPIO_Init+0xa8>)
 8003266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800326a:	4a1f      	ldr	r2, [pc, #124]	; (80032e8 <MX_GPIO_Init+0xa8>)
 800326c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003270:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003274:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <MX_GPIO_Init+0xa8>)
 8003276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800327a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003282:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <MX_GPIO_Init+0xa8>)
 8003284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003288:	4a17      	ldr	r2, [pc, #92]	; (80032e8 <MX_GPIO_Init+0xa8>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <MX_GPIO_Init+0xa8>)
 8003294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80032a0:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <MX_GPIO_Init+0xa8>)
 80032a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032a6:	4a10      	ldr	r2, [pc, #64]	; (80032e8 <MX_GPIO_Init+0xa8>)
 80032a8:	f043 0310 	orr.w	r3, r3, #16
 80032ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032b0:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <MX_GPIO_Init+0xa8>)
 80032b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80032be:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <MX_GPIO_Init+0xa8>)
 80032c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c4:	4a08      	ldr	r2, [pc, #32]	; (80032e8 <MX_GPIO_Init+0xa8>)
 80032c6:	f043 0302 	orr.w	r3, r3, #2
 80032ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <MX_GPIO_Init+0xa8>)
 80032d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	607b      	str	r3, [r7, #4]
 80032da:	687b      	ldr	r3, [r7, #4]

}
 80032dc:	bf00      	nop
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	58024400 	.word	0x58024400

080032ec <led_init>:

/* USER CODE BEGIN 4 */
static void
led_init(void) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f2:	1d3b      	adds	r3, r7, #4
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	611a      	str	r2, [r3, #16]

	LD1_GPIO_CLK_EN();
 8003300:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <led_init+0x54>)
 8003302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003306:	4a0e      	ldr	r2, [pc, #56]	; (8003340 <led_init+0x54>)
 8003308:	f043 0302 	orr.w	r3, r3, #2
 800330c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <led_init+0x54>)
 8003312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = LD1_GPIO_PIN;
 800331e:	2301      	movs	r3, #1
 8003320:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003322:	2301      	movs	r3, #1
 8003324:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LD1_GPIO_PORT, &GPIO_InitStruct);
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	4619      	mov	r1, r3
 8003332:	4804      	ldr	r0, [pc, #16]	; (8003344 <led_init+0x58>)
 8003334:	f000 fba0 	bl	8003a78 <HAL_GPIO_Init>
}
 8003338:	bf00      	nop
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	58024400 	.word	0x58024400
 8003344:	58020400 	.word	0x58020400

08003348 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800334c:	b672      	cpsid	i
}
 800334e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003350:	e7fe      	b.n	8003350 <Error_Handler+0x8>
	...

08003354 <ringbuff_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
ringbuff_init(RINGBUFF_VOLATILE ringbuff_t* buff, void* buffdata, size_t size) {
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <ringbuff_init+0x1e>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <ringbuff_init+0x1e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <ringbuff_init+0x22>
        return 0;
 8003372:	2300      	movs	r3, #0
 8003374:	e011      	b.n	800339a <ringbuff_init+0x46>
    }

    BUF_MEMSET((void *)buff, 0x00, sizeof(*buff));
 8003376:	221c      	movs	r2, #28
 8003378:	2100      	movs	r1, #0
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f003 f9a2 	bl	80066c4 <memset>

    buff->size = size;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	609a      	str	r2, [r3, #8]
    buff->buff = buffdata;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	605a      	str	r2, [r3, #4]

#if RINGBUFF_USE_MAGIC
    buff->magic1 = 0xDEADBEEF;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a05      	ldr	r2, [pc, #20]	; (80033a4 <ringbuff_init+0x50>)
 8003390:	601a      	str	r2, [r3, #0]
    buff->magic2 = ~0xDEADBEEF;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4a04      	ldr	r2, [pc, #16]	; (80033a8 <ringbuff_init+0x54>)
 8003396:	619a      	str	r2, [r3, #24]
#endif /* RINGBUFF_USE_MAGIC */

    return 1;
 8003398:	2301      	movs	r3, #1
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	deadbeef 	.word	0xdeadbeef
 80033a8:	21524110 	.word	0x21524110

080033ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_MspInit+0x30>)
 80033b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033b8:	4a08      	ldr	r2, [pc, #32]	; (80033dc <HAL_MspInit+0x30>)
 80033ba:	f043 0302 	orr.w	r3, r3, #2
 80033be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_MspInit+0x30>)
 80033c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	58024400 	.word	0x58024400

080033e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a19      	ldr	r2, [pc, #100]	; (8003454 <HAL_TIM_Base_MspInit+0x74>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d10f      	bne.n	8003412 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033f2:	4b19      	ldr	r3, [pc, #100]	; (8003458 <HAL_TIM_Base_MspInit+0x78>)
 80033f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033f8:	4a17      	ldr	r2, [pc, #92]	; (8003458 <HAL_TIM_Base_MspInit+0x78>)
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003402:	4b15      	ldr	r3, [pc, #84]	; (8003458 <HAL_TIM_Base_MspInit+0x78>)
 8003404:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003410:	e01b      	b.n	800344a <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM6)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a11      	ldr	r2, [pc, #68]	; (800345c <HAL_TIM_Base_MspInit+0x7c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d116      	bne.n	800344a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800341c:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <HAL_TIM_Base_MspInit+0x78>)
 800341e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003422:	4a0d      	ldr	r2, [pc, #52]	; (8003458 <HAL_TIM_Base_MspInit+0x78>)
 8003424:	f043 0310 	orr.w	r3, r3, #16
 8003428:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <HAL_TIM_Base_MspInit+0x78>)
 800342e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800343a:	2200      	movs	r2, #0
 800343c:	2100      	movs	r1, #0
 800343e:	2036      	movs	r0, #54	; 0x36
 8003440:	f000 fae5 	bl	8003a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003444:	2036      	movs	r0, #54	; 0x36
 8003446:	f000 fafc 	bl	8003a42 <HAL_NVIC_EnableIRQ>
}
 800344a:	bf00      	nop
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40010000 	.word	0x40010000
 8003458:	58024400 	.word	0x58024400
 800345c:	40001000 	.word	0x40001000

08003460 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08c      	sub	sp, #48	; 0x30
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003468:	f107 031c 	add.w	r3, r7, #28
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	60da      	str	r2, [r3, #12]
 8003476:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003480:	d14e      	bne.n	8003520 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003482:	4b43      	ldr	r3, [pc, #268]	; (8003590 <HAL_TIM_Encoder_MspInit+0x130>)
 8003484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003488:	4a41      	ldr	r2, [pc, #260]	; (8003590 <HAL_TIM_Encoder_MspInit+0x130>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003492:	4b3f      	ldr	r3, [pc, #252]	; (8003590 <HAL_TIM_Encoder_MspInit+0x130>)
 8003494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a0:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <HAL_TIM_Encoder_MspInit+0x130>)
 80034a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034a6:	4a3a      	ldr	r2, [pc, #232]	; (8003590 <HAL_TIM_Encoder_MspInit+0x130>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034b0:	4b37      	ldr	r3, [pc, #220]	; (8003590 <HAL_TIM_Encoder_MspInit+0x130>)
 80034b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034be:	4b34      	ldr	r3, [pc, #208]	; (8003590 <HAL_TIM_Encoder_MspInit+0x130>)
 80034c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c4:	4a32      	ldr	r2, [pc, #200]	; (8003590 <HAL_TIM_Encoder_MspInit+0x130>)
 80034c6:	f043 0302 	orr.w	r3, r3, #2
 80034ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034ce:	4b30      	ldr	r3, [pc, #192]	; (8003590 <HAL_TIM_Encoder_MspInit+0x130>)
 80034d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80034dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ea:	2300      	movs	r3, #0
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034ee:	2301      	movs	r3, #1
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f2:	f107 031c 	add.w	r3, r7, #28
 80034f6:	4619      	mov	r1, r3
 80034f8:	4826      	ldr	r0, [pc, #152]	; (8003594 <HAL_TIM_Encoder_MspInit+0x134>)
 80034fa:	f000 fabd 	bl	8003a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034fe:	2308      	movs	r3, #8
 8003500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003502:	2302      	movs	r3, #2
 8003504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003506:	2300      	movs	r3, #0
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350a:	2300      	movs	r3, #0
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800350e:	2301      	movs	r3, #1
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003512:	f107 031c 	add.w	r3, r7, #28
 8003516:	4619      	mov	r1, r3
 8003518:	481f      	ldr	r0, [pc, #124]	; (8003598 <HAL_TIM_Encoder_MspInit+0x138>)
 800351a:	f000 faad 	bl	8003a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800351e:	e032      	b.n	8003586 <HAL_TIM_Encoder_MspInit+0x126>
  else if(htim_encoder->Instance==TIM5)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1d      	ldr	r2, [pc, #116]	; (800359c <HAL_TIM_Encoder_MspInit+0x13c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d12d      	bne.n	8003586 <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800352a:	4b19      	ldr	r3, [pc, #100]	; (8003590 <HAL_TIM_Encoder_MspInit+0x130>)
 800352c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003530:	4a17      	ldr	r2, [pc, #92]	; (8003590 <HAL_TIM_Encoder_MspInit+0x130>)
 8003532:	f043 0308 	orr.w	r3, r3, #8
 8003536:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800353a:	4b15      	ldr	r3, [pc, #84]	; (8003590 <HAL_TIM_Encoder_MspInit+0x130>)
 800353c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <HAL_TIM_Encoder_MspInit+0x130>)
 800354a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800354e:	4a10      	ldr	r2, [pc, #64]	; (8003590 <HAL_TIM_Encoder_MspInit+0x130>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003558:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <HAL_TIM_Encoder_MspInit+0x130>)
 800355a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003566:	2303      	movs	r3, #3
 8003568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356a:	2302      	movs	r3, #2
 800356c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356e:	2300      	movs	r3, #0
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003572:	2300      	movs	r3, #0
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003576:	2302      	movs	r3, #2
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357a:	f107 031c 	add.w	r3, r7, #28
 800357e:	4619      	mov	r1, r3
 8003580:	4804      	ldr	r0, [pc, #16]	; (8003594 <HAL_TIM_Encoder_MspInit+0x134>)
 8003582:	f000 fa79 	bl	8003a78 <HAL_GPIO_Init>
}
 8003586:	bf00      	nop
 8003588:	3730      	adds	r7, #48	; 0x30
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	58024400 	.word	0x58024400
 8003594:	58020000 	.word	0x58020000
 8003598:	58020400 	.word	0x58020400
 800359c:	40000c00 	.word	0x40000c00

080035a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a8:	f107 030c 	add.w	r3, r7, #12
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	609a      	str	r2, [r3, #8]
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a13      	ldr	r2, [pc, #76]	; (800360c <HAL_TIM_MspPostInit+0x6c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d11f      	bne.n	8003602 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035c2:	4b13      	ldr	r3, [pc, #76]	; (8003610 <HAL_TIM_MspPostInit+0x70>)
 80035c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035c8:	4a11      	ldr	r2, [pc, #68]	; (8003610 <HAL_TIM_MspPostInit+0x70>)
 80035ca:	f043 0310 	orr.w	r3, r3, #16
 80035ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035d2:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <HAL_TIM_MspPostInit+0x70>)
 80035d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80035e0:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80035e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e6:	2302      	movs	r3, #2
 80035e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035f2:	2301      	movs	r3, #1
 80035f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035f6:	f107 030c 	add.w	r3, r7, #12
 80035fa:	4619      	mov	r1, r3
 80035fc:	4805      	ldr	r0, [pc, #20]	; (8003614 <HAL_TIM_MspPostInit+0x74>)
 80035fe:	f000 fa3b 	bl	8003a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003602:	bf00      	nop
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40010000 	.word	0x40010000
 8003610:	58024400 	.word	0x58024400
 8003614:	58021000 	.word	0x58021000

08003618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800361c:	e7fe      	b.n	800361c <NMI_Handler+0x4>

0800361e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800361e:	b480      	push	{r7}
 8003620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003622:	e7fe      	b.n	8003622 <HardFault_Handler+0x4>

08003624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003628:	e7fe      	b.n	8003628 <MemManage_Handler+0x4>

0800362a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800362e:	e7fe      	b.n	800362e <BusFault_Handler+0x4>

08003630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003634:	e7fe      	b.n	8003634 <UsageFault_Handler+0x4>

08003636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800363a:	bf00      	nop
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003652:	b480      	push	{r7}
 8003654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003656:	bf00      	nop
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003664:	f000 f8a8 	bl	80037b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003668:	bf00      	nop
 800366a:	bd80      	pop	{r7, pc}

0800366c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003670:	4802      	ldr	r0, [pc, #8]	; (800367c <TIM6_DAC_IRQHandler+0x10>)
 8003672:	f001 ff4b 	bl	800550c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	24000418 	.word	0x24000418

08003680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003684:	f7fc fe28 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003688:	480c      	ldr	r0, [pc, #48]	; (80036bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800368a:	490d      	ldr	r1, [pc, #52]	; (80036c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800368c:	4a0d      	ldr	r2, [pc, #52]	; (80036c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800368e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003690:	e002      	b.n	8003698 <LoopCopyDataInit>

08003692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003696:	3304      	adds	r3, #4

08003698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800369a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800369c:	d3f9      	bcc.n	8003692 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800369e:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036a0:	4c0a      	ldr	r4, [pc, #40]	; (80036cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80036a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a4:	e001      	b.n	80036aa <LoopFillZerobss>

080036a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a8:	3204      	adds	r2, #4

080036aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036ac:	d3fb      	bcc.n	80036a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036ae:	f002 ffe5 	bl	800667c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036b2:	f7ff fae1 	bl	8002c78 <main>
  bx  lr
 80036b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80036bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80036c0:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 80036c4:	08009848 	.word	0x08009848
  ldr r2, =_sbss
 80036c8:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 80036cc:	24000468 	.word	0x24000468

080036d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036d0:	e7fe      	b.n	80036d0 <ADC3_IRQHandler>
	...

080036d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036da:	2003      	movs	r0, #3
 80036dc:	f000 f98c 	bl	80039f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036e0:	f001 fa12 	bl	8004b08 <HAL_RCC_GetSysClockFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <HAL_Init+0x68>)
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	4913      	ldr	r1, [pc, #76]	; (8003740 <HAL_Init+0x6c>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
 80036fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036fe:	4b0f      	ldr	r3, [pc, #60]	; (800373c <HAL_Init+0x68>)
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	4a0e      	ldr	r2, [pc, #56]	; (8003740 <HAL_Init+0x6c>)
 8003708:	5cd3      	ldrb	r3, [r2, r3]
 800370a:	f003 031f 	and.w	r3, r3, #31
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	fa22 f303 	lsr.w	r3, r2, r3
 8003714:	4a0b      	ldr	r2, [pc, #44]	; (8003744 <HAL_Init+0x70>)
 8003716:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003718:	4a0b      	ldr	r2, [pc, #44]	; (8003748 <HAL_Init+0x74>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800371e:	200f      	movs	r0, #15
 8003720:	f000 f814 	bl	800374c <HAL_InitTick>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e002      	b.n	8003734 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800372e:	f7ff fe3d 	bl	80033ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	58024400 	.word	0x58024400
 8003740:	08007d30 	.word	0x08007d30
 8003744:	24000004 	.word	0x24000004
 8003748:	24000000 	.word	0x24000000

0800374c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003754:	4b15      	ldr	r3, [pc, #84]	; (80037ac <HAL_InitTick+0x60>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e021      	b.n	80037a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003760:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <HAL_InitTick+0x64>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b11      	ldr	r3, [pc, #68]	; (80037ac <HAL_InitTick+0x60>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	4619      	mov	r1, r3
 800376a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800376e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003772:	fbb2 f3f3 	udiv	r3, r2, r3
 8003776:	4618      	mov	r0, r3
 8003778:	f000 f971 	bl	8003a5e <HAL_SYSTICK_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e00e      	b.n	80037a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b0f      	cmp	r3, #15
 800378a:	d80a      	bhi.n	80037a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800378c:	2200      	movs	r2, #0
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	f04f 30ff 	mov.w	r0, #4294967295
 8003794:	f000 f93b 	bl	8003a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003798:	4a06      	ldr	r2, [pc, #24]	; (80037b4 <HAL_InitTick+0x68>)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	e000      	b.n	80037a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	24000018 	.word	0x24000018
 80037b0:	24000000 	.word	0x24000000
 80037b4:	24000014 	.word	0x24000014

080037b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037bc:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_IncTick+0x20>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_IncTick+0x24>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4413      	add	r3, r2
 80037c8:	4a04      	ldr	r2, [pc, #16]	; (80037dc <HAL_IncTick+0x24>)
 80037ca:	6013      	str	r3, [r2, #0]
}
 80037cc:	bf00      	nop
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	24000018 	.word	0x24000018
 80037dc:	24000464 	.word	0x24000464

080037e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return uwTick;
 80037e4:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <HAL_GetTick+0x14>)
 80037e6:	681b      	ldr	r3, [r3, #0]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	24000464 	.word	0x24000464

080037f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003800:	f7ff ffee 	bl	80037e0 <HAL_GetTick>
 8003804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003810:	d005      	beq.n	800381e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <HAL_Delay+0x44>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800381e:	bf00      	nop
 8003820:	f7ff ffde 	bl	80037e0 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	429a      	cmp	r2, r3
 800382e:	d8f7      	bhi.n	8003820 <HAL_Delay+0x28>
  {
  }
}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	24000018 	.word	0x24000018

08003840 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003844:	4b03      	ldr	r3, [pc, #12]	; (8003854 <HAL_GetREVID+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	0c1b      	lsrs	r3, r3, #16
}
 800384a:	4618      	mov	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	5c001000 	.word	0x5c001000

08003858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <__NVIC_SetPriorityGrouping+0x40>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003874:	4013      	ands	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <__NVIC_SetPriorityGrouping+0x44>)
 8003882:	4313      	orrs	r3, r2
 8003884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003886:	4a04      	ldr	r2, [pc, #16]	; (8003898 <__NVIC_SetPriorityGrouping+0x40>)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	60d3      	str	r3, [r2, #12]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000ed00 	.word	0xe000ed00
 800389c:	05fa0000 	.word	0x05fa0000

080038a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038a4:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <__NVIC_GetPriorityGrouping+0x18>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	f003 0307 	and.w	r3, r3, #7
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	e000ed00 	.word	0xe000ed00

080038bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	db0b      	blt.n	80038e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	f003 021f 	and.w	r2, r3, #31
 80038d4:	4907      	ldr	r1, [pc, #28]	; (80038f4 <__NVIC_EnableIRQ+0x38>)
 80038d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	2001      	movs	r0, #1
 80038de:	fa00 f202 	lsl.w	r2, r0, r2
 80038e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	e000e100 	.word	0xe000e100

080038f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	6039      	str	r1, [r7, #0]
 8003902:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003904:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003908:	2b00      	cmp	r3, #0
 800390a:	db0a      	blt.n	8003922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	b2da      	uxtb	r2, r3
 8003910:	490c      	ldr	r1, [pc, #48]	; (8003944 <__NVIC_SetPriority+0x4c>)
 8003912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003916:	0112      	lsls	r2, r2, #4
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	440b      	add	r3, r1
 800391c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003920:	e00a      	b.n	8003938 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4908      	ldr	r1, [pc, #32]	; (8003948 <__NVIC_SetPriority+0x50>)
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	3b04      	subs	r3, #4
 8003930:	0112      	lsls	r2, r2, #4
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	440b      	add	r3, r1
 8003936:	761a      	strb	r2, [r3, #24]
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000e100 	.word	0xe000e100
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800394c:	b480      	push	{r7}
 800394e:	b089      	sub	sp, #36	; 0x24
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f1c3 0307 	rsb	r3, r3, #7
 8003966:	2b04      	cmp	r3, #4
 8003968:	bf28      	it	cs
 800396a:	2304      	movcs	r3, #4
 800396c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	3304      	adds	r3, #4
 8003972:	2b06      	cmp	r3, #6
 8003974:	d902      	bls.n	800397c <NVIC_EncodePriority+0x30>
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	3b03      	subs	r3, #3
 800397a:	e000      	b.n	800397e <NVIC_EncodePriority+0x32>
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003980:	f04f 32ff 	mov.w	r2, #4294967295
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43da      	mvns	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	401a      	ands	r2, r3
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003994:	f04f 31ff 	mov.w	r1, #4294967295
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	fa01 f303 	lsl.w	r3, r1, r3
 800399e:	43d9      	mvns	r1, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a4:	4313      	orrs	r3, r2
         );
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3724      	adds	r7, #36	; 0x24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3b01      	subs	r3, #1
 80039c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039c4:	d301      	bcc.n	80039ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039c6:	2301      	movs	r3, #1
 80039c8:	e00f      	b.n	80039ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ca:	4a0a      	ldr	r2, [pc, #40]	; (80039f4 <SysTick_Config+0x40>)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039d2:	210f      	movs	r1, #15
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295
 80039d8:	f7ff ff8e 	bl	80038f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <SysTick_Config+0x40>)
 80039de:	2200      	movs	r2, #0
 80039e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039e2:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <SysTick_Config+0x40>)
 80039e4:	2207      	movs	r2, #7
 80039e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	e000e010 	.word	0xe000e010

080039f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff ff29 	bl	8003858 <__NVIC_SetPriorityGrouping>
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b086      	sub	sp, #24
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	4603      	mov	r3, r0
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	607a      	str	r2, [r7, #4]
 8003a1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a1c:	f7ff ff40 	bl	80038a0 <__NVIC_GetPriorityGrouping>
 8003a20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	68b9      	ldr	r1, [r7, #8]
 8003a26:	6978      	ldr	r0, [r7, #20]
 8003a28:	f7ff ff90 	bl	800394c <NVIC_EncodePriority>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff ff5f 	bl	80038f8 <__NVIC_SetPriority>
}
 8003a3a:	bf00      	nop
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	4603      	mov	r3, r0
 8003a4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ff33 	bl	80038bc <__NVIC_EnableIRQ>
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff ffa4 	bl	80039b4 <SysTick_Config>
 8003a6c:	4603      	mov	r3, r0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b089      	sub	sp, #36	; 0x24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a86:	4b89      	ldr	r3, [pc, #548]	; (8003cac <HAL_GPIO_Init+0x234>)
 8003a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a8a:	e194      	b.n	8003db6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	2101      	movs	r1, #1
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	fa01 f303 	lsl.w	r3, r1, r3
 8003a98:	4013      	ands	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8186 	beq.w	8003db0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d005      	beq.n	8003abc <HAL_GPIO_Init+0x44>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 0303 	and.w	r3, r3, #3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d130      	bne.n	8003b1e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003af2:	2201      	movs	r2, #1
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	091b      	lsrs	r3, r3, #4
 8003b08:	f003 0201 	and.w	r2, r3, #1
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d017      	beq.n	8003b5a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	2203      	movs	r2, #3
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d123      	bne.n	8003bae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	08da      	lsrs	r2, r3, #3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3208      	adds	r2, #8
 8003b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	220f      	movs	r2, #15
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4013      	ands	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	08da      	lsrs	r2, r3, #3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3208      	adds	r2, #8
 8003ba8:	69b9      	ldr	r1, [r7, #24]
 8003baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	2203      	movs	r2, #3
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 0203 	and.w	r2, r3, #3
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80e0 	beq.w	8003db0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf0:	4b2f      	ldr	r3, [pc, #188]	; (8003cb0 <HAL_GPIO_Init+0x238>)
 8003bf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bf6:	4a2e      	ldr	r2, [pc, #184]	; (8003cb0 <HAL_GPIO_Init+0x238>)
 8003bf8:	f043 0302 	orr.w	r3, r3, #2
 8003bfc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c00:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <HAL_GPIO_Init+0x238>)
 8003c02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c0e:	4a29      	ldr	r2, [pc, #164]	; (8003cb4 <HAL_GPIO_Init+0x23c>)
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	089b      	lsrs	r3, r3, #2
 8003c14:	3302      	adds	r3, #2
 8003c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	220f      	movs	r2, #15
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a20      	ldr	r2, [pc, #128]	; (8003cb8 <HAL_GPIO_Init+0x240>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d052      	beq.n	8003ce0 <HAL_GPIO_Init+0x268>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a1f      	ldr	r2, [pc, #124]	; (8003cbc <HAL_GPIO_Init+0x244>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d031      	beq.n	8003ca6 <HAL_GPIO_Init+0x22e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a1e      	ldr	r2, [pc, #120]	; (8003cc0 <HAL_GPIO_Init+0x248>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d02b      	beq.n	8003ca2 <HAL_GPIO_Init+0x22a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a1d      	ldr	r2, [pc, #116]	; (8003cc4 <HAL_GPIO_Init+0x24c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d025      	beq.n	8003c9e <HAL_GPIO_Init+0x226>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a1c      	ldr	r2, [pc, #112]	; (8003cc8 <HAL_GPIO_Init+0x250>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d01f      	beq.n	8003c9a <HAL_GPIO_Init+0x222>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <HAL_GPIO_Init+0x254>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d019      	beq.n	8003c96 <HAL_GPIO_Init+0x21e>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a1a      	ldr	r2, [pc, #104]	; (8003cd0 <HAL_GPIO_Init+0x258>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d013      	beq.n	8003c92 <HAL_GPIO_Init+0x21a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a19      	ldr	r2, [pc, #100]	; (8003cd4 <HAL_GPIO_Init+0x25c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00d      	beq.n	8003c8e <HAL_GPIO_Init+0x216>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a18      	ldr	r2, [pc, #96]	; (8003cd8 <HAL_GPIO_Init+0x260>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d007      	beq.n	8003c8a <HAL_GPIO_Init+0x212>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a17      	ldr	r2, [pc, #92]	; (8003cdc <HAL_GPIO_Init+0x264>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d101      	bne.n	8003c86 <HAL_GPIO_Init+0x20e>
 8003c82:	2309      	movs	r3, #9
 8003c84:	e02d      	b.n	8003ce2 <HAL_GPIO_Init+0x26a>
 8003c86:	230a      	movs	r3, #10
 8003c88:	e02b      	b.n	8003ce2 <HAL_GPIO_Init+0x26a>
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	e029      	b.n	8003ce2 <HAL_GPIO_Init+0x26a>
 8003c8e:	2307      	movs	r3, #7
 8003c90:	e027      	b.n	8003ce2 <HAL_GPIO_Init+0x26a>
 8003c92:	2306      	movs	r3, #6
 8003c94:	e025      	b.n	8003ce2 <HAL_GPIO_Init+0x26a>
 8003c96:	2305      	movs	r3, #5
 8003c98:	e023      	b.n	8003ce2 <HAL_GPIO_Init+0x26a>
 8003c9a:	2304      	movs	r3, #4
 8003c9c:	e021      	b.n	8003ce2 <HAL_GPIO_Init+0x26a>
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e01f      	b.n	8003ce2 <HAL_GPIO_Init+0x26a>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e01d      	b.n	8003ce2 <HAL_GPIO_Init+0x26a>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e01b      	b.n	8003ce2 <HAL_GPIO_Init+0x26a>
 8003caa:	bf00      	nop
 8003cac:	58000080 	.word	0x58000080
 8003cb0:	58024400 	.word	0x58024400
 8003cb4:	58000400 	.word	0x58000400
 8003cb8:	58020000 	.word	0x58020000
 8003cbc:	58020400 	.word	0x58020400
 8003cc0:	58020800 	.word	0x58020800
 8003cc4:	58020c00 	.word	0x58020c00
 8003cc8:	58021000 	.word	0x58021000
 8003ccc:	58021400 	.word	0x58021400
 8003cd0:	58021800 	.word	0x58021800
 8003cd4:	58021c00 	.word	0x58021c00
 8003cd8:	58022000 	.word	0x58022000
 8003cdc:	58022400 	.word	0x58022400
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	f002 0203 	and.w	r2, r2, #3
 8003ce8:	0092      	lsls	r2, r2, #2
 8003cea:	4093      	lsls	r3, r2
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cf2:	4938      	ldr	r1, [pc, #224]	; (8003dd4 <HAL_GPIO_Init+0x35c>)
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	089b      	lsrs	r3, r3, #2
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	43db      	mvns	r3, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	3301      	adds	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f47f ae63 	bne.w	8003a8c <HAL_GPIO_Init+0x14>
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	bf00      	nop
 8003dca:	3724      	adds	r7, #36	; 0x24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	58000400 	.word	0x58000400

08003dd8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003de0:	4a08      	ldr	r2, [pc, #32]	; (8003e04 <HAL_HSEM_FastTake+0x2c>)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3320      	adds	r3, #32
 8003de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dea:	4a07      	ldr	r2, [pc, #28]	; (8003e08 <HAL_HSEM_FastTake+0x30>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d101      	bne.n	8003df4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	e000      	b.n	8003df6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	58026400 	.word	0x58026400
 8003e08:	80000300 	.word	0x80000300

08003e0c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003e16:	4906      	ldr	r1, [pc, #24]	; (8003e30 <HAL_HSEM_Release+0x24>)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	58026400 	.word	0x58026400

08003e34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003e3c:	4b29      	ldr	r3, [pc, #164]	; (8003ee4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	2b06      	cmp	r3, #6
 8003e46:	d00a      	beq.n	8003e5e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e48:	4b26      	ldr	r3, [pc, #152]	; (8003ee4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d001      	beq.n	8003e5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e040      	b.n	8003edc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e03e      	b.n	8003edc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e5e:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003e66:	491f      	ldr	r1, [pc, #124]	; (8003ee4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003e6e:	f7ff fcb7 	bl	80037e0 <HAL_GetTick>
 8003e72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e74:	e009      	b.n	8003e8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e76:	f7ff fcb3 	bl	80037e0 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e84:	d901      	bls.n	8003e8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e028      	b.n	8003edc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e96:	d1ee      	bne.n	8003e76 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b1e      	cmp	r3, #30
 8003e9c:	d008      	beq.n	8003eb0 <HAL_PWREx_ConfigSupply+0x7c>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8003ea2:	d005      	beq.n	8003eb0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b1d      	cmp	r3, #29
 8003ea8:	d002      	beq.n	8003eb0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b2d      	cmp	r3, #45	; 0x2d
 8003eae:	d114      	bne.n	8003eda <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003eb0:	f7ff fc96 	bl	80037e0 <HAL_GetTick>
 8003eb4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003eb6:	e009      	b.n	8003ecc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003eb8:	f7ff fc92 	bl	80037e0 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ec6:	d901      	bls.n	8003ecc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e007      	b.n	8003edc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed8:	d1ee      	bne.n	8003eb8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	58024800 	.word	0x58024800

08003ee8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08c      	sub	sp, #48	; 0x30
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d102      	bne.n	8003efc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f000 bc48 	b.w	800478c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8088 	beq.w	800401a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f0a:	4b99      	ldr	r3, [pc, #612]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f14:	4b96      	ldr	r3, [pc, #600]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1c:	2b10      	cmp	r3, #16
 8003f1e:	d007      	beq.n	8003f30 <HAL_RCC_OscConfig+0x48>
 8003f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f22:	2b18      	cmp	r3, #24
 8003f24:	d111      	bne.n	8003f4a <HAL_RCC_OscConfig+0x62>
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d10c      	bne.n	8003f4a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f30:	4b8f      	ldr	r3, [pc, #572]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d06d      	beq.n	8004018 <HAL_RCC_OscConfig+0x130>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d169      	bne.n	8004018 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f000 bc21 	b.w	800478c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f52:	d106      	bne.n	8003f62 <HAL_RCC_OscConfig+0x7a>
 8003f54:	4b86      	ldr	r3, [pc, #536]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a85      	ldr	r2, [pc, #532]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8003f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	e02e      	b.n	8003fc0 <HAL_RCC_OscConfig+0xd8>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10c      	bne.n	8003f84 <HAL_RCC_OscConfig+0x9c>
 8003f6a:	4b81      	ldr	r3, [pc, #516]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a80      	ldr	r2, [pc, #512]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8003f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	4b7e      	ldr	r3, [pc, #504]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a7d      	ldr	r2, [pc, #500]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8003f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	e01d      	b.n	8003fc0 <HAL_RCC_OscConfig+0xd8>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f8c:	d10c      	bne.n	8003fa8 <HAL_RCC_OscConfig+0xc0>
 8003f8e:	4b78      	ldr	r3, [pc, #480]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a77      	ldr	r2, [pc, #476]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8003f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	4b75      	ldr	r3, [pc, #468]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a74      	ldr	r2, [pc, #464]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e00b      	b.n	8003fc0 <HAL_RCC_OscConfig+0xd8>
 8003fa8:	4b71      	ldr	r3, [pc, #452]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a70      	ldr	r2, [pc, #448]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8003fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	4b6e      	ldr	r3, [pc, #440]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a6d      	ldr	r2, [pc, #436]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8003fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d013      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc8:	f7ff fc0a 	bl	80037e0 <HAL_GetTick>
 8003fcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd0:	f7ff fc06 	bl	80037e0 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b64      	cmp	r3, #100	; 0x64
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e3d4      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fe2:	4b63      	ldr	r3, [pc, #396]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0xe8>
 8003fee:	e014      	b.n	800401a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7ff fbf6 	bl	80037e0 <HAL_GetTick>
 8003ff4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff8:	f7ff fbf2 	bl	80037e0 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	; 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e3c0      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800400a:	4b59      	ldr	r3, [pc, #356]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x110>
 8004016:	e000      	b.n	800401a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 80ca 	beq.w	80041bc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004028:	4b51      	ldr	r3, [pc, #324]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004030:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004032:	4b4f      	ldr	r3, [pc, #316]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <HAL_RCC_OscConfig+0x166>
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	2b18      	cmp	r3, #24
 8004042:	d156      	bne.n	80040f2 <HAL_RCC_OscConfig+0x20a>
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d151      	bne.n	80040f2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800404e:	4b48      	ldr	r3, [pc, #288]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <HAL_RCC_OscConfig+0x17e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e392      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004066:	4b42      	ldr	r3, [pc, #264]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f023 0219 	bic.w	r2, r3, #25
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	493f      	ldr	r1, [pc, #252]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8004074:	4313      	orrs	r3, r2
 8004076:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7ff fbb2 	bl	80037e0 <HAL_GetTick>
 800407c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004080:	f7ff fbae 	bl	80037e0 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e37c      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004092:	4b37      	ldr	r3, [pc, #220]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409e:	f7ff fbcf 	bl	8003840 <HAL_GetREVID>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d817      	bhi.n	80040dc <HAL_RCC_OscConfig+0x1f4>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	2b40      	cmp	r3, #64	; 0x40
 80040b2:	d108      	bne.n	80040c6 <HAL_RCC_OscConfig+0x1de>
 80040b4:	4b2e      	ldr	r3, [pc, #184]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80040bc:	4a2c      	ldr	r2, [pc, #176]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 80040be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040c4:	e07a      	b.n	80041bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c6:	4b2a      	ldr	r3, [pc, #168]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	031b      	lsls	r3, r3, #12
 80040d4:	4926      	ldr	r1, [pc, #152]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040da:	e06f      	b.n	80041bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040dc:	4b24      	ldr	r3, [pc, #144]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	061b      	lsls	r3, r3, #24
 80040ea:	4921      	ldr	r1, [pc, #132]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040f0:	e064      	b.n	80041bc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d047      	beq.n	800418a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040fa:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 0219 	bic.w	r2, r3, #25
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	491a      	ldr	r1, [pc, #104]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8004108:	4313      	orrs	r3, r2
 800410a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7ff fb68 	bl	80037e0 <HAL_GetTick>
 8004110:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004114:	f7ff fb64 	bl	80037e0 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e332      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004126:	4b12      	ldr	r3, [pc, #72]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004132:	f7ff fb85 	bl	8003840 <HAL_GetREVID>
 8004136:	4603      	mov	r3, r0
 8004138:	f241 0203 	movw	r2, #4099	; 0x1003
 800413c:	4293      	cmp	r3, r2
 800413e:	d819      	bhi.n	8004174 <HAL_RCC_OscConfig+0x28c>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	d108      	bne.n	800415a <HAL_RCC_OscConfig+0x272>
 8004148:	4b09      	ldr	r3, [pc, #36]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004150:	4a07      	ldr	r2, [pc, #28]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 8004152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004156:	6053      	str	r3, [r2, #4]
 8004158:	e030      	b.n	80041bc <HAL_RCC_OscConfig+0x2d4>
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	031b      	lsls	r3, r3, #12
 8004168:	4901      	ldr	r1, [pc, #4]	; (8004170 <HAL_RCC_OscConfig+0x288>)
 800416a:	4313      	orrs	r3, r2
 800416c:	604b      	str	r3, [r1, #4]
 800416e:	e025      	b.n	80041bc <HAL_RCC_OscConfig+0x2d4>
 8004170:	58024400 	.word	0x58024400
 8004174:	4b9a      	ldr	r3, [pc, #616]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	061b      	lsls	r3, r3, #24
 8004182:	4997      	ldr	r1, [pc, #604]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 8004184:	4313      	orrs	r3, r2
 8004186:	604b      	str	r3, [r1, #4]
 8004188:	e018      	b.n	80041bc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800418a:	4b95      	ldr	r3, [pc, #596]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a94      	ldr	r2, [pc, #592]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 8004190:	f023 0301 	bic.w	r3, r3, #1
 8004194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004196:	f7ff fb23 	bl	80037e0 <HAL_GetTick>
 800419a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800419e:	f7ff fb1f 	bl	80037e0 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e2ed      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041b0:	4b8b      	ldr	r3, [pc, #556]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f0      	bne.n	800419e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80a9 	beq.w	800431c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ca:	4b85      	ldr	r3, [pc, #532]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041d4:	4b82      	ldr	r3, [pc, #520]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d007      	beq.n	80041f0 <HAL_RCC_OscConfig+0x308>
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	2b18      	cmp	r3, #24
 80041e4:	d13a      	bne.n	800425c <HAL_RCC_OscConfig+0x374>
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d135      	bne.n	800425c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041f0:	4b7b      	ldr	r3, [pc, #492]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <HAL_RCC_OscConfig+0x320>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	2b80      	cmp	r3, #128	; 0x80
 8004202:	d001      	beq.n	8004208 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e2c1      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004208:	f7ff fb1a 	bl	8003840 <HAL_GetREVID>
 800420c:	4603      	mov	r3, r0
 800420e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004212:	4293      	cmp	r3, r2
 8004214:	d817      	bhi.n	8004246 <HAL_RCC_OscConfig+0x35e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	2b20      	cmp	r3, #32
 800421c:	d108      	bne.n	8004230 <HAL_RCC_OscConfig+0x348>
 800421e:	4b70      	ldr	r3, [pc, #448]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004226:	4a6e      	ldr	r2, [pc, #440]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 8004228:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800422c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800422e:	e075      	b.n	800431c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004230:	4b6b      	ldr	r3, [pc, #428]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	069b      	lsls	r3, r3, #26
 800423e:	4968      	ldr	r1, [pc, #416]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 8004240:	4313      	orrs	r3, r2
 8004242:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004244:	e06a      	b.n	800431c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004246:	4b66      	ldr	r3, [pc, #408]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	061b      	lsls	r3, r3, #24
 8004254:	4962      	ldr	r1, [pc, #392]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 8004256:	4313      	orrs	r3, r2
 8004258:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800425a:	e05f      	b.n	800431c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d042      	beq.n	80042ea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004264:	4b5e      	ldr	r3, [pc, #376]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a5d      	ldr	r2, [pc, #372]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 800426a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7ff fab6 	bl	80037e0 <HAL_GetTick>
 8004274:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004278:	f7ff fab2 	bl	80037e0 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e280      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800428a:	4b55      	ldr	r3, [pc, #340]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004296:	f7ff fad3 	bl	8003840 <HAL_GetREVID>
 800429a:	4603      	mov	r3, r0
 800429c:	f241 0203 	movw	r2, #4099	; 0x1003
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d817      	bhi.n	80042d4 <HAL_RCC_OscConfig+0x3ec>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d108      	bne.n	80042be <HAL_RCC_OscConfig+0x3d6>
 80042ac:	4b4c      	ldr	r3, [pc, #304]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80042b4:	4a4a      	ldr	r2, [pc, #296]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80042b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042ba:	6053      	str	r3, [r2, #4]
 80042bc:	e02e      	b.n	800431c <HAL_RCC_OscConfig+0x434>
 80042be:	4b48      	ldr	r3, [pc, #288]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	069b      	lsls	r3, r3, #26
 80042cc:	4944      	ldr	r1, [pc, #272]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	604b      	str	r3, [r1, #4]
 80042d2:	e023      	b.n	800431c <HAL_RCC_OscConfig+0x434>
 80042d4:	4b42      	ldr	r3, [pc, #264]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	061b      	lsls	r3, r3, #24
 80042e2:	493f      	ldr	r1, [pc, #252]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60cb      	str	r3, [r1, #12]
 80042e8:	e018      	b.n	800431c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80042ea:	4b3d      	ldr	r3, [pc, #244]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a3c      	ldr	r2, [pc, #240]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80042f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f6:	f7ff fa73 	bl	80037e0 <HAL_GetTick>
 80042fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80042fe:	f7ff fa6f 	bl	80037e0 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e23d      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004310:	4b33      	ldr	r3, [pc, #204]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f0      	bne.n	80042fe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d036      	beq.n	8004396 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d019      	beq.n	8004364 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004330:	4b2b      	ldr	r3, [pc, #172]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 8004332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004334:	4a2a      	ldr	r2, [pc, #168]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433c:	f7ff fa50 	bl	80037e0 <HAL_GetTick>
 8004340:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004344:	f7ff fa4c 	bl	80037e0 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e21a      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004356:	4b22      	ldr	r3, [pc, #136]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 8004358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0x45c>
 8004362:	e018      	b.n	8004396 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004364:	4b1e      	ldr	r3, [pc, #120]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 8004366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004368:	4a1d      	ldr	r2, [pc, #116]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004370:	f7ff fa36 	bl	80037e0 <HAL_GetTick>
 8004374:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004378:	f7ff fa32 	bl	80037e0 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e200      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800438a:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 800438c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d039      	beq.n	8004416 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01c      	beq.n	80043e4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043aa:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a0c      	ldr	r2, [pc, #48]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80043b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80043b6:	f7ff fa13 	bl	80037e0 <HAL_GetTick>
 80043ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043be:	f7ff fa0f 	bl	80037e0 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e1dd      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043d0:	4b03      	ldr	r3, [pc, #12]	; (80043e0 <HAL_RCC_OscConfig+0x4f8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x4d6>
 80043dc:	e01b      	b.n	8004416 <HAL_RCC_OscConfig+0x52e>
 80043de:	bf00      	nop
 80043e0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043e4:	4b9b      	ldr	r3, [pc, #620]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a9a      	ldr	r2, [pc, #616]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 80043ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80043f0:	f7ff f9f6 	bl	80037e0 <HAL_GetTick>
 80043f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043f8:	f7ff f9f2 	bl	80037e0 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e1c0      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800440a:	4b92      	ldr	r3, [pc, #584]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 8081 	beq.w	8004526 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004424:	4b8c      	ldr	r3, [pc, #560]	; (8004658 <HAL_RCC_OscConfig+0x770>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a8b      	ldr	r2, [pc, #556]	; (8004658 <HAL_RCC_OscConfig+0x770>)
 800442a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004430:	f7ff f9d6 	bl	80037e0 <HAL_GetTick>
 8004434:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004438:	f7ff f9d2 	bl	80037e0 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	; 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e1a0      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800444a:	4b83      	ldr	r3, [pc, #524]	; (8004658 <HAL_RCC_OscConfig+0x770>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d106      	bne.n	800446c <HAL_RCC_OscConfig+0x584>
 800445e:	4b7d      	ldr	r3, [pc, #500]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004462:	4a7c      	ldr	r2, [pc, #496]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	6713      	str	r3, [r2, #112]	; 0x70
 800446a:	e02d      	b.n	80044c8 <HAL_RCC_OscConfig+0x5e0>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10c      	bne.n	800448e <HAL_RCC_OscConfig+0x5a6>
 8004474:	4b77      	ldr	r3, [pc, #476]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004478:	4a76      	ldr	r2, [pc, #472]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 800447a:	f023 0301 	bic.w	r3, r3, #1
 800447e:	6713      	str	r3, [r2, #112]	; 0x70
 8004480:	4b74      	ldr	r3, [pc, #464]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004484:	4a73      	ldr	r2, [pc, #460]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 8004486:	f023 0304 	bic.w	r3, r3, #4
 800448a:	6713      	str	r3, [r2, #112]	; 0x70
 800448c:	e01c      	b.n	80044c8 <HAL_RCC_OscConfig+0x5e0>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	2b05      	cmp	r3, #5
 8004494:	d10c      	bne.n	80044b0 <HAL_RCC_OscConfig+0x5c8>
 8004496:	4b6f      	ldr	r3, [pc, #444]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	4a6e      	ldr	r2, [pc, #440]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 800449c:	f043 0304 	orr.w	r3, r3, #4
 80044a0:	6713      	str	r3, [r2, #112]	; 0x70
 80044a2:	4b6c      	ldr	r3, [pc, #432]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a6:	4a6b      	ldr	r2, [pc, #428]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 80044a8:	f043 0301 	orr.w	r3, r3, #1
 80044ac:	6713      	str	r3, [r2, #112]	; 0x70
 80044ae:	e00b      	b.n	80044c8 <HAL_RCC_OscConfig+0x5e0>
 80044b0:	4b68      	ldr	r3, [pc, #416]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 80044b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b4:	4a67      	ldr	r2, [pc, #412]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 80044b6:	f023 0301 	bic.w	r3, r3, #1
 80044ba:	6713      	str	r3, [r2, #112]	; 0x70
 80044bc:	4b65      	ldr	r3, [pc, #404]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 80044be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c0:	4a64      	ldr	r2, [pc, #400]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 80044c2:	f023 0304 	bic.w	r3, r3, #4
 80044c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d015      	beq.n	80044fc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d0:	f7ff f986 	bl	80037e0 <HAL_GetTick>
 80044d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044d6:	e00a      	b.n	80044ee <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d8:	f7ff f982 	bl	80037e0 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e14e      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044ee:	4b59      	ldr	r3, [pc, #356]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0ee      	beq.n	80044d8 <HAL_RCC_OscConfig+0x5f0>
 80044fa:	e014      	b.n	8004526 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fc:	f7ff f970 	bl	80037e0 <HAL_GetTick>
 8004500:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004502:	e00a      	b.n	800451a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004504:	f7ff f96c 	bl	80037e0 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e138      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800451a:	4b4e      	ldr	r3, [pc, #312]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1ee      	bne.n	8004504 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 812d 	beq.w	800478a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004530:	4b48      	ldr	r3, [pc, #288]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004538:	2b18      	cmp	r3, #24
 800453a:	f000 80bd 	beq.w	80046b8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	2b02      	cmp	r3, #2
 8004544:	f040 809e 	bne.w	8004684 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004548:	4b42      	ldr	r3, [pc, #264]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a41      	ldr	r2, [pc, #260]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 800454e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7ff f944 	bl	80037e0 <HAL_GetTick>
 8004558:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800455c:	f7ff f940 	bl	80037e0 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e10e      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800456e:	4b39      	ldr	r3, [pc, #228]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800457a:	4b36      	ldr	r3, [pc, #216]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 800457c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800457e:	4b37      	ldr	r3, [pc, #220]	; (800465c <HAL_RCC_OscConfig+0x774>)
 8004580:	4013      	ands	r3, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800458a:	0112      	lsls	r2, r2, #4
 800458c:	430a      	orrs	r2, r1
 800458e:	4931      	ldr	r1, [pc, #196]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 8004590:	4313      	orrs	r3, r2
 8004592:	628b      	str	r3, [r1, #40]	; 0x28
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	3b01      	subs	r3, #1
 800459a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a2:	3b01      	subs	r3, #1
 80045a4:	025b      	lsls	r3, r3, #9
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	3b01      	subs	r3, #1
 80045b0:	041b      	lsls	r3, r3, #16
 80045b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045bc:	3b01      	subs	r3, #1
 80045be:	061b      	lsls	r3, r3, #24
 80045c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045c4:	4923      	ldr	r1, [pc, #140]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80045ca:	4b22      	ldr	r3, [pc, #136]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	4a21      	ldr	r2, [pc, #132]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80045d6:	4b1f      	ldr	r3, [pc, #124]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 80045d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045da:	4b21      	ldr	r3, [pc, #132]	; (8004660 <HAL_RCC_OscConfig+0x778>)
 80045dc:	4013      	ands	r3, r2
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80045e2:	00d2      	lsls	r2, r2, #3
 80045e4:	491b      	ldr	r1, [pc, #108]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80045ea:	4b1a      	ldr	r3, [pc, #104]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	f023 020c 	bic.w	r2, r3, #12
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	4917      	ldr	r1, [pc, #92]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80045fc:	4b15      	ldr	r3, [pc, #84]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	f023 0202 	bic.w	r2, r3, #2
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004608:	4912      	ldr	r1, [pc, #72]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 800460a:	4313      	orrs	r3, r2
 800460c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800460e:	4b11      	ldr	r3, [pc, #68]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	4a10      	ldr	r2, [pc, #64]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 8004614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004618:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800461a:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	4a0d      	ldr	r2, [pc, #52]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 8004620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004624:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004626:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 800462c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004630:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004632:	4b08      	ldr	r3, [pc, #32]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	4a07      	ldr	r2, [pc, #28]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 8004638:	f043 0301 	orr.w	r3, r3, #1
 800463c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800463e:	4b05      	ldr	r3, [pc, #20]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a04      	ldr	r2, [pc, #16]	; (8004654 <HAL_RCC_OscConfig+0x76c>)
 8004644:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464a:	f7ff f8c9 	bl	80037e0 <HAL_GetTick>
 800464e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004650:	e011      	b.n	8004676 <HAL_RCC_OscConfig+0x78e>
 8004652:	bf00      	nop
 8004654:	58024400 	.word	0x58024400
 8004658:	58024800 	.word	0x58024800
 800465c:	fffffc0c 	.word	0xfffffc0c
 8004660:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004664:	f7ff f8bc 	bl	80037e0 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e08a      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004676:	4b47      	ldr	r3, [pc, #284]	; (8004794 <HAL_RCC_OscConfig+0x8ac>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0x77c>
 8004682:	e082      	b.n	800478a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004684:	4b43      	ldr	r3, [pc, #268]	; (8004794 <HAL_RCC_OscConfig+0x8ac>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a42      	ldr	r2, [pc, #264]	; (8004794 <HAL_RCC_OscConfig+0x8ac>)
 800468a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800468e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7ff f8a6 	bl	80037e0 <HAL_GetTick>
 8004694:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004698:	f7ff f8a2 	bl	80037e0 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e070      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046aa:	4b3a      	ldr	r3, [pc, #232]	; (8004794 <HAL_RCC_OscConfig+0x8ac>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0x7b0>
 80046b6:	e068      	b.n	800478a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80046b8:	4b36      	ldr	r3, [pc, #216]	; (8004794 <HAL_RCC_OscConfig+0x8ac>)
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80046be:	4b35      	ldr	r3, [pc, #212]	; (8004794 <HAL_RCC_OscConfig+0x8ac>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d031      	beq.n	8004730 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f003 0203 	and.w	r2, r3, #3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d12a      	bne.n	8004730 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	091b      	lsrs	r3, r3, #4
 80046de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d122      	bne.n	8004730 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d11a      	bne.n	8004730 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	0a5b      	lsrs	r3, r3, #9
 80046fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004706:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004708:	429a      	cmp	r2, r3
 800470a:	d111      	bne.n	8004730 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	0c1b      	lsrs	r3, r3, #16
 8004710:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800471a:	429a      	cmp	r2, r3
 800471c:	d108      	bne.n	8004730 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	0e1b      	lsrs	r3, r3, #24
 8004722:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e02b      	b.n	800478c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004734:	4b17      	ldr	r3, [pc, #92]	; (8004794 <HAL_RCC_OscConfig+0x8ac>)
 8004736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004738:	08db      	lsrs	r3, r3, #3
 800473a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800473e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	429a      	cmp	r2, r3
 8004748:	d01f      	beq.n	800478a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800474a:	4b12      	ldr	r3, [pc, #72]	; (8004794 <HAL_RCC_OscConfig+0x8ac>)
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	4a11      	ldr	r2, [pc, #68]	; (8004794 <HAL_RCC_OscConfig+0x8ac>)
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004756:	f7ff f843 	bl	80037e0 <HAL_GetTick>
 800475a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800475c:	bf00      	nop
 800475e:	f7ff f83f 	bl	80037e0 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	4293      	cmp	r3, r2
 8004768:	d0f9      	beq.n	800475e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800476a:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <HAL_RCC_OscConfig+0x8ac>)
 800476c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800476e:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <HAL_RCC_OscConfig+0x8b0>)
 8004770:	4013      	ands	r3, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004776:	00d2      	lsls	r2, r2, #3
 8004778:	4906      	ldr	r1, [pc, #24]	; (8004794 <HAL_RCC_OscConfig+0x8ac>)
 800477a:	4313      	orrs	r3, r2
 800477c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_RCC_OscConfig+0x8ac>)
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	4a04      	ldr	r2, [pc, #16]	; (8004794 <HAL_RCC_OscConfig+0x8ac>)
 8004784:	f043 0301 	orr.w	r3, r3, #1
 8004788:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3730      	adds	r7, #48	; 0x30
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	58024400 	.word	0x58024400
 8004798:	ffff0007 	.word	0xffff0007

0800479c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e19c      	b.n	8004aea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b0:	4b8a      	ldr	r3, [pc, #552]	; (80049dc <HAL_RCC_ClockConfig+0x240>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d910      	bls.n	80047e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047be:	4b87      	ldr	r3, [pc, #540]	; (80049dc <HAL_RCC_ClockConfig+0x240>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 020f 	bic.w	r2, r3, #15
 80047c6:	4985      	ldr	r1, [pc, #532]	; (80049dc <HAL_RCC_ClockConfig+0x240>)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b83      	ldr	r3, [pc, #524]	; (80049dc <HAL_RCC_ClockConfig+0x240>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e184      	b.n	8004aea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d010      	beq.n	800480e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	4b7b      	ldr	r3, [pc, #492]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d908      	bls.n	800480e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047fc:	4b78      	ldr	r3, [pc, #480]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	4975      	ldr	r1, [pc, #468]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 800480a:	4313      	orrs	r3, r2
 800480c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d010      	beq.n	800483c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	4b70      	ldr	r3, [pc, #448]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004826:	429a      	cmp	r2, r3
 8004828:	d908      	bls.n	800483c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800482a:	4b6d      	ldr	r3, [pc, #436]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	496a      	ldr	r1, [pc, #424]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 8004838:	4313      	orrs	r3, r2
 800483a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b00      	cmp	r3, #0
 8004846:	d010      	beq.n	800486a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699a      	ldr	r2, [r3, #24]
 800484c:	4b64      	ldr	r3, [pc, #400]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004854:	429a      	cmp	r2, r3
 8004856:	d908      	bls.n	800486a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004858:	4b61      	ldr	r3, [pc, #388]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	495e      	ldr	r1, [pc, #376]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 8004866:	4313      	orrs	r3, r2
 8004868:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d010      	beq.n	8004898 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	4b59      	ldr	r3, [pc, #356]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004882:	429a      	cmp	r2, r3
 8004884:	d908      	bls.n	8004898 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004886:	4b56      	ldr	r3, [pc, #344]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	4953      	ldr	r1, [pc, #332]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 8004894:	4313      	orrs	r3, r2
 8004896:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d010      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	4b4d      	ldr	r3, [pc, #308]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d908      	bls.n	80048c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b4:	4b4a      	ldr	r3, [pc, #296]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	f023 020f 	bic.w	r2, r3, #15
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	4947      	ldr	r1, [pc, #284]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d055      	beq.n	800497e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80048d2:	4b43      	ldr	r3, [pc, #268]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	4940      	ldr	r1, [pc, #256]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d107      	bne.n	80048fc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048ec:	4b3c      	ldr	r3, [pc, #240]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d121      	bne.n	800493c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0f6      	b.n	8004aea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b03      	cmp	r3, #3
 8004902:	d107      	bne.n	8004914 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004904:	4b36      	ldr	r3, [pc, #216]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d115      	bne.n	800493c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0ea      	b.n	8004aea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d107      	bne.n	800492c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800491c:	4b30      	ldr	r3, [pc, #192]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004924:	2b00      	cmp	r3, #0
 8004926:	d109      	bne.n	800493c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e0de      	b.n	8004aea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800492c:	4b2c      	ldr	r3, [pc, #176]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0d6      	b.n	8004aea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800493c:	4b28      	ldr	r3, [pc, #160]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	f023 0207 	bic.w	r2, r3, #7
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4925      	ldr	r1, [pc, #148]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 800494a:	4313      	orrs	r3, r2
 800494c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494e:	f7fe ff47 	bl	80037e0 <HAL_GetTick>
 8004952:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004954:	e00a      	b.n	800496c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004956:	f7fe ff43 	bl	80037e0 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	; 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d901      	bls.n	800496c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e0be      	b.n	8004aea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496c:	4b1c      	ldr	r3, [pc, #112]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	429a      	cmp	r2, r3
 800497c:	d1eb      	bne.n	8004956 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d010      	beq.n	80049ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	429a      	cmp	r2, r3
 8004998:	d208      	bcs.n	80049ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800499a:	4b11      	ldr	r3, [pc, #68]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f023 020f 	bic.w	r2, r3, #15
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	490e      	ldr	r1, [pc, #56]	; (80049e0 <HAL_RCC_ClockConfig+0x244>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <HAL_RCC_ClockConfig+0x240>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d214      	bcs.n	80049e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ba:	4b08      	ldr	r3, [pc, #32]	; (80049dc <HAL_RCC_ClockConfig+0x240>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f023 020f 	bic.w	r2, r3, #15
 80049c2:	4906      	ldr	r1, [pc, #24]	; (80049dc <HAL_RCC_ClockConfig+0x240>)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ca:	4b04      	ldr	r3, [pc, #16]	; (80049dc <HAL_RCC_ClockConfig+0x240>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d005      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e086      	b.n	8004aea <HAL_RCC_ClockConfig+0x34e>
 80049dc:	52002000 	.word	0x52002000
 80049e0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d010      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	4b3f      	ldr	r3, [pc, #252]	; (8004af4 <HAL_RCC_ClockConfig+0x358>)
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d208      	bcs.n	8004a12 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a00:	4b3c      	ldr	r3, [pc, #240]	; (8004af4 <HAL_RCC_ClockConfig+0x358>)
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	4939      	ldr	r1, [pc, #228]	; (8004af4 <HAL_RCC_ClockConfig+0x358>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0308 	and.w	r3, r3, #8
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d010      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	4b34      	ldr	r3, [pc, #208]	; (8004af4 <HAL_RCC_ClockConfig+0x358>)
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d208      	bcs.n	8004a40 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a2e:	4b31      	ldr	r3, [pc, #196]	; (8004af4 <HAL_RCC_ClockConfig+0x358>)
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	492e      	ldr	r1, [pc, #184]	; (8004af4 <HAL_RCC_ClockConfig+0x358>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d010      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699a      	ldr	r2, [r3, #24]
 8004a50:	4b28      	ldr	r3, [pc, #160]	; (8004af4 <HAL_RCC_ClockConfig+0x358>)
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d208      	bcs.n	8004a6e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a5c:	4b25      	ldr	r3, [pc, #148]	; (8004af4 <HAL_RCC_ClockConfig+0x358>)
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	4922      	ldr	r1, [pc, #136]	; (8004af4 <HAL_RCC_ClockConfig+0x358>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d010      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69da      	ldr	r2, [r3, #28]
 8004a7e:	4b1d      	ldr	r3, [pc, #116]	; (8004af4 <HAL_RCC_ClockConfig+0x358>)
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d208      	bcs.n	8004a9c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a8a:	4b1a      	ldr	r3, [pc, #104]	; (8004af4 <HAL_RCC_ClockConfig+0x358>)
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	4917      	ldr	r1, [pc, #92]	; (8004af4 <HAL_RCC_ClockConfig+0x358>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a9c:	f000 f834 	bl	8004b08 <HAL_RCC_GetSysClockFreq>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	4b14      	ldr	r3, [pc, #80]	; (8004af4 <HAL_RCC_ClockConfig+0x358>)
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	0a1b      	lsrs	r3, r3, #8
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	4912      	ldr	r1, [pc, #72]	; (8004af8 <HAL_RCC_ClockConfig+0x35c>)
 8004aae:	5ccb      	ldrb	r3, [r1, r3]
 8004ab0:	f003 031f 	and.w	r3, r3, #31
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004aba:	4b0e      	ldr	r3, [pc, #56]	; (8004af4 <HAL_RCC_ClockConfig+0x358>)
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	4a0d      	ldr	r2, [pc, #52]	; (8004af8 <HAL_RCC_ClockConfig+0x35c>)
 8004ac4:	5cd3      	ldrb	r3, [r2, r3]
 8004ac6:	f003 031f 	and.w	r3, r3, #31
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad0:	4a0a      	ldr	r2, [pc, #40]	; (8004afc <HAL_RCC_ClockConfig+0x360>)
 8004ad2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ad4:	4a0a      	ldr	r2, [pc, #40]	; (8004b00 <HAL_RCC_ClockConfig+0x364>)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004ada:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <HAL_RCC_ClockConfig+0x368>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe fe34 	bl	800374c <HAL_InitTick>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	58024400 	.word	0x58024400
 8004af8:	08007d30 	.word	0x08007d30
 8004afc:	24000004 	.word	0x24000004
 8004b00:	24000000 	.word	0x24000000
 8004b04:	24000014 	.word	0x24000014

08004b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b089      	sub	sp, #36	; 0x24
 8004b0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b0e:	4bb3      	ldr	r3, [pc, #716]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b16:	2b18      	cmp	r3, #24
 8004b18:	f200 8155 	bhi.w	8004dc6 <HAL_RCC_GetSysClockFreq+0x2be>
 8004b1c:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b89 	.word	0x08004b89
 8004b28:	08004dc7 	.word	0x08004dc7
 8004b2c:	08004dc7 	.word	0x08004dc7
 8004b30:	08004dc7 	.word	0x08004dc7
 8004b34:	08004dc7 	.word	0x08004dc7
 8004b38:	08004dc7 	.word	0x08004dc7
 8004b3c:	08004dc7 	.word	0x08004dc7
 8004b40:	08004dc7 	.word	0x08004dc7
 8004b44:	08004baf 	.word	0x08004baf
 8004b48:	08004dc7 	.word	0x08004dc7
 8004b4c:	08004dc7 	.word	0x08004dc7
 8004b50:	08004dc7 	.word	0x08004dc7
 8004b54:	08004dc7 	.word	0x08004dc7
 8004b58:	08004dc7 	.word	0x08004dc7
 8004b5c:	08004dc7 	.word	0x08004dc7
 8004b60:	08004dc7 	.word	0x08004dc7
 8004b64:	08004bb5 	.word	0x08004bb5
 8004b68:	08004dc7 	.word	0x08004dc7
 8004b6c:	08004dc7 	.word	0x08004dc7
 8004b70:	08004dc7 	.word	0x08004dc7
 8004b74:	08004dc7 	.word	0x08004dc7
 8004b78:	08004dc7 	.word	0x08004dc7
 8004b7c:	08004dc7 	.word	0x08004dc7
 8004b80:	08004dc7 	.word	0x08004dc7
 8004b84:	08004bbb 	.word	0x08004bbb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b88:	4b94      	ldr	r3, [pc, #592]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d009      	beq.n	8004ba8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b94:	4b91      	ldr	r3, [pc, #580]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	08db      	lsrs	r3, r3, #3
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	4a90      	ldr	r2, [pc, #576]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004ba6:	e111      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ba8:	4b8d      	ldr	r3, [pc, #564]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004baa:	61bb      	str	r3, [r7, #24]
      break;
 8004bac:	e10e      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004bae:	4b8d      	ldr	r3, [pc, #564]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004bb0:	61bb      	str	r3, [r7, #24]
      break;
 8004bb2:	e10b      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004bb4:	4b8c      	ldr	r3, [pc, #560]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004bb6:	61bb      	str	r3, [r7, #24]
      break;
 8004bb8:	e108      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bba:	4b88      	ldr	r3, [pc, #544]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004bc4:	4b85      	ldr	r3, [pc, #532]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc8:	091b      	lsrs	r3, r3, #4
 8004bca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004bd0:	4b82      	ldr	r3, [pc, #520]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004bda:	4b80      	ldr	r3, [pc, #512]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bde:	08db      	lsrs	r3, r3, #3
 8004be0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 80e1 	beq.w	8004dc0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	f000 8083 	beq.w	8004d0c <HAL_RCC_GetSysClockFreq+0x204>
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	f200 80a1 	bhi.w	8004d50 <HAL_RCC_GetSysClockFreq+0x248>
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0x114>
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d056      	beq.n	8004cc8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004c1a:	e099      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c1c:	4b6f      	ldr	r3, [pc, #444]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d02d      	beq.n	8004c84 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c28:	4b6c      	ldr	r3, [pc, #432]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	08db      	lsrs	r3, r3, #3
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	4a6b      	ldr	r2, [pc, #428]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
 8004c38:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	ee07 3a90 	vmov	s15, r3
 8004c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c52:	4b62      	ldr	r3, [pc, #392]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c62:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c66:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004dec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004c82:	e087      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004df0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c96:	4b51      	ldr	r3, [pc, #324]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004caa:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004dec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004cc6:	e065      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004df4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cda:	4b40      	ldr	r3, [pc, #256]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cea:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004dec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d0a:	e043      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	ee07 3a90 	vmov	s15, r3
 8004d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d16:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004df8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d1e:	4b2f      	ldr	r3, [pc, #188]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d32:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004dec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d4e:	e021      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	ee07 3a90 	vmov	s15, r3
 8004d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d5a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004df4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d62:	4b1e      	ldr	r3, [pc, #120]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d72:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d76:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004dec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004d92:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004d94:	4b11      	ldr	r3, [pc, #68]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	0a5b      	lsrs	r3, r3, #9
 8004d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d9e:	3301      	adds	r3, #1
 8004da0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	ee07 3a90 	vmov	s15, r3
 8004da8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004dac:	edd7 6a07 	vldr	s13, [r7, #28]
 8004db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004db8:	ee17 3a90 	vmov	r3, s15
 8004dbc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004dbe:	e005      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61bb      	str	r3, [r7, #24]
      break;
 8004dc4:	e002      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004dc6:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004dc8:	61bb      	str	r3, [r7, #24]
      break;
 8004dca:	bf00      	nop
  }

  return sysclockfreq;
 8004dcc:	69bb      	ldr	r3, [r7, #24]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3724      	adds	r7, #36	; 0x24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	58024400 	.word	0x58024400
 8004de0:	03d09000 	.word	0x03d09000
 8004de4:	003d0900 	.word	0x003d0900
 8004de8:	017d7840 	.word	0x017d7840
 8004dec:	46000000 	.word	0x46000000
 8004df0:	4c742400 	.word	0x4c742400
 8004df4:	4a742400 	.word	0x4a742400
 8004df8:	4bbebc20 	.word	0x4bbebc20

08004dfc <HAL_RCCEx_EnableBootCore>:
  * @note   This bit can be set by software but is cleared by hardware after a system reset or STANDBY
  *
  * @retval None
  */
void HAL_RCCEx_EnableBootCore(uint32_t RCC_BootCx)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_BOOT_CORE(RCC_BootCx));
  SET_BIT(RCC->GCR, RCC_BootCx) ;
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <HAL_RCCEx_EnableBootCore+0x24>)
 8004e06:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004e0a:	4905      	ldr	r1, [pc, #20]	; (8004e20 <HAL_RCCEx_EnableBootCore+0x24>)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	58024400 	.word	0x58024400

08004e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e049      	b.n	8004eca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fe fac8 	bl	80033e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	4619      	mov	r1, r3
 8004e62:	4610      	mov	r0, r2
 8004e64:	f000 fea6 	bl	8005bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d001      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e054      	b.n	8004f96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a26      	ldr	r2, [pc, #152]	; (8004fa4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d022      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0x80>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f16:	d01d      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0x80>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a22      	ldr	r2, [pc, #136]	; (8004fa8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d018      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0x80>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a21      	ldr	r2, [pc, #132]	; (8004fac <HAL_TIM_Base_Start_IT+0xd8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d013      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0x80>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1f      	ldr	r2, [pc, #124]	; (8004fb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d00e      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0x80>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1e      	ldr	r2, [pc, #120]	; (8004fb4 <HAL_TIM_Base_Start_IT+0xe0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d009      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0x80>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a1c      	ldr	r2, [pc, #112]	; (8004fb8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d004      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0x80>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a1b      	ldr	r2, [pc, #108]	; (8004fbc <HAL_TIM_Base_Start_IT+0xe8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d115      	bne.n	8004f80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	4b19      	ldr	r3, [pc, #100]	; (8004fc0 <HAL_TIM_Base_Start_IT+0xec>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b06      	cmp	r3, #6
 8004f64:	d015      	beq.n	8004f92 <HAL_TIM_Base_Start_IT+0xbe>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6c:	d011      	beq.n	8004f92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0201 	orr.w	r2, r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7e:	e008      	b.n	8004f92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	e000      	b.n	8004f94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40010000 	.word	0x40010000
 8004fa8:	40000400 	.word	0x40000400
 8004fac:	40000800 	.word	0x40000800
 8004fb0:	40000c00 	.word	0x40000c00
 8004fb4:	40010400 	.word	0x40010400
 8004fb8:	40001800 	.word	0x40001800
 8004fbc:	40014000 	.word	0x40014000
 8004fc0:	00010007 	.word	0x00010007

08004fc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e049      	b.n	800506a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f841 	bl	8005072 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3304      	adds	r3, #4
 8005000:	4619      	mov	r1, r3
 8005002:	4610      	mov	r0, r2
 8005004:	f000 fdd6 	bl	8005bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
	...

08005088 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d109      	bne.n	80050ac <HAL_TIM_PWM_Start+0x24>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	bf14      	ite	ne
 80050a4:	2301      	movne	r3, #1
 80050a6:	2300      	moveq	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	e03c      	b.n	8005126 <HAL_TIM_PWM_Start+0x9e>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d109      	bne.n	80050c6 <HAL_TIM_PWM_Start+0x3e>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	bf14      	ite	ne
 80050be:	2301      	movne	r3, #1
 80050c0:	2300      	moveq	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	e02f      	b.n	8005126 <HAL_TIM_PWM_Start+0x9e>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d109      	bne.n	80050e0 <HAL_TIM_PWM_Start+0x58>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	bf14      	ite	ne
 80050d8:	2301      	movne	r3, #1
 80050da:	2300      	moveq	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	e022      	b.n	8005126 <HAL_TIM_PWM_Start+0x9e>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b0c      	cmp	r3, #12
 80050e4:	d109      	bne.n	80050fa <HAL_TIM_PWM_Start+0x72>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	bf14      	ite	ne
 80050f2:	2301      	movne	r3, #1
 80050f4:	2300      	moveq	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	e015      	b.n	8005126 <HAL_TIM_PWM_Start+0x9e>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b10      	cmp	r3, #16
 80050fe:	d109      	bne.n	8005114 <HAL_TIM_PWM_Start+0x8c>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	bf14      	ite	ne
 800510c:	2301      	movne	r3, #1
 800510e:	2300      	moveq	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	e008      	b.n	8005126 <HAL_TIM_PWM_Start+0x9e>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	bf14      	ite	ne
 8005120:	2301      	movne	r3, #1
 8005122:	2300      	moveq	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e0a1      	b.n	8005272 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d104      	bne.n	800513e <HAL_TIM_PWM_Start+0xb6>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800513c:	e023      	b.n	8005186 <HAL_TIM_PWM_Start+0xfe>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b04      	cmp	r3, #4
 8005142:	d104      	bne.n	800514e <HAL_TIM_PWM_Start+0xc6>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800514c:	e01b      	b.n	8005186 <HAL_TIM_PWM_Start+0xfe>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b08      	cmp	r3, #8
 8005152:	d104      	bne.n	800515e <HAL_TIM_PWM_Start+0xd6>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800515c:	e013      	b.n	8005186 <HAL_TIM_PWM_Start+0xfe>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b0c      	cmp	r3, #12
 8005162:	d104      	bne.n	800516e <HAL_TIM_PWM_Start+0xe6>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800516c:	e00b      	b.n	8005186 <HAL_TIM_PWM_Start+0xfe>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b10      	cmp	r3, #16
 8005172:	d104      	bne.n	800517e <HAL_TIM_PWM_Start+0xf6>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800517c:	e003      	b.n	8005186 <HAL_TIM_PWM_Start+0xfe>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2201      	movs	r2, #1
 800518c:	6839      	ldr	r1, [r7, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f001 f91e 	bl	80063d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a38      	ldr	r2, [pc, #224]	; (800527c <HAL_TIM_PWM_Start+0x1f4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d013      	beq.n	80051c6 <HAL_TIM_PWM_Start+0x13e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a37      	ldr	r2, [pc, #220]	; (8005280 <HAL_TIM_PWM_Start+0x1f8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00e      	beq.n	80051c6 <HAL_TIM_PWM_Start+0x13e>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a35      	ldr	r2, [pc, #212]	; (8005284 <HAL_TIM_PWM_Start+0x1fc>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d009      	beq.n	80051c6 <HAL_TIM_PWM_Start+0x13e>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a34      	ldr	r2, [pc, #208]	; (8005288 <HAL_TIM_PWM_Start+0x200>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d004      	beq.n	80051c6 <HAL_TIM_PWM_Start+0x13e>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a32      	ldr	r2, [pc, #200]	; (800528c <HAL_TIM_PWM_Start+0x204>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_PWM_Start+0x142>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <HAL_TIM_PWM_Start+0x144>
 80051ca:	2300      	movs	r3, #0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d007      	beq.n	80051e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a25      	ldr	r2, [pc, #148]	; (800527c <HAL_TIM_PWM_Start+0x1f4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d022      	beq.n	8005230 <HAL_TIM_PWM_Start+0x1a8>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f2:	d01d      	beq.n	8005230 <HAL_TIM_PWM_Start+0x1a8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a25      	ldr	r2, [pc, #148]	; (8005290 <HAL_TIM_PWM_Start+0x208>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d018      	beq.n	8005230 <HAL_TIM_PWM_Start+0x1a8>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a24      	ldr	r2, [pc, #144]	; (8005294 <HAL_TIM_PWM_Start+0x20c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d013      	beq.n	8005230 <HAL_TIM_PWM_Start+0x1a8>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a22      	ldr	r2, [pc, #136]	; (8005298 <HAL_TIM_PWM_Start+0x210>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00e      	beq.n	8005230 <HAL_TIM_PWM_Start+0x1a8>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1a      	ldr	r2, [pc, #104]	; (8005280 <HAL_TIM_PWM_Start+0x1f8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d009      	beq.n	8005230 <HAL_TIM_PWM_Start+0x1a8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1e      	ldr	r2, [pc, #120]	; (800529c <HAL_TIM_PWM_Start+0x214>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d004      	beq.n	8005230 <HAL_TIM_PWM_Start+0x1a8>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a16      	ldr	r2, [pc, #88]	; (8005284 <HAL_TIM_PWM_Start+0x1fc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d115      	bne.n	800525c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <HAL_TIM_PWM_Start+0x218>)
 8005238:	4013      	ands	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b06      	cmp	r3, #6
 8005240:	d015      	beq.n	800526e <HAL_TIM_PWM_Start+0x1e6>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005248:	d011      	beq.n	800526e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f042 0201 	orr.w	r2, r2, #1
 8005258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525a:	e008      	b.n	800526e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	e000      	b.n	8005270 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40010000 	.word	0x40010000
 8005280:	40010400 	.word	0x40010400
 8005284:	40014000 	.word	0x40014000
 8005288:	40014400 	.word	0x40014400
 800528c:	40014800 	.word	0x40014800
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40000c00 	.word	0x40000c00
 800529c:	40001800 	.word	0x40001800
 80052a0:	00010007 	.word	0x00010007

080052a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e08f      	b.n	80053d8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d106      	bne.n	80052d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7fe f8c7 	bl	8003460 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2202      	movs	r2, #2
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6899      	ldr	r1, [r3, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	4b3e      	ldr	r3, [pc, #248]	; (80053e0 <HAL_TIM_Encoder_Init+0x13c>)
 80052e6:	400b      	ands	r3, r1
 80052e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4619      	mov	r1, r3
 80052f4:	4610      	mov	r0, r2
 80052f6:	f000 fc5d 	bl	8005bb4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	4b31      	ldr	r3, [pc, #196]	; (80053e4 <HAL_TIM_Encoder_Init+0x140>)
 8005320:	4013      	ands	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	4313      	orrs	r3, r2
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	4b2b      	ldr	r3, [pc, #172]	; (80053e8 <HAL_TIM_Encoder_Init+0x144>)
 800533a:	4013      	ands	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4b2a      	ldr	r3, [pc, #168]	; (80053ec <HAL_TIM_Encoder_Init+0x148>)
 8005342:	4013      	ands	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	021b      	lsls	r3, r3, #8
 8005350:	4313      	orrs	r3, r2
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	011a      	lsls	r2, r3, #4
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	031b      	lsls	r3, r3, #12
 8005364:	4313      	orrs	r3, r2
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005372:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800537a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	4313      	orrs	r3, r2
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	fffebff8 	.word	0xfffebff8
 80053e4:	fffffcfc 	.word	0xfffffcfc
 80053e8:	fffff3f3 	.word	0xfffff3f3
 80053ec:	ffff0f0f 	.word	0xffff0f0f

080053f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005400:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005408:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005410:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005418:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d110      	bne.n	8005442 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d102      	bne.n	800542c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005426:	7b7b      	ldrb	r3, [r7, #13]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d001      	beq.n	8005430 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e069      	b.n	8005504 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005440:	e031      	b.n	80054a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b04      	cmp	r3, #4
 8005446:	d110      	bne.n	800546a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005448:	7bbb      	ldrb	r3, [r7, #14]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d102      	bne.n	8005454 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800544e:	7b3b      	ldrb	r3, [r7, #12]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d001      	beq.n	8005458 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e055      	b.n	8005504 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005468:	e01d      	b.n	80054a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d108      	bne.n	8005482 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005470:	7bbb      	ldrb	r3, [r7, #14]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d105      	bne.n	8005482 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005476:	7b7b      	ldrb	r3, [r7, #13]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d102      	bne.n	8005482 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800547c:	7b3b      	ldrb	r3, [r7, #12]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d001      	beq.n	8005486 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e03e      	b.n	8005504 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2202      	movs	r2, #2
 800548a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2202      	movs	r2, #2
 8005492:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2202      	movs	r2, #2
 800549a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2202      	movs	r2, #2
 80054a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <HAL_TIM_Encoder_Start+0xc4>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d008      	beq.n	80054c4 <HAL_TIM_Encoder_Start+0xd4>
 80054b2:	e00f      	b.n	80054d4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2201      	movs	r2, #1
 80054ba:	2100      	movs	r1, #0
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 ff87 	bl	80063d0 <TIM_CCxChannelCmd>
      break;
 80054c2:	e016      	b.n	80054f2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2201      	movs	r2, #1
 80054ca:	2104      	movs	r1, #4
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 ff7f 	bl	80063d0 <TIM_CCxChannelCmd>
      break;
 80054d2:	e00e      	b.n	80054f2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2201      	movs	r2, #1
 80054da:	2100      	movs	r1, #0
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 ff77 	bl	80063d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2201      	movs	r2, #1
 80054e8:	2104      	movs	r1, #4
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 ff70 	bl	80063d0 <TIM_CCxChannelCmd>
      break;
 80054f0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0201 	orr.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b02      	cmp	r3, #2
 8005520:	d122      	bne.n	8005568 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b02      	cmp	r3, #2
 800552e:	d11b      	bne.n	8005568 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0202 	mvn.w	r2, #2
 8005538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fb12 	bl	8005b78 <HAL_TIM_IC_CaptureCallback>
 8005554:	e005      	b.n	8005562 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fb04 	bl	8005b64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fb15 	bl	8005b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b04      	cmp	r3, #4
 8005574:	d122      	bne.n	80055bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b04      	cmp	r3, #4
 8005582:	d11b      	bne.n	80055bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0204 	mvn.w	r2, #4
 800558c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2202      	movs	r2, #2
 8005592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fae8 	bl	8005b78 <HAL_TIM_IC_CaptureCallback>
 80055a8:	e005      	b.n	80055b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fada 	bl	8005b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 faeb 	bl	8005b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d122      	bne.n	8005610 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f003 0308 	and.w	r3, r3, #8
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d11b      	bne.n	8005610 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0208 	mvn.w	r2, #8
 80055e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2204      	movs	r2, #4
 80055e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fabe 	bl	8005b78 <HAL_TIM_IC_CaptureCallback>
 80055fc:	e005      	b.n	800560a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fab0 	bl	8005b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fac1 	bl	8005b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0310 	and.w	r3, r3, #16
 800561a:	2b10      	cmp	r3, #16
 800561c:	d122      	bne.n	8005664 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	2b10      	cmp	r3, #16
 800562a:	d11b      	bne.n	8005664 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0210 	mvn.w	r2, #16
 8005634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2208      	movs	r2, #8
 800563a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fa94 	bl	8005b78 <HAL_TIM_IC_CaptureCallback>
 8005650:	e005      	b.n	800565e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fa86 	bl	8005b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fa97 	bl	8005b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b01      	cmp	r3, #1
 8005670:	d10e      	bne.n	8005690 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b01      	cmp	r3, #1
 800567e:	d107      	bne.n	8005690 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0201 	mvn.w	r2, #1
 8005688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7fd fae4 	bl	8002c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569a:	2b80      	cmp	r3, #128	; 0x80
 800569c:	d10e      	bne.n	80056bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a8:	2b80      	cmp	r3, #128	; 0x80
 80056aa:	d107      	bne.n	80056bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 ffc6 	bl	8006648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ca:	d10e      	bne.n	80056ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d6:	2b80      	cmp	r3, #128	; 0x80
 80056d8:	d107      	bne.n	80056ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 ffb9 	bl	800665c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f4:	2b40      	cmp	r3, #64	; 0x40
 80056f6:	d10e      	bne.n	8005716 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005702:	2b40      	cmp	r3, #64	; 0x40
 8005704:	d107      	bne.n	8005716 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800570e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fa45 	bl	8005ba0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f003 0320 	and.w	r3, r3, #32
 8005720:	2b20      	cmp	r3, #32
 8005722:	d10e      	bne.n	8005742 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b20      	cmp	r3, #32
 8005730:	d107      	bne.n	8005742 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f06f 0220 	mvn.w	r2, #32
 800573a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 ff79 	bl	8006634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
	...

0800574c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005762:	2b01      	cmp	r3, #1
 8005764:	d101      	bne.n	800576a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005766:	2302      	movs	r3, #2
 8005768:	e0ff      	b.n	800596a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b14      	cmp	r3, #20
 8005776:	f200 80f0 	bhi.w	800595a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800577a:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800577c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005780:	080057d5 	.word	0x080057d5
 8005784:	0800595b 	.word	0x0800595b
 8005788:	0800595b 	.word	0x0800595b
 800578c:	0800595b 	.word	0x0800595b
 8005790:	08005815 	.word	0x08005815
 8005794:	0800595b 	.word	0x0800595b
 8005798:	0800595b 	.word	0x0800595b
 800579c:	0800595b 	.word	0x0800595b
 80057a0:	08005857 	.word	0x08005857
 80057a4:	0800595b 	.word	0x0800595b
 80057a8:	0800595b 	.word	0x0800595b
 80057ac:	0800595b 	.word	0x0800595b
 80057b0:	08005897 	.word	0x08005897
 80057b4:	0800595b 	.word	0x0800595b
 80057b8:	0800595b 	.word	0x0800595b
 80057bc:	0800595b 	.word	0x0800595b
 80057c0:	080058d9 	.word	0x080058d9
 80057c4:	0800595b 	.word	0x0800595b
 80057c8:	0800595b 	.word	0x0800595b
 80057cc:	0800595b 	.word	0x0800595b
 80057d0:	08005919 	.word	0x08005919
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fa84 	bl	8005ce8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0208 	orr.w	r2, r2, #8
 80057ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699a      	ldr	r2, [r3, #24]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0204 	bic.w	r2, r2, #4
 80057fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6999      	ldr	r1, [r3, #24]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	691a      	ldr	r2, [r3, #16]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	619a      	str	r2, [r3, #24]
      break;
 8005812:	e0a5      	b.n	8005960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68b9      	ldr	r1, [r7, #8]
 800581a:	4618      	mov	r0, r3
 800581c:	f000 faf4 	bl	8005e08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800582e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	699a      	ldr	r2, [r3, #24]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800583e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6999      	ldr	r1, [r3, #24]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	021a      	lsls	r2, r3, #8
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	619a      	str	r2, [r3, #24]
      break;
 8005854:	e084      	b.n	8005960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68b9      	ldr	r1, [r7, #8]
 800585c:	4618      	mov	r0, r3
 800585e:	f000 fb5d 	bl	8005f1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69da      	ldr	r2, [r3, #28]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0208 	orr.w	r2, r2, #8
 8005870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69da      	ldr	r2, [r3, #28]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 0204 	bic.w	r2, r2, #4
 8005880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69d9      	ldr	r1, [r3, #28]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	61da      	str	r2, [r3, #28]
      break;
 8005894:	e064      	b.n	8005960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fbc5 	bl	800602c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69da      	ldr	r2, [r3, #28]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69da      	ldr	r2, [r3, #28]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69d9      	ldr	r1, [r3, #28]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	021a      	lsls	r2, r3, #8
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	61da      	str	r2, [r3, #28]
      break;
 80058d6:	e043      	b.n	8005960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68b9      	ldr	r1, [r7, #8]
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fc0e 	bl	8006100 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0208 	orr.w	r2, r2, #8
 80058f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0204 	bic.w	r2, r2, #4
 8005902:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	691a      	ldr	r2, [r3, #16]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005916:	e023      	b.n	8005960 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68b9      	ldr	r1, [r7, #8]
 800591e:	4618      	mov	r0, r3
 8005920:	f000 fc52 	bl	80061c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005932:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005942:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	021a      	lsls	r2, r3, #8
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005958:	e002      	b.n	8005960 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	75fb      	strb	r3, [r7, #23]
      break;
 800595e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005968:	7dfb      	ldrb	r3, [r7, #23]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop

08005974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_TIM_ConfigClockSource+0x1c>
 800598c:	2302      	movs	r3, #2
 800598e:	e0dc      	b.n	8005b4a <HAL_TIM_ConfigClockSource+0x1d6>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	4b6a      	ldr	r3, [pc, #424]	; (8005b54 <HAL_TIM_ConfigClockSource+0x1e0>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a64      	ldr	r2, [pc, #400]	; (8005b58 <HAL_TIM_ConfigClockSource+0x1e4>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	f000 80a9 	beq.w	8005b1e <HAL_TIM_ConfigClockSource+0x1aa>
 80059cc:	4a62      	ldr	r2, [pc, #392]	; (8005b58 <HAL_TIM_ConfigClockSource+0x1e4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	f200 80ae 	bhi.w	8005b30 <HAL_TIM_ConfigClockSource+0x1bc>
 80059d4:	4a61      	ldr	r2, [pc, #388]	; (8005b5c <HAL_TIM_ConfigClockSource+0x1e8>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	f000 80a1 	beq.w	8005b1e <HAL_TIM_ConfigClockSource+0x1aa>
 80059dc:	4a5f      	ldr	r2, [pc, #380]	; (8005b5c <HAL_TIM_ConfigClockSource+0x1e8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	f200 80a6 	bhi.w	8005b30 <HAL_TIM_ConfigClockSource+0x1bc>
 80059e4:	4a5e      	ldr	r2, [pc, #376]	; (8005b60 <HAL_TIM_ConfigClockSource+0x1ec>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	f000 8099 	beq.w	8005b1e <HAL_TIM_ConfigClockSource+0x1aa>
 80059ec:	4a5c      	ldr	r2, [pc, #368]	; (8005b60 <HAL_TIM_ConfigClockSource+0x1ec>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	f200 809e 	bhi.w	8005b30 <HAL_TIM_ConfigClockSource+0x1bc>
 80059f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80059f8:	f000 8091 	beq.w	8005b1e <HAL_TIM_ConfigClockSource+0x1aa>
 80059fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005a00:	f200 8096 	bhi.w	8005b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a08:	f000 8089 	beq.w	8005b1e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a10:	f200 808e 	bhi.w	8005b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a18:	d03e      	beq.n	8005a98 <HAL_TIM_ConfigClockSource+0x124>
 8005a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a1e:	f200 8087 	bhi.w	8005b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a26:	f000 8086 	beq.w	8005b36 <HAL_TIM_ConfigClockSource+0x1c2>
 8005a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a2e:	d87f      	bhi.n	8005b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a30:	2b70      	cmp	r3, #112	; 0x70
 8005a32:	d01a      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0xf6>
 8005a34:	2b70      	cmp	r3, #112	; 0x70
 8005a36:	d87b      	bhi.n	8005b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a38:	2b60      	cmp	r3, #96	; 0x60
 8005a3a:	d050      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x16a>
 8005a3c:	2b60      	cmp	r3, #96	; 0x60
 8005a3e:	d877      	bhi.n	8005b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a40:	2b50      	cmp	r3, #80	; 0x50
 8005a42:	d03c      	beq.n	8005abe <HAL_TIM_ConfigClockSource+0x14a>
 8005a44:	2b50      	cmp	r3, #80	; 0x50
 8005a46:	d873      	bhi.n	8005b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a48:	2b40      	cmp	r3, #64	; 0x40
 8005a4a:	d058      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0x18a>
 8005a4c:	2b40      	cmp	r3, #64	; 0x40
 8005a4e:	d86f      	bhi.n	8005b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a50:	2b30      	cmp	r3, #48	; 0x30
 8005a52:	d064      	beq.n	8005b1e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a54:	2b30      	cmp	r3, #48	; 0x30
 8005a56:	d86b      	bhi.n	8005b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a58:	2b20      	cmp	r3, #32
 8005a5a:	d060      	beq.n	8005b1e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a5c:	2b20      	cmp	r3, #32
 8005a5e:	d867      	bhi.n	8005b30 <HAL_TIM_ConfigClockSource+0x1bc>
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d05c      	beq.n	8005b1e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a64:	2b10      	cmp	r3, #16
 8005a66:	d05a      	beq.n	8005b1e <HAL_TIM_ConfigClockSource+0x1aa>
 8005a68:	e062      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6899      	ldr	r1, [r3, #8]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f000 fc89 	bl	8006390 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	609a      	str	r2, [r3, #8]
      break;
 8005a96:	e04f      	b.n	8005b38 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6818      	ldr	r0, [r3, #0]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	6899      	ldr	r1, [r3, #8]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f000 fc72 	bl	8006390 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aba:	609a      	str	r2, [r3, #8]
      break;
 8005abc:	e03c      	b.n	8005b38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	6859      	ldr	r1, [r3, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f000 fbe2 	bl	8006294 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2150      	movs	r1, #80	; 0x50
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fc3c 	bl	8006354 <TIM_ITRx_SetConfig>
      break;
 8005adc:	e02c      	b.n	8005b38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	6859      	ldr	r1, [r3, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f000 fc01 	bl	80062f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2160      	movs	r1, #96	; 0x60
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fc2c 	bl	8006354 <TIM_ITRx_SetConfig>
      break;
 8005afc:	e01c      	b.n	8005b38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	6859      	ldr	r1, [r3, #4]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	f000 fbc2 	bl	8006294 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2140      	movs	r1, #64	; 0x40
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fc1c 	bl	8006354 <TIM_ITRx_SetConfig>
      break;
 8005b1c:	e00c      	b.n	8005b38 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4619      	mov	r1, r3
 8005b28:	4610      	mov	r0, r2
 8005b2a:	f000 fc13 	bl	8006354 <TIM_ITRx_SetConfig>
      break;
 8005b2e:	e003      	b.n	8005b38 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	73fb      	strb	r3, [r7, #15]
      break;
 8005b34:	e000      	b.n	8005b38 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005b36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	ffceff88 	.word	0xffceff88
 8005b58:	00100040 	.word	0x00100040
 8005b5c:	00100030 	.word	0x00100030
 8005b60:	00100020 	.word	0x00100020

08005b64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a40      	ldr	r2, [pc, #256]	; (8005cc8 <TIM_Base_SetConfig+0x114>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d013      	beq.n	8005bf4 <TIM_Base_SetConfig+0x40>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd2:	d00f      	beq.n	8005bf4 <TIM_Base_SetConfig+0x40>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a3d      	ldr	r2, [pc, #244]	; (8005ccc <TIM_Base_SetConfig+0x118>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00b      	beq.n	8005bf4 <TIM_Base_SetConfig+0x40>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a3c      	ldr	r2, [pc, #240]	; (8005cd0 <TIM_Base_SetConfig+0x11c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d007      	beq.n	8005bf4 <TIM_Base_SetConfig+0x40>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a3b      	ldr	r2, [pc, #236]	; (8005cd4 <TIM_Base_SetConfig+0x120>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <TIM_Base_SetConfig+0x40>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a3a      	ldr	r2, [pc, #232]	; (8005cd8 <TIM_Base_SetConfig+0x124>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d108      	bne.n	8005c06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a2f      	ldr	r2, [pc, #188]	; (8005cc8 <TIM_Base_SetConfig+0x114>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d01f      	beq.n	8005c4e <TIM_Base_SetConfig+0x9a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c14:	d01b      	beq.n	8005c4e <TIM_Base_SetConfig+0x9a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a2c      	ldr	r2, [pc, #176]	; (8005ccc <TIM_Base_SetConfig+0x118>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d017      	beq.n	8005c4e <TIM_Base_SetConfig+0x9a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a2b      	ldr	r2, [pc, #172]	; (8005cd0 <TIM_Base_SetConfig+0x11c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d013      	beq.n	8005c4e <TIM_Base_SetConfig+0x9a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a2a      	ldr	r2, [pc, #168]	; (8005cd4 <TIM_Base_SetConfig+0x120>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00f      	beq.n	8005c4e <TIM_Base_SetConfig+0x9a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a29      	ldr	r2, [pc, #164]	; (8005cd8 <TIM_Base_SetConfig+0x124>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00b      	beq.n	8005c4e <TIM_Base_SetConfig+0x9a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a28      	ldr	r2, [pc, #160]	; (8005cdc <TIM_Base_SetConfig+0x128>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d007      	beq.n	8005c4e <TIM_Base_SetConfig+0x9a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a27      	ldr	r2, [pc, #156]	; (8005ce0 <TIM_Base_SetConfig+0x12c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d003      	beq.n	8005c4e <TIM_Base_SetConfig+0x9a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a26      	ldr	r2, [pc, #152]	; (8005ce4 <TIM_Base_SetConfig+0x130>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d108      	bne.n	8005c60 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a10      	ldr	r2, [pc, #64]	; (8005cc8 <TIM_Base_SetConfig+0x114>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d00f      	beq.n	8005cac <TIM_Base_SetConfig+0xf8>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a12      	ldr	r2, [pc, #72]	; (8005cd8 <TIM_Base_SetConfig+0x124>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00b      	beq.n	8005cac <TIM_Base_SetConfig+0xf8>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a11      	ldr	r2, [pc, #68]	; (8005cdc <TIM_Base_SetConfig+0x128>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d007      	beq.n	8005cac <TIM_Base_SetConfig+0xf8>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a10      	ldr	r2, [pc, #64]	; (8005ce0 <TIM_Base_SetConfig+0x12c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d003      	beq.n	8005cac <TIM_Base_SetConfig+0xf8>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a0f      	ldr	r2, [pc, #60]	; (8005ce4 <TIM_Base_SetConfig+0x130>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d103      	bne.n	8005cb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	615a      	str	r2, [r3, #20]
}
 8005cba:	bf00      	nop
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40010000 	.word	0x40010000
 8005ccc:	40000400 	.word	0x40000400
 8005cd0:	40000800 	.word	0x40000800
 8005cd4:	40000c00 	.word	0x40000c00
 8005cd8:	40010400 	.word	0x40010400
 8005cdc:	40014000 	.word	0x40014000
 8005ce0:	40014400 	.word	0x40014400
 8005ce4:	40014800 	.word	0x40014800

08005ce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f023 0201 	bic.w	r2, r3, #1
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4b37      	ldr	r3, [pc, #220]	; (8005df0 <TIM_OC1_SetConfig+0x108>)
 8005d14:	4013      	ands	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0303 	bic.w	r3, r3, #3
 8005d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f023 0302 	bic.w	r3, r3, #2
 8005d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a2d      	ldr	r2, [pc, #180]	; (8005df4 <TIM_OC1_SetConfig+0x10c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00f      	beq.n	8005d64 <TIM_OC1_SetConfig+0x7c>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a2c      	ldr	r2, [pc, #176]	; (8005df8 <TIM_OC1_SetConfig+0x110>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d00b      	beq.n	8005d64 <TIM_OC1_SetConfig+0x7c>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a2b      	ldr	r2, [pc, #172]	; (8005dfc <TIM_OC1_SetConfig+0x114>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d007      	beq.n	8005d64 <TIM_OC1_SetConfig+0x7c>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a2a      	ldr	r2, [pc, #168]	; (8005e00 <TIM_OC1_SetConfig+0x118>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d003      	beq.n	8005d64 <TIM_OC1_SetConfig+0x7c>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a29      	ldr	r2, [pc, #164]	; (8005e04 <TIM_OC1_SetConfig+0x11c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d10c      	bne.n	8005d7e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f023 0308 	bic.w	r3, r3, #8
 8005d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f023 0304 	bic.w	r3, r3, #4
 8005d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a1c      	ldr	r2, [pc, #112]	; (8005df4 <TIM_OC1_SetConfig+0x10c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00f      	beq.n	8005da6 <TIM_OC1_SetConfig+0xbe>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a1b      	ldr	r2, [pc, #108]	; (8005df8 <TIM_OC1_SetConfig+0x110>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00b      	beq.n	8005da6 <TIM_OC1_SetConfig+0xbe>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a1a      	ldr	r2, [pc, #104]	; (8005dfc <TIM_OC1_SetConfig+0x114>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d007      	beq.n	8005da6 <TIM_OC1_SetConfig+0xbe>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a19      	ldr	r2, [pc, #100]	; (8005e00 <TIM_OC1_SetConfig+0x118>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d003      	beq.n	8005da6 <TIM_OC1_SetConfig+0xbe>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a18      	ldr	r2, [pc, #96]	; (8005e04 <TIM_OC1_SetConfig+0x11c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d111      	bne.n	8005dca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	621a      	str	r2, [r3, #32]
}
 8005de4:	bf00      	nop
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	fffeff8f 	.word	0xfffeff8f
 8005df4:	40010000 	.word	0x40010000
 8005df8:	40010400 	.word	0x40010400
 8005dfc:	40014000 	.word	0x40014000
 8005e00:	40014400 	.word	0x40014400
 8005e04:	40014800 	.word	0x40014800

08005e08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	f023 0210 	bic.w	r2, r3, #16
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4b34      	ldr	r3, [pc, #208]	; (8005f04 <TIM_OC2_SetConfig+0xfc>)
 8005e34:	4013      	ands	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0320 	bic.w	r3, r3, #32
 8005e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a29      	ldr	r2, [pc, #164]	; (8005f08 <TIM_OC2_SetConfig+0x100>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d003      	beq.n	8005e70 <TIM_OC2_SetConfig+0x68>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a28      	ldr	r2, [pc, #160]	; (8005f0c <TIM_OC2_SetConfig+0x104>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d10d      	bne.n	8005e8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a1e      	ldr	r2, [pc, #120]	; (8005f08 <TIM_OC2_SetConfig+0x100>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00f      	beq.n	8005eb4 <TIM_OC2_SetConfig+0xac>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a1d      	ldr	r2, [pc, #116]	; (8005f0c <TIM_OC2_SetConfig+0x104>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00b      	beq.n	8005eb4 <TIM_OC2_SetConfig+0xac>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a1c      	ldr	r2, [pc, #112]	; (8005f10 <TIM_OC2_SetConfig+0x108>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d007      	beq.n	8005eb4 <TIM_OC2_SetConfig+0xac>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a1b      	ldr	r2, [pc, #108]	; (8005f14 <TIM_OC2_SetConfig+0x10c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d003      	beq.n	8005eb4 <TIM_OC2_SetConfig+0xac>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a1a      	ldr	r2, [pc, #104]	; (8005f18 <TIM_OC2_SetConfig+0x110>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d113      	bne.n	8005edc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	621a      	str	r2, [r3, #32]
}
 8005ef6:	bf00      	nop
 8005ef8:	371c      	adds	r7, #28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	feff8fff 	.word	0xfeff8fff
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	40010400 	.word	0x40010400
 8005f10:	40014000 	.word	0x40014000
 8005f14:	40014400 	.word	0x40014400
 8005f18:	40014800 	.word	0x40014800

08005f1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4b33      	ldr	r3, [pc, #204]	; (8006014 <TIM_OC3_SetConfig+0xf8>)
 8005f48:	4013      	ands	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0303 	bic.w	r3, r3, #3
 8005f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	021b      	lsls	r3, r3, #8
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a28      	ldr	r2, [pc, #160]	; (8006018 <TIM_OC3_SetConfig+0xfc>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d003      	beq.n	8005f82 <TIM_OC3_SetConfig+0x66>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a27      	ldr	r2, [pc, #156]	; (800601c <TIM_OC3_SetConfig+0x100>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d10d      	bne.n	8005f9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	021b      	lsls	r3, r3, #8
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a1d      	ldr	r2, [pc, #116]	; (8006018 <TIM_OC3_SetConfig+0xfc>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00f      	beq.n	8005fc6 <TIM_OC3_SetConfig+0xaa>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a1c      	ldr	r2, [pc, #112]	; (800601c <TIM_OC3_SetConfig+0x100>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00b      	beq.n	8005fc6 <TIM_OC3_SetConfig+0xaa>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a1b      	ldr	r2, [pc, #108]	; (8006020 <TIM_OC3_SetConfig+0x104>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d007      	beq.n	8005fc6 <TIM_OC3_SetConfig+0xaa>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a1a      	ldr	r2, [pc, #104]	; (8006024 <TIM_OC3_SetConfig+0x108>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d003      	beq.n	8005fc6 <TIM_OC3_SetConfig+0xaa>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a19      	ldr	r2, [pc, #100]	; (8006028 <TIM_OC3_SetConfig+0x10c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d113      	bne.n	8005fee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	011b      	lsls	r3, r3, #4
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	621a      	str	r2, [r3, #32]
}
 8006008:	bf00      	nop
 800600a:	371c      	adds	r7, #28
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	fffeff8f 	.word	0xfffeff8f
 8006018:	40010000 	.word	0x40010000
 800601c:	40010400 	.word	0x40010400
 8006020:	40014000 	.word	0x40014000
 8006024:	40014400 	.word	0x40014400
 8006028:	40014800 	.word	0x40014800

0800602c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4b24      	ldr	r3, [pc, #144]	; (80060e8 <TIM_OC4_SetConfig+0xbc>)
 8006058:	4013      	ands	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	021b      	lsls	r3, r3, #8
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	031b      	lsls	r3, r3, #12
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a19      	ldr	r2, [pc, #100]	; (80060ec <TIM_OC4_SetConfig+0xc0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00f      	beq.n	80060ac <TIM_OC4_SetConfig+0x80>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a18      	ldr	r2, [pc, #96]	; (80060f0 <TIM_OC4_SetConfig+0xc4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00b      	beq.n	80060ac <TIM_OC4_SetConfig+0x80>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a17      	ldr	r2, [pc, #92]	; (80060f4 <TIM_OC4_SetConfig+0xc8>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d007      	beq.n	80060ac <TIM_OC4_SetConfig+0x80>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a16      	ldr	r2, [pc, #88]	; (80060f8 <TIM_OC4_SetConfig+0xcc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d003      	beq.n	80060ac <TIM_OC4_SetConfig+0x80>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a15      	ldr	r2, [pc, #84]	; (80060fc <TIM_OC4_SetConfig+0xd0>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d109      	bne.n	80060c0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	019b      	lsls	r3, r3, #6
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	feff8fff 	.word	0xfeff8fff
 80060ec:	40010000 	.word	0x40010000
 80060f0:	40010400 	.word	0x40010400
 80060f4:	40014000 	.word	0x40014000
 80060f8:	40014400 	.word	0x40014400
 80060fc:	40014800 	.word	0x40014800

08006100 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4b21      	ldr	r3, [pc, #132]	; (80061b0 <TIM_OC5_SetConfig+0xb0>)
 800612c:	4013      	ands	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006140:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	041b      	lsls	r3, r3, #16
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	4313      	orrs	r3, r2
 800614c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a18      	ldr	r2, [pc, #96]	; (80061b4 <TIM_OC5_SetConfig+0xb4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00f      	beq.n	8006176 <TIM_OC5_SetConfig+0x76>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a17      	ldr	r2, [pc, #92]	; (80061b8 <TIM_OC5_SetConfig+0xb8>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00b      	beq.n	8006176 <TIM_OC5_SetConfig+0x76>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a16      	ldr	r2, [pc, #88]	; (80061bc <TIM_OC5_SetConfig+0xbc>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d007      	beq.n	8006176 <TIM_OC5_SetConfig+0x76>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a15      	ldr	r2, [pc, #84]	; (80061c0 <TIM_OC5_SetConfig+0xc0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d003      	beq.n	8006176 <TIM_OC5_SetConfig+0x76>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a14      	ldr	r2, [pc, #80]	; (80061c4 <TIM_OC5_SetConfig+0xc4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d109      	bne.n	800618a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800617c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	621a      	str	r2, [r3, #32]
}
 80061a4:	bf00      	nop
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	fffeff8f 	.word	0xfffeff8f
 80061b4:	40010000 	.word	0x40010000
 80061b8:	40010400 	.word	0x40010400
 80061bc:	40014000 	.word	0x40014000
 80061c0:	40014400 	.word	0x40014400
 80061c4:	40014800 	.word	0x40014800

080061c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4b22      	ldr	r3, [pc, #136]	; (800627c <TIM_OC6_SetConfig+0xb4>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800620a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	051b      	lsls	r3, r3, #20
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	4313      	orrs	r3, r2
 8006216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a19      	ldr	r2, [pc, #100]	; (8006280 <TIM_OC6_SetConfig+0xb8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d00f      	beq.n	8006240 <TIM_OC6_SetConfig+0x78>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a18      	ldr	r2, [pc, #96]	; (8006284 <TIM_OC6_SetConfig+0xbc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00b      	beq.n	8006240 <TIM_OC6_SetConfig+0x78>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a17      	ldr	r2, [pc, #92]	; (8006288 <TIM_OC6_SetConfig+0xc0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d007      	beq.n	8006240 <TIM_OC6_SetConfig+0x78>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a16      	ldr	r2, [pc, #88]	; (800628c <TIM_OC6_SetConfig+0xc4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d003      	beq.n	8006240 <TIM_OC6_SetConfig+0x78>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a15      	ldr	r2, [pc, #84]	; (8006290 <TIM_OC6_SetConfig+0xc8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d109      	bne.n	8006254 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006246:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	029b      	lsls	r3, r3, #10
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	621a      	str	r2, [r3, #32]
}
 800626e:	bf00      	nop
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	feff8fff 	.word	0xfeff8fff
 8006280:	40010000 	.word	0x40010000
 8006284:	40010400 	.word	0x40010400
 8006288:	40014000 	.word	0x40014000
 800628c:	40014400 	.word	0x40014400
 8006290:	40014800 	.word	0x40014800

08006294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f023 0201 	bic.w	r2, r3, #1
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f023 030a 	bic.w	r3, r3, #10
 80062d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	621a      	str	r2, [r3, #32]
}
 80062e6:	bf00      	nop
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b087      	sub	sp, #28
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	f023 0210 	bic.w	r2, r3, #16
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800631c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	031b      	lsls	r3, r3, #12
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800632e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	621a      	str	r2, [r3, #32]
}
 8006346:	bf00      	nop
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
	...

08006354 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4b09      	ldr	r3, [pc, #36]	; (800638c <TIM_ITRx_SetConfig+0x38>)
 8006368:	4013      	ands	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4313      	orrs	r3, r2
 8006372:	f043 0307 	orr.w	r3, r3, #7
 8006376:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	609a      	str	r2, [r3, #8]
}
 800637e:	bf00      	nop
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	ffcfff8f 	.word	0xffcfff8f

08006390 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	021a      	lsls	r2, r3, #8
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	431a      	orrs	r2, r3
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	609a      	str	r2, [r3, #8]
}
 80063c4:	bf00      	nop
 80063c6:	371c      	adds	r7, #28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f003 031f 	and.w	r3, r3, #31
 80063e2:	2201      	movs	r2, #1
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a1a      	ldr	r2, [r3, #32]
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	43db      	mvns	r3, r3
 80063f2:	401a      	ands	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a1a      	ldr	r2, [r3, #32]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f003 031f 	and.w	r3, r3, #31
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	fa01 f303 	lsl.w	r3, r1, r3
 8006408:	431a      	orrs	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	621a      	str	r2, [r3, #32]
}
 800640e:	bf00      	nop
 8006410:	371c      	adds	r7, #28
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
	...

0800641c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800642c:	2b01      	cmp	r3, #1
 800642e:	d101      	bne.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006430:	2302      	movs	r3, #2
 8006432:	e06d      	b.n	8006510 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a30      	ldr	r2, [pc, #192]	; (800651c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d004      	beq.n	8006468 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a2f      	ldr	r2, [pc, #188]	; (8006520 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d108      	bne.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800646e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006480:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	4313      	orrs	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a20      	ldr	r2, [pc, #128]	; (800651c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d022      	beq.n	80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a6:	d01d      	beq.n	80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a1d      	ldr	r2, [pc, #116]	; (8006524 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d018      	beq.n	80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a1c      	ldr	r2, [pc, #112]	; (8006528 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d013      	beq.n	80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a1a      	ldr	r2, [pc, #104]	; (800652c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d00e      	beq.n	80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a15      	ldr	r2, [pc, #84]	; (8006520 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d009      	beq.n	80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a16      	ldr	r2, [pc, #88]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d004      	beq.n	80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a15      	ldr	r2, [pc, #84]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d10c      	bne.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	40010000 	.word	0x40010000
 8006520:	40010400 	.word	0x40010400
 8006524:	40000400 	.word	0x40000400
 8006528:	40000800 	.word	0x40000800
 800652c:	40000c00 	.word	0x40000c00
 8006530:	40001800 	.word	0x40001800
 8006534:	40014000 	.word	0x40014000

08006538 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800654c:	2b01      	cmp	r3, #1
 800654e:	d101      	bne.n	8006554 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006550:	2302      	movs	r3, #2
 8006552:	e065      	b.n	8006620 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4313      	orrs	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	041b      	lsls	r3, r3, #16
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a16      	ldr	r2, [pc, #88]	; (800662c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d004      	beq.n	80065e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a14      	ldr	r2, [pc, #80]	; (8006630 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d115      	bne.n	800660e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	051b      	lsls	r3, r3, #20
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	40010000 	.word	0x40010000
 8006630:	40010400 	.word	0x40010400

08006634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <__errno>:
 8006670:	4b01      	ldr	r3, [pc, #4]	; (8006678 <__errno+0x8>)
 8006672:	6818      	ldr	r0, [r3, #0]
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	2400001c 	.word	0x2400001c

0800667c <__libc_init_array>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	4d0d      	ldr	r5, [pc, #52]	; (80066b4 <__libc_init_array+0x38>)
 8006680:	4c0d      	ldr	r4, [pc, #52]	; (80066b8 <__libc_init_array+0x3c>)
 8006682:	1b64      	subs	r4, r4, r5
 8006684:	10a4      	asrs	r4, r4, #2
 8006686:	2600      	movs	r6, #0
 8006688:	42a6      	cmp	r6, r4
 800668a:	d109      	bne.n	80066a0 <__libc_init_array+0x24>
 800668c:	4d0b      	ldr	r5, [pc, #44]	; (80066bc <__libc_init_array+0x40>)
 800668e:	4c0c      	ldr	r4, [pc, #48]	; (80066c0 <__libc_init_array+0x44>)
 8006690:	f001 fb40 	bl	8007d14 <_init>
 8006694:	1b64      	subs	r4, r4, r5
 8006696:	10a4      	asrs	r4, r4, #2
 8006698:	2600      	movs	r6, #0
 800669a:	42a6      	cmp	r6, r4
 800669c:	d105      	bne.n	80066aa <__libc_init_array+0x2e>
 800669e:	bd70      	pop	{r4, r5, r6, pc}
 80066a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a4:	4798      	blx	r3
 80066a6:	3601      	adds	r6, #1
 80066a8:	e7ee      	b.n	8006688 <__libc_init_array+0xc>
 80066aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ae:	4798      	blx	r3
 80066b0:	3601      	adds	r6, #1
 80066b2:	e7f2      	b.n	800669a <__libc_init_array+0x1e>
 80066b4:	08009840 	.word	0x08009840
 80066b8:	08009840 	.word	0x08009840
 80066bc:	08009840 	.word	0x08009840
 80066c0:	08009844 	.word	0x08009844

080066c4 <memset>:
 80066c4:	4402      	add	r2, r0
 80066c6:	4603      	mov	r3, r0
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d100      	bne.n	80066ce <memset+0xa>
 80066cc:	4770      	bx	lr
 80066ce:	f803 1b01 	strb.w	r1, [r3], #1
 80066d2:	e7f9      	b.n	80066c8 <memset+0x4>

080066d4 <checkint>:
 80066d4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80066d8:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80066dc:	429a      	cmp	r2, r3
 80066de:	b570      	push	{r4, r5, r6, lr}
 80066e0:	dd2a      	ble.n	8006738 <checkint+0x64>
 80066e2:	f240 4333 	movw	r3, #1075	; 0x433
 80066e6:	429a      	cmp	r2, r3
 80066e8:	dc24      	bgt.n	8006734 <checkint+0x60>
 80066ea:	1a9b      	subs	r3, r3, r2
 80066ec:	f1a3 0620 	sub.w	r6, r3, #32
 80066f0:	f04f 32ff 	mov.w	r2, #4294967295
 80066f4:	fa02 f403 	lsl.w	r4, r2, r3
 80066f8:	fa02 f606 	lsl.w	r6, r2, r6
 80066fc:	f1c3 0520 	rsb	r5, r3, #32
 8006700:	fa22 f505 	lsr.w	r5, r2, r5
 8006704:	4334      	orrs	r4, r6
 8006706:	432c      	orrs	r4, r5
 8006708:	409a      	lsls	r2, r3
 800670a:	ea20 0202 	bic.w	r2, r0, r2
 800670e:	ea21 0404 	bic.w	r4, r1, r4
 8006712:	4322      	orrs	r2, r4
 8006714:	f1a3 0420 	sub.w	r4, r3, #32
 8006718:	f1c3 0220 	rsb	r2, r3, #32
 800671c:	d10c      	bne.n	8006738 <checkint+0x64>
 800671e:	40d8      	lsrs	r0, r3
 8006720:	fa01 f302 	lsl.w	r3, r1, r2
 8006724:	4318      	orrs	r0, r3
 8006726:	40e1      	lsrs	r1, r4
 8006728:	4308      	orrs	r0, r1
 800672a:	f000 0001 	and.w	r0, r0, #1
 800672e:	f1d0 0002 	rsbs	r0, r0, #2
 8006732:	bd70      	pop	{r4, r5, r6, pc}
 8006734:	2002      	movs	r0, #2
 8006736:	e7fc      	b.n	8006732 <checkint+0x5e>
 8006738:	2000      	movs	r0, #0
 800673a:	e7fa      	b.n	8006732 <checkint+0x5e>
 800673c:	0000      	movs	r0, r0
	...

08006740 <pow>:
 8006740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006744:	ee10 4a90 	vmov	r4, s1
 8006748:	ed2d 8b0a 	vpush	{d8-d12}
 800674c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8006750:	ee11 7a90 	vmov	r7, s3
 8006754:	f10a 32ff 	add.w	r2, sl, #4294967295
 8006758:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800675c:	429a      	cmp	r2, r3
 800675e:	ee10 6a10 	vmov	r6, s0
 8006762:	ee11 0a10 	vmov	r0, s2
 8006766:	b086      	sub	sp, #24
 8006768:	46d4      	mov	ip, sl
 800676a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800676e:	d806      	bhi.n	800677e <pow+0x3e>
 8006770:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8006774:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8006778:	2b7f      	cmp	r3, #127	; 0x7f
 800677a:	f240 8156 	bls.w	8006a2a <pow+0x2ea>
 800677e:	1802      	adds	r2, r0, r0
 8006780:	eb47 0107 	adc.w	r1, r7, r7
 8006784:	f06f 0e01 	mvn.w	lr, #1
 8006788:	f112 39ff 	adds.w	r9, r2, #4294967295
 800678c:	f141 38ff 	adc.w	r8, r1, #4294967295
 8006790:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8006794:	45ce      	cmp	lr, r9
 8006796:	eb73 0808 	sbcs.w	r8, r3, r8
 800679a:	d23f      	bcs.n	800681c <pow+0xdc>
 800679c:	ea52 0301 	orrs.w	r3, r2, r1
 80067a0:	f04f 0300 	mov.w	r3, #0
 80067a4:	d10c      	bne.n	80067c0 <pow+0x80>
 80067a6:	19b6      	adds	r6, r6, r6
 80067a8:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 80067ac:	4164      	adcs	r4, r4
 80067ae:	42b3      	cmp	r3, r6
 80067b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80067b4:	41a3      	sbcs	r3, r4
 80067b6:	f0c0 808c 	bcc.w	80068d2 <pow+0x192>
 80067ba:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80067be:	e028      	b.n	8006812 <pow+0xd2>
 80067c0:	4da3      	ldr	r5, [pc, #652]	; (8006a50 <pow+0x310>)
 80067c2:	42ac      	cmp	r4, r5
 80067c4:	bf08      	it	eq
 80067c6:	429e      	cmpeq	r6, r3
 80067c8:	d107      	bne.n	80067da <pow+0x9a>
 80067ca:	1800      	adds	r0, r0, r0
 80067cc:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 80067d0:	417f      	adcs	r7, r7
 80067d2:	4283      	cmp	r3, r0
 80067d4:	4b9f      	ldr	r3, [pc, #636]	; (8006a54 <pow+0x314>)
 80067d6:	41bb      	sbcs	r3, r7
 80067d8:	e7ed      	b.n	80067b6 <pow+0x76>
 80067da:	19b6      	adds	r6, r6, r6
 80067dc:	489e      	ldr	r0, [pc, #632]	; (8006a58 <pow+0x318>)
 80067de:	4164      	adcs	r4, r4
 80067e0:	42b3      	cmp	r3, r6
 80067e2:	eb70 0504 	sbcs.w	r5, r0, r4
 80067e6:	d374      	bcc.n	80068d2 <pow+0x192>
 80067e8:	4281      	cmp	r1, r0
 80067ea:	bf08      	it	eq
 80067ec:	429a      	cmpeq	r2, r3
 80067ee:	d170      	bne.n	80068d2 <pow+0x192>
 80067f0:	4a9a      	ldr	r2, [pc, #616]	; (8006a5c <pow+0x31c>)
 80067f2:	4294      	cmp	r4, r2
 80067f4:	bf08      	it	eq
 80067f6:	429e      	cmpeq	r6, r3
 80067f8:	d0df      	beq.n	80067ba <pow+0x7a>
 80067fa:	4294      	cmp	r4, r2
 80067fc:	ea6f 0707 	mvn.w	r7, r7
 8006800:	bf34      	ite	cc
 8006802:	2400      	movcc	r4, #0
 8006804:	2401      	movcs	r4, #1
 8006806:	0fff      	lsrs	r7, r7, #31
 8006808:	42bc      	cmp	r4, r7
 800680a:	f040 81d9 	bne.w	8006bc0 <pow+0x480>
 800680e:	ee21 0b01 	vmul.f64	d0, d1, d1
 8006812:	b006      	add	sp, #24
 8006814:	ecbd 8b0a 	vpop	{d8-d12}
 8006818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800681c:	eb16 0806 	adds.w	r8, r6, r6
 8006820:	eb44 0904 	adc.w	r9, r4, r4
 8006824:	f118 31ff 	adds.w	r1, r8, #4294967295
 8006828:	f169 0200 	sbc.w	r2, r9, #0
 800682c:	458e      	cmp	lr, r1
 800682e:	4193      	sbcs	r3, r2
 8006830:	d223      	bcs.n	800687a <pow+0x13a>
 8006832:	ee20 0b00 	vmul.f64	d0, d0, d0
 8006836:	2c00      	cmp	r4, #0
 8006838:	da12      	bge.n	8006860 <pow+0x120>
 800683a:	4639      	mov	r1, r7
 800683c:	f7ff ff4a 	bl	80066d4 <checkint>
 8006840:	2801      	cmp	r0, #1
 8006842:	d10d      	bne.n	8006860 <pow+0x120>
 8006844:	eeb1 0b40 	vneg.f64	d0, d0
 8006848:	ea58 0309 	orrs.w	r3, r8, r9
 800684c:	d10a      	bne.n	8006864 <pow+0x124>
 800684e:	2f00      	cmp	r7, #0
 8006850:	dadf      	bge.n	8006812 <pow+0xd2>
 8006852:	b006      	add	sp, #24
 8006854:	ecbd 8b0a 	vpop	{d8-d12}
 8006858:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800685c:	f001 b814 	b.w	8007888 <__math_divzero>
 8006860:	2000      	movs	r0, #0
 8006862:	e7f1      	b.n	8006848 <pow+0x108>
 8006864:	2f00      	cmp	r7, #0
 8006866:	dad4      	bge.n	8006812 <pow+0xd2>
 8006868:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800686c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8006870:	ed8d 7b00 	vstr	d7, [sp]
 8006874:	ed9d 0b00 	vldr	d0, [sp]
 8006878:	e7cb      	b.n	8006812 <pow+0xd2>
 800687a:	2c00      	cmp	r4, #0
 800687c:	da2c      	bge.n	80068d8 <pow+0x198>
 800687e:	4639      	mov	r1, r7
 8006880:	f7ff ff28 	bl	80066d4 <checkint>
 8006884:	b930      	cbnz	r0, 8006894 <pow+0x154>
 8006886:	b006      	add	sp, #24
 8006888:	ecbd 8b0a 	vpop	{d8-d12}
 800688c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006890:	f001 b812 	b.w	80078b8 <__math_invalid>
 8006894:	2801      	cmp	r0, #1
 8006896:	bf14      	ite	ne
 8006898:	2000      	movne	r0, #0
 800689a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800689e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80068a2:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 80068a6:	f3c5 020a 	ubfx	r2, r5, #0, #11
 80068aa:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 80068ae:	2b7f      	cmp	r3, #127	; 0x7f
 80068b0:	d92d      	bls.n	800690e <pow+0x1ce>
 80068b2:	4b67      	ldr	r3, [pc, #412]	; (8006a50 <pow+0x310>)
 80068b4:	2000      	movs	r0, #0
 80068b6:	429c      	cmp	r4, r3
 80068b8:	bf08      	it	eq
 80068ba:	4286      	cmpeq	r6, r0
 80068bc:	f43f af7d 	beq.w	80067ba <pow+0x7a>
 80068c0:	f240 31bd 	movw	r1, #957	; 0x3bd
 80068c4:	428a      	cmp	r2, r1
 80068c6:	d80c      	bhi.n	80068e2 <pow+0x1a2>
 80068c8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80068cc:	42b0      	cmp	r0, r6
 80068ce:	41a3      	sbcs	r3, r4
 80068d0:	d204      	bcs.n	80068dc <pow+0x19c>
 80068d2:	ee31 0b00 	vadd.f64	d0, d1, d0
 80068d6:	e79c      	b.n	8006812 <pow+0xd2>
 80068d8:	2000      	movs	r0, #0
 80068da:	e7e4      	b.n	80068a6 <pow+0x166>
 80068dc:	ee30 0b41 	vsub.f64	d0, d0, d1
 80068e0:	e797      	b.n	8006812 <pow+0xd2>
 80068e2:	2e01      	cmp	r6, #1
 80068e4:	eb74 0303 	sbcs.w	r3, r4, r3
 80068e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80068ec:	bf34      	ite	cc
 80068ee:	2301      	movcc	r3, #1
 80068f0:	2300      	movcs	r3, #0
 80068f2:	4295      	cmp	r5, r2
 80068f4:	bf8c      	ite	hi
 80068f6:	2500      	movhi	r5, #0
 80068f8:	2501      	movls	r5, #1
 80068fa:	42ab      	cmp	r3, r5
 80068fc:	f000 809d 	beq.w	8006a3a <pow+0x2fa>
 8006900:	b006      	add	sp, #24
 8006902:	ecbd 8b0a 	vpop	{d8-d12}
 8006906:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800690a:	f000 bfb5 	b.w	8007878 <__math_oflow>
 800690e:	f1bc 0f00 	cmp.w	ip, #0
 8006912:	d10b      	bne.n	800692c <pow+0x1ec>
 8006914:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8006a48 <pow+0x308>
 8006918:	ee20 7b07 	vmul.f64	d7, d0, d7
 800691c:	ec53 2b17 	vmov	r2, r3, d7
 8006920:	ee17 6a10 	vmov	r6, s14
 8006924:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006928:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800692c:	4b4c      	ldr	r3, [pc, #304]	; (8006a60 <pow+0x320>)
 800692e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8006932:	4423      	add	r3, r4
 8006934:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8006938:	1519      	asrs	r1, r3, #20
 800693a:	0d1b      	lsrs	r3, r3, #20
 800693c:	051b      	lsls	r3, r3, #20
 800693e:	eba4 0903 	sub.w	r9, r4, r3
 8006942:	4b48      	ldr	r3, [pc, #288]	; (8006a64 <pow+0x324>)
 8006944:	ee04 1a10 	vmov	s8, r1
 8006948:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800694c:	f1b6 0800 	subs.w	r8, r6, #0
 8006950:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8006954:	ec49 8b15 	vmov	d5, r8, r9
 8006958:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800695c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8006960:	ed93 7b00 	vldr	d7, [r3]
 8006964:	ed93 5b02 	vldr	d5, [r3, #8]
 8006968:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800696c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8006970:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8006974:	ee36 ab02 	vadd.f64	d10, d6, d2
 8006978:	ee32 2b4a 	vsub.f64	d2, d2, d10
 800697c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006980:	ed93 5b04 	vldr	d5, [r3, #16]
 8006984:	ee32 2b06 	vadd.f64	d2, d2, d6
 8006988:	ee37 7b02 	vadd.f64	d7, d7, d2
 800698c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8006990:	ed93 4b08 	vldr	d4, [r3, #32]
 8006994:	ee26 0b05 	vmul.f64	d0, d6, d5
 8006998:	eeb0 9b40 	vmov.f64	d9, d0
 800699c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 80069a0:	ed93 5b06 	vldr	d5, [r3, #24]
 80069a4:	ee3a 8b00 	vadd.f64	d8, d10, d0
 80069a8:	ee26 bb00 	vmul.f64	d11, d6, d0
 80069ac:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 80069b0:	eea6 5b04 	vfma.f64	d5, d6, d4
 80069b4:	ee3a ab48 	vsub.f64	d10, d10, d8
 80069b8:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 80069bc:	ee37 9b09 	vadd.f64	d9, d7, d9
 80069c0:	ee3a ab00 	vadd.f64	d10, d10, d0
 80069c4:	eea6 4b03 	vfma.f64	d4, d6, d3
 80069c8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80069cc:	ee39 ab0a 	vadd.f64	d10, d9, d10
 80069d0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80069d4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80069d8:	eea0 4b03 	vfma.f64	d4, d0, d3
 80069dc:	eea0 5b04 	vfma.f64	d5, d0, d4
 80069e0:	eeab ab05 	vfma.f64	d10, d11, d5
 80069e4:	ee38 6b0a 	vadd.f64	d6, d8, d10
 80069e8:	ee21 7b06 	vmul.f64	d7, d1, d6
 80069ec:	ee17 3a90 	vmov	r3, s15
 80069f0:	eeb0 5b47 	vmov.f64	d5, d7
 80069f4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80069f8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 80069fc:	18b2      	adds	r2, r6, r2
 80069fe:	2a3e      	cmp	r2, #62	; 0x3e
 8006a00:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8006a04:	ee38 8b46 	vsub.f64	d8, d8, d6
 8006a08:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8006a0c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8006a10:	d92b      	bls.n	8006a6a <pow+0x32a>
 8006a12:	2a00      	cmp	r2, #0
 8006a14:	da0b      	bge.n	8006a2e <pow+0x2ee>
 8006a16:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006a1a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	f43f aef7 	beq.w	8006812 <pow+0xd2>
 8006a24:	eeb1 0b40 	vneg.f64	d0, d0
 8006a28:	e6f3      	b.n	8006812 <pow+0xd2>
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	e77e      	b.n	800692c <pow+0x1ec>
 8006a2e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8006a32:	d919      	bls.n	8006a68 <pow+0x328>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f6bf af63 	bge.w	8006900 <pow+0x1c0>
 8006a3a:	b006      	add	sp, #24
 8006a3c:	ecbd 8b0a 	vpop	{d8-d12}
 8006a40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a44:	f000 bf10 	b.w	8007868 <__math_uflow>
 8006a48:	00000000 	.word	0x00000000
 8006a4c:	43300000 	.word	0x43300000
 8006a50:	3ff00000 	.word	0x3ff00000
 8006a54:	fff00000 	.word	0xfff00000
 8006a58:	ffe00000 	.word	0xffe00000
 8006a5c:	7fe00000 	.word	0x7fe00000
 8006a60:	c0196aab 	.word	0xc0196aab
 8006a64:	08007d40 	.word	0x08007d40
 8006a68:	2600      	movs	r6, #0
 8006a6a:	495d      	ldr	r1, [pc, #372]	; (8006be0 <pow+0x4a0>)
 8006a6c:	ed91 4b02 	vldr	d4, [r1, #8]
 8006a70:	ed91 3b00 	vldr	d3, [r1]
 8006a74:	eeb0 6b44 	vmov.f64	d6, d4
 8006a78:	eea7 6b03 	vfma.f64	d6, d7, d3
 8006a7c:	ee16 5a10 	vmov	r5, s12
 8006a80:	ee36 6b44 	vsub.f64	d6, d6, d4
 8006a84:	ed91 4b04 	vldr	d4, [r1, #16]
 8006a88:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8006a8c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8006a90:	eeb0 0b47 	vmov.f64	d0, d7
 8006a94:	ed91 7b06 	vldr	d7, [r1, #24]
 8006a98:	18dc      	adds	r4, r3, r3
 8006a9a:	f104 030f 	add.w	r3, r4, #15
 8006a9e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8006aa2:	eea6 0b07 	vfma.f64	d0, d6, d7
 8006aa6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8006aaa:	ee35 0b00 	vadd.f64	d0, d5, d0
 8006aae:	ee20 6b00 	vmul.f64	d6, d0, d0
 8006ab2:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8006ab6:	ed91 5b08 	vldr	d5, [r1, #32]
 8006aba:	ee30 7b07 	vadd.f64	d7, d0, d7
 8006abe:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8006ac2:	eea0 5b04 	vfma.f64	d5, d0, d4
 8006ac6:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8006aca:	eea6 7b05 	vfma.f64	d7, d6, d5
 8006ace:	ee26 6b06 	vmul.f64	d6, d6, d6
 8006ad2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8006ad6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8006ada:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8006ade:	eea0 5b04 	vfma.f64	d5, d0, d4
 8006ae2:	1940      	adds	r0, r0, r5
 8006ae4:	2700      	movs	r7, #0
 8006ae6:	eb17 020c 	adds.w	r2, r7, ip
 8006aea:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8006aee:	eea6 7b05 	vfma.f64	d7, d6, d5
 8006af2:	2e00      	cmp	r6, #0
 8006af4:	d15f      	bne.n	8006bb6 <pow+0x476>
 8006af6:	42bd      	cmp	r5, r7
 8006af8:	db13      	blt.n	8006b22 <pow+0x3e2>
 8006afa:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8006afe:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8006b02:	4610      	mov	r0, r2
 8006b04:	ec41 0b10 	vmov	d0, r0, r1
 8006b08:	eea7 0b00 	vfma.f64	d0, d7, d0
 8006b0c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006bc8 <pow+0x488>
 8006b10:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006b14:	b006      	add	sp, #24
 8006b16:	ecbd 8b0a 	vpop	{d8-d12}
 8006b1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b1e:	f000 bee3 	b.w	80078e8 <__math_check_oflow>
 8006b22:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8006b26:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	ec41 0b15 	vmov	d5, r0, r1
 8006b30:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8006b34:	ee27 6b05 	vmul.f64	d6, d7, d5
 8006b38:	ee35 7b06 	vadd.f64	d7, d5, d6
 8006b3c:	eeb0 3bc7 	vabs.f64	d3, d7
 8006b40:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8006b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b48:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8006bd0 <pow+0x490>
 8006b4c:	d52a      	bpl.n	8006ba4 <pow+0x464>
 8006b4e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006b52:	ee35 5b47 	vsub.f64	d5, d5, d7
 8006b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b5a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8006b5e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8006b62:	bf48      	it	mi
 8006b64:	eeb0 4b43 	vmovmi.f64	d4, d3
 8006b68:	ee37 3b04 	vadd.f64	d3, d7, d4
 8006b6c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8006b70:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006b74:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006b78:	ee37 7b03 	vadd.f64	d7, d7, d3
 8006b7c:	ee37 7b44 	vsub.f64	d7, d7, d4
 8006b80:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b88:	d104      	bne.n	8006b94 <pow+0x454>
 8006b8a:	4632      	mov	r2, r6
 8006b8c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006b90:	ec43 2b17 	vmov	d7, r2, r3
 8006b94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006b98:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006b9c:	ee26 6b00 	vmul.f64	d6, d6, d0
 8006ba0:	ed8d 6b04 	vstr	d6, [sp, #16]
 8006ba4:	ee27 0b00 	vmul.f64	d0, d7, d0
 8006ba8:	b006      	add	sp, #24
 8006baa:	ecbd 8b0a 	vpop	{d8-d12}
 8006bae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb2:	f000 be90 	b.w	80078d6 <__math_check_uflow>
 8006bb6:	ec43 2b10 	vmov	d0, r2, r3
 8006bba:	eea7 0b00 	vfma.f64	d0, d7, d0
 8006bbe:	e628      	b.n	8006812 <pow+0xd2>
 8006bc0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8006bd8 <pow+0x498>
 8006bc4:	e625      	b.n	8006812 <pow+0xd2>
 8006bc6:	bf00      	nop
 8006bc8:	00000000 	.word	0x00000000
 8006bcc:	7f000000 	.word	0x7f000000
 8006bd0:	00000000 	.word	0x00000000
 8006bd4:	00100000 	.word	0x00100000
	...
 8006be0:	08008f40 	.word	0x08008f40
 8006be4:	00000000 	.word	0x00000000

08006be8 <cos>:
 8006be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bea:	eeb0 7b40 	vmov.f64	d7, d0
 8006bee:	ee17 3a90 	vmov	r3, s15
 8006bf2:	4a21      	ldr	r2, [pc, #132]	; (8006c78 <cos+0x90>)
 8006bf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	dc06      	bgt.n	8006c0a <cos+0x22>
 8006bfc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8006c70 <cos+0x88>
 8006c00:	b005      	add	sp, #20
 8006c02:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c06:	f000 bab7 	b.w	8007178 <__kernel_cos>
 8006c0a:	4a1c      	ldr	r2, [pc, #112]	; (8006c7c <cos+0x94>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	dd04      	ble.n	8006c1a <cos+0x32>
 8006c10:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006c14:	b005      	add	sp, #20
 8006c16:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c1a:	4668      	mov	r0, sp
 8006c1c:	f000 f964 	bl	8006ee8 <__ieee754_rem_pio2>
 8006c20:	f000 0003 	and.w	r0, r0, #3
 8006c24:	2801      	cmp	r0, #1
 8006c26:	d009      	beq.n	8006c3c <cos+0x54>
 8006c28:	2802      	cmp	r0, #2
 8006c2a:	d010      	beq.n	8006c4e <cos+0x66>
 8006c2c:	b9b0      	cbnz	r0, 8006c5c <cos+0x74>
 8006c2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c32:	ed9d 0b00 	vldr	d0, [sp]
 8006c36:	f000 fa9f 	bl	8007178 <__kernel_cos>
 8006c3a:	e7eb      	b.n	8006c14 <cos+0x2c>
 8006c3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c40:	ed9d 0b00 	vldr	d0, [sp]
 8006c44:	f000 fd9c 	bl	8007780 <__kernel_sin>
 8006c48:	eeb1 0b40 	vneg.f64	d0, d0
 8006c4c:	e7e2      	b.n	8006c14 <cos+0x2c>
 8006c4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c52:	ed9d 0b00 	vldr	d0, [sp]
 8006c56:	f000 fa8f 	bl	8007178 <__kernel_cos>
 8006c5a:	e7f5      	b.n	8006c48 <cos+0x60>
 8006c5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c60:	ed9d 0b00 	vldr	d0, [sp]
 8006c64:	2001      	movs	r0, #1
 8006c66:	f000 fd8b 	bl	8007780 <__kernel_sin>
 8006c6a:	e7d3      	b.n	8006c14 <cos+0x2c>
 8006c6c:	f3af 8000 	nop.w
	...
 8006c78:	3fe921fb 	.word	0x3fe921fb
 8006c7c:	7fefffff 	.word	0x7fefffff

08006c80 <sin>:
 8006c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c82:	eeb0 7b40 	vmov.f64	d7, d0
 8006c86:	ee17 3a90 	vmov	r3, s15
 8006c8a:	4a21      	ldr	r2, [pc, #132]	; (8006d10 <sin+0x90>)
 8006c8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c90:	4293      	cmp	r3, r2
 8006c92:	dc07      	bgt.n	8006ca4 <sin+0x24>
 8006c94:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8006d08 <sin+0x88>
 8006c98:	2000      	movs	r0, #0
 8006c9a:	b005      	add	sp, #20
 8006c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ca0:	f000 bd6e 	b.w	8007780 <__kernel_sin>
 8006ca4:	4a1b      	ldr	r2, [pc, #108]	; (8006d14 <sin+0x94>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	dd04      	ble.n	8006cb4 <sin+0x34>
 8006caa:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006cae:	b005      	add	sp, #20
 8006cb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8006cb4:	4668      	mov	r0, sp
 8006cb6:	f000 f917 	bl	8006ee8 <__ieee754_rem_pio2>
 8006cba:	f000 0003 	and.w	r0, r0, #3
 8006cbe:	2801      	cmp	r0, #1
 8006cc0:	d00a      	beq.n	8006cd8 <sin+0x58>
 8006cc2:	2802      	cmp	r0, #2
 8006cc4:	d00f      	beq.n	8006ce6 <sin+0x66>
 8006cc6:	b9c0      	cbnz	r0, 8006cfa <sin+0x7a>
 8006cc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ccc:	ed9d 0b00 	vldr	d0, [sp]
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	f000 fd55 	bl	8007780 <__kernel_sin>
 8006cd6:	e7ea      	b.n	8006cae <sin+0x2e>
 8006cd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006cdc:	ed9d 0b00 	vldr	d0, [sp]
 8006ce0:	f000 fa4a 	bl	8007178 <__kernel_cos>
 8006ce4:	e7e3      	b.n	8006cae <sin+0x2e>
 8006ce6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006cea:	ed9d 0b00 	vldr	d0, [sp]
 8006cee:	2001      	movs	r0, #1
 8006cf0:	f000 fd46 	bl	8007780 <__kernel_sin>
 8006cf4:	eeb1 0b40 	vneg.f64	d0, d0
 8006cf8:	e7d9      	b.n	8006cae <sin+0x2e>
 8006cfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006cfe:	ed9d 0b00 	vldr	d0, [sp]
 8006d02:	f000 fa39 	bl	8007178 <__kernel_cos>
 8006d06:	e7f5      	b.n	8006cf4 <sin+0x74>
	...
 8006d10:	3fe921fb 	.word	0x3fe921fb
 8006d14:	7fefffff 	.word	0x7fefffff

08006d18 <atan2>:
 8006d18:	f000 b822 	b.w	8006d60 <__ieee754_atan2>
 8006d1c:	0000      	movs	r0, r0
	...

08006d20 <sqrt>:
 8006d20:	b508      	push	{r3, lr}
 8006d22:	ed2d 8b04 	vpush	{d8-d9}
 8006d26:	eeb0 8b40 	vmov.f64	d8, d0
 8006d2a:	f000 fa21 	bl	8007170 <__ieee754_sqrt>
 8006d2e:	eeb4 8b48 	vcmp.f64	d8, d8
 8006d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d36:	d60c      	bvs.n	8006d52 <sqrt+0x32>
 8006d38:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8006d58 <sqrt+0x38>
 8006d3c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8006d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d44:	d505      	bpl.n	8006d52 <sqrt+0x32>
 8006d46:	f7ff fc93 	bl	8006670 <__errno>
 8006d4a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8006d4e:	2321      	movs	r3, #33	; 0x21
 8006d50:	6003      	str	r3, [r0, #0]
 8006d52:	ecbd 8b04 	vpop	{d8-d9}
 8006d56:	bd08      	pop	{r3, pc}
	...

08006d60 <__ieee754_atan2>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	eeb0 7b40 	vmov.f64	d7, d0
 8006d66:	ee11 6a10 	vmov	r6, s2
 8006d6a:	ee11 0a90 	vmov	r0, s3
 8006d6e:	4273      	negs	r3, r6
 8006d70:	4f59      	ldr	r7, [pc, #356]	; (8006ed8 <__ieee754_atan2+0x178>)
 8006d72:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8006d76:	4333      	orrs	r3, r6
 8006d78:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006d7c:	42bb      	cmp	r3, r7
 8006d7e:	d80d      	bhi.n	8006d9c <__ieee754_atan2+0x3c>
 8006d80:	ee10 ca10 	vmov	ip, s0
 8006d84:	ee17 5a90 	vmov	r5, s15
 8006d88:	f1cc 0100 	rsb	r1, ip, #0
 8006d8c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006d90:	ea41 010c 	orr.w	r1, r1, ip
 8006d94:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8006d98:	42b9      	cmp	r1, r7
 8006d9a:	d904      	bls.n	8006da6 <__ieee754_atan2+0x46>
 8006d9c:	ee37 7b01 	vadd.f64	d7, d7, d1
 8006da0:	eeb0 0b47 	vmov.f64	d0, d7
 8006da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006da6:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8006daa:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8006dae:	4331      	orrs	r1, r6
 8006db0:	d103      	bne.n	8006dba <__ieee754_atan2+0x5a>
 8006db2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006db6:	f000 bdab 	b.w	8007910 <atan>
 8006dba:	1784      	asrs	r4, r0, #30
 8006dbc:	f004 0402 	and.w	r4, r4, #2
 8006dc0:	ea53 010c 	orrs.w	r1, r3, ip
 8006dc4:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8006dc8:	d107      	bne.n	8006dda <__ieee754_atan2+0x7a>
 8006dca:	2c02      	cmp	r4, #2
 8006dcc:	d05d      	beq.n	8006e8a <__ieee754_atan2+0x12a>
 8006dce:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8006ea0 <__ieee754_atan2+0x140>
 8006dd2:	2c03      	cmp	r4, #3
 8006dd4:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8006dd8:	e7e2      	b.n	8006da0 <__ieee754_atan2+0x40>
 8006dda:	ea52 0106 	orrs.w	r1, r2, r6
 8006dde:	d107      	bne.n	8006df0 <__ieee754_atan2+0x90>
 8006de0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8006ea8 <__ieee754_atan2+0x148>
 8006de4:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8006eb0 <__ieee754_atan2+0x150>
 8006de8:	2d00      	cmp	r5, #0
 8006dea:	fe27 7b00 	vselge.f64	d7, d7, d0
 8006dee:	e7d7      	b.n	8006da0 <__ieee754_atan2+0x40>
 8006df0:	42ba      	cmp	r2, r7
 8006df2:	d10f      	bne.n	8006e14 <__ieee754_atan2+0xb4>
 8006df4:	4293      	cmp	r3, r2
 8006df6:	f104 34ff 	add.w	r4, r4, #4294967295
 8006dfa:	d107      	bne.n	8006e0c <__ieee754_atan2+0xac>
 8006dfc:	2c02      	cmp	r4, #2
 8006dfe:	d847      	bhi.n	8006e90 <__ieee754_atan2+0x130>
 8006e00:	4b36      	ldr	r3, [pc, #216]	; (8006edc <__ieee754_atan2+0x17c>)
 8006e02:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006e06:	ed94 7b00 	vldr	d7, [r4]
 8006e0a:	e7c9      	b.n	8006da0 <__ieee754_atan2+0x40>
 8006e0c:	2c02      	cmp	r4, #2
 8006e0e:	d842      	bhi.n	8006e96 <__ieee754_atan2+0x136>
 8006e10:	4b33      	ldr	r3, [pc, #204]	; (8006ee0 <__ieee754_atan2+0x180>)
 8006e12:	e7f6      	b.n	8006e02 <__ieee754_atan2+0xa2>
 8006e14:	42bb      	cmp	r3, r7
 8006e16:	d0e3      	beq.n	8006de0 <__ieee754_atan2+0x80>
 8006e18:	1a9b      	subs	r3, r3, r2
 8006e1a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8006e1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006e22:	da1a      	bge.n	8006e5a <__ieee754_atan2+0xfa>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	da01      	bge.n	8006e2c <__ieee754_atan2+0xcc>
 8006e28:	323c      	adds	r2, #60	; 0x3c
 8006e2a:	db19      	blt.n	8006e60 <__ieee754_atan2+0x100>
 8006e2c:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8006e30:	f000 fe68 	bl	8007b04 <fabs>
 8006e34:	f000 fd6c 	bl	8007910 <atan>
 8006e38:	eeb0 7b40 	vmov.f64	d7, d0
 8006e3c:	2c01      	cmp	r4, #1
 8006e3e:	d012      	beq.n	8006e66 <__ieee754_atan2+0x106>
 8006e40:	2c02      	cmp	r4, #2
 8006e42:	d019      	beq.n	8006e78 <__ieee754_atan2+0x118>
 8006e44:	2c00      	cmp	r4, #0
 8006e46:	d0ab      	beq.n	8006da0 <__ieee754_atan2+0x40>
 8006e48:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8006eb8 <__ieee754_atan2+0x158>
 8006e4c:	ee37 7b40 	vsub.f64	d7, d7, d0
 8006e50:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8006ec0 <__ieee754_atan2+0x160>
 8006e54:	ee37 7b40 	vsub.f64	d7, d7, d0
 8006e58:	e7a2      	b.n	8006da0 <__ieee754_atan2+0x40>
 8006e5a:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006ea8 <__ieee754_atan2+0x148>
 8006e5e:	e7ed      	b.n	8006e3c <__ieee754_atan2+0xdc>
 8006e60:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8006ec8 <__ieee754_atan2+0x168>
 8006e64:	e7ea      	b.n	8006e3c <__ieee754_atan2+0xdc>
 8006e66:	ee17 1a90 	vmov	r1, s15
 8006e6a:	ec53 2b17 	vmov	r2, r3, d7
 8006e6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e72:	ec43 2b17 	vmov	d7, r2, r3
 8006e76:	e793      	b.n	8006da0 <__ieee754_atan2+0x40>
 8006e78:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8006eb8 <__ieee754_atan2+0x158>
 8006e7c:	ee37 7b40 	vsub.f64	d7, d7, d0
 8006e80:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8006ec0 <__ieee754_atan2+0x160>
 8006e84:	ee30 7b47 	vsub.f64	d7, d0, d7
 8006e88:	e78a      	b.n	8006da0 <__ieee754_atan2+0x40>
 8006e8a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8006ec0 <__ieee754_atan2+0x160>
 8006e8e:	e787      	b.n	8006da0 <__ieee754_atan2+0x40>
 8006e90:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8006ed0 <__ieee754_atan2+0x170>
 8006e94:	e784      	b.n	8006da0 <__ieee754_atan2+0x40>
 8006e96:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8006ec8 <__ieee754_atan2+0x168>
 8006e9a:	e781      	b.n	8006da0 <__ieee754_atan2+0x40>
 8006e9c:	f3af 8000 	nop.w
 8006ea0:	54442d18 	.word	0x54442d18
 8006ea4:	c00921fb 	.word	0xc00921fb
 8006ea8:	54442d18 	.word	0x54442d18
 8006eac:	3ff921fb 	.word	0x3ff921fb
 8006eb0:	54442d18 	.word	0x54442d18
 8006eb4:	bff921fb 	.word	0xbff921fb
 8006eb8:	33145c07 	.word	0x33145c07
 8006ebc:	3ca1a626 	.word	0x3ca1a626
 8006ec0:	54442d18 	.word	0x54442d18
 8006ec4:	400921fb 	.word	0x400921fb
	...
 8006ed0:	54442d18 	.word	0x54442d18
 8006ed4:	3fe921fb 	.word	0x3fe921fb
 8006ed8:	7ff00000 	.word	0x7ff00000
 8006edc:	08008d88 	.word	0x08008d88
 8006ee0:	08008da0 	.word	0x08008da0
 8006ee4:	00000000 	.word	0x00000000

08006ee8 <__ieee754_rem_pio2>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	eeb0 7b40 	vmov.f64	d7, d0
 8006eee:	ee17 5a90 	vmov	r5, s15
 8006ef2:	4b99      	ldr	r3, [pc, #612]	; (8007158 <__ieee754_rem_pio2+0x270>)
 8006ef4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006ef8:	429e      	cmp	r6, r3
 8006efa:	b088      	sub	sp, #32
 8006efc:	4604      	mov	r4, r0
 8006efe:	dc07      	bgt.n	8006f10 <__ieee754_rem_pio2+0x28>
 8006f00:	2200      	movs	r2, #0
 8006f02:	2300      	movs	r3, #0
 8006f04:	ed84 0b00 	vstr	d0, [r4]
 8006f08:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	e01b      	b.n	8006f48 <__ieee754_rem_pio2+0x60>
 8006f10:	4b92      	ldr	r3, [pc, #584]	; (800715c <__ieee754_rem_pio2+0x274>)
 8006f12:	429e      	cmp	r6, r3
 8006f14:	dc3b      	bgt.n	8006f8e <__ieee754_rem_pio2+0xa6>
 8006f16:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8006f1a:	2d00      	cmp	r5, #0
 8006f1c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8007118 <__ieee754_rem_pio2+0x230>
 8006f20:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8006f24:	dd19      	ble.n	8006f5a <__ieee754_rem_pio2+0x72>
 8006f26:	ee30 7b46 	vsub.f64	d7, d0, d6
 8006f2a:	429e      	cmp	r6, r3
 8006f2c:	d00e      	beq.n	8006f4c <__ieee754_rem_pio2+0x64>
 8006f2e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8007120 <__ieee754_rem_pio2+0x238>
 8006f32:	ee37 5b46 	vsub.f64	d5, d7, d6
 8006f36:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006f3a:	ed84 5b00 	vstr	d5, [r4]
 8006f3e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006f42:	ed84 7b02 	vstr	d7, [r4, #8]
 8006f46:	2001      	movs	r0, #1
 8006f48:	b008      	add	sp, #32
 8006f4a:	bd70      	pop	{r4, r5, r6, pc}
 8006f4c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8007128 <__ieee754_rem_pio2+0x240>
 8006f50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006f54:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8007130 <__ieee754_rem_pio2+0x248>
 8006f58:	e7eb      	b.n	8006f32 <__ieee754_rem_pio2+0x4a>
 8006f5a:	429e      	cmp	r6, r3
 8006f5c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8006f60:	d00e      	beq.n	8006f80 <__ieee754_rem_pio2+0x98>
 8006f62:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8007120 <__ieee754_rem_pio2+0x238>
 8006f66:	ee37 5b06 	vadd.f64	d5, d7, d6
 8006f6a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8006f6e:	ed84 5b00 	vstr	d5, [r4]
 8006f72:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f76:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7a:	ed84 7b02 	vstr	d7, [r4, #8]
 8006f7e:	e7e3      	b.n	8006f48 <__ieee754_rem_pio2+0x60>
 8006f80:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8007128 <__ieee754_rem_pio2+0x240>
 8006f84:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006f88:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8007130 <__ieee754_rem_pio2+0x248>
 8006f8c:	e7eb      	b.n	8006f66 <__ieee754_rem_pio2+0x7e>
 8006f8e:	4b74      	ldr	r3, [pc, #464]	; (8007160 <__ieee754_rem_pio2+0x278>)
 8006f90:	429e      	cmp	r6, r3
 8006f92:	dc70      	bgt.n	8007076 <__ieee754_rem_pio2+0x18e>
 8006f94:	f000 fdb6 	bl	8007b04 <fabs>
 8006f98:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006f9c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007138 <__ieee754_rem_pio2+0x250>
 8006fa0:	eea0 7b06 	vfma.f64	d7, d0, d6
 8006fa4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006fa8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006fac:	ee17 0a90 	vmov	r0, s15
 8006fb0:	eeb1 4b45 	vneg.f64	d4, d5
 8006fb4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8007118 <__ieee754_rem_pio2+0x230>
 8006fb8:	eea5 0b47 	vfms.f64	d0, d5, d7
 8006fbc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8007120 <__ieee754_rem_pio2+0x238>
 8006fc0:	281f      	cmp	r0, #31
 8006fc2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006fc6:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006fca:	dc08      	bgt.n	8006fde <__ieee754_rem_pio2+0xf6>
 8006fcc:	4b65      	ldr	r3, [pc, #404]	; (8007164 <__ieee754_rem_pio2+0x27c>)
 8006fce:	1e42      	subs	r2, r0, #1
 8006fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd4:	42b3      	cmp	r3, r6
 8006fd6:	d002      	beq.n	8006fde <__ieee754_rem_pio2+0xf6>
 8006fd8:	ed84 6b00 	vstr	d6, [r4]
 8006fdc:	e026      	b.n	800702c <__ieee754_rem_pio2+0x144>
 8006fde:	ee16 3a90 	vmov	r3, s13
 8006fe2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8006fe6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8006fea:	2b10      	cmp	r3, #16
 8006fec:	ea4f 5226 	mov.w	r2, r6, asr #20
 8006ff0:	ddf2      	ble.n	8006fd8 <__ieee754_rem_pio2+0xf0>
 8006ff2:	eeb0 6b40 	vmov.f64	d6, d0
 8006ff6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8007128 <__ieee754_rem_pio2+0x240>
 8006ffa:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8007130 <__ieee754_rem_pio2+0x248>
 8006ffe:	eea4 6b07 	vfma.f64	d6, d4, d7
 8007002:	ee30 0b46 	vsub.f64	d0, d0, d6
 8007006:	eea4 0b07 	vfma.f64	d0, d4, d7
 800700a:	eeb0 7b40 	vmov.f64	d7, d0
 800700e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8007012:	ee36 3b47 	vsub.f64	d3, d6, d7
 8007016:	ee13 3a90 	vmov	r3, s7
 800701a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	2b31      	cmp	r3, #49	; 0x31
 8007022:	dc17      	bgt.n	8007054 <__ieee754_rem_pio2+0x16c>
 8007024:	eeb0 0b46 	vmov.f64	d0, d6
 8007028:	ed84 3b00 	vstr	d3, [r4]
 800702c:	ed94 6b00 	vldr	d6, [r4]
 8007030:	2d00      	cmp	r5, #0
 8007032:	ee30 0b46 	vsub.f64	d0, d0, d6
 8007036:	ee30 0b47 	vsub.f64	d0, d0, d7
 800703a:	ed84 0b02 	vstr	d0, [r4, #8]
 800703e:	da83      	bge.n	8006f48 <__ieee754_rem_pio2+0x60>
 8007040:	eeb1 6b46 	vneg.f64	d6, d6
 8007044:	eeb1 0b40 	vneg.f64	d0, d0
 8007048:	ed84 6b00 	vstr	d6, [r4]
 800704c:	ed84 0b02 	vstr	d0, [r4, #8]
 8007050:	4240      	negs	r0, r0
 8007052:	e779      	b.n	8006f48 <__ieee754_rem_pio2+0x60>
 8007054:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8007140 <__ieee754_rem_pio2+0x258>
 8007058:	eeb0 0b46 	vmov.f64	d0, d6
 800705c:	eea4 0b03 	vfma.f64	d0, d4, d3
 8007060:	ee36 7b40 	vsub.f64	d7, d6, d0
 8007064:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8007148 <__ieee754_rem_pio2+0x260>
 8007068:	eea4 7b03 	vfma.f64	d7, d4, d3
 800706c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8007070:	ee30 6b47 	vsub.f64	d6, d0, d7
 8007074:	e7b0      	b.n	8006fd8 <__ieee754_rem_pio2+0xf0>
 8007076:	4b3c      	ldr	r3, [pc, #240]	; (8007168 <__ieee754_rem_pio2+0x280>)
 8007078:	429e      	cmp	r6, r3
 800707a:	dd06      	ble.n	800708a <__ieee754_rem_pio2+0x1a2>
 800707c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8007080:	ed80 7b02 	vstr	d7, [r0, #8]
 8007084:	ed80 7b00 	vstr	d7, [r0]
 8007088:	e740      	b.n	8006f0c <__ieee754_rem_pio2+0x24>
 800708a:	1532      	asrs	r2, r6, #20
 800708c:	ee10 0a10 	vmov	r0, s0
 8007090:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8007094:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8007098:	ec41 0b17 	vmov	d7, r0, r1
 800709c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80070a0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8007150 <__ieee754_rem_pio2+0x268>
 80070a4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80070a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80070ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 80070b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80070b4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80070b8:	a902      	add	r1, sp, #8
 80070ba:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80070be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80070c2:	ed8d 6b04 	vstr	d6, [sp, #16]
 80070c6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80070ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 80070ce:	2603      	movs	r6, #3
 80070d0:	4608      	mov	r0, r1
 80070d2:	ed91 7b04 	vldr	d7, [r1, #16]
 80070d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80070da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070de:	4633      	mov	r3, r6
 80070e0:	f1a1 0108 	sub.w	r1, r1, #8
 80070e4:	f106 36ff 	add.w	r6, r6, #4294967295
 80070e8:	d0f3      	beq.n	80070d2 <__ieee754_rem_pio2+0x1ea>
 80070ea:	4920      	ldr	r1, [pc, #128]	; (800716c <__ieee754_rem_pio2+0x284>)
 80070ec:	9101      	str	r1, [sp, #4]
 80070ee:	2102      	movs	r1, #2
 80070f0:	9100      	str	r1, [sp, #0]
 80070f2:	4621      	mov	r1, r4
 80070f4:	f000 f8ac 	bl	8007250 <__kernel_rem_pio2>
 80070f8:	2d00      	cmp	r5, #0
 80070fa:	f6bf af25 	bge.w	8006f48 <__ieee754_rem_pio2+0x60>
 80070fe:	ed94 7b00 	vldr	d7, [r4]
 8007102:	eeb1 7b47 	vneg.f64	d7, d7
 8007106:	ed84 7b00 	vstr	d7, [r4]
 800710a:	ed94 7b02 	vldr	d7, [r4, #8]
 800710e:	eeb1 7b47 	vneg.f64	d7, d7
 8007112:	ed84 7b02 	vstr	d7, [r4, #8]
 8007116:	e79b      	b.n	8007050 <__ieee754_rem_pio2+0x168>
 8007118:	54400000 	.word	0x54400000
 800711c:	3ff921fb 	.word	0x3ff921fb
 8007120:	1a626331 	.word	0x1a626331
 8007124:	3dd0b461 	.word	0x3dd0b461
 8007128:	1a600000 	.word	0x1a600000
 800712c:	3dd0b461 	.word	0x3dd0b461
 8007130:	2e037073 	.word	0x2e037073
 8007134:	3ba3198a 	.word	0x3ba3198a
 8007138:	6dc9c883 	.word	0x6dc9c883
 800713c:	3fe45f30 	.word	0x3fe45f30
 8007140:	2e000000 	.word	0x2e000000
 8007144:	3ba3198a 	.word	0x3ba3198a
 8007148:	252049c1 	.word	0x252049c1
 800714c:	397b839a 	.word	0x397b839a
 8007150:	00000000 	.word	0x00000000
 8007154:	41700000 	.word	0x41700000
 8007158:	3fe921fb 	.word	0x3fe921fb
 800715c:	4002d97b 	.word	0x4002d97b
 8007160:	413921fb 	.word	0x413921fb
 8007164:	08008db8 	.word	0x08008db8
 8007168:	7fefffff 	.word	0x7fefffff
 800716c:	08008e38 	.word	0x08008e38

08007170 <__ieee754_sqrt>:
 8007170:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8007174:	4770      	bx	lr
	...

08007178 <__kernel_cos>:
 8007178:	ee10 1a90 	vmov	r1, s1
 800717c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8007180:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007184:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8007188:	da05      	bge.n	8007196 <__kernel_cos+0x1e>
 800718a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800718e:	ee17 3a90 	vmov	r3, s15
 8007192:	2b00      	cmp	r3, #0
 8007194:	d03d      	beq.n	8007212 <__kernel_cos+0x9a>
 8007196:	ee20 3b00 	vmul.f64	d3, d0, d0
 800719a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8007218 <__kernel_cos+0xa0>
 800719e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8007220 <__kernel_cos+0xa8>
 80071a2:	eea3 6b07 	vfma.f64	d6, d3, d7
 80071a6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8007228 <__kernel_cos+0xb0>
 80071aa:	eea6 7b03 	vfma.f64	d7, d6, d3
 80071ae:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8007230 <__kernel_cos+0xb8>
 80071b2:	eea7 6b03 	vfma.f64	d6, d7, d3
 80071b6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8007238 <__kernel_cos+0xc0>
 80071ba:	4b23      	ldr	r3, [pc, #140]	; (8007248 <__kernel_cos+0xd0>)
 80071bc:	eea6 7b03 	vfma.f64	d7, d6, d3
 80071c0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8007240 <__kernel_cos+0xc8>
 80071c4:	4299      	cmp	r1, r3
 80071c6:	eea7 6b03 	vfma.f64	d6, d7, d3
 80071ca:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80071ce:	ee26 5b03 	vmul.f64	d5, d6, d3
 80071d2:	ee23 7b07 	vmul.f64	d7, d3, d7
 80071d6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80071da:	eea3 6b05 	vfma.f64	d6, d3, d5
 80071de:	dc04      	bgt.n	80071ea <__kernel_cos+0x72>
 80071e0:	ee37 6b46 	vsub.f64	d6, d7, d6
 80071e4:	ee34 0b46 	vsub.f64	d0, d4, d6
 80071e8:	4770      	bx	lr
 80071ea:	4b18      	ldr	r3, [pc, #96]	; (800724c <__kernel_cos+0xd4>)
 80071ec:	4299      	cmp	r1, r3
 80071ee:	dc0d      	bgt.n	800720c <__kernel_cos+0x94>
 80071f0:	2200      	movs	r2, #0
 80071f2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80071f6:	ec43 2b15 	vmov	d5, r2, r3
 80071fa:	ee34 0b45 	vsub.f64	d0, d4, d5
 80071fe:	ee37 7b45 	vsub.f64	d7, d7, d5
 8007202:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007206:	ee30 0b47 	vsub.f64	d0, d0, d7
 800720a:	4770      	bx	lr
 800720c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8007210:	e7f3      	b.n	80071fa <__kernel_cos+0x82>
 8007212:	eeb0 0b44 	vmov.f64	d0, d4
 8007216:	4770      	bx	lr
 8007218:	be8838d4 	.word	0xbe8838d4
 800721c:	bda8fae9 	.word	0xbda8fae9
 8007220:	bdb4b1c4 	.word	0xbdb4b1c4
 8007224:	3e21ee9e 	.word	0x3e21ee9e
 8007228:	809c52ad 	.word	0x809c52ad
 800722c:	be927e4f 	.word	0xbe927e4f
 8007230:	19cb1590 	.word	0x19cb1590
 8007234:	3efa01a0 	.word	0x3efa01a0
 8007238:	16c15177 	.word	0x16c15177
 800723c:	bf56c16c 	.word	0xbf56c16c
 8007240:	5555554c 	.word	0x5555554c
 8007244:	3fa55555 	.word	0x3fa55555
 8007248:	3fd33332 	.word	0x3fd33332
 800724c:	3fe90000 	.word	0x3fe90000

08007250 <__kernel_rem_pio2>:
 8007250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007254:	ed2d 8b06 	vpush	{d8-d10}
 8007258:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800725c:	460f      	mov	r7, r1
 800725e:	9002      	str	r0, [sp, #8]
 8007260:	49c5      	ldr	r1, [pc, #788]	; (8007578 <__kernel_rem_pio2+0x328>)
 8007262:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8007264:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8007268:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	f112 0f14 	cmn.w	r2, #20
 8007272:	bfa8      	it	ge
 8007274:	2018      	movge	r0, #24
 8007276:	f103 31ff 	add.w	r1, r3, #4294967295
 800727a:	bfb8      	it	lt
 800727c:	2000      	movlt	r0, #0
 800727e:	f06f 0417 	mvn.w	r4, #23
 8007282:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8007560 <__kernel_rem_pio2+0x310>
 8007286:	bfa4      	itt	ge
 8007288:	f1a2 0a03 	subge.w	sl, r2, #3
 800728c:	fb9a f0f0 	sdivge	r0, sl, r0
 8007290:	fb00 4404 	mla	r4, r0, r4, r4
 8007294:	1a46      	subs	r6, r0, r1
 8007296:	4414      	add	r4, r2
 8007298:	eb09 0c01 	add.w	ip, r9, r1
 800729c:	ad1a      	add	r5, sp, #104	; 0x68
 800729e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80072a2:	2200      	movs	r2, #0
 80072a4:	4562      	cmp	r2, ip
 80072a6:	dd10      	ble.n	80072ca <__kernel_rem_pio2+0x7a>
 80072a8:	9a01      	ldr	r2, [sp, #4]
 80072aa:	ab1a      	add	r3, sp, #104	; 0x68
 80072ac:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80072b0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 80072b4:	f04f 0c00 	mov.w	ip, #0
 80072b8:	45cc      	cmp	ip, r9
 80072ba:	dc26      	bgt.n	800730a <__kernel_rem_pio2+0xba>
 80072bc:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8007560 <__kernel_rem_pio2+0x310>
 80072c0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80072c4:	4616      	mov	r6, r2
 80072c6:	2500      	movs	r5, #0
 80072c8:	e015      	b.n	80072f6 <__kernel_rem_pio2+0xa6>
 80072ca:	42d6      	cmn	r6, r2
 80072cc:	d409      	bmi.n	80072e2 <__kernel_rem_pio2+0x92>
 80072ce:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80072da:	eca5 7b02 	vstmia	r5!, {d7}
 80072de:	3201      	adds	r2, #1
 80072e0:	e7e0      	b.n	80072a4 <__kernel_rem_pio2+0x54>
 80072e2:	eeb0 7b46 	vmov.f64	d7, d6
 80072e6:	e7f8      	b.n	80072da <__kernel_rem_pio2+0x8a>
 80072e8:	ecb8 5b02 	vldmia	r8!, {d5}
 80072ec:	ed96 6b00 	vldr	d6, [r6]
 80072f0:	3501      	adds	r5, #1
 80072f2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80072f6:	428d      	cmp	r5, r1
 80072f8:	f1a6 0608 	sub.w	r6, r6, #8
 80072fc:	ddf4      	ble.n	80072e8 <__kernel_rem_pio2+0x98>
 80072fe:	ecaa 7b02 	vstmia	sl!, {d7}
 8007302:	f10c 0c01 	add.w	ip, ip, #1
 8007306:	3208      	adds	r2, #8
 8007308:	e7d6      	b.n	80072b8 <__kernel_rem_pio2+0x68>
 800730a:	ab06      	add	r3, sp, #24
 800730c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8007568 <__kernel_rem_pio2+0x318>
 8007310:	ed9f ab97 	vldr	d10, [pc, #604]	; 8007570 <__kernel_rem_pio2+0x320>
 8007314:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8007318:	9303      	str	r3, [sp, #12]
 800731a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800731e:	464d      	mov	r5, r9
 8007320:	00eb      	lsls	r3, r5, #3
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	ab92      	add	r3, sp, #584	; 0x248
 8007326:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800732a:	f10d 0b18 	add.w	fp, sp, #24
 800732e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8007330:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8007334:	465e      	mov	r6, fp
 8007336:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800733a:	4628      	mov	r0, r5
 800733c:	2800      	cmp	r0, #0
 800733e:	f1a2 0208 	sub.w	r2, r2, #8
 8007342:	dc4c      	bgt.n	80073de <__kernel_rem_pio2+0x18e>
 8007344:	4620      	mov	r0, r4
 8007346:	9105      	str	r1, [sp, #20]
 8007348:	f000 fc5a 	bl	8007c00 <scalbn>
 800734c:	eeb0 8b40 	vmov.f64	d8, d0
 8007350:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8007354:	ee28 0b00 	vmul.f64	d0, d8, d0
 8007358:	f000 fbde 	bl	8007b18 <floor>
 800735c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8007360:	eea0 8b47 	vfms.f64	d8, d0, d7
 8007364:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8007368:	2c00      	cmp	r4, #0
 800736a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800736e:	ee17 8a90 	vmov	r8, s15
 8007372:	ee38 8b40 	vsub.f64	d8, d8, d0
 8007376:	9905      	ldr	r1, [sp, #20]
 8007378:	dd43      	ble.n	8007402 <__kernel_rem_pio2+0x1b2>
 800737a:	1e68      	subs	r0, r5, #1
 800737c:	ab06      	add	r3, sp, #24
 800737e:	f1c4 0c18 	rsb	ip, r4, #24
 8007382:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8007386:	fa46 f20c 	asr.w	r2, r6, ip
 800738a:	4490      	add	r8, r2
 800738c:	fa02 f20c 	lsl.w	r2, r2, ip
 8007390:	1ab6      	subs	r6, r6, r2
 8007392:	f1c4 0217 	rsb	r2, r4, #23
 8007396:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800739a:	4116      	asrs	r6, r2
 800739c:	2e00      	cmp	r6, #0
 800739e:	dd3f      	ble.n	8007420 <__kernel_rem_pio2+0x1d0>
 80073a0:	f04f 0c00 	mov.w	ip, #0
 80073a4:	f108 0801 	add.w	r8, r8, #1
 80073a8:	4660      	mov	r0, ip
 80073aa:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80073ae:	4565      	cmp	r5, ip
 80073b0:	dc6e      	bgt.n	8007490 <__kernel_rem_pio2+0x240>
 80073b2:	2c00      	cmp	r4, #0
 80073b4:	dd04      	ble.n	80073c0 <__kernel_rem_pio2+0x170>
 80073b6:	2c01      	cmp	r4, #1
 80073b8:	d07f      	beq.n	80074ba <__kernel_rem_pio2+0x26a>
 80073ba:	2c02      	cmp	r4, #2
 80073bc:	f000 8087 	beq.w	80074ce <__kernel_rem_pio2+0x27e>
 80073c0:	2e02      	cmp	r6, #2
 80073c2:	d12d      	bne.n	8007420 <__kernel_rem_pio2+0x1d0>
 80073c4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80073c8:	ee30 8b48 	vsub.f64	d8, d0, d8
 80073cc:	b340      	cbz	r0, 8007420 <__kernel_rem_pio2+0x1d0>
 80073ce:	4620      	mov	r0, r4
 80073d0:	9105      	str	r1, [sp, #20]
 80073d2:	f000 fc15 	bl	8007c00 <scalbn>
 80073d6:	9905      	ldr	r1, [sp, #20]
 80073d8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80073dc:	e020      	b.n	8007420 <__kernel_rem_pio2+0x1d0>
 80073de:	ee20 7b09 	vmul.f64	d7, d0, d9
 80073e2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80073e6:	3801      	subs	r0, #1
 80073e8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80073ec:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80073f0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80073f4:	eca6 0a01 	vstmia	r6!, {s0}
 80073f8:	ed92 0b00 	vldr	d0, [r2]
 80073fc:	ee37 0b00 	vadd.f64	d0, d7, d0
 8007400:	e79c      	b.n	800733c <__kernel_rem_pio2+0xec>
 8007402:	d105      	bne.n	8007410 <__kernel_rem_pio2+0x1c0>
 8007404:	1e6a      	subs	r2, r5, #1
 8007406:	ab06      	add	r3, sp, #24
 8007408:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800740c:	15f6      	asrs	r6, r6, #23
 800740e:	e7c5      	b.n	800739c <__kernel_rem_pio2+0x14c>
 8007410:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8007414:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741c:	da36      	bge.n	800748c <__kernel_rem_pio2+0x23c>
 800741e:	2600      	movs	r6, #0
 8007420:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007428:	f040 80aa 	bne.w	8007580 <__kernel_rem_pio2+0x330>
 800742c:	f105 3bff 	add.w	fp, r5, #4294967295
 8007430:	4658      	mov	r0, fp
 8007432:	2200      	movs	r2, #0
 8007434:	4548      	cmp	r0, r9
 8007436:	da52      	bge.n	80074de <__kernel_rem_pio2+0x28e>
 8007438:	2a00      	cmp	r2, #0
 800743a:	f000 8081 	beq.w	8007540 <__kernel_rem_pio2+0x2f0>
 800743e:	ab06      	add	r3, sp, #24
 8007440:	3c18      	subs	r4, #24
 8007442:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8007446:	2b00      	cmp	r3, #0
 8007448:	f000 8087 	beq.w	800755a <__kernel_rem_pio2+0x30a>
 800744c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007450:	4620      	mov	r0, r4
 8007452:	f000 fbd5 	bl	8007c00 <scalbn>
 8007456:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800745a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8007568 <__kernel_rem_pio2+0x318>
 800745e:	a96a      	add	r1, sp, #424	; 0x1a8
 8007460:	f103 0208 	add.w	r2, r3, #8
 8007464:	1888      	adds	r0, r1, r2
 8007466:	4659      	mov	r1, fp
 8007468:	2900      	cmp	r1, #0
 800746a:	f280 80b7 	bge.w	80075dc <__kernel_rem_pio2+0x38c>
 800746e:	4659      	mov	r1, fp
 8007470:	2900      	cmp	r1, #0
 8007472:	f2c0 80d5 	blt.w	8007620 <__kernel_rem_pio2+0x3d0>
 8007476:	a86a      	add	r0, sp, #424	; 0x1a8
 8007478:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800747c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8007560 <__kernel_rem_pio2+0x310>
 8007480:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800757c <__kernel_rem_pio2+0x32c>
 8007484:	2400      	movs	r4, #0
 8007486:	ebab 0001 	sub.w	r0, fp, r1
 800748a:	e0be      	b.n	800760a <__kernel_rem_pio2+0x3ba>
 800748c:	2602      	movs	r6, #2
 800748e:	e787      	b.n	80073a0 <__kernel_rem_pio2+0x150>
 8007490:	f8db 2000 	ldr.w	r2, [fp]
 8007494:	b958      	cbnz	r0, 80074ae <__kernel_rem_pio2+0x25e>
 8007496:	b122      	cbz	r2, 80074a2 <__kernel_rem_pio2+0x252>
 8007498:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800749c:	f8cb 2000 	str.w	r2, [fp]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f10c 0c01 	add.w	ip, ip, #1
 80074a6:	f10b 0b04 	add.w	fp, fp, #4
 80074aa:	4610      	mov	r0, r2
 80074ac:	e77f      	b.n	80073ae <__kernel_rem_pio2+0x15e>
 80074ae:	ebae 0202 	sub.w	r2, lr, r2
 80074b2:	f8cb 2000 	str.w	r2, [fp]
 80074b6:	4602      	mov	r2, r0
 80074b8:	e7f3      	b.n	80074a2 <__kernel_rem_pio2+0x252>
 80074ba:	f105 3cff 	add.w	ip, r5, #4294967295
 80074be:	ab06      	add	r3, sp, #24
 80074c0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80074c4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80074c8:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 80074cc:	e778      	b.n	80073c0 <__kernel_rem_pio2+0x170>
 80074ce:	f105 3cff 	add.w	ip, r5, #4294967295
 80074d2:	ab06      	add	r3, sp, #24
 80074d4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80074d8:	f3c2 0215 	ubfx	r2, r2, #0, #22
 80074dc:	e7f4      	b.n	80074c8 <__kernel_rem_pio2+0x278>
 80074de:	ab06      	add	r3, sp, #24
 80074e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80074e4:	3801      	subs	r0, #1
 80074e6:	431a      	orrs	r2, r3
 80074e8:	e7a4      	b.n	8007434 <__kernel_rem_pio2+0x1e4>
 80074ea:	f10c 0c01 	add.w	ip, ip, #1
 80074ee:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80074f2:	2800      	cmp	r0, #0
 80074f4:	d0f9      	beq.n	80074ea <__kernel_rem_pio2+0x29a>
 80074f6:	9b04      	ldr	r3, [sp, #16]
 80074f8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80074fc:	eb0d 0203 	add.w	r2, sp, r3
 8007500:	9b01      	ldr	r3, [sp, #4]
 8007502:	18e8      	adds	r0, r5, r3
 8007504:	ab1a      	add	r3, sp, #104	; 0x68
 8007506:	1c6e      	adds	r6, r5, #1
 8007508:	3a98      	subs	r2, #152	; 0x98
 800750a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800750e:	4465      	add	r5, ip
 8007510:	42b5      	cmp	r5, r6
 8007512:	f6ff af05 	blt.w	8007320 <__kernel_rem_pio2+0xd0>
 8007516:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800751a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007526:	f04f 0c00 	mov.w	ip, #0
 800752a:	eca0 7b02 	vstmia	r0!, {d7}
 800752e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8007560 <__kernel_rem_pio2+0x310>
 8007532:	4680      	mov	r8, r0
 8007534:	458c      	cmp	ip, r1
 8007536:	dd07      	ble.n	8007548 <__kernel_rem_pio2+0x2f8>
 8007538:	eca2 7b02 	vstmia	r2!, {d7}
 800753c:	3601      	adds	r6, #1
 800753e:	e7e7      	b.n	8007510 <__kernel_rem_pio2+0x2c0>
 8007540:	9a03      	ldr	r2, [sp, #12]
 8007542:	f04f 0c01 	mov.w	ip, #1
 8007546:	e7d2      	b.n	80074ee <__kernel_rem_pio2+0x29e>
 8007548:	ecbe 5b02 	vldmia	lr!, {d5}
 800754c:	ed38 6b02 	vldmdb	r8!, {d6}
 8007550:	f10c 0c01 	add.w	ip, ip, #1
 8007554:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007558:	e7ec      	b.n	8007534 <__kernel_rem_pio2+0x2e4>
 800755a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800755e:	e76e      	b.n	800743e <__kernel_rem_pio2+0x1ee>
	...
 800756c:	3e700000 	.word	0x3e700000
 8007570:	00000000 	.word	0x00000000
 8007574:	41700000 	.word	0x41700000
 8007578:	080097f0 	.word	0x080097f0
 800757c:	080097b0 	.word	0x080097b0
 8007580:	4260      	negs	r0, r4
 8007582:	eeb0 0b48 	vmov.f64	d0, d8
 8007586:	f000 fb3b 	bl	8007c00 <scalbn>
 800758a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8007768 <__kernel_rem_pio2+0x518>
 800758e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8007592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007596:	db18      	blt.n	80075ca <__kernel_rem_pio2+0x37a>
 8007598:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8007770 <__kernel_rem_pio2+0x520>
 800759c:	ee20 7b07 	vmul.f64	d7, d0, d7
 80075a0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80075a4:	aa06      	add	r2, sp, #24
 80075a6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80075aa:	eea5 0b46 	vfms.f64	d0, d5, d6
 80075ae:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80075b2:	f105 0b01 	add.w	fp, r5, #1
 80075b6:	ee10 3a10 	vmov	r3, s0
 80075ba:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80075be:	ee17 3a10 	vmov	r3, s14
 80075c2:	3418      	adds	r4, #24
 80075c4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80075c8:	e740      	b.n	800744c <__kernel_rem_pio2+0x1fc>
 80075ca:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80075ce:	aa06      	add	r2, sp, #24
 80075d0:	ee10 3a10 	vmov	r3, s0
 80075d4:	46ab      	mov	fp, r5
 80075d6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80075da:	e737      	b.n	800744c <__kernel_rem_pio2+0x1fc>
 80075dc:	ac06      	add	r4, sp, #24
 80075de:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 80075e2:	9401      	str	r4, [sp, #4]
 80075e4:	ee07 4a90 	vmov	s15, r4
 80075e8:	3901      	subs	r1, #1
 80075ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80075ee:	ee27 7b00 	vmul.f64	d7, d7, d0
 80075f2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80075f6:	ed20 7b02 	vstmdb	r0!, {d7}
 80075fa:	e735      	b.n	8007468 <__kernel_rem_pio2+0x218>
 80075fc:	ecbc 5b02 	vldmia	ip!, {d5}
 8007600:	ecb5 6b02 	vldmia	r5!, {d6}
 8007604:	3401      	adds	r4, #1
 8007606:	eea5 7b06 	vfma.f64	d7, d5, d6
 800760a:	454c      	cmp	r4, r9
 800760c:	dc01      	bgt.n	8007612 <__kernel_rem_pio2+0x3c2>
 800760e:	4284      	cmp	r4, r0
 8007610:	ddf4      	ble.n	80075fc <__kernel_rem_pio2+0x3ac>
 8007612:	ac42      	add	r4, sp, #264	; 0x108
 8007614:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8007618:	ed80 7b00 	vstr	d7, [r0]
 800761c:	3901      	subs	r1, #1
 800761e:	e727      	b.n	8007470 <__kernel_rem_pio2+0x220>
 8007620:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8007622:	2902      	cmp	r1, #2
 8007624:	dc0a      	bgt.n	800763c <__kernel_rem_pio2+0x3ec>
 8007626:	2900      	cmp	r1, #0
 8007628:	dc2c      	bgt.n	8007684 <__kernel_rem_pio2+0x434>
 800762a:	d045      	beq.n	80076b8 <__kernel_rem_pio2+0x468>
 800762c:	f008 0007 	and.w	r0, r8, #7
 8007630:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8007634:	ecbd 8b06 	vpop	{d8-d10}
 8007638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800763e:	2a03      	cmp	r2, #3
 8007640:	d1f4      	bne.n	800762c <__kernel_rem_pio2+0x3dc>
 8007642:	aa42      	add	r2, sp, #264	; 0x108
 8007644:	4413      	add	r3, r2
 8007646:	461a      	mov	r2, r3
 8007648:	4619      	mov	r1, r3
 800764a:	4658      	mov	r0, fp
 800764c:	2800      	cmp	r0, #0
 800764e:	f1a1 0108 	sub.w	r1, r1, #8
 8007652:	dc54      	bgt.n	80076fe <__kernel_rem_pio2+0x4ae>
 8007654:	4659      	mov	r1, fp
 8007656:	2901      	cmp	r1, #1
 8007658:	f1a2 0208 	sub.w	r2, r2, #8
 800765c:	dc5f      	bgt.n	800771e <__kernel_rem_pio2+0x4ce>
 800765e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8007778 <__kernel_rem_pio2+0x528>
 8007662:	3308      	adds	r3, #8
 8007664:	f1bb 0f01 	cmp.w	fp, #1
 8007668:	dc69      	bgt.n	800773e <__kernel_rem_pio2+0x4ee>
 800766a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800766e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8007672:	2e00      	cmp	r6, #0
 8007674:	d16a      	bne.n	800774c <__kernel_rem_pio2+0x4fc>
 8007676:	ed87 5b00 	vstr	d5, [r7]
 800767a:	ed87 6b02 	vstr	d6, [r7, #8]
 800767e:	ed87 7b04 	vstr	d7, [r7, #16]
 8007682:	e7d3      	b.n	800762c <__kernel_rem_pio2+0x3dc>
 8007684:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007778 <__kernel_rem_pio2+0x528>
 8007688:	ab42      	add	r3, sp, #264	; 0x108
 800768a:	441a      	add	r2, r3
 800768c:	465b      	mov	r3, fp
 800768e:	2b00      	cmp	r3, #0
 8007690:	da26      	bge.n	80076e0 <__kernel_rem_pio2+0x490>
 8007692:	b35e      	cbz	r6, 80076ec <__kernel_rem_pio2+0x49c>
 8007694:	eeb1 7b46 	vneg.f64	d7, d6
 8007698:	ed87 7b00 	vstr	d7, [r7]
 800769c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80076a0:	aa44      	add	r2, sp, #272	; 0x110
 80076a2:	2301      	movs	r3, #1
 80076a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80076a8:	459b      	cmp	fp, r3
 80076aa:	da22      	bge.n	80076f2 <__kernel_rem_pio2+0x4a2>
 80076ac:	b10e      	cbz	r6, 80076b2 <__kernel_rem_pio2+0x462>
 80076ae:	eeb1 7b47 	vneg.f64	d7, d7
 80076b2:	ed87 7b02 	vstr	d7, [r7, #8]
 80076b6:	e7b9      	b.n	800762c <__kernel_rem_pio2+0x3dc>
 80076b8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007778 <__kernel_rem_pio2+0x528>
 80076bc:	ab42      	add	r3, sp, #264	; 0x108
 80076be:	441a      	add	r2, r3
 80076c0:	f1bb 0f00 	cmp.w	fp, #0
 80076c4:	da05      	bge.n	80076d2 <__kernel_rem_pio2+0x482>
 80076c6:	b10e      	cbz	r6, 80076cc <__kernel_rem_pio2+0x47c>
 80076c8:	eeb1 7b47 	vneg.f64	d7, d7
 80076cc:	ed87 7b00 	vstr	d7, [r7]
 80076d0:	e7ac      	b.n	800762c <__kernel_rem_pio2+0x3dc>
 80076d2:	ed32 6b02 	vldmdb	r2!, {d6}
 80076d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80076de:	e7ef      	b.n	80076c0 <__kernel_rem_pio2+0x470>
 80076e0:	ed32 7b02 	vldmdb	r2!, {d7}
 80076e4:	3b01      	subs	r3, #1
 80076e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80076ea:	e7d0      	b.n	800768e <__kernel_rem_pio2+0x43e>
 80076ec:	eeb0 7b46 	vmov.f64	d7, d6
 80076f0:	e7d2      	b.n	8007698 <__kernel_rem_pio2+0x448>
 80076f2:	ecb2 6b02 	vldmia	r2!, {d6}
 80076f6:	3301      	adds	r3, #1
 80076f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80076fc:	e7d4      	b.n	80076a8 <__kernel_rem_pio2+0x458>
 80076fe:	ed91 7b00 	vldr	d7, [r1]
 8007702:	ed91 5b02 	vldr	d5, [r1, #8]
 8007706:	3801      	subs	r0, #1
 8007708:	ee37 6b05 	vadd.f64	d6, d7, d5
 800770c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007710:	ed81 6b00 	vstr	d6, [r1]
 8007714:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007718:	ed81 7b02 	vstr	d7, [r1, #8]
 800771c:	e796      	b.n	800764c <__kernel_rem_pio2+0x3fc>
 800771e:	ed92 7b00 	vldr	d7, [r2]
 8007722:	ed92 5b02 	vldr	d5, [r2, #8]
 8007726:	3901      	subs	r1, #1
 8007728:	ee37 6b05 	vadd.f64	d6, d7, d5
 800772c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007730:	ed82 6b00 	vstr	d6, [r2]
 8007734:	ee37 7b05 	vadd.f64	d7, d7, d5
 8007738:	ed82 7b02 	vstr	d7, [r2, #8]
 800773c:	e78b      	b.n	8007656 <__kernel_rem_pio2+0x406>
 800773e:	ed33 6b02 	vldmdb	r3!, {d6}
 8007742:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007746:	ee37 7b06 	vadd.f64	d7, d7, d6
 800774a:	e78b      	b.n	8007664 <__kernel_rem_pio2+0x414>
 800774c:	eeb1 5b45 	vneg.f64	d5, d5
 8007750:	eeb1 6b46 	vneg.f64	d6, d6
 8007754:	ed87 5b00 	vstr	d5, [r7]
 8007758:	eeb1 7b47 	vneg.f64	d7, d7
 800775c:	ed87 6b02 	vstr	d6, [r7, #8]
 8007760:	e78d      	b.n	800767e <__kernel_rem_pio2+0x42e>
 8007762:	bf00      	nop
 8007764:	f3af 8000 	nop.w
 8007768:	00000000 	.word	0x00000000
 800776c:	41700000 	.word	0x41700000
 8007770:	00000000 	.word	0x00000000
 8007774:	3e700000 	.word	0x3e700000
	...

08007780 <__kernel_sin>:
 8007780:	ee10 3a90 	vmov	r3, s1
 8007784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007788:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800778c:	da04      	bge.n	8007798 <__kernel_sin+0x18>
 800778e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8007792:	ee17 3a90 	vmov	r3, s15
 8007796:	b35b      	cbz	r3, 80077f0 <__kernel_sin+0x70>
 8007798:	ee20 6b00 	vmul.f64	d6, d0, d0
 800779c:	ee20 5b06 	vmul.f64	d5, d0, d6
 80077a0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80077f8 <__kernel_sin+0x78>
 80077a4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007800 <__kernel_sin+0x80>
 80077a8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80077ac:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8007808 <__kernel_sin+0x88>
 80077b0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80077b4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007810 <__kernel_sin+0x90>
 80077b8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80077bc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8007818 <__kernel_sin+0x98>
 80077c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80077c4:	b930      	cbnz	r0, 80077d4 <__kernel_sin+0x54>
 80077c6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8007820 <__kernel_sin+0xa0>
 80077ca:	eea6 4b07 	vfma.f64	d4, d6, d7
 80077ce:	eea4 0b05 	vfma.f64	d0, d4, d5
 80077d2:	4770      	bx	lr
 80077d4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80077d8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80077dc:	eea1 7b04 	vfma.f64	d7, d1, d4
 80077e0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80077e4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8007828 <__kernel_sin+0xa8>
 80077e8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80077ec:	ee30 0b41 	vsub.f64	d0, d0, d1
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	f3af 8000 	nop.w
 80077f8:	5acfd57c 	.word	0x5acfd57c
 80077fc:	3de5d93a 	.word	0x3de5d93a
 8007800:	8a2b9ceb 	.word	0x8a2b9ceb
 8007804:	be5ae5e6 	.word	0xbe5ae5e6
 8007808:	57b1fe7d 	.word	0x57b1fe7d
 800780c:	3ec71de3 	.word	0x3ec71de3
 8007810:	19c161d5 	.word	0x19c161d5
 8007814:	bf2a01a0 	.word	0xbf2a01a0
 8007818:	1110f8a6 	.word	0x1110f8a6
 800781c:	3f811111 	.word	0x3f811111
 8007820:	55555549 	.word	0x55555549
 8007824:	bfc55555 	.word	0xbfc55555
 8007828:	55555549 	.word	0x55555549
 800782c:	3fc55555 	.word	0x3fc55555

08007830 <with_errno>:
 8007830:	b513      	push	{r0, r1, r4, lr}
 8007832:	4604      	mov	r4, r0
 8007834:	ed8d 0b00 	vstr	d0, [sp]
 8007838:	f7fe ff1a 	bl	8006670 <__errno>
 800783c:	ed9d 0b00 	vldr	d0, [sp]
 8007840:	6004      	str	r4, [r0, #0]
 8007842:	b002      	add	sp, #8
 8007844:	bd10      	pop	{r4, pc}

08007846 <xflow>:
 8007846:	b082      	sub	sp, #8
 8007848:	b158      	cbz	r0, 8007862 <xflow+0x1c>
 800784a:	eeb1 7b40 	vneg.f64	d7, d0
 800784e:	ed8d 7b00 	vstr	d7, [sp]
 8007852:	ed9d 7b00 	vldr	d7, [sp]
 8007856:	2022      	movs	r0, #34	; 0x22
 8007858:	ee20 0b07 	vmul.f64	d0, d0, d7
 800785c:	b002      	add	sp, #8
 800785e:	f7ff bfe7 	b.w	8007830 <with_errno>
 8007862:	eeb0 7b40 	vmov.f64	d7, d0
 8007866:	e7f2      	b.n	800784e <xflow+0x8>

08007868 <__math_uflow>:
 8007868:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007870 <__math_uflow+0x8>
 800786c:	f7ff bfeb 	b.w	8007846 <xflow>
 8007870:	00000000 	.word	0x00000000
 8007874:	10000000 	.word	0x10000000

08007878 <__math_oflow>:
 8007878:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007880 <__math_oflow+0x8>
 800787c:	f7ff bfe3 	b.w	8007846 <xflow>
 8007880:	00000000 	.word	0x00000000
 8007884:	70000000 	.word	0x70000000

08007888 <__math_divzero>:
 8007888:	b082      	sub	sp, #8
 800788a:	2800      	cmp	r0, #0
 800788c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007890:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8007894:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8007898:	ed8d 7b00 	vstr	d7, [sp]
 800789c:	ed9d 0b00 	vldr	d0, [sp]
 80078a0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80078b0 <__math_divzero+0x28>
 80078a4:	2022      	movs	r0, #34	; 0x22
 80078a6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80078aa:	b002      	add	sp, #8
 80078ac:	f7ff bfc0 	b.w	8007830 <with_errno>
	...

080078b8 <__math_invalid>:
 80078b8:	eeb0 7b40 	vmov.f64	d7, d0
 80078bc:	eeb4 7b47 	vcmp.f64	d7, d7
 80078c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078c4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80078c8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80078cc:	d602      	bvs.n	80078d4 <__math_invalid+0x1c>
 80078ce:	2021      	movs	r0, #33	; 0x21
 80078d0:	f7ff bfae 	b.w	8007830 <with_errno>
 80078d4:	4770      	bx	lr

080078d6 <__math_check_uflow>:
 80078d6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80078da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078de:	d102      	bne.n	80078e6 <__math_check_uflow+0x10>
 80078e0:	2022      	movs	r0, #34	; 0x22
 80078e2:	f7ff bfa5 	b.w	8007830 <with_errno>
 80078e6:	4770      	bx	lr

080078e8 <__math_check_oflow>:
 80078e8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8007908 <__math_check_oflow+0x20>
 80078ec:	eeb0 7bc0 	vabs.f64	d7, d0
 80078f0:	eeb4 7b46 	vcmp.f64	d7, d6
 80078f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f8:	dd02      	ble.n	8007900 <__math_check_oflow+0x18>
 80078fa:	2022      	movs	r0, #34	; 0x22
 80078fc:	f7ff bf98 	b.w	8007830 <with_errno>
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	f3af 8000 	nop.w
 8007908:	ffffffff 	.word	0xffffffff
 800790c:	7fefffff 	.word	0x7fefffff

08007910 <atan>:
 8007910:	b538      	push	{r3, r4, r5, lr}
 8007912:	eeb0 7b40 	vmov.f64	d7, d0
 8007916:	ee17 5a90 	vmov	r5, s15
 800791a:	4b73      	ldr	r3, [pc, #460]	; (8007ae8 <atan+0x1d8>)
 800791c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007920:	429c      	cmp	r4, r3
 8007922:	dd13      	ble.n	800794c <atan+0x3c>
 8007924:	4b71      	ldr	r3, [pc, #452]	; (8007aec <atan+0x1dc>)
 8007926:	429c      	cmp	r4, r3
 8007928:	dc03      	bgt.n	8007932 <atan+0x22>
 800792a:	d107      	bne.n	800793c <atan+0x2c>
 800792c:	ee10 3a10 	vmov	r3, s0
 8007930:	b123      	cbz	r3, 800793c <atan+0x2c>
 8007932:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007936:	eeb0 0b47 	vmov.f64	d0, d7
 800793a:	bd38      	pop	{r3, r4, r5, pc}
 800793c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8007a78 <atan+0x168>
 8007940:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8007a80 <atan+0x170>
 8007944:	2d00      	cmp	r5, #0
 8007946:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800794a:	e7f4      	b.n	8007936 <atan+0x26>
 800794c:	4b68      	ldr	r3, [pc, #416]	; (8007af0 <atan+0x1e0>)
 800794e:	429c      	cmp	r4, r3
 8007950:	dc11      	bgt.n	8007976 <atan+0x66>
 8007952:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007956:	429c      	cmp	r4, r3
 8007958:	dc0a      	bgt.n	8007970 <atan+0x60>
 800795a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800795e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8007a88 <atan+0x178>
 8007962:	ee30 6b06 	vadd.f64	d6, d0, d6
 8007966:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800796a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800796e:	dce2      	bgt.n	8007936 <atan+0x26>
 8007970:	f04f 33ff 	mov.w	r3, #4294967295
 8007974:	e013      	b.n	800799e <atan+0x8e>
 8007976:	f000 f8c5 	bl	8007b04 <fabs>
 800797a:	4b5e      	ldr	r3, [pc, #376]	; (8007af4 <atan+0x1e4>)
 800797c:	429c      	cmp	r4, r3
 800797e:	dc4f      	bgt.n	8007a20 <atan+0x110>
 8007980:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007984:	429c      	cmp	r4, r3
 8007986:	dc41      	bgt.n	8007a0c <atan+0xfc>
 8007988:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800798c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8007990:	2300      	movs	r3, #0
 8007992:	eea0 6b07 	vfma.f64	d6, d0, d7
 8007996:	ee30 0b07 	vadd.f64	d0, d0, d7
 800799a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800799e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007a90 <atan+0x180>
 80079a2:	ee27 4b07 	vmul.f64	d4, d7, d7
 80079a6:	ee24 5b04 	vmul.f64	d5, d4, d4
 80079aa:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8007a98 <atan+0x188>
 80079ae:	eea5 3b06 	vfma.f64	d3, d5, d6
 80079b2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8007aa0 <atan+0x190>
 80079b6:	eea3 6b05 	vfma.f64	d6, d3, d5
 80079ba:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8007aa8 <atan+0x198>
 80079be:	eea6 3b05 	vfma.f64	d3, d6, d5
 80079c2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8007ab0 <atan+0x1a0>
 80079c6:	eea3 6b05 	vfma.f64	d6, d3, d5
 80079ca:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8007ab8 <atan+0x1a8>
 80079ce:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8007ac0 <atan+0x1b0>
 80079d2:	eea6 3b05 	vfma.f64	d3, d6, d5
 80079d6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007ac8 <atan+0x1b8>
 80079da:	eea5 2b06 	vfma.f64	d2, d5, d6
 80079de:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007ad0 <atan+0x1c0>
 80079e2:	eea2 6b05 	vfma.f64	d6, d2, d5
 80079e6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8007ad8 <atan+0x1c8>
 80079ea:	eea6 2b05 	vfma.f64	d2, d6, d5
 80079ee:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8007ae0 <atan+0x1d0>
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	eea2 6b05 	vfma.f64	d6, d2, d5
 80079f8:	ee26 6b05 	vmul.f64	d6, d6, d5
 80079fc:	eea3 6b04 	vfma.f64	d6, d3, d4
 8007a00:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007a04:	d121      	bne.n	8007a4a <atan+0x13a>
 8007a06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007a0a:	e794      	b.n	8007936 <atan+0x26>
 8007a0c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007a10:	2301      	movs	r3, #1
 8007a12:	ee30 6b47 	vsub.f64	d6, d0, d7
 8007a16:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007a1a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8007a1e:	e7be      	b.n	800799e <atan+0x8e>
 8007a20:	4b35      	ldr	r3, [pc, #212]	; (8007af8 <atan+0x1e8>)
 8007a22:	429c      	cmp	r4, r3
 8007a24:	da0b      	bge.n	8007a3e <atan+0x12e>
 8007a26:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007a2a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007a2e:	ee30 5b47 	vsub.f64	d5, d0, d7
 8007a32:	eea0 6b07 	vfma.f64	d6, d0, d7
 8007a36:	2302      	movs	r3, #2
 8007a38:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007a3c:	e7af      	b.n	800799e <atan+0x8e>
 8007a3e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8007a42:	2303      	movs	r3, #3
 8007a44:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8007a48:	e7a9      	b.n	800799e <atan+0x8e>
 8007a4a:	4a2c      	ldr	r2, [pc, #176]	; (8007afc <atan+0x1ec>)
 8007a4c:	492c      	ldr	r1, [pc, #176]	; (8007b00 <atan+0x1f0>)
 8007a4e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007a52:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8007a56:	ed93 5b00 	vldr	d5, [r3]
 8007a5a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007a5e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007a62:	ed92 6b00 	vldr	d6, [r2]
 8007a66:	2d00      	cmp	r5, #0
 8007a68:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007a6c:	bfb8      	it	lt
 8007a6e:	eeb1 7b47 	vneglt.f64	d7, d7
 8007a72:	e760      	b.n	8007936 <atan+0x26>
 8007a74:	f3af 8000 	nop.w
 8007a78:	54442d18 	.word	0x54442d18
 8007a7c:	3ff921fb 	.word	0x3ff921fb
 8007a80:	54442d18 	.word	0x54442d18
 8007a84:	bff921fb 	.word	0xbff921fb
 8007a88:	8800759c 	.word	0x8800759c
 8007a8c:	7e37e43c 	.word	0x7e37e43c
 8007a90:	e322da11 	.word	0xe322da11
 8007a94:	3f90ad3a 	.word	0x3f90ad3a
 8007a98:	24760deb 	.word	0x24760deb
 8007a9c:	3fa97b4b 	.word	0x3fa97b4b
 8007aa0:	a0d03d51 	.word	0xa0d03d51
 8007aa4:	3fb10d66 	.word	0x3fb10d66
 8007aa8:	c54c206e 	.word	0xc54c206e
 8007aac:	3fb745cd 	.word	0x3fb745cd
 8007ab0:	920083ff 	.word	0x920083ff
 8007ab4:	3fc24924 	.word	0x3fc24924
 8007ab8:	5555550d 	.word	0x5555550d
 8007abc:	3fd55555 	.word	0x3fd55555
 8007ac0:	52defd9a 	.word	0x52defd9a
 8007ac4:	bfadde2d 	.word	0xbfadde2d
 8007ac8:	2c6a6c2f 	.word	0x2c6a6c2f
 8007acc:	bfa2b444 	.word	0xbfa2b444
 8007ad0:	af749a6d 	.word	0xaf749a6d
 8007ad4:	bfb3b0f2 	.word	0xbfb3b0f2
 8007ad8:	fe231671 	.word	0xfe231671
 8007adc:	bfbc71c6 	.word	0xbfbc71c6
 8007ae0:	9998ebc4 	.word	0x9998ebc4
 8007ae4:	bfc99999 	.word	0xbfc99999
 8007ae8:	440fffff 	.word	0x440fffff
 8007aec:	7ff00000 	.word	0x7ff00000
 8007af0:	3fdbffff 	.word	0x3fdbffff
 8007af4:	3ff2ffff 	.word	0x3ff2ffff
 8007af8:	40038000 	.word	0x40038000
 8007afc:	08009800 	.word	0x08009800
 8007b00:	08009820 	.word	0x08009820

08007b04 <fabs>:
 8007b04:	ec51 0b10 	vmov	r0, r1, d0
 8007b08:	ee10 2a10 	vmov	r2, s0
 8007b0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b10:	ec43 2b10 	vmov	d0, r2, r3
 8007b14:	4770      	bx	lr
	...

08007b18 <floor>:
 8007b18:	ee10 1a90 	vmov	r1, s1
 8007b1c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007b20:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8007b24:	2b13      	cmp	r3, #19
 8007b26:	b530      	push	{r4, r5, lr}
 8007b28:	ee10 0a10 	vmov	r0, s0
 8007b2c:	ee10 5a10 	vmov	r5, s0
 8007b30:	dc31      	bgt.n	8007b96 <floor+0x7e>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	da15      	bge.n	8007b62 <floor+0x4a>
 8007b36:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007bf0 <floor+0xd8>
 8007b3a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007b3e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b46:	dd07      	ble.n	8007b58 <floor+0x40>
 8007b48:	2900      	cmp	r1, #0
 8007b4a:	da4e      	bge.n	8007bea <floor+0xd2>
 8007b4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b50:	4318      	orrs	r0, r3
 8007b52:	d001      	beq.n	8007b58 <floor+0x40>
 8007b54:	4928      	ldr	r1, [pc, #160]	; (8007bf8 <floor+0xe0>)
 8007b56:	2000      	movs	r0, #0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	ec43 2b10 	vmov	d0, r2, r3
 8007b60:	e020      	b.n	8007ba4 <floor+0x8c>
 8007b62:	4a26      	ldr	r2, [pc, #152]	; (8007bfc <floor+0xe4>)
 8007b64:	411a      	asrs	r2, r3
 8007b66:	ea01 0402 	and.w	r4, r1, r2
 8007b6a:	4304      	orrs	r4, r0
 8007b6c:	d01a      	beq.n	8007ba4 <floor+0x8c>
 8007b6e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8007bf0 <floor+0xd8>
 8007b72:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007b76:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b7e:	ddeb      	ble.n	8007b58 <floor+0x40>
 8007b80:	2900      	cmp	r1, #0
 8007b82:	bfbe      	ittt	lt
 8007b84:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8007b88:	fa40 f303 	asrlt.w	r3, r0, r3
 8007b8c:	18c9      	addlt	r1, r1, r3
 8007b8e:	ea21 0102 	bic.w	r1, r1, r2
 8007b92:	2000      	movs	r0, #0
 8007b94:	e7e0      	b.n	8007b58 <floor+0x40>
 8007b96:	2b33      	cmp	r3, #51	; 0x33
 8007b98:	dd05      	ble.n	8007ba6 <floor+0x8e>
 8007b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b9e:	d101      	bne.n	8007ba4 <floor+0x8c>
 8007ba0:	ee30 0b00 	vadd.f64	d0, d0, d0
 8007ba4:	bd30      	pop	{r4, r5, pc}
 8007ba6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8007baa:	f04f 32ff 	mov.w	r2, #4294967295
 8007bae:	40e2      	lsrs	r2, r4
 8007bb0:	4202      	tst	r2, r0
 8007bb2:	d0f7      	beq.n	8007ba4 <floor+0x8c>
 8007bb4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8007bf0 <floor+0xd8>
 8007bb8:	ee30 0b07 	vadd.f64	d0, d0, d7
 8007bbc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc4:	ddc8      	ble.n	8007b58 <floor+0x40>
 8007bc6:	2900      	cmp	r1, #0
 8007bc8:	da02      	bge.n	8007bd0 <floor+0xb8>
 8007bca:	2b14      	cmp	r3, #20
 8007bcc:	d103      	bne.n	8007bd6 <floor+0xbe>
 8007bce:	3101      	adds	r1, #1
 8007bd0:	ea20 0002 	bic.w	r0, r0, r2
 8007bd4:	e7c0      	b.n	8007b58 <floor+0x40>
 8007bd6:	2401      	movs	r4, #1
 8007bd8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007bdc:	fa04 f303 	lsl.w	r3, r4, r3
 8007be0:	4418      	add	r0, r3
 8007be2:	42a8      	cmp	r0, r5
 8007be4:	bf38      	it	cc
 8007be6:	1909      	addcc	r1, r1, r4
 8007be8:	e7f2      	b.n	8007bd0 <floor+0xb8>
 8007bea:	2000      	movs	r0, #0
 8007bec:	4601      	mov	r1, r0
 8007bee:	e7b3      	b.n	8007b58 <floor+0x40>
 8007bf0:	8800759c 	.word	0x8800759c
 8007bf4:	7e37e43c 	.word	0x7e37e43c
 8007bf8:	bff00000 	.word	0xbff00000
 8007bfc:	000fffff 	.word	0x000fffff

08007c00 <scalbn>:
 8007c00:	ee10 1a90 	vmov	r1, s1
 8007c04:	b510      	push	{r4, lr}
 8007c06:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8007c0a:	b98c      	cbnz	r4, 8007c30 <scalbn+0x30>
 8007c0c:	ee10 3a10 	vmov	r3, s0
 8007c10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007c14:	430b      	orrs	r3, r1
 8007c16:	d011      	beq.n	8007c3c <scalbn+0x3c>
 8007c18:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8007ce0 <scalbn+0xe0>
 8007c1c:	4b3c      	ldr	r3, [pc, #240]	; (8007d10 <scalbn+0x110>)
 8007c1e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007c22:	4298      	cmp	r0, r3
 8007c24:	da0b      	bge.n	8007c3e <scalbn+0x3e>
 8007c26:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8007ce8 <scalbn+0xe8>
 8007c2a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007c2e:	e005      	b.n	8007c3c <scalbn+0x3c>
 8007c30:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007c34:	429c      	cmp	r4, r3
 8007c36:	d107      	bne.n	8007c48 <scalbn+0x48>
 8007c38:	ee30 0b00 	vadd.f64	d0, d0, d0
 8007c3c:	bd10      	pop	{r4, pc}
 8007c3e:	ee10 1a90 	vmov	r1, s1
 8007c42:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8007c46:	3c36      	subs	r4, #54	; 0x36
 8007c48:	4404      	add	r4, r0
 8007c4a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8007c4e:	429c      	cmp	r4, r3
 8007c50:	dd0d      	ble.n	8007c6e <scalbn+0x6e>
 8007c52:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8007cf0 <scalbn+0xf0>
 8007c56:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8007cf8 <scalbn+0xf8>
 8007c5a:	eeb0 6b47 	vmov.f64	d6, d7
 8007c5e:	ee10 3a90 	vmov	r3, s1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	fe27 7b05 	vselge.f64	d7, d7, d5
 8007c68:	ee27 0b06 	vmul.f64	d0, d7, d6
 8007c6c:	e7e6      	b.n	8007c3c <scalbn+0x3c>
 8007c6e:	2c00      	cmp	r4, #0
 8007c70:	dd0a      	ble.n	8007c88 <scalbn+0x88>
 8007c72:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8007c76:	ec53 2b10 	vmov	r2, r3, d0
 8007c7a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8007c7e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8007c82:	ec43 2b10 	vmov	d0, r2, r3
 8007c86:	e7d9      	b.n	8007c3c <scalbn+0x3c>
 8007c88:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8007c8c:	da19      	bge.n	8007cc2 <scalbn+0xc2>
 8007c8e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c92:	4298      	cmp	r0, r3
 8007c94:	ee10 3a90 	vmov	r3, s1
 8007c98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c9c:	dd09      	ble.n	8007cb2 <scalbn+0xb2>
 8007c9e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8007cf0 <scalbn+0xf0>
 8007ca2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8007cf8 <scalbn+0xf8>
 8007ca6:	eeb0 7b40 	vmov.f64	d7, d0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8007cb0:	e7bb      	b.n	8007c2a <scalbn+0x2a>
 8007cb2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8007ce8 <scalbn+0xe8>
 8007cb6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8007d00 <scalbn+0x100>
 8007cba:	eeb0 7b40 	vmov.f64	d7, d0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	e7f4      	b.n	8007cac <scalbn+0xac>
 8007cc2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8007cc6:	ec53 2b10 	vmov	r2, r3, d0
 8007cca:	3436      	adds	r4, #54	; 0x36
 8007ccc:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8007cd0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8007cd4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8007d08 <scalbn+0x108>
 8007cd8:	ec43 2b10 	vmov	d0, r2, r3
 8007cdc:	e7a5      	b.n	8007c2a <scalbn+0x2a>
 8007cde:	bf00      	nop
 8007ce0:	00000000 	.word	0x00000000
 8007ce4:	43500000 	.word	0x43500000
 8007ce8:	c2f8f359 	.word	0xc2f8f359
 8007cec:	01a56e1f 	.word	0x01a56e1f
 8007cf0:	8800759c 	.word	0x8800759c
 8007cf4:	7e37e43c 	.word	0x7e37e43c
 8007cf8:	8800759c 	.word	0x8800759c
 8007cfc:	fe37e43c 	.word	0xfe37e43c
 8007d00:	c2f8f359 	.word	0xc2f8f359
 8007d04:	81a56e1f 	.word	0x81a56e1f
 8007d08:	00000000 	.word	0x00000000
 8007d0c:	3c900000 	.word	0x3c900000
 8007d10:	ffff3cb0 	.word	0xffff3cb0

08007d14 <_init>:
 8007d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d16:	bf00      	nop
 8007d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d1a:	bc08      	pop	{r3}
 8007d1c:	469e      	mov	lr, r3
 8007d1e:	4770      	bx	lr

08007d20 <_fini>:
 8007d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d22:	bf00      	nop
 8007d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d26:	bc08      	pop	{r3}
 8007d28:	469e      	mov	lr, r3
 8007d2a:	4770      	bx	lr
