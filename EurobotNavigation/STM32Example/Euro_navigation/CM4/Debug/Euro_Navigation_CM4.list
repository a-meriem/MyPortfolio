
Euro_Navigation_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8dc  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0810bb74  0810bb74  0001bb74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810c254  0810c254  0001c254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0810c25c  0810c25c  0001c25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810c264  0810c264  0001c264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  10000000  0810c268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002a38  10000084  0810c2ec  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  10002abc  0810c2ec  00022abc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   000298a0  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003eb8  00000000  00000000  00049954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001768  00000000  00000000  0004d810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001648  00000000  00000000  0004ef78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f219  00000000  00000000  000505c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e88f  00000000  00000000  0008f7d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001931d4  00000000  00000000  000ae068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0024123c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000068f8  00000000  00000000  0024128c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000084 	.word	0x10000084
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810bb5c 	.word	0x0810bb5c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000088 	.word	0x10000088
 81002d4:	0810bb5c 	.word	0x0810bb5c

081002d8 <strlen>:
 81002d8:	4603      	mov	r3, r0
 81002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002de:	2a00      	cmp	r2, #0
 81002e0:	d1fb      	bne.n	81002da <strlen+0x2>
 81002e2:	1a18      	subs	r0, r3, r0
 81002e4:	3801      	subs	r0, #1
 81002e6:	4770      	bx	lr

081002e8 <__aeabi_uldivmod>:
 81002e8:	b953      	cbnz	r3, 8100300 <__aeabi_uldivmod+0x18>
 81002ea:	b94a      	cbnz	r2, 8100300 <__aeabi_uldivmod+0x18>
 81002ec:	2900      	cmp	r1, #0
 81002ee:	bf08      	it	eq
 81002f0:	2800      	cmpeq	r0, #0
 81002f2:	bf1c      	itt	ne
 81002f4:	f04f 31ff 	movne.w	r1, #4294967295
 81002f8:	f04f 30ff 	movne.w	r0, #4294967295
 81002fc:	f000 b974 	b.w	81005e8 <__aeabi_idiv0>
 8100300:	f1ad 0c08 	sub.w	ip, sp, #8
 8100304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100308:	f000 f806 	bl	8100318 <__udivmoddi4>
 810030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100314:	b004      	add	sp, #16
 8100316:	4770      	bx	lr

08100318 <__udivmoddi4>:
 8100318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810031c:	9d08      	ldr	r5, [sp, #32]
 810031e:	4604      	mov	r4, r0
 8100320:	468e      	mov	lr, r1
 8100322:	2b00      	cmp	r3, #0
 8100324:	d14d      	bne.n	81003c2 <__udivmoddi4+0xaa>
 8100326:	428a      	cmp	r2, r1
 8100328:	4694      	mov	ip, r2
 810032a:	d969      	bls.n	8100400 <__udivmoddi4+0xe8>
 810032c:	fab2 f282 	clz	r2, r2
 8100330:	b152      	cbz	r2, 8100348 <__udivmoddi4+0x30>
 8100332:	fa01 f302 	lsl.w	r3, r1, r2
 8100336:	f1c2 0120 	rsb	r1, r2, #32
 810033a:	fa20 f101 	lsr.w	r1, r0, r1
 810033e:	fa0c fc02 	lsl.w	ip, ip, r2
 8100342:	ea41 0e03 	orr.w	lr, r1, r3
 8100346:	4094      	lsls	r4, r2
 8100348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 810034c:	0c21      	lsrs	r1, r4, #16
 810034e:	fbbe f6f8 	udiv	r6, lr, r8
 8100352:	fa1f f78c 	uxth.w	r7, ip
 8100356:	fb08 e316 	mls	r3, r8, r6, lr
 810035a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 810035e:	fb06 f107 	mul.w	r1, r6, r7
 8100362:	4299      	cmp	r1, r3
 8100364:	d90a      	bls.n	810037c <__udivmoddi4+0x64>
 8100366:	eb1c 0303 	adds.w	r3, ip, r3
 810036a:	f106 30ff 	add.w	r0, r6, #4294967295
 810036e:	f080 811f 	bcs.w	81005b0 <__udivmoddi4+0x298>
 8100372:	4299      	cmp	r1, r3
 8100374:	f240 811c 	bls.w	81005b0 <__udivmoddi4+0x298>
 8100378:	3e02      	subs	r6, #2
 810037a:	4463      	add	r3, ip
 810037c:	1a5b      	subs	r3, r3, r1
 810037e:	b2a4      	uxth	r4, r4
 8100380:	fbb3 f0f8 	udiv	r0, r3, r8
 8100384:	fb08 3310 	mls	r3, r8, r0, r3
 8100388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 810038c:	fb00 f707 	mul.w	r7, r0, r7
 8100390:	42a7      	cmp	r7, r4
 8100392:	d90a      	bls.n	81003aa <__udivmoddi4+0x92>
 8100394:	eb1c 0404 	adds.w	r4, ip, r4
 8100398:	f100 33ff 	add.w	r3, r0, #4294967295
 810039c:	f080 810a 	bcs.w	81005b4 <__udivmoddi4+0x29c>
 81003a0:	42a7      	cmp	r7, r4
 81003a2:	f240 8107 	bls.w	81005b4 <__udivmoddi4+0x29c>
 81003a6:	4464      	add	r4, ip
 81003a8:	3802      	subs	r0, #2
 81003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 81003ae:	1be4      	subs	r4, r4, r7
 81003b0:	2600      	movs	r6, #0
 81003b2:	b11d      	cbz	r5, 81003bc <__udivmoddi4+0xa4>
 81003b4:	40d4      	lsrs	r4, r2
 81003b6:	2300      	movs	r3, #0
 81003b8:	e9c5 4300 	strd	r4, r3, [r5]
 81003bc:	4631      	mov	r1, r6
 81003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003c2:	428b      	cmp	r3, r1
 81003c4:	d909      	bls.n	81003da <__udivmoddi4+0xc2>
 81003c6:	2d00      	cmp	r5, #0
 81003c8:	f000 80ef 	beq.w	81005aa <__udivmoddi4+0x292>
 81003cc:	2600      	movs	r6, #0
 81003ce:	e9c5 0100 	strd	r0, r1, [r5]
 81003d2:	4630      	mov	r0, r6
 81003d4:	4631      	mov	r1, r6
 81003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003da:	fab3 f683 	clz	r6, r3
 81003de:	2e00      	cmp	r6, #0
 81003e0:	d14a      	bne.n	8100478 <__udivmoddi4+0x160>
 81003e2:	428b      	cmp	r3, r1
 81003e4:	d302      	bcc.n	81003ec <__udivmoddi4+0xd4>
 81003e6:	4282      	cmp	r2, r0
 81003e8:	f200 80f9 	bhi.w	81005de <__udivmoddi4+0x2c6>
 81003ec:	1a84      	subs	r4, r0, r2
 81003ee:	eb61 0303 	sbc.w	r3, r1, r3
 81003f2:	2001      	movs	r0, #1
 81003f4:	469e      	mov	lr, r3
 81003f6:	2d00      	cmp	r5, #0
 81003f8:	d0e0      	beq.n	81003bc <__udivmoddi4+0xa4>
 81003fa:	e9c5 4e00 	strd	r4, lr, [r5]
 81003fe:	e7dd      	b.n	81003bc <__udivmoddi4+0xa4>
 8100400:	b902      	cbnz	r2, 8100404 <__udivmoddi4+0xec>
 8100402:	deff      	udf	#255	; 0xff
 8100404:	fab2 f282 	clz	r2, r2
 8100408:	2a00      	cmp	r2, #0
 810040a:	f040 8092 	bne.w	8100532 <__udivmoddi4+0x21a>
 810040e:	eba1 010c 	sub.w	r1, r1, ip
 8100412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100416:	fa1f fe8c 	uxth.w	lr, ip
 810041a:	2601      	movs	r6, #1
 810041c:	0c20      	lsrs	r0, r4, #16
 810041e:	fbb1 f3f7 	udiv	r3, r1, r7
 8100422:	fb07 1113 	mls	r1, r7, r3, r1
 8100426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 810042a:	fb0e f003 	mul.w	r0, lr, r3
 810042e:	4288      	cmp	r0, r1
 8100430:	d908      	bls.n	8100444 <__udivmoddi4+0x12c>
 8100432:	eb1c 0101 	adds.w	r1, ip, r1
 8100436:	f103 38ff 	add.w	r8, r3, #4294967295
 810043a:	d202      	bcs.n	8100442 <__udivmoddi4+0x12a>
 810043c:	4288      	cmp	r0, r1
 810043e:	f200 80cb 	bhi.w	81005d8 <__udivmoddi4+0x2c0>
 8100442:	4643      	mov	r3, r8
 8100444:	1a09      	subs	r1, r1, r0
 8100446:	b2a4      	uxth	r4, r4
 8100448:	fbb1 f0f7 	udiv	r0, r1, r7
 810044c:	fb07 1110 	mls	r1, r7, r0, r1
 8100450:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100454:	fb0e fe00 	mul.w	lr, lr, r0
 8100458:	45a6      	cmp	lr, r4
 810045a:	d908      	bls.n	810046e <__udivmoddi4+0x156>
 810045c:	eb1c 0404 	adds.w	r4, ip, r4
 8100460:	f100 31ff 	add.w	r1, r0, #4294967295
 8100464:	d202      	bcs.n	810046c <__udivmoddi4+0x154>
 8100466:	45a6      	cmp	lr, r4
 8100468:	f200 80bb 	bhi.w	81005e2 <__udivmoddi4+0x2ca>
 810046c:	4608      	mov	r0, r1
 810046e:	eba4 040e 	sub.w	r4, r4, lr
 8100472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100476:	e79c      	b.n	81003b2 <__udivmoddi4+0x9a>
 8100478:	f1c6 0720 	rsb	r7, r6, #32
 810047c:	40b3      	lsls	r3, r6
 810047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8100482:	ea4c 0c03 	orr.w	ip, ip, r3
 8100486:	fa20 f407 	lsr.w	r4, r0, r7
 810048a:	fa01 f306 	lsl.w	r3, r1, r6
 810048e:	431c      	orrs	r4, r3
 8100490:	40f9      	lsrs	r1, r7
 8100492:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100496:	fa00 f306 	lsl.w	r3, r0, r6
 810049a:	fbb1 f8f9 	udiv	r8, r1, r9
 810049e:	0c20      	lsrs	r0, r4, #16
 81004a0:	fa1f fe8c 	uxth.w	lr, ip
 81004a4:	fb09 1118 	mls	r1, r9, r8, r1
 81004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 81004ac:	fb08 f00e 	mul.w	r0, r8, lr
 81004b0:	4288      	cmp	r0, r1
 81004b2:	fa02 f206 	lsl.w	r2, r2, r6
 81004b6:	d90b      	bls.n	81004d0 <__udivmoddi4+0x1b8>
 81004b8:	eb1c 0101 	adds.w	r1, ip, r1
 81004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 81004c0:	f080 8088 	bcs.w	81005d4 <__udivmoddi4+0x2bc>
 81004c4:	4288      	cmp	r0, r1
 81004c6:	f240 8085 	bls.w	81005d4 <__udivmoddi4+0x2bc>
 81004ca:	f1a8 0802 	sub.w	r8, r8, #2
 81004ce:	4461      	add	r1, ip
 81004d0:	1a09      	subs	r1, r1, r0
 81004d2:	b2a4      	uxth	r4, r4
 81004d4:	fbb1 f0f9 	udiv	r0, r1, r9
 81004d8:	fb09 1110 	mls	r1, r9, r0, r1
 81004dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 81004e0:	fb00 fe0e 	mul.w	lr, r0, lr
 81004e4:	458e      	cmp	lr, r1
 81004e6:	d908      	bls.n	81004fa <__udivmoddi4+0x1e2>
 81004e8:	eb1c 0101 	adds.w	r1, ip, r1
 81004ec:	f100 34ff 	add.w	r4, r0, #4294967295
 81004f0:	d26c      	bcs.n	81005cc <__udivmoddi4+0x2b4>
 81004f2:	458e      	cmp	lr, r1
 81004f4:	d96a      	bls.n	81005cc <__udivmoddi4+0x2b4>
 81004f6:	3802      	subs	r0, #2
 81004f8:	4461      	add	r1, ip
 81004fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 81004fe:	fba0 9402 	umull	r9, r4, r0, r2
 8100502:	eba1 010e 	sub.w	r1, r1, lr
 8100506:	42a1      	cmp	r1, r4
 8100508:	46c8      	mov	r8, r9
 810050a:	46a6      	mov	lr, r4
 810050c:	d356      	bcc.n	81005bc <__udivmoddi4+0x2a4>
 810050e:	d053      	beq.n	81005b8 <__udivmoddi4+0x2a0>
 8100510:	b15d      	cbz	r5, 810052a <__udivmoddi4+0x212>
 8100512:	ebb3 0208 	subs.w	r2, r3, r8
 8100516:	eb61 010e 	sbc.w	r1, r1, lr
 810051a:	fa01 f707 	lsl.w	r7, r1, r7
 810051e:	fa22 f306 	lsr.w	r3, r2, r6
 8100522:	40f1      	lsrs	r1, r6
 8100524:	431f      	orrs	r7, r3
 8100526:	e9c5 7100 	strd	r7, r1, [r5]
 810052a:	2600      	movs	r6, #0
 810052c:	4631      	mov	r1, r6
 810052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100532:	f1c2 0320 	rsb	r3, r2, #32
 8100536:	40d8      	lsrs	r0, r3
 8100538:	fa0c fc02 	lsl.w	ip, ip, r2
 810053c:	fa21 f303 	lsr.w	r3, r1, r3
 8100540:	4091      	lsls	r1, r2
 8100542:	4301      	orrs	r1, r0
 8100544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100548:	fa1f fe8c 	uxth.w	lr, ip
 810054c:	fbb3 f0f7 	udiv	r0, r3, r7
 8100550:	fb07 3610 	mls	r6, r7, r0, r3
 8100554:	0c0b      	lsrs	r3, r1, #16
 8100556:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 810055a:	fb00 f60e 	mul.w	r6, r0, lr
 810055e:	429e      	cmp	r6, r3
 8100560:	fa04 f402 	lsl.w	r4, r4, r2
 8100564:	d908      	bls.n	8100578 <__udivmoddi4+0x260>
 8100566:	eb1c 0303 	adds.w	r3, ip, r3
 810056a:	f100 38ff 	add.w	r8, r0, #4294967295
 810056e:	d22f      	bcs.n	81005d0 <__udivmoddi4+0x2b8>
 8100570:	429e      	cmp	r6, r3
 8100572:	d92d      	bls.n	81005d0 <__udivmoddi4+0x2b8>
 8100574:	3802      	subs	r0, #2
 8100576:	4463      	add	r3, ip
 8100578:	1b9b      	subs	r3, r3, r6
 810057a:	b289      	uxth	r1, r1
 810057c:	fbb3 f6f7 	udiv	r6, r3, r7
 8100580:	fb07 3316 	mls	r3, r7, r6, r3
 8100584:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100588:	fb06 f30e 	mul.w	r3, r6, lr
 810058c:	428b      	cmp	r3, r1
 810058e:	d908      	bls.n	81005a2 <__udivmoddi4+0x28a>
 8100590:	eb1c 0101 	adds.w	r1, ip, r1
 8100594:	f106 38ff 	add.w	r8, r6, #4294967295
 8100598:	d216      	bcs.n	81005c8 <__udivmoddi4+0x2b0>
 810059a:	428b      	cmp	r3, r1
 810059c:	d914      	bls.n	81005c8 <__udivmoddi4+0x2b0>
 810059e:	3e02      	subs	r6, #2
 81005a0:	4461      	add	r1, ip
 81005a2:	1ac9      	subs	r1, r1, r3
 81005a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81005a8:	e738      	b.n	810041c <__udivmoddi4+0x104>
 81005aa:	462e      	mov	r6, r5
 81005ac:	4628      	mov	r0, r5
 81005ae:	e705      	b.n	81003bc <__udivmoddi4+0xa4>
 81005b0:	4606      	mov	r6, r0
 81005b2:	e6e3      	b.n	810037c <__udivmoddi4+0x64>
 81005b4:	4618      	mov	r0, r3
 81005b6:	e6f8      	b.n	81003aa <__udivmoddi4+0x92>
 81005b8:	454b      	cmp	r3, r9
 81005ba:	d2a9      	bcs.n	8100510 <__udivmoddi4+0x1f8>
 81005bc:	ebb9 0802 	subs.w	r8, r9, r2
 81005c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 81005c4:	3801      	subs	r0, #1
 81005c6:	e7a3      	b.n	8100510 <__udivmoddi4+0x1f8>
 81005c8:	4646      	mov	r6, r8
 81005ca:	e7ea      	b.n	81005a2 <__udivmoddi4+0x28a>
 81005cc:	4620      	mov	r0, r4
 81005ce:	e794      	b.n	81004fa <__udivmoddi4+0x1e2>
 81005d0:	4640      	mov	r0, r8
 81005d2:	e7d1      	b.n	8100578 <__udivmoddi4+0x260>
 81005d4:	46d0      	mov	r8, sl
 81005d6:	e77b      	b.n	81004d0 <__udivmoddi4+0x1b8>
 81005d8:	3b02      	subs	r3, #2
 81005da:	4461      	add	r1, ip
 81005dc:	e732      	b.n	8100444 <__udivmoddi4+0x12c>
 81005de:	4630      	mov	r0, r6
 81005e0:	e709      	b.n	81003f6 <__udivmoddi4+0xde>
 81005e2:	4464      	add	r4, ip
 81005e4:	3802      	subs	r0, #2
 81005e6:	e742      	b.n	810046e <__udivmoddi4+0x156>

081005e8 <__aeabi_idiv0>:
 81005e8:	4770      	bx	lr
 81005ea:	bf00      	nop

081005ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005ec:	b480      	push	{r7}
 81005ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005f0:	4b09      	ldr	r3, [pc, #36]	; (8100618 <SystemInit+0x2c>)
 81005f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81005f6:	4a08      	ldr	r2, [pc, #32]	; (8100618 <SystemInit+0x2c>)
 81005f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81005fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100600:	4b05      	ldr	r3, [pc, #20]	; (8100618 <SystemInit+0x2c>)
 8100602:	691b      	ldr	r3, [r3, #16]
 8100604:	4a04      	ldr	r2, [pc, #16]	; (8100618 <SystemInit+0x2c>)
 8100606:	f043 0310 	orr.w	r3, r3, #16
 810060a:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 810060c:	bf00      	nop
 810060e:	46bd      	mov	sp, r7
 8100610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100614:	4770      	bx	lr
 8100616:	bf00      	nop
 8100618:	e000ed00 	.word	0xe000ed00

0810061c <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 810061c:	b480      	push	{r7}
 810061e:	b087      	sub	sp, #28
 8100620:	af00      	add	r7, sp, #0
 8100622:	6078      	str	r0, [r7, #4]
 8100624:	ed87 0a00 	vstr	s0, [r7]
  {
    const int32_t* val = (int32_t*) &f;
 8100628:	463b      	mov	r3, r7
 810062a:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 810062c:	693b      	ldr	r3, [r7, #16]
 810062e:	681b      	ldr	r3, [r3, #0]
 8100630:	15db      	asrs	r3, r3, #23
 8100632:	b2db      	uxtb	r3, r3
 8100634:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 8100636:	697b      	ldr	r3, [r7, #20]
 8100638:	2b00      	cmp	r3, #0
 810063a:	d003      	beq.n	8100644 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x28>
    {
      exp += 1023 - 127;
 810063c:	697b      	ldr	r3, [r7, #20]
 810063e:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8100642:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 8100644:	693b      	ldr	r3, [r7, #16]
 8100646:	681b      	ldr	r3, [r3, #0]
 8100648:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 810064a:	687b      	ldr	r3, [r7, #4]
 810064c:	1c5a      	adds	r2, r3, #1
 810064e:	607a      	str	r2, [r7, #4]
 8100650:	2200      	movs	r2, #0
 8100652:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8100654:	687b      	ldr	r3, [r7, #4]
 8100656:	1c5a      	adds	r2, r3, #1
 8100658:	607a      	str	r2, [r7, #4]
 810065a:	2200      	movs	r2, #0
 810065c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 810065e:	687b      	ldr	r3, [r7, #4]
 8100660:	1c5a      	adds	r2, r3, #1
 8100662:	607a      	str	r2, [r7, #4]
 8100664:	2200      	movs	r2, #0
 8100666:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 8100668:	68fb      	ldr	r3, [r7, #12]
 810066a:	0159      	lsls	r1, r3, #5
 810066c:	687b      	ldr	r3, [r7, #4]
 810066e:	1c5a      	adds	r2, r3, #1
 8100670:	607a      	str	r2, [r7, #4]
 8100672:	b2ca      	uxtb	r2, r1
 8100674:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8100676:	68fb      	ldr	r3, [r7, #12]
 8100678:	10d9      	asrs	r1, r3, #3
 810067a:	687b      	ldr	r3, [r7, #4]
 810067c:	1c5a      	adds	r2, r3, #1
 810067e:	607a      	str	r2, [r7, #4]
 8100680:	b2ca      	uxtb	r2, r1
 8100682:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 8100684:	68fb      	ldr	r3, [r7, #12]
 8100686:	12d9      	asrs	r1, r3, #11
 8100688:	687b      	ldr	r3, [r7, #4]
 810068a:	1c5a      	adds	r2, r3, #1
 810068c:	607a      	str	r2, [r7, #4]
 810068e:	b2ca      	uxtb	r2, r1
 8100690:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8100692:	697b      	ldr	r3, [r7, #20]
 8100694:	011b      	lsls	r3, r3, #4
 8100696:	b25a      	sxtb	r2, r3
 8100698:	68fb      	ldr	r3, [r7, #12]
 810069a:	14db      	asrs	r3, r3, #19
 810069c:	b25b      	sxtb	r3, r3
 810069e:	f003 030f 	and.w	r3, r3, #15
 81006a2:	b25b      	sxtb	r3, r3
 81006a4:	4313      	orrs	r3, r2
 81006a6:	b259      	sxtb	r1, r3
 81006a8:	687b      	ldr	r3, [r7, #4]
 81006aa:	1c5a      	adds	r2, r3, #1
 81006ac:	607a      	str	r2, [r7, #4]
 81006ae:	b2ca      	uxtb	r2, r1
 81006b0:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 81006b2:	697b      	ldr	r3, [r7, #20]
 81006b4:	111b      	asrs	r3, r3, #4
 81006b6:	b2da      	uxtb	r2, r3
 81006b8:	687b      	ldr	r3, [r7, #4]
 81006ba:	1c59      	adds	r1, r3, #1
 81006bc:	6079      	str	r1, [r7, #4]
 81006be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 81006c2:	b2d2      	uxtb	r2, r2
 81006c4:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 81006c6:	edd7 7a00 	vldr	s15, [r7]
 81006ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 81006ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81006d2:	d508      	bpl.n	81006e6 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xca>
    {
      *(outbuffer - 1) |= 0x80;
 81006d4:	687b      	ldr	r3, [r7, #4]
 81006d6:	3b01      	subs	r3, #1
 81006d8:	781a      	ldrb	r2, [r3, #0]
 81006da:	687b      	ldr	r3, [r7, #4]
 81006dc:	3b01      	subs	r3, #1
 81006de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 81006e2:	b2d2      	uxtb	r2, r2
 81006e4:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 81006e6:	2308      	movs	r3, #8
  }
 81006e8:	4618      	mov	r0, r3
 81006ea:	371c      	adds	r7, #28
 81006ec:	46bd      	mov	sp, r7
 81006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006f2:	4770      	bx	lr

081006f4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 81006f4:	b480      	push	{r7}
 81006f6:	b085      	sub	sp, #20
 81006f8:	af00      	add	r7, sp, #0
 81006fa:	6078      	str	r0, [r7, #4]
 81006fc:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 81006fe:	683b      	ldr	r3, [r7, #0]
 8100700:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 8100702:	687b      	ldr	r3, [r7, #4]
 8100704:	3303      	adds	r3, #3
 8100706:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 8100708:	687b      	ldr	r3, [r7, #4]
 810070a:	1c5a      	adds	r2, r3, #1
 810070c:	607a      	str	r2, [r7, #4]
 810070e:	781b      	ldrb	r3, [r3, #0]
 8100710:	095b      	lsrs	r3, r3, #5
 8100712:	b2db      	uxtb	r3, r3
 8100714:	f003 0207 	and.w	r2, r3, #7
 8100718:	68fb      	ldr	r3, [r7, #12]
 810071a:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 810071c:	687b      	ldr	r3, [r7, #4]
 810071e:	1c5a      	adds	r2, r3, #1
 8100720:	607a      	str	r2, [r7, #4]
 8100722:	781b      	ldrb	r3, [r3, #0]
 8100724:	00da      	lsls	r2, r3, #3
 8100726:	68fb      	ldr	r3, [r7, #12]
 8100728:	681b      	ldr	r3, [r3, #0]
 810072a:	431a      	orrs	r2, r3
 810072c:	68fb      	ldr	r3, [r7, #12]
 810072e:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 8100730:	687b      	ldr	r3, [r7, #4]
 8100732:	1c5a      	adds	r2, r3, #1
 8100734:	607a      	str	r2, [r7, #4]
 8100736:	781b      	ldrb	r3, [r3, #0]
 8100738:	02da      	lsls	r2, r3, #11
 810073a:	68fb      	ldr	r3, [r7, #12]
 810073c:	681b      	ldr	r3, [r3, #0]
 810073e:	431a      	orrs	r2, r3
 8100740:	68fb      	ldr	r3, [r7, #12]
 8100742:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 8100744:	68fb      	ldr	r3, [r7, #12]
 8100746:	681a      	ldr	r2, [r3, #0]
 8100748:	687b      	ldr	r3, [r7, #4]
 810074a:	781b      	ldrb	r3, [r3, #0]
 810074c:	04db      	lsls	r3, r3, #19
 810074e:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8100752:	431a      	orrs	r2, r3
 8100754:	68fb      	ldr	r3, [r7, #12]
 8100756:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 8100758:	687b      	ldr	r3, [r7, #4]
 810075a:	1c5a      	adds	r2, r3, #1
 810075c:	607a      	str	r2, [r7, #4]
 810075e:	781b      	ldrb	r3, [r3, #0]
 8100760:	091b      	lsrs	r3, r3, #4
 8100762:	b2db      	uxtb	r3, r3
 8100764:	f003 030f 	and.w	r3, r3, #15
 8100768:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 810076a:	687b      	ldr	r3, [r7, #4]
 810076c:	781b      	ldrb	r3, [r3, #0]
 810076e:	011b      	lsls	r3, r3, #4
 8100770:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8100774:	68ba      	ldr	r2, [r7, #8]
 8100776:	4313      	orrs	r3, r2
 8100778:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 810077a:	68bb      	ldr	r3, [r7, #8]
 810077c:	2b00      	cmp	r3, #0
 810077e:	d008      	beq.n	8100792 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9e>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 8100780:	68fb      	ldr	r3, [r7, #12]
 8100782:	681a      	ldr	r2, [r3, #0]
 8100784:	68bb      	ldr	r3, [r7, #8]
 8100786:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 810078a:	05db      	lsls	r3, r3, #23
 810078c:	431a      	orrs	r2, r3
 810078e:	68fb      	ldr	r3, [r7, #12]
 8100790:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8100792:	687b      	ldr	r3, [r7, #4]
 8100794:	1c5a      	adds	r2, r3, #1
 8100796:	607a      	str	r2, [r7, #4]
 8100798:	781b      	ldrb	r3, [r3, #0]
 810079a:	061b      	lsls	r3, r3, #24
 810079c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 81007a0:	68fb      	ldr	r3, [r7, #12]
 81007a2:	681b      	ldr	r3, [r3, #0]
 81007a4:	431a      	orrs	r2, r3
 81007a6:	68fb      	ldr	r3, [r7, #12]
 81007a8:	601a      	str	r2, [r3, #0]

    return 8;
 81007aa:	2308      	movs	r3, #8
  }
 81007ac:	4618      	mov	r0, r3
 81007ae:	3714      	adds	r7, #20
 81007b0:	46bd      	mov	sp, r7
 81007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007b6:	4770      	bx	lr

081007b8 <_ZN3ros3MsgC1Ev>:
class Msg
 81007b8:	b480      	push	{r7}
 81007ba:	b083      	sub	sp, #12
 81007bc:	af00      	add	r7, sp, #0
 81007be:	6078      	str	r0, [r7, #4]
 81007c0:	4a04      	ldr	r2, [pc, #16]	; (81007d4 <_ZN3ros3MsgC1Ev+0x1c>)
 81007c2:	687b      	ldr	r3, [r7, #4]
 81007c4:	601a      	str	r2, [r3, #0]
 81007c6:	687b      	ldr	r3, [r7, #4]
 81007c8:	4618      	mov	r0, r3
 81007ca:	370c      	adds	r7, #12
 81007cc:	46bd      	mov	sp, r7
 81007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007d2:	4770      	bx	lr
 81007d4:	0810c214 	.word	0x0810c214

081007d8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 81007d8:	b580      	push	{r7, lr}
 81007da:	b082      	sub	sp, #8
 81007dc:	af00      	add	r7, sp, #0
 81007de:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 81007e0:	687b      	ldr	r3, [r7, #4]
 81007e2:	4618      	mov	r0, r3
 81007e4:	f7ff ffe8 	bl	81007b8 <_ZN3ros3MsgC1Ev>
 81007e8:	4a06      	ldr	r2, [pc, #24]	; (8100804 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 81007ea:	687b      	ldr	r3, [r7, #4]
 81007ec:	601a      	str	r2, [r3, #0]
 81007ee:	687b      	ldr	r3, [r7, #4]
 81007f0:	2200      	movs	r2, #0
 81007f2:	711a      	strb	r2, [r3, #4]
 81007f4:	687b      	ldr	r3, [r7, #4]
 81007f6:	4a04      	ldr	r2, [pc, #16]	; (8100808 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 81007f8:	609a      	str	r2, [r3, #8]
    {
    }
 81007fa:	687b      	ldr	r3, [r7, #4]
 81007fc:	4618      	mov	r0, r3
 81007fe:	3708      	adds	r7, #8
 8100800:	46bd      	mov	sp, r7
 8100802:	bd80      	pop	{r7, pc}
 8100804:	0810c1fc 	.word	0x0810c1fc
 8100808:	0810bb74 	.word	0x0810bb74

0810080c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 810080c:	b580      	push	{r7, lr}
 810080e:	b084      	sub	sp, #16
 8100810:	af00      	add	r7, sp, #0
 8100812:	6078      	str	r0, [r7, #4]
 8100814:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8100816:	2300      	movs	r3, #0
 8100818:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 810081a:	68fb      	ldr	r3, [r7, #12]
 810081c:	683a      	ldr	r2, [r7, #0]
 810081e:	4413      	add	r3, r2
 8100820:	687a      	ldr	r2, [r7, #4]
 8100822:	7912      	ldrb	r2, [r2, #4]
 8100824:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8100826:	68fb      	ldr	r3, [r7, #12]
 8100828:	3301      	adds	r3, #1
 810082a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 810082c:	687b      	ldr	r3, [r7, #4]
 810082e:	689b      	ldr	r3, [r3, #8]
 8100830:	4618      	mov	r0, r3
 8100832:	f7ff fd51 	bl	81002d8 <strlen>
 8100836:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8100838:	68fb      	ldr	r3, [r7, #12]
 810083a:	683a      	ldr	r2, [r7, #0]
 810083c:	4413      	add	r3, r2
 810083e:	68b9      	ldr	r1, [r7, #8]
 8100840:	4618      	mov	r0, r3
 8100842:	f002 fad9 	bl	8102df8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8100846:	68fb      	ldr	r3, [r7, #12]
 8100848:	3304      	adds	r3, #4
 810084a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 810084c:	68fb      	ldr	r3, [r7, #12]
 810084e:	683a      	ldr	r2, [r7, #0]
 8100850:	18d0      	adds	r0, r2, r3
 8100852:	687b      	ldr	r3, [r7, #4]
 8100854:	689b      	ldr	r3, [r3, #8]
 8100856:	68ba      	ldr	r2, [r7, #8]
 8100858:	4619      	mov	r1, r3
 810085a:	f00a ffe7 	bl	810b82c <memcpy>
      offset += length_msg;
 810085e:	68fa      	ldr	r2, [r7, #12]
 8100860:	68bb      	ldr	r3, [r7, #8]
 8100862:	4413      	add	r3, r2
 8100864:	60fb      	str	r3, [r7, #12]
      return offset;
 8100866:	68fb      	ldr	r3, [r7, #12]
    }
 8100868:	4618      	mov	r0, r3
 810086a:	3710      	adds	r7, #16
 810086c:	46bd      	mov	sp, r7
 810086e:	bd80      	pop	{r7, pc}

08100870 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8100870:	b580      	push	{r7, lr}
 8100872:	b086      	sub	sp, #24
 8100874:	af00      	add	r7, sp, #0
 8100876:	6078      	str	r0, [r7, #4]
 8100878:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 810087a:	2300      	movs	r3, #0
 810087c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 810087e:	693b      	ldr	r3, [r7, #16]
 8100880:	683a      	ldr	r2, [r7, #0]
 8100882:	4413      	add	r3, r2
 8100884:	781a      	ldrb	r2, [r3, #0]
 8100886:	687b      	ldr	r3, [r7, #4]
 8100888:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 810088a:	693b      	ldr	r3, [r7, #16]
 810088c:	3301      	adds	r3, #1
 810088e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8100890:	693b      	ldr	r3, [r7, #16]
 8100892:	683a      	ldr	r2, [r7, #0]
 8100894:	441a      	add	r2, r3
 8100896:	f107 030c 	add.w	r3, r7, #12
 810089a:	4611      	mov	r1, r2
 810089c:	4618      	mov	r0, r3
 810089e:	f002 fac9 	bl	8102e34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 81008a2:	693b      	ldr	r3, [r7, #16]
 81008a4:	3304      	adds	r3, #4
 81008a6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 81008a8:	693b      	ldr	r3, [r7, #16]
 81008aa:	617b      	str	r3, [r7, #20]
 81008ac:	693a      	ldr	r2, [r7, #16]
 81008ae:	68fb      	ldr	r3, [r7, #12]
 81008b0:	4413      	add	r3, r2
 81008b2:	697a      	ldr	r2, [r7, #20]
 81008b4:	429a      	cmp	r2, r3
 81008b6:	d20c      	bcs.n	81008d2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 81008b8:	683a      	ldr	r2, [r7, #0]
 81008ba:	697b      	ldr	r3, [r7, #20]
 81008bc:	441a      	add	r2, r3
 81008be:	697b      	ldr	r3, [r7, #20]
 81008c0:	3b01      	subs	r3, #1
 81008c2:	6839      	ldr	r1, [r7, #0]
 81008c4:	440b      	add	r3, r1
 81008c6:	7812      	ldrb	r2, [r2, #0]
 81008c8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 81008ca:	697b      	ldr	r3, [r7, #20]
 81008cc:	3301      	adds	r3, #1
 81008ce:	617b      	str	r3, [r7, #20]
 81008d0:	e7ec      	b.n	81008ac <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 81008d2:	693a      	ldr	r2, [r7, #16]
 81008d4:	68fb      	ldr	r3, [r7, #12]
 81008d6:	4413      	add	r3, r2
 81008d8:	3b01      	subs	r3, #1
 81008da:	683a      	ldr	r2, [r7, #0]
 81008dc:	4413      	add	r3, r2
 81008de:	2200      	movs	r2, #0
 81008e0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 81008e2:	693b      	ldr	r3, [r7, #16]
 81008e4:	3b01      	subs	r3, #1
 81008e6:	683a      	ldr	r2, [r7, #0]
 81008e8:	441a      	add	r2, r3
 81008ea:	687b      	ldr	r3, [r7, #4]
 81008ec:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 81008ee:	693a      	ldr	r2, [r7, #16]
 81008f0:	68fb      	ldr	r3, [r7, #12]
 81008f2:	4413      	add	r3, r2
 81008f4:	613b      	str	r3, [r7, #16]
     return offset;
 81008f6:	693b      	ldr	r3, [r7, #16]
    }
 81008f8:	4618      	mov	r0, r3
 81008fa:	3718      	adds	r7, #24
 81008fc:	46bd      	mov	sp, r7
 81008fe:	bd80      	pop	{r7, pc}

08100900 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8100900:	b480      	push	{r7}
 8100902:	b083      	sub	sp, #12
 8100904:	af00      	add	r7, sp, #0
 8100906:	6078      	str	r0, [r7, #4]
 8100908:	4b03      	ldr	r3, [pc, #12]	; (8100918 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 810090a:	4618      	mov	r0, r3
 810090c:	370c      	adds	r7, #12
 810090e:	46bd      	mov	sp, r7
 8100910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100914:	4770      	bx	lr
 8100916:	bf00      	nop
 8100918:	0810bb78 	.word	0x0810bb78

0810091c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 810091c:	b480      	push	{r7}
 810091e:	b083      	sub	sp, #12
 8100920:	af00      	add	r7, sp, #0
 8100922:	6078      	str	r0, [r7, #4]
 8100924:	4b03      	ldr	r3, [pc, #12]	; (8100934 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8100926:	4618      	mov	r0, r3
 8100928:	370c      	adds	r7, #12
 810092a:	46bd      	mov	sp, r7
 810092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100930:	4770      	bx	lr
 8100932:	bf00      	nop
 8100934:	0810bb8c 	.word	0x0810bb8c

08100938 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8100938:	b580      	push	{r7, lr}
 810093a:	b082      	sub	sp, #8
 810093c:	af00      	add	r7, sp, #0
 810093e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8100940:	687b      	ldr	r3, [r7, #4]
 8100942:	4618      	mov	r0, r3
 8100944:	f7ff ff38 	bl	81007b8 <_ZN3ros3MsgC1Ev>
 8100948:	4a0c      	ldr	r2, [pc, #48]	; (810097c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 810094a:	687b      	ldr	r3, [r7, #4]
 810094c:	601a      	str	r2, [r3, #0]
 810094e:	687b      	ldr	r3, [r7, #4]
 8100950:	2200      	movs	r2, #0
 8100952:	605a      	str	r2, [r3, #4]
 8100954:	687b      	ldr	r3, [r7, #4]
 8100956:	2200      	movs	r2, #0
 8100958:	60da      	str	r2, [r3, #12]
 810095a:	687b      	ldr	r3, [r7, #4]
 810095c:	2200      	movs	r2, #0
 810095e:	611a      	str	r2, [r3, #16]
 8100960:	687b      	ldr	r3, [r7, #4]
 8100962:	2200      	movs	r2, #0
 8100964:	619a      	str	r2, [r3, #24]
 8100966:	687b      	ldr	r3, [r7, #4]
 8100968:	2200      	movs	r2, #0
 810096a:	61da      	str	r2, [r3, #28]
 810096c:	687b      	ldr	r3, [r7, #4]
 810096e:	2200      	movs	r2, #0
 8100970:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8100972:	687b      	ldr	r3, [r7, #4]
 8100974:	4618      	mov	r0, r3
 8100976:	3708      	adds	r7, #8
 8100978:	46bd      	mov	sp, r7
 810097a:	bd80      	pop	{r7, pc}
 810097c:	0810c1e4 	.word	0x0810c1e4

08100980 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8100980:	b580      	push	{r7, lr}
 8100982:	b08a      	sub	sp, #40	; 0x28
 8100984:	af00      	add	r7, sp, #0
 8100986:	6078      	str	r0, [r7, #4]
 8100988:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 810098a:	2300      	movs	r3, #0
 810098c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 810098e:	687b      	ldr	r3, [r7, #4]
 8100990:	6859      	ldr	r1, [r3, #4]
 8100992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100994:	683a      	ldr	r2, [r7, #0]
 8100996:	4413      	add	r3, r2
 8100998:	b2ca      	uxtb	r2, r1
 810099a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 810099c:	687b      	ldr	r3, [r7, #4]
 810099e:	685b      	ldr	r3, [r3, #4]
 81009a0:	0a19      	lsrs	r1, r3, #8
 81009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81009a4:	3301      	adds	r3, #1
 81009a6:	683a      	ldr	r2, [r7, #0]
 81009a8:	4413      	add	r3, r2
 81009aa:	b2ca      	uxtb	r2, r1
 81009ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 81009ae:	687b      	ldr	r3, [r7, #4]
 81009b0:	685b      	ldr	r3, [r3, #4]
 81009b2:	0c19      	lsrs	r1, r3, #16
 81009b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81009b6:	3302      	adds	r3, #2
 81009b8:	683a      	ldr	r2, [r7, #0]
 81009ba:	4413      	add	r3, r2
 81009bc:	b2ca      	uxtb	r2, r1
 81009be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 81009c0:	687b      	ldr	r3, [r7, #4]
 81009c2:	685b      	ldr	r3, [r3, #4]
 81009c4:	0e19      	lsrs	r1, r3, #24
 81009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81009c8:	3303      	adds	r3, #3
 81009ca:	683a      	ldr	r2, [r7, #0]
 81009cc:	4413      	add	r3, r2
 81009ce:	b2ca      	uxtb	r2, r1
 81009d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 81009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81009d4:	3304      	adds	r3, #4
 81009d6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 81009d8:	2300      	movs	r3, #0
 81009da:	623b      	str	r3, [r7, #32]
 81009dc:	687b      	ldr	r3, [r7, #4]
 81009de:	685b      	ldr	r3, [r3, #4]
 81009e0:	6a3a      	ldr	r2, [r7, #32]
 81009e2:	429a      	cmp	r2, r3
 81009e4:	d22b      	bcs.n	8100a3e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 81009e6:	687b      	ldr	r3, [r7, #4]
 81009e8:	68da      	ldr	r2, [r3, #12]
 81009ea:	6a3b      	ldr	r3, [r7, #32]
 81009ec:	009b      	lsls	r3, r3, #2
 81009ee:	4413      	add	r3, r2
 81009f0:	681b      	ldr	r3, [r3, #0]
 81009f2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 81009f4:	6939      	ldr	r1, [r7, #16]
 81009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81009f8:	683a      	ldr	r2, [r7, #0]
 81009fa:	4413      	add	r3, r2
 81009fc:	b2ca      	uxtb	r2, r1
 81009fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8100a00:	693b      	ldr	r3, [r7, #16]
 8100a02:	0a19      	lsrs	r1, r3, #8
 8100a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100a06:	3301      	adds	r3, #1
 8100a08:	683a      	ldr	r2, [r7, #0]
 8100a0a:	4413      	add	r3, r2
 8100a0c:	b2ca      	uxtb	r2, r1
 8100a0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8100a10:	693b      	ldr	r3, [r7, #16]
 8100a12:	0c19      	lsrs	r1, r3, #16
 8100a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100a16:	3302      	adds	r3, #2
 8100a18:	683a      	ldr	r2, [r7, #0]
 8100a1a:	4413      	add	r3, r2
 8100a1c:	b2ca      	uxtb	r2, r1
 8100a1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8100a20:	693b      	ldr	r3, [r7, #16]
 8100a22:	0e19      	lsrs	r1, r3, #24
 8100a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100a26:	3303      	adds	r3, #3
 8100a28:	683a      	ldr	r2, [r7, #0]
 8100a2a:	4413      	add	r3, r2
 8100a2c:	b2ca      	uxtb	r2, r1
 8100a2e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8100a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100a32:	3304      	adds	r3, #4
 8100a34:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8100a36:	6a3b      	ldr	r3, [r7, #32]
 8100a38:	3301      	adds	r3, #1
 8100a3a:	623b      	str	r3, [r7, #32]
 8100a3c:	e7ce      	b.n	81009dc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8100a3e:	687b      	ldr	r3, [r7, #4]
 8100a40:	6919      	ldr	r1, [r3, #16]
 8100a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100a44:	683a      	ldr	r2, [r7, #0]
 8100a46:	4413      	add	r3, r2
 8100a48:	b2ca      	uxtb	r2, r1
 8100a4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8100a4c:	687b      	ldr	r3, [r7, #4]
 8100a4e:	691b      	ldr	r3, [r3, #16]
 8100a50:	0a19      	lsrs	r1, r3, #8
 8100a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100a54:	3301      	adds	r3, #1
 8100a56:	683a      	ldr	r2, [r7, #0]
 8100a58:	4413      	add	r3, r2
 8100a5a:	b2ca      	uxtb	r2, r1
 8100a5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8100a5e:	687b      	ldr	r3, [r7, #4]
 8100a60:	691b      	ldr	r3, [r3, #16]
 8100a62:	0c19      	lsrs	r1, r3, #16
 8100a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100a66:	3302      	adds	r3, #2
 8100a68:	683a      	ldr	r2, [r7, #0]
 8100a6a:	4413      	add	r3, r2
 8100a6c:	b2ca      	uxtb	r2, r1
 8100a6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8100a70:	687b      	ldr	r3, [r7, #4]
 8100a72:	691b      	ldr	r3, [r3, #16]
 8100a74:	0e19      	lsrs	r1, r3, #24
 8100a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100a78:	3303      	adds	r3, #3
 8100a7a:	683a      	ldr	r2, [r7, #0]
 8100a7c:	4413      	add	r3, r2
 8100a7e:	b2ca      	uxtb	r2, r1
 8100a80:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8100a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100a84:	3304      	adds	r3, #4
 8100a86:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8100a88:	2300      	movs	r3, #0
 8100a8a:	61fb      	str	r3, [r7, #28]
 8100a8c:	687b      	ldr	r3, [r7, #4]
 8100a8e:	691b      	ldr	r3, [r3, #16]
 8100a90:	69fa      	ldr	r2, [r7, #28]
 8100a92:	429a      	cmp	r2, r3
 8100a94:	d22b      	bcs.n	8100aee <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8100a96:	687b      	ldr	r3, [r7, #4]
 8100a98:	699a      	ldr	r2, [r3, #24]
 8100a9a:	69fb      	ldr	r3, [r7, #28]
 8100a9c:	009b      	lsls	r3, r3, #2
 8100a9e:	4413      	add	r3, r2
 8100aa0:	681b      	ldr	r3, [r3, #0]
 8100aa2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8100aa4:	68f9      	ldr	r1, [r7, #12]
 8100aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100aa8:	683a      	ldr	r2, [r7, #0]
 8100aaa:	4413      	add	r3, r2
 8100aac:	b2ca      	uxtb	r2, r1
 8100aae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8100ab0:	68fb      	ldr	r3, [r7, #12]
 8100ab2:	0a19      	lsrs	r1, r3, #8
 8100ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100ab6:	3301      	adds	r3, #1
 8100ab8:	683a      	ldr	r2, [r7, #0]
 8100aba:	4413      	add	r3, r2
 8100abc:	b2ca      	uxtb	r2, r1
 8100abe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8100ac0:	68fb      	ldr	r3, [r7, #12]
 8100ac2:	0c19      	lsrs	r1, r3, #16
 8100ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100ac6:	3302      	adds	r3, #2
 8100ac8:	683a      	ldr	r2, [r7, #0]
 8100aca:	4413      	add	r3, r2
 8100acc:	b2ca      	uxtb	r2, r1
 8100ace:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8100ad0:	68fb      	ldr	r3, [r7, #12]
 8100ad2:	0e19      	lsrs	r1, r3, #24
 8100ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100ad6:	3303      	adds	r3, #3
 8100ad8:	683a      	ldr	r2, [r7, #0]
 8100ada:	4413      	add	r3, r2
 8100adc:	b2ca      	uxtb	r2, r1
 8100ade:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8100ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100ae2:	3304      	adds	r3, #4
 8100ae4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8100ae6:	69fb      	ldr	r3, [r7, #28]
 8100ae8:	3301      	adds	r3, #1
 8100aea:	61fb      	str	r3, [r7, #28]
 8100aec:	e7ce      	b.n	8100a8c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8100aee:	687b      	ldr	r3, [r7, #4]
 8100af0:	69d9      	ldr	r1, [r3, #28]
 8100af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100af4:	683a      	ldr	r2, [r7, #0]
 8100af6:	4413      	add	r3, r2
 8100af8:	b2ca      	uxtb	r2, r1
 8100afa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8100afc:	687b      	ldr	r3, [r7, #4]
 8100afe:	69db      	ldr	r3, [r3, #28]
 8100b00:	0a19      	lsrs	r1, r3, #8
 8100b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100b04:	3301      	adds	r3, #1
 8100b06:	683a      	ldr	r2, [r7, #0]
 8100b08:	4413      	add	r3, r2
 8100b0a:	b2ca      	uxtb	r2, r1
 8100b0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8100b0e:	687b      	ldr	r3, [r7, #4]
 8100b10:	69db      	ldr	r3, [r3, #28]
 8100b12:	0c19      	lsrs	r1, r3, #16
 8100b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100b16:	3302      	adds	r3, #2
 8100b18:	683a      	ldr	r2, [r7, #0]
 8100b1a:	4413      	add	r3, r2
 8100b1c:	b2ca      	uxtb	r2, r1
 8100b1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8100b20:	687b      	ldr	r3, [r7, #4]
 8100b22:	69db      	ldr	r3, [r3, #28]
 8100b24:	0e19      	lsrs	r1, r3, #24
 8100b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100b28:	3303      	adds	r3, #3
 8100b2a:	683a      	ldr	r2, [r7, #0]
 8100b2c:	4413      	add	r3, r2
 8100b2e:	b2ca      	uxtb	r2, r1
 8100b30:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8100b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100b34:	3304      	adds	r3, #4
 8100b36:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8100b38:	2300      	movs	r3, #0
 8100b3a:	61bb      	str	r3, [r7, #24]
 8100b3c:	687b      	ldr	r3, [r7, #4]
 8100b3e:	69db      	ldr	r3, [r3, #28]
 8100b40:	69ba      	ldr	r2, [r7, #24]
 8100b42:	429a      	cmp	r2, r3
 8100b44:	d228      	bcs.n	8100b98 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8100b46:	687b      	ldr	r3, [r7, #4]
 8100b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8100b4a:	69bb      	ldr	r3, [r7, #24]
 8100b4c:	009b      	lsls	r3, r3, #2
 8100b4e:	4413      	add	r3, r2
 8100b50:	681b      	ldr	r3, [r3, #0]
 8100b52:	4618      	mov	r0, r3
 8100b54:	f7ff fbc0 	bl	81002d8 <strlen>
 8100b58:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8100b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100b5c:	683a      	ldr	r2, [r7, #0]
 8100b5e:	4413      	add	r3, r2
 8100b60:	6979      	ldr	r1, [r7, #20]
 8100b62:	4618      	mov	r0, r3
 8100b64:	f002 f948 	bl	8102df8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8100b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100b6a:	3304      	adds	r3, #4
 8100b6c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8100b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100b70:	683a      	ldr	r2, [r7, #0]
 8100b72:	18d0      	adds	r0, r2, r3
 8100b74:	687b      	ldr	r3, [r7, #4]
 8100b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8100b78:	69bb      	ldr	r3, [r7, #24]
 8100b7a:	009b      	lsls	r3, r3, #2
 8100b7c:	4413      	add	r3, r2
 8100b7e:	681b      	ldr	r3, [r3, #0]
 8100b80:	697a      	ldr	r2, [r7, #20]
 8100b82:	4619      	mov	r1, r3
 8100b84:	f00a fe52 	bl	810b82c <memcpy>
      offset += length_stringsi;
 8100b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8100b8a:	697b      	ldr	r3, [r7, #20]
 8100b8c:	4413      	add	r3, r2
 8100b8e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8100b90:	69bb      	ldr	r3, [r7, #24]
 8100b92:	3301      	adds	r3, #1
 8100b94:	61bb      	str	r3, [r7, #24]
 8100b96:	e7d1      	b.n	8100b3c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8100b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8100b9a:	4618      	mov	r0, r3
 8100b9c:	3728      	adds	r7, #40	; 0x28
 8100b9e:	46bd      	mov	sp, r7
 8100ba0:	bd80      	pop	{r7, pc}

08100ba2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8100ba2:	b580      	push	{r7, lr}
 8100ba4:	b08e      	sub	sp, #56	; 0x38
 8100ba6:	af00      	add	r7, sp, #0
 8100ba8:	6078      	str	r0, [r7, #4]
 8100baa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8100bac:	2300      	movs	r3, #0
 8100bae:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8100bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100bb2:	683a      	ldr	r2, [r7, #0]
 8100bb4:	4413      	add	r3, r2
 8100bb6:	781b      	ldrb	r3, [r3, #0]
 8100bb8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8100bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100bbc:	3301      	adds	r3, #1
 8100bbe:	683a      	ldr	r2, [r7, #0]
 8100bc0:	4413      	add	r3, r2
 8100bc2:	781b      	ldrb	r3, [r3, #0]
 8100bc4:	021b      	lsls	r3, r3, #8
 8100bc6:	6a3a      	ldr	r2, [r7, #32]
 8100bc8:	4313      	orrs	r3, r2
 8100bca:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8100bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100bce:	3302      	adds	r3, #2
 8100bd0:	683a      	ldr	r2, [r7, #0]
 8100bd2:	4413      	add	r3, r2
 8100bd4:	781b      	ldrb	r3, [r3, #0]
 8100bd6:	041b      	lsls	r3, r3, #16
 8100bd8:	6a3a      	ldr	r2, [r7, #32]
 8100bda:	4313      	orrs	r3, r2
 8100bdc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8100bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100be0:	3303      	adds	r3, #3
 8100be2:	683a      	ldr	r2, [r7, #0]
 8100be4:	4413      	add	r3, r2
 8100be6:	781b      	ldrb	r3, [r3, #0]
 8100be8:	061b      	lsls	r3, r3, #24
 8100bea:	6a3a      	ldr	r2, [r7, #32]
 8100bec:	4313      	orrs	r3, r2
 8100bee:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8100bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100bf2:	3304      	adds	r3, #4
 8100bf4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8100bf6:	687b      	ldr	r3, [r7, #4]
 8100bf8:	685b      	ldr	r3, [r3, #4]
 8100bfa:	6a3a      	ldr	r2, [r7, #32]
 8100bfc:	429a      	cmp	r2, r3
 8100bfe:	d90a      	bls.n	8100c16 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8100c00:	687b      	ldr	r3, [r7, #4]
 8100c02:	68da      	ldr	r2, [r3, #12]
 8100c04:	6a3b      	ldr	r3, [r7, #32]
 8100c06:	009b      	lsls	r3, r3, #2
 8100c08:	4619      	mov	r1, r3
 8100c0a:	4610      	mov	r0, r2
 8100c0c:	f00a fe24 	bl	810b858 <realloc>
 8100c10:	4602      	mov	r2, r0
 8100c12:	687b      	ldr	r3, [r7, #4]
 8100c14:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8100c16:	687b      	ldr	r3, [r7, #4]
 8100c18:	6a3a      	ldr	r2, [r7, #32]
 8100c1a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8100c1c:	2300      	movs	r3, #0
 8100c1e:	633b      	str	r3, [r7, #48]	; 0x30
 8100c20:	687b      	ldr	r3, [r7, #4]
 8100c22:	685b      	ldr	r3, [r3, #4]
 8100c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8100c26:	429a      	cmp	r2, r3
 8100c28:	d236      	bcs.n	8100c98 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8100c2a:	2300      	movs	r3, #0
 8100c2c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8100c2e:	697b      	ldr	r3, [r7, #20]
 8100c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8100c32:	6839      	ldr	r1, [r7, #0]
 8100c34:	440a      	add	r2, r1
 8100c36:	7812      	ldrb	r2, [r2, #0]
 8100c38:	4313      	orrs	r3, r2
 8100c3a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8100c3c:	697a      	ldr	r2, [r7, #20]
 8100c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100c40:	3301      	adds	r3, #1
 8100c42:	6839      	ldr	r1, [r7, #0]
 8100c44:	440b      	add	r3, r1
 8100c46:	781b      	ldrb	r3, [r3, #0]
 8100c48:	021b      	lsls	r3, r3, #8
 8100c4a:	4313      	orrs	r3, r2
 8100c4c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8100c4e:	697a      	ldr	r2, [r7, #20]
 8100c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100c52:	3302      	adds	r3, #2
 8100c54:	6839      	ldr	r1, [r7, #0]
 8100c56:	440b      	add	r3, r1
 8100c58:	781b      	ldrb	r3, [r3, #0]
 8100c5a:	041b      	lsls	r3, r3, #16
 8100c5c:	4313      	orrs	r3, r2
 8100c5e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8100c60:	697a      	ldr	r2, [r7, #20]
 8100c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100c64:	3303      	adds	r3, #3
 8100c66:	6839      	ldr	r1, [r7, #0]
 8100c68:	440b      	add	r3, r1
 8100c6a:	781b      	ldrb	r3, [r3, #0]
 8100c6c:	061b      	lsls	r3, r3, #24
 8100c6e:	4313      	orrs	r3, r2
 8100c70:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8100c72:	697a      	ldr	r2, [r7, #20]
 8100c74:	687b      	ldr	r3, [r7, #4]
 8100c76:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8100c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100c7a:	3304      	adds	r3, #4
 8100c7c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8100c7e:	687b      	ldr	r3, [r7, #4]
 8100c80:	68da      	ldr	r2, [r3, #12]
 8100c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100c84:	009b      	lsls	r3, r3, #2
 8100c86:	4413      	add	r3, r2
 8100c88:	687a      	ldr	r2, [r7, #4]
 8100c8a:	3208      	adds	r2, #8
 8100c8c:	6812      	ldr	r2, [r2, #0]
 8100c8e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8100c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100c92:	3301      	adds	r3, #1
 8100c94:	633b      	str	r3, [r7, #48]	; 0x30
 8100c96:	e7c3      	b.n	8100c20 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8100c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100c9a:	683a      	ldr	r2, [r7, #0]
 8100c9c:	4413      	add	r3, r2
 8100c9e:	781b      	ldrb	r3, [r3, #0]
 8100ca0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8100ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100ca4:	3301      	adds	r3, #1
 8100ca6:	683a      	ldr	r2, [r7, #0]
 8100ca8:	4413      	add	r3, r2
 8100caa:	781b      	ldrb	r3, [r3, #0]
 8100cac:	021b      	lsls	r3, r3, #8
 8100cae:	69fa      	ldr	r2, [r7, #28]
 8100cb0:	4313      	orrs	r3, r2
 8100cb2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8100cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100cb6:	3302      	adds	r3, #2
 8100cb8:	683a      	ldr	r2, [r7, #0]
 8100cba:	4413      	add	r3, r2
 8100cbc:	781b      	ldrb	r3, [r3, #0]
 8100cbe:	041b      	lsls	r3, r3, #16
 8100cc0:	69fa      	ldr	r2, [r7, #28]
 8100cc2:	4313      	orrs	r3, r2
 8100cc4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8100cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100cc8:	3303      	adds	r3, #3
 8100cca:	683a      	ldr	r2, [r7, #0]
 8100ccc:	4413      	add	r3, r2
 8100cce:	781b      	ldrb	r3, [r3, #0]
 8100cd0:	061b      	lsls	r3, r3, #24
 8100cd2:	69fa      	ldr	r2, [r7, #28]
 8100cd4:	4313      	orrs	r3, r2
 8100cd6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8100cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100cda:	3304      	adds	r3, #4
 8100cdc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8100cde:	687b      	ldr	r3, [r7, #4]
 8100ce0:	691b      	ldr	r3, [r3, #16]
 8100ce2:	69fa      	ldr	r2, [r7, #28]
 8100ce4:	429a      	cmp	r2, r3
 8100ce6:	d90a      	bls.n	8100cfe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8100ce8:	687b      	ldr	r3, [r7, #4]
 8100cea:	699a      	ldr	r2, [r3, #24]
 8100cec:	69fb      	ldr	r3, [r7, #28]
 8100cee:	009b      	lsls	r3, r3, #2
 8100cf0:	4619      	mov	r1, r3
 8100cf2:	4610      	mov	r0, r2
 8100cf4:	f00a fdb0 	bl	810b858 <realloc>
 8100cf8:	4602      	mov	r2, r0
 8100cfa:	687b      	ldr	r3, [r7, #4]
 8100cfc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8100cfe:	687b      	ldr	r3, [r7, #4]
 8100d00:	69fa      	ldr	r2, [r7, #28]
 8100d02:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8100d04:	2300      	movs	r3, #0
 8100d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8100d08:	687b      	ldr	r3, [r7, #4]
 8100d0a:	691b      	ldr	r3, [r3, #16]
 8100d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8100d0e:	429a      	cmp	r2, r3
 8100d10:	d236      	bcs.n	8100d80 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8100d12:	2300      	movs	r3, #0
 8100d14:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8100d16:	693b      	ldr	r3, [r7, #16]
 8100d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8100d1a:	6839      	ldr	r1, [r7, #0]
 8100d1c:	440a      	add	r2, r1
 8100d1e:	7812      	ldrb	r2, [r2, #0]
 8100d20:	4313      	orrs	r3, r2
 8100d22:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8100d24:	693a      	ldr	r2, [r7, #16]
 8100d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100d28:	3301      	adds	r3, #1
 8100d2a:	6839      	ldr	r1, [r7, #0]
 8100d2c:	440b      	add	r3, r1
 8100d2e:	781b      	ldrb	r3, [r3, #0]
 8100d30:	021b      	lsls	r3, r3, #8
 8100d32:	4313      	orrs	r3, r2
 8100d34:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8100d36:	693a      	ldr	r2, [r7, #16]
 8100d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100d3a:	3302      	adds	r3, #2
 8100d3c:	6839      	ldr	r1, [r7, #0]
 8100d3e:	440b      	add	r3, r1
 8100d40:	781b      	ldrb	r3, [r3, #0]
 8100d42:	041b      	lsls	r3, r3, #16
 8100d44:	4313      	orrs	r3, r2
 8100d46:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8100d48:	693a      	ldr	r2, [r7, #16]
 8100d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100d4c:	3303      	adds	r3, #3
 8100d4e:	6839      	ldr	r1, [r7, #0]
 8100d50:	440b      	add	r3, r1
 8100d52:	781b      	ldrb	r3, [r3, #0]
 8100d54:	061b      	lsls	r3, r3, #24
 8100d56:	4313      	orrs	r3, r2
 8100d58:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8100d5a:	693a      	ldr	r2, [r7, #16]
 8100d5c:	687b      	ldr	r3, [r7, #4]
 8100d5e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8100d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100d62:	3304      	adds	r3, #4
 8100d64:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8100d66:	687b      	ldr	r3, [r7, #4]
 8100d68:	699a      	ldr	r2, [r3, #24]
 8100d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8100d6c:	009b      	lsls	r3, r3, #2
 8100d6e:	4413      	add	r3, r2
 8100d70:	687a      	ldr	r2, [r7, #4]
 8100d72:	3214      	adds	r2, #20
 8100d74:	6812      	ldr	r2, [r2, #0]
 8100d76:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8100d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8100d7a:	3301      	adds	r3, #1
 8100d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8100d7e:	e7c3      	b.n	8100d08 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8100d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100d82:	683a      	ldr	r2, [r7, #0]
 8100d84:	4413      	add	r3, r2
 8100d86:	781b      	ldrb	r3, [r3, #0]
 8100d88:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8100d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100d8c:	3301      	adds	r3, #1
 8100d8e:	683a      	ldr	r2, [r7, #0]
 8100d90:	4413      	add	r3, r2
 8100d92:	781b      	ldrb	r3, [r3, #0]
 8100d94:	021b      	lsls	r3, r3, #8
 8100d96:	69ba      	ldr	r2, [r7, #24]
 8100d98:	4313      	orrs	r3, r2
 8100d9a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8100d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100d9e:	3302      	adds	r3, #2
 8100da0:	683a      	ldr	r2, [r7, #0]
 8100da2:	4413      	add	r3, r2
 8100da4:	781b      	ldrb	r3, [r3, #0]
 8100da6:	041b      	lsls	r3, r3, #16
 8100da8:	69ba      	ldr	r2, [r7, #24]
 8100daa:	4313      	orrs	r3, r2
 8100dac:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8100dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100db0:	3303      	adds	r3, #3
 8100db2:	683a      	ldr	r2, [r7, #0]
 8100db4:	4413      	add	r3, r2
 8100db6:	781b      	ldrb	r3, [r3, #0]
 8100db8:	061b      	lsls	r3, r3, #24
 8100dba:	69ba      	ldr	r2, [r7, #24]
 8100dbc:	4313      	orrs	r3, r2
 8100dbe:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8100dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100dc2:	3304      	adds	r3, #4
 8100dc4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8100dc6:	687b      	ldr	r3, [r7, #4]
 8100dc8:	69db      	ldr	r3, [r3, #28]
 8100dca:	69ba      	ldr	r2, [r7, #24]
 8100dcc:	429a      	cmp	r2, r3
 8100dce:	d90a      	bls.n	8100de6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8100dd0:	687b      	ldr	r3, [r7, #4]
 8100dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8100dd4:	69bb      	ldr	r3, [r7, #24]
 8100dd6:	009b      	lsls	r3, r3, #2
 8100dd8:	4619      	mov	r1, r3
 8100dda:	4610      	mov	r0, r2
 8100ddc:	f00a fd3c 	bl	810b858 <realloc>
 8100de0:	4602      	mov	r2, r0
 8100de2:	687b      	ldr	r3, [r7, #4]
 8100de4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8100de6:	687b      	ldr	r3, [r7, #4]
 8100de8:	69ba      	ldr	r2, [r7, #24]
 8100dea:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8100dec:	2300      	movs	r3, #0
 8100dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8100df0:	687b      	ldr	r3, [r7, #4]
 8100df2:	69db      	ldr	r3, [r3, #28]
 8100df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8100df6:	429a      	cmp	r2, r3
 8100df8:	d23f      	bcs.n	8100e7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8100dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100dfc:	683a      	ldr	r2, [r7, #0]
 8100dfe:	441a      	add	r2, r3
 8100e00:	f107 030c 	add.w	r3, r7, #12
 8100e04:	4611      	mov	r1, r2
 8100e06:	4618      	mov	r0, r3
 8100e08:	f002 f814 	bl	8102e34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8100e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100e0e:	3304      	adds	r3, #4
 8100e10:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8100e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100e14:	627b      	str	r3, [r7, #36]	; 0x24
 8100e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8100e18:	68fb      	ldr	r3, [r7, #12]
 8100e1a:	4413      	add	r3, r2
 8100e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8100e1e:	429a      	cmp	r2, r3
 8100e20:	d20c      	bcs.n	8100e3c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8100e22:	683a      	ldr	r2, [r7, #0]
 8100e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100e26:	441a      	add	r2, r3
 8100e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100e2a:	3b01      	subs	r3, #1
 8100e2c:	6839      	ldr	r1, [r7, #0]
 8100e2e:	440b      	add	r3, r1
 8100e30:	7812      	ldrb	r2, [r2, #0]
 8100e32:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8100e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100e36:	3301      	adds	r3, #1
 8100e38:	627b      	str	r3, [r7, #36]	; 0x24
 8100e3a:	e7ec      	b.n	8100e16 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8100e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8100e3e:	68fb      	ldr	r3, [r7, #12]
 8100e40:	4413      	add	r3, r2
 8100e42:	3b01      	subs	r3, #1
 8100e44:	683a      	ldr	r2, [r7, #0]
 8100e46:	4413      	add	r3, r2
 8100e48:	2200      	movs	r2, #0
 8100e4a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8100e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100e4e:	3b01      	subs	r3, #1
 8100e50:	683a      	ldr	r2, [r7, #0]
 8100e52:	441a      	add	r2, r3
 8100e54:	687b      	ldr	r3, [r7, #4]
 8100e56:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8100e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8100e5a:	68fb      	ldr	r3, [r7, #12]
 8100e5c:	4413      	add	r3, r2
 8100e5e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8100e60:	687b      	ldr	r3, [r7, #4]
 8100e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8100e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8100e66:	009b      	lsls	r3, r3, #2
 8100e68:	4413      	add	r3, r2
 8100e6a:	687a      	ldr	r2, [r7, #4]
 8100e6c:	3220      	adds	r2, #32
 8100e6e:	6812      	ldr	r2, [r2, #0]
 8100e70:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8100e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8100e74:	3301      	adds	r3, #1
 8100e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8100e78:	e7ba      	b.n	8100df0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8100e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8100e7c:	4618      	mov	r0, r3
 8100e7e:	3738      	adds	r7, #56	; 0x38
 8100e80:	46bd      	mov	sp, r7
 8100e82:	bd80      	pop	{r7, pc}

08100e84 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8100e84:	b480      	push	{r7}
 8100e86:	b083      	sub	sp, #12
 8100e88:	af00      	add	r7, sp, #0
 8100e8a:	6078      	str	r0, [r7, #4]
 8100e8c:	4b03      	ldr	r3, [pc, #12]	; (8100e9c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8100e8e:	4618      	mov	r0, r3
 8100e90:	370c      	adds	r7, #12
 8100e92:	46bd      	mov	sp, r7
 8100e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e98:	4770      	bx	lr
 8100e9a:	bf00      	nop
 8100e9c:	0810c000 	.word	0x0810c000

08100ea0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8100ea0:	b480      	push	{r7}
 8100ea2:	b083      	sub	sp, #12
 8100ea4:	af00      	add	r7, sp, #0
 8100ea6:	6078      	str	r0, [r7, #4]
 8100ea8:	4b03      	ldr	r3, [pc, #12]	; (8100eb8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8100eaa:	4618      	mov	r0, r3
 8100eac:	370c      	adds	r7, #12
 8100eae:	46bd      	mov	sp, r7
 8100eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100eb4:	4770      	bx	lr
 8100eb6:	bf00      	nop
 8100eb8:	0810bbb0 	.word	0x0810bbb0

08100ebc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8100ebc:	b580      	push	{r7, lr}
 8100ebe:	b082      	sub	sp, #8
 8100ec0:	af00      	add	r7, sp, #0
 8100ec2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8100ec4:	687b      	ldr	r3, [r7, #4]
 8100ec6:	4618      	mov	r0, r3
 8100ec8:	f7ff fc76 	bl	81007b8 <_ZN3ros3MsgC1Ev>
 8100ecc:	4a0b      	ldr	r2, [pc, #44]	; (8100efc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8100ece:	687b      	ldr	r3, [r7, #4]
 8100ed0:	601a      	str	r2, [r3, #0]
 8100ed2:	687b      	ldr	r3, [r7, #4]
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	809a      	strh	r2, [r3, #4]
 8100ed8:	687b      	ldr	r3, [r7, #4]
 8100eda:	4a09      	ldr	r2, [pc, #36]	; (8100f00 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8100edc:	609a      	str	r2, [r3, #8]
 8100ede:	687b      	ldr	r3, [r7, #4]
 8100ee0:	4a07      	ldr	r2, [pc, #28]	; (8100f00 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8100ee2:	60da      	str	r2, [r3, #12]
 8100ee4:	687b      	ldr	r3, [r7, #4]
 8100ee6:	4a06      	ldr	r2, [pc, #24]	; (8100f00 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8100ee8:	611a      	str	r2, [r3, #16]
 8100eea:	687b      	ldr	r3, [r7, #4]
 8100eec:	2200      	movs	r2, #0
 8100eee:	615a      	str	r2, [r3, #20]
    {
    }
 8100ef0:	687b      	ldr	r3, [r7, #4]
 8100ef2:	4618      	mov	r0, r3
 8100ef4:	3708      	adds	r7, #8
 8100ef6:	46bd      	mov	sp, r7
 8100ef8:	bd80      	pop	{r7, pc}
 8100efa:	bf00      	nop
 8100efc:	0810c1cc 	.word	0x0810c1cc
 8100f00:	0810bb74 	.word	0x0810bb74

08100f04 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8100f04:	b580      	push	{r7, lr}
 8100f06:	b088      	sub	sp, #32
 8100f08:	af00      	add	r7, sp, #0
 8100f0a:	6078      	str	r0, [r7, #4]
 8100f0c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8100f0e:	2300      	movs	r3, #0
 8100f10:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8100f12:	687b      	ldr	r3, [r7, #4]
 8100f14:	8899      	ldrh	r1, [r3, #4]
 8100f16:	69fb      	ldr	r3, [r7, #28]
 8100f18:	683a      	ldr	r2, [r7, #0]
 8100f1a:	4413      	add	r3, r2
 8100f1c:	b2ca      	uxtb	r2, r1
 8100f1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8100f20:	687b      	ldr	r3, [r7, #4]
 8100f22:	889b      	ldrh	r3, [r3, #4]
 8100f24:	0a1b      	lsrs	r3, r3, #8
 8100f26:	b299      	uxth	r1, r3
 8100f28:	69fb      	ldr	r3, [r7, #28]
 8100f2a:	3301      	adds	r3, #1
 8100f2c:	683a      	ldr	r2, [r7, #0]
 8100f2e:	4413      	add	r3, r2
 8100f30:	b2ca      	uxtb	r2, r1
 8100f32:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8100f34:	69fb      	ldr	r3, [r7, #28]
 8100f36:	3302      	adds	r3, #2
 8100f38:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8100f3a:	687b      	ldr	r3, [r7, #4]
 8100f3c:	689b      	ldr	r3, [r3, #8]
 8100f3e:	4618      	mov	r0, r3
 8100f40:	f7ff f9ca 	bl	81002d8 <strlen>
 8100f44:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8100f46:	69fb      	ldr	r3, [r7, #28]
 8100f48:	683a      	ldr	r2, [r7, #0]
 8100f4a:	4413      	add	r3, r2
 8100f4c:	69b9      	ldr	r1, [r7, #24]
 8100f4e:	4618      	mov	r0, r3
 8100f50:	f001 ff52 	bl	8102df8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8100f54:	69fb      	ldr	r3, [r7, #28]
 8100f56:	3304      	adds	r3, #4
 8100f58:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8100f5a:	69fb      	ldr	r3, [r7, #28]
 8100f5c:	683a      	ldr	r2, [r7, #0]
 8100f5e:	18d0      	adds	r0, r2, r3
 8100f60:	687b      	ldr	r3, [r7, #4]
 8100f62:	689b      	ldr	r3, [r3, #8]
 8100f64:	69ba      	ldr	r2, [r7, #24]
 8100f66:	4619      	mov	r1, r3
 8100f68:	f00a fc60 	bl	810b82c <memcpy>
      offset += length_topic_name;
 8100f6c:	69fa      	ldr	r2, [r7, #28]
 8100f6e:	69bb      	ldr	r3, [r7, #24]
 8100f70:	4413      	add	r3, r2
 8100f72:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8100f74:	687b      	ldr	r3, [r7, #4]
 8100f76:	68db      	ldr	r3, [r3, #12]
 8100f78:	4618      	mov	r0, r3
 8100f7a:	f7ff f9ad 	bl	81002d8 <strlen>
 8100f7e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8100f80:	69fb      	ldr	r3, [r7, #28]
 8100f82:	683a      	ldr	r2, [r7, #0]
 8100f84:	4413      	add	r3, r2
 8100f86:	6979      	ldr	r1, [r7, #20]
 8100f88:	4618      	mov	r0, r3
 8100f8a:	f001 ff35 	bl	8102df8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8100f8e:	69fb      	ldr	r3, [r7, #28]
 8100f90:	3304      	adds	r3, #4
 8100f92:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8100f94:	69fb      	ldr	r3, [r7, #28]
 8100f96:	683a      	ldr	r2, [r7, #0]
 8100f98:	18d0      	adds	r0, r2, r3
 8100f9a:	687b      	ldr	r3, [r7, #4]
 8100f9c:	68db      	ldr	r3, [r3, #12]
 8100f9e:	697a      	ldr	r2, [r7, #20]
 8100fa0:	4619      	mov	r1, r3
 8100fa2:	f00a fc43 	bl	810b82c <memcpy>
      offset += length_message_type;
 8100fa6:	69fa      	ldr	r2, [r7, #28]
 8100fa8:	697b      	ldr	r3, [r7, #20]
 8100faa:	4413      	add	r3, r2
 8100fac:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8100fae:	687b      	ldr	r3, [r7, #4]
 8100fb0:	691b      	ldr	r3, [r3, #16]
 8100fb2:	4618      	mov	r0, r3
 8100fb4:	f7ff f990 	bl	81002d8 <strlen>
 8100fb8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8100fba:	69fb      	ldr	r3, [r7, #28]
 8100fbc:	683a      	ldr	r2, [r7, #0]
 8100fbe:	4413      	add	r3, r2
 8100fc0:	6939      	ldr	r1, [r7, #16]
 8100fc2:	4618      	mov	r0, r3
 8100fc4:	f001 ff18 	bl	8102df8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8100fc8:	69fb      	ldr	r3, [r7, #28]
 8100fca:	3304      	adds	r3, #4
 8100fcc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8100fce:	69fb      	ldr	r3, [r7, #28]
 8100fd0:	683a      	ldr	r2, [r7, #0]
 8100fd2:	18d0      	adds	r0, r2, r3
 8100fd4:	687b      	ldr	r3, [r7, #4]
 8100fd6:	691b      	ldr	r3, [r3, #16]
 8100fd8:	693a      	ldr	r2, [r7, #16]
 8100fda:	4619      	mov	r1, r3
 8100fdc:	f00a fc26 	bl	810b82c <memcpy>
      offset += length_md5sum;
 8100fe0:	69fa      	ldr	r2, [r7, #28]
 8100fe2:	693b      	ldr	r3, [r7, #16]
 8100fe4:	4413      	add	r3, r2
 8100fe6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8100fe8:	687b      	ldr	r3, [r7, #4]
 8100fea:	695b      	ldr	r3, [r3, #20]
 8100fec:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8100fee:	68f9      	ldr	r1, [r7, #12]
 8100ff0:	69fb      	ldr	r3, [r7, #28]
 8100ff2:	683a      	ldr	r2, [r7, #0]
 8100ff4:	4413      	add	r3, r2
 8100ff6:	b2ca      	uxtb	r2, r1
 8100ff8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8100ffa:	68fb      	ldr	r3, [r7, #12]
 8100ffc:	0a19      	lsrs	r1, r3, #8
 8100ffe:	69fb      	ldr	r3, [r7, #28]
 8101000:	3301      	adds	r3, #1
 8101002:	683a      	ldr	r2, [r7, #0]
 8101004:	4413      	add	r3, r2
 8101006:	b2ca      	uxtb	r2, r1
 8101008:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 810100a:	68fb      	ldr	r3, [r7, #12]
 810100c:	0c19      	lsrs	r1, r3, #16
 810100e:	69fb      	ldr	r3, [r7, #28]
 8101010:	3302      	adds	r3, #2
 8101012:	683a      	ldr	r2, [r7, #0]
 8101014:	4413      	add	r3, r2
 8101016:	b2ca      	uxtb	r2, r1
 8101018:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 810101a:	68fb      	ldr	r3, [r7, #12]
 810101c:	0e19      	lsrs	r1, r3, #24
 810101e:	69fb      	ldr	r3, [r7, #28]
 8101020:	3303      	adds	r3, #3
 8101022:	683a      	ldr	r2, [r7, #0]
 8101024:	4413      	add	r3, r2
 8101026:	b2ca      	uxtb	r2, r1
 8101028:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 810102a:	69fb      	ldr	r3, [r7, #28]
 810102c:	3304      	adds	r3, #4
 810102e:	61fb      	str	r3, [r7, #28]
      return offset;
 8101030:	69fb      	ldr	r3, [r7, #28]
    }
 8101032:	4618      	mov	r0, r3
 8101034:	3720      	adds	r7, #32
 8101036:	46bd      	mov	sp, r7
 8101038:	bd80      	pop	{r7, pc}

0810103a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 810103a:	b580      	push	{r7, lr}
 810103c:	b08a      	sub	sp, #40	; 0x28
 810103e:	af00      	add	r7, sp, #0
 8101040:	6078      	str	r0, [r7, #4]
 8101042:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8101044:	2300      	movs	r3, #0
 8101046:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8101048:	69bb      	ldr	r3, [r7, #24]
 810104a:	683a      	ldr	r2, [r7, #0]
 810104c:	4413      	add	r3, r2
 810104e:	781b      	ldrb	r3, [r3, #0]
 8101050:	b29a      	uxth	r2, r3
 8101052:	687b      	ldr	r3, [r7, #4]
 8101054:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8101056:	687b      	ldr	r3, [r7, #4]
 8101058:	889b      	ldrh	r3, [r3, #4]
 810105a:	b21a      	sxth	r2, r3
 810105c:	69bb      	ldr	r3, [r7, #24]
 810105e:	3301      	adds	r3, #1
 8101060:	6839      	ldr	r1, [r7, #0]
 8101062:	440b      	add	r3, r1
 8101064:	781b      	ldrb	r3, [r3, #0]
 8101066:	021b      	lsls	r3, r3, #8
 8101068:	b21b      	sxth	r3, r3
 810106a:	4313      	orrs	r3, r2
 810106c:	b21b      	sxth	r3, r3
 810106e:	b29a      	uxth	r2, r3
 8101070:	687b      	ldr	r3, [r7, #4]
 8101072:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8101074:	69bb      	ldr	r3, [r7, #24]
 8101076:	3302      	adds	r3, #2
 8101078:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 810107a:	69bb      	ldr	r3, [r7, #24]
 810107c:	683a      	ldr	r2, [r7, #0]
 810107e:	441a      	add	r2, r3
 8101080:	f107 0314 	add.w	r3, r7, #20
 8101084:	4611      	mov	r1, r2
 8101086:	4618      	mov	r0, r3
 8101088:	f001 fed4 	bl	8102e34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 810108c:	69bb      	ldr	r3, [r7, #24]
 810108e:	3304      	adds	r3, #4
 8101090:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8101092:	69bb      	ldr	r3, [r7, #24]
 8101094:	627b      	str	r3, [r7, #36]	; 0x24
 8101096:	69ba      	ldr	r2, [r7, #24]
 8101098:	697b      	ldr	r3, [r7, #20]
 810109a:	4413      	add	r3, r2
 810109c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810109e:	429a      	cmp	r2, r3
 81010a0:	d20c      	bcs.n	81010bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 81010a2:	683a      	ldr	r2, [r7, #0]
 81010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81010a6:	441a      	add	r2, r3
 81010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81010aa:	3b01      	subs	r3, #1
 81010ac:	6839      	ldr	r1, [r7, #0]
 81010ae:	440b      	add	r3, r1
 81010b0:	7812      	ldrb	r2, [r2, #0]
 81010b2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 81010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81010b6:	3301      	adds	r3, #1
 81010b8:	627b      	str	r3, [r7, #36]	; 0x24
 81010ba:	e7ec      	b.n	8101096 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 81010bc:	69ba      	ldr	r2, [r7, #24]
 81010be:	697b      	ldr	r3, [r7, #20]
 81010c0:	4413      	add	r3, r2
 81010c2:	3b01      	subs	r3, #1
 81010c4:	683a      	ldr	r2, [r7, #0]
 81010c6:	4413      	add	r3, r2
 81010c8:	2200      	movs	r2, #0
 81010ca:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 81010cc:	69bb      	ldr	r3, [r7, #24]
 81010ce:	3b01      	subs	r3, #1
 81010d0:	683a      	ldr	r2, [r7, #0]
 81010d2:	441a      	add	r2, r3
 81010d4:	687b      	ldr	r3, [r7, #4]
 81010d6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 81010d8:	69ba      	ldr	r2, [r7, #24]
 81010da:	697b      	ldr	r3, [r7, #20]
 81010dc:	4413      	add	r3, r2
 81010de:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 81010e0:	69bb      	ldr	r3, [r7, #24]
 81010e2:	683a      	ldr	r2, [r7, #0]
 81010e4:	441a      	add	r2, r3
 81010e6:	f107 0310 	add.w	r3, r7, #16
 81010ea:	4611      	mov	r1, r2
 81010ec:	4618      	mov	r0, r3
 81010ee:	f001 fea1 	bl	8102e34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 81010f2:	69bb      	ldr	r3, [r7, #24]
 81010f4:	3304      	adds	r3, #4
 81010f6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 81010f8:	69bb      	ldr	r3, [r7, #24]
 81010fa:	623b      	str	r3, [r7, #32]
 81010fc:	69ba      	ldr	r2, [r7, #24]
 81010fe:	693b      	ldr	r3, [r7, #16]
 8101100:	4413      	add	r3, r2
 8101102:	6a3a      	ldr	r2, [r7, #32]
 8101104:	429a      	cmp	r2, r3
 8101106:	d20c      	bcs.n	8101122 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8101108:	683a      	ldr	r2, [r7, #0]
 810110a:	6a3b      	ldr	r3, [r7, #32]
 810110c:	441a      	add	r2, r3
 810110e:	6a3b      	ldr	r3, [r7, #32]
 8101110:	3b01      	subs	r3, #1
 8101112:	6839      	ldr	r1, [r7, #0]
 8101114:	440b      	add	r3, r1
 8101116:	7812      	ldrb	r2, [r2, #0]
 8101118:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 810111a:	6a3b      	ldr	r3, [r7, #32]
 810111c:	3301      	adds	r3, #1
 810111e:	623b      	str	r3, [r7, #32]
 8101120:	e7ec      	b.n	81010fc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8101122:	69ba      	ldr	r2, [r7, #24]
 8101124:	693b      	ldr	r3, [r7, #16]
 8101126:	4413      	add	r3, r2
 8101128:	3b01      	subs	r3, #1
 810112a:	683a      	ldr	r2, [r7, #0]
 810112c:	4413      	add	r3, r2
 810112e:	2200      	movs	r2, #0
 8101130:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8101132:	69bb      	ldr	r3, [r7, #24]
 8101134:	3b01      	subs	r3, #1
 8101136:	683a      	ldr	r2, [r7, #0]
 8101138:	441a      	add	r2, r3
 810113a:	687b      	ldr	r3, [r7, #4]
 810113c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 810113e:	69ba      	ldr	r2, [r7, #24]
 8101140:	693b      	ldr	r3, [r7, #16]
 8101142:	4413      	add	r3, r2
 8101144:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8101146:	69bb      	ldr	r3, [r7, #24]
 8101148:	683a      	ldr	r2, [r7, #0]
 810114a:	441a      	add	r2, r3
 810114c:	f107 030c 	add.w	r3, r7, #12
 8101150:	4611      	mov	r1, r2
 8101152:	4618      	mov	r0, r3
 8101154:	f001 fe6e 	bl	8102e34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8101158:	69bb      	ldr	r3, [r7, #24]
 810115a:	3304      	adds	r3, #4
 810115c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 810115e:	69bb      	ldr	r3, [r7, #24]
 8101160:	61fb      	str	r3, [r7, #28]
 8101162:	69ba      	ldr	r2, [r7, #24]
 8101164:	68fb      	ldr	r3, [r7, #12]
 8101166:	4413      	add	r3, r2
 8101168:	69fa      	ldr	r2, [r7, #28]
 810116a:	429a      	cmp	r2, r3
 810116c:	d20c      	bcs.n	8101188 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 810116e:	683a      	ldr	r2, [r7, #0]
 8101170:	69fb      	ldr	r3, [r7, #28]
 8101172:	441a      	add	r2, r3
 8101174:	69fb      	ldr	r3, [r7, #28]
 8101176:	3b01      	subs	r3, #1
 8101178:	6839      	ldr	r1, [r7, #0]
 810117a:	440b      	add	r3, r1
 810117c:	7812      	ldrb	r2, [r2, #0]
 810117e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8101180:	69fb      	ldr	r3, [r7, #28]
 8101182:	3301      	adds	r3, #1
 8101184:	61fb      	str	r3, [r7, #28]
 8101186:	e7ec      	b.n	8101162 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8101188:	69ba      	ldr	r2, [r7, #24]
 810118a:	68fb      	ldr	r3, [r7, #12]
 810118c:	4413      	add	r3, r2
 810118e:	3b01      	subs	r3, #1
 8101190:	683a      	ldr	r2, [r7, #0]
 8101192:	4413      	add	r3, r2
 8101194:	2200      	movs	r2, #0
 8101196:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8101198:	69bb      	ldr	r3, [r7, #24]
 810119a:	3b01      	subs	r3, #1
 810119c:	683a      	ldr	r2, [r7, #0]
 810119e:	441a      	add	r2, r3
 81011a0:	687b      	ldr	r3, [r7, #4]
 81011a2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 81011a4:	69ba      	ldr	r2, [r7, #24]
 81011a6:	68fb      	ldr	r3, [r7, #12]
 81011a8:	4413      	add	r3, r2
 81011aa:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 81011ac:	2300      	movs	r3, #0
 81011ae:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 81011b0:	68bb      	ldr	r3, [r7, #8]
 81011b2:	69ba      	ldr	r2, [r7, #24]
 81011b4:	6839      	ldr	r1, [r7, #0]
 81011b6:	440a      	add	r2, r1
 81011b8:	7812      	ldrb	r2, [r2, #0]
 81011ba:	4313      	orrs	r3, r2
 81011bc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 81011be:	68ba      	ldr	r2, [r7, #8]
 81011c0:	69bb      	ldr	r3, [r7, #24]
 81011c2:	3301      	adds	r3, #1
 81011c4:	6839      	ldr	r1, [r7, #0]
 81011c6:	440b      	add	r3, r1
 81011c8:	781b      	ldrb	r3, [r3, #0]
 81011ca:	021b      	lsls	r3, r3, #8
 81011cc:	4313      	orrs	r3, r2
 81011ce:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 81011d0:	68ba      	ldr	r2, [r7, #8]
 81011d2:	69bb      	ldr	r3, [r7, #24]
 81011d4:	3302      	adds	r3, #2
 81011d6:	6839      	ldr	r1, [r7, #0]
 81011d8:	440b      	add	r3, r1
 81011da:	781b      	ldrb	r3, [r3, #0]
 81011dc:	041b      	lsls	r3, r3, #16
 81011de:	4313      	orrs	r3, r2
 81011e0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 81011e2:	68ba      	ldr	r2, [r7, #8]
 81011e4:	69bb      	ldr	r3, [r7, #24]
 81011e6:	3303      	adds	r3, #3
 81011e8:	6839      	ldr	r1, [r7, #0]
 81011ea:	440b      	add	r3, r1
 81011ec:	781b      	ldrb	r3, [r3, #0]
 81011ee:	061b      	lsls	r3, r3, #24
 81011f0:	4313      	orrs	r3, r2
 81011f2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 81011f4:	68ba      	ldr	r2, [r7, #8]
 81011f6:	687b      	ldr	r3, [r7, #4]
 81011f8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 81011fa:	69bb      	ldr	r3, [r7, #24]
 81011fc:	3304      	adds	r3, #4
 81011fe:	61bb      	str	r3, [r7, #24]
     return offset;
 8101200:	69bb      	ldr	r3, [r7, #24]
    }
 8101202:	4618      	mov	r0, r3
 8101204:	3728      	adds	r7, #40	; 0x28
 8101206:	46bd      	mov	sp, r7
 8101208:	bd80      	pop	{r7, pc}
	...

0810120c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 810120c:	b480      	push	{r7}
 810120e:	b083      	sub	sp, #12
 8101210:	af00      	add	r7, sp, #0
 8101212:	6078      	str	r0, [r7, #4]
 8101214:	4b03      	ldr	r3, [pc, #12]	; (8101224 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8101216:	4618      	mov	r0, r3
 8101218:	370c      	adds	r7, #12
 810121a:	46bd      	mov	sp, r7
 810121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101220:	4770      	bx	lr
 8101222:	bf00      	nop
 8101224:	0810bbd4 	.word	0x0810bbd4

08101228 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8101228:	b480      	push	{r7}
 810122a:	b083      	sub	sp, #12
 810122c:	af00      	add	r7, sp, #0
 810122e:	6078      	str	r0, [r7, #4]
 8101230:	4b03      	ldr	r3, [pc, #12]	; (8101240 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8101232:	4618      	mov	r0, r3
 8101234:	370c      	adds	r7, #12
 8101236:	46bd      	mov	sp, r7
 8101238:	f85d 7b04 	ldr.w	r7, [sp], #4
 810123c:	4770      	bx	lr
 810123e:	bf00      	nop
 8101240:	0810bbf0 	.word	0x0810bbf0

08101244 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8101244:	b480      	push	{r7}
 8101246:	b083      	sub	sp, #12
 8101248:	af00      	add	r7, sp, #0
 810124a:	6078      	str	r0, [r7, #4]
 810124c:	687b      	ldr	r3, [r7, #4]
 810124e:	2200      	movs	r2, #0
 8101250:	601a      	str	r2, [r3, #0]
 8101252:	687b      	ldr	r3, [r7, #4]
 8101254:	2200      	movs	r2, #0
 8101256:	605a      	str	r2, [r3, #4]
 8101258:	687b      	ldr	r3, [r7, #4]
 810125a:	4618      	mov	r0, r3
 810125c:	370c      	adds	r7, #12
 810125e:	46bd      	mov	sp, r7
 8101260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101264:	4770      	bx	lr
	...

08101268 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8101268:	b580      	push	{r7, lr}
 810126a:	b082      	sub	sp, #8
 810126c:	af00      	add	r7, sp, #0
 810126e:	6078      	str	r0, [r7, #4]
      data()
 8101270:	687b      	ldr	r3, [r7, #4]
 8101272:	4618      	mov	r0, r3
 8101274:	f7ff faa0 	bl	81007b8 <_ZN3ros3MsgC1Ev>
 8101278:	4a06      	ldr	r2, [pc, #24]	; (8101294 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 810127a:	687b      	ldr	r3, [r7, #4]
 810127c:	601a      	str	r2, [r3, #0]
 810127e:	687b      	ldr	r3, [r7, #4]
 8101280:	3304      	adds	r3, #4
 8101282:	4618      	mov	r0, r3
 8101284:	f7ff ffde 	bl	8101244 <_ZN3ros4TimeC1Ev>
    {
    }
 8101288:	687b      	ldr	r3, [r7, #4]
 810128a:	4618      	mov	r0, r3
 810128c:	3708      	adds	r7, #8
 810128e:	46bd      	mov	sp, r7
 8101290:	bd80      	pop	{r7, pc}
 8101292:	bf00      	nop
 8101294:	0810c1b4 	.word	0x0810c1b4

08101298 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8101298:	b480      	push	{r7}
 810129a:	b085      	sub	sp, #20
 810129c:	af00      	add	r7, sp, #0
 810129e:	6078      	str	r0, [r7, #4]
 81012a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 81012a2:	2300      	movs	r3, #0
 81012a4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 81012a6:	687b      	ldr	r3, [r7, #4]
 81012a8:	6859      	ldr	r1, [r3, #4]
 81012aa:	68fb      	ldr	r3, [r7, #12]
 81012ac:	683a      	ldr	r2, [r7, #0]
 81012ae:	4413      	add	r3, r2
 81012b0:	b2ca      	uxtb	r2, r1
 81012b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 81012b4:	687b      	ldr	r3, [r7, #4]
 81012b6:	685b      	ldr	r3, [r3, #4]
 81012b8:	0a19      	lsrs	r1, r3, #8
 81012ba:	68fb      	ldr	r3, [r7, #12]
 81012bc:	3301      	adds	r3, #1
 81012be:	683a      	ldr	r2, [r7, #0]
 81012c0:	4413      	add	r3, r2
 81012c2:	b2ca      	uxtb	r2, r1
 81012c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 81012c6:	687b      	ldr	r3, [r7, #4]
 81012c8:	685b      	ldr	r3, [r3, #4]
 81012ca:	0c19      	lsrs	r1, r3, #16
 81012cc:	68fb      	ldr	r3, [r7, #12]
 81012ce:	3302      	adds	r3, #2
 81012d0:	683a      	ldr	r2, [r7, #0]
 81012d2:	4413      	add	r3, r2
 81012d4:	b2ca      	uxtb	r2, r1
 81012d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 81012d8:	687b      	ldr	r3, [r7, #4]
 81012da:	685b      	ldr	r3, [r3, #4]
 81012dc:	0e19      	lsrs	r1, r3, #24
 81012de:	68fb      	ldr	r3, [r7, #12]
 81012e0:	3303      	adds	r3, #3
 81012e2:	683a      	ldr	r2, [r7, #0]
 81012e4:	4413      	add	r3, r2
 81012e6:	b2ca      	uxtb	r2, r1
 81012e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 81012ea:	68fb      	ldr	r3, [r7, #12]
 81012ec:	3304      	adds	r3, #4
 81012ee:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 81012f0:	687b      	ldr	r3, [r7, #4]
 81012f2:	6899      	ldr	r1, [r3, #8]
 81012f4:	68fb      	ldr	r3, [r7, #12]
 81012f6:	683a      	ldr	r2, [r7, #0]
 81012f8:	4413      	add	r3, r2
 81012fa:	b2ca      	uxtb	r2, r1
 81012fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 81012fe:	687b      	ldr	r3, [r7, #4]
 8101300:	689b      	ldr	r3, [r3, #8]
 8101302:	0a19      	lsrs	r1, r3, #8
 8101304:	68fb      	ldr	r3, [r7, #12]
 8101306:	3301      	adds	r3, #1
 8101308:	683a      	ldr	r2, [r7, #0]
 810130a:	4413      	add	r3, r2
 810130c:	b2ca      	uxtb	r2, r1
 810130e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8101310:	687b      	ldr	r3, [r7, #4]
 8101312:	689b      	ldr	r3, [r3, #8]
 8101314:	0c19      	lsrs	r1, r3, #16
 8101316:	68fb      	ldr	r3, [r7, #12]
 8101318:	3302      	adds	r3, #2
 810131a:	683a      	ldr	r2, [r7, #0]
 810131c:	4413      	add	r3, r2
 810131e:	b2ca      	uxtb	r2, r1
 8101320:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8101322:	687b      	ldr	r3, [r7, #4]
 8101324:	689b      	ldr	r3, [r3, #8]
 8101326:	0e19      	lsrs	r1, r3, #24
 8101328:	68fb      	ldr	r3, [r7, #12]
 810132a:	3303      	adds	r3, #3
 810132c:	683a      	ldr	r2, [r7, #0]
 810132e:	4413      	add	r3, r2
 8101330:	b2ca      	uxtb	r2, r1
 8101332:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8101334:	68fb      	ldr	r3, [r7, #12]
 8101336:	3304      	adds	r3, #4
 8101338:	60fb      	str	r3, [r7, #12]
      return offset;
 810133a:	68fb      	ldr	r3, [r7, #12]
    }
 810133c:	4618      	mov	r0, r3
 810133e:	3714      	adds	r7, #20
 8101340:	46bd      	mov	sp, r7
 8101342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101346:	4770      	bx	lr

08101348 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8101348:	b480      	push	{r7}
 810134a:	b085      	sub	sp, #20
 810134c:	af00      	add	r7, sp, #0
 810134e:	6078      	str	r0, [r7, #4]
 8101350:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8101352:	2300      	movs	r3, #0
 8101354:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8101356:	68fb      	ldr	r3, [r7, #12]
 8101358:	683a      	ldr	r2, [r7, #0]
 810135a:	4413      	add	r3, r2
 810135c:	781b      	ldrb	r3, [r3, #0]
 810135e:	461a      	mov	r2, r3
 8101360:	687b      	ldr	r3, [r7, #4]
 8101362:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8101364:	687b      	ldr	r3, [r7, #4]
 8101366:	685a      	ldr	r2, [r3, #4]
 8101368:	68fb      	ldr	r3, [r7, #12]
 810136a:	3301      	adds	r3, #1
 810136c:	6839      	ldr	r1, [r7, #0]
 810136e:	440b      	add	r3, r1
 8101370:	781b      	ldrb	r3, [r3, #0]
 8101372:	021b      	lsls	r3, r3, #8
 8101374:	431a      	orrs	r2, r3
 8101376:	687b      	ldr	r3, [r7, #4]
 8101378:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 810137a:	687b      	ldr	r3, [r7, #4]
 810137c:	685a      	ldr	r2, [r3, #4]
 810137e:	68fb      	ldr	r3, [r7, #12]
 8101380:	3302      	adds	r3, #2
 8101382:	6839      	ldr	r1, [r7, #0]
 8101384:	440b      	add	r3, r1
 8101386:	781b      	ldrb	r3, [r3, #0]
 8101388:	041b      	lsls	r3, r3, #16
 810138a:	431a      	orrs	r2, r3
 810138c:	687b      	ldr	r3, [r7, #4]
 810138e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8101390:	687b      	ldr	r3, [r7, #4]
 8101392:	685a      	ldr	r2, [r3, #4]
 8101394:	68fb      	ldr	r3, [r7, #12]
 8101396:	3303      	adds	r3, #3
 8101398:	6839      	ldr	r1, [r7, #0]
 810139a:	440b      	add	r3, r1
 810139c:	781b      	ldrb	r3, [r3, #0]
 810139e:	061b      	lsls	r3, r3, #24
 81013a0:	431a      	orrs	r2, r3
 81013a2:	687b      	ldr	r3, [r7, #4]
 81013a4:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 81013a6:	68fb      	ldr	r3, [r7, #12]
 81013a8:	3304      	adds	r3, #4
 81013aa:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 81013ac:	68fb      	ldr	r3, [r7, #12]
 81013ae:	683a      	ldr	r2, [r7, #0]
 81013b0:	4413      	add	r3, r2
 81013b2:	781b      	ldrb	r3, [r3, #0]
 81013b4:	461a      	mov	r2, r3
 81013b6:	687b      	ldr	r3, [r7, #4]
 81013b8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 81013ba:	687b      	ldr	r3, [r7, #4]
 81013bc:	689a      	ldr	r2, [r3, #8]
 81013be:	68fb      	ldr	r3, [r7, #12]
 81013c0:	3301      	adds	r3, #1
 81013c2:	6839      	ldr	r1, [r7, #0]
 81013c4:	440b      	add	r3, r1
 81013c6:	781b      	ldrb	r3, [r3, #0]
 81013c8:	021b      	lsls	r3, r3, #8
 81013ca:	431a      	orrs	r2, r3
 81013cc:	687b      	ldr	r3, [r7, #4]
 81013ce:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 81013d0:	687b      	ldr	r3, [r7, #4]
 81013d2:	689a      	ldr	r2, [r3, #8]
 81013d4:	68fb      	ldr	r3, [r7, #12]
 81013d6:	3302      	adds	r3, #2
 81013d8:	6839      	ldr	r1, [r7, #0]
 81013da:	440b      	add	r3, r1
 81013dc:	781b      	ldrb	r3, [r3, #0]
 81013de:	041b      	lsls	r3, r3, #16
 81013e0:	431a      	orrs	r2, r3
 81013e2:	687b      	ldr	r3, [r7, #4]
 81013e4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 81013e6:	687b      	ldr	r3, [r7, #4]
 81013e8:	689a      	ldr	r2, [r3, #8]
 81013ea:	68fb      	ldr	r3, [r7, #12]
 81013ec:	3303      	adds	r3, #3
 81013ee:	6839      	ldr	r1, [r7, #0]
 81013f0:	440b      	add	r3, r1
 81013f2:	781b      	ldrb	r3, [r3, #0]
 81013f4:	061b      	lsls	r3, r3, #24
 81013f6:	431a      	orrs	r2, r3
 81013f8:	687b      	ldr	r3, [r7, #4]
 81013fa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 81013fc:	68fb      	ldr	r3, [r7, #12]
 81013fe:	3304      	adds	r3, #4
 8101400:	60fb      	str	r3, [r7, #12]
     return offset;
 8101402:	68fb      	ldr	r3, [r7, #12]
    }
 8101404:	4618      	mov	r0, r3
 8101406:	3714      	adds	r7, #20
 8101408:	46bd      	mov	sp, r7
 810140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810140e:	4770      	bx	lr

08101410 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8101410:	b480      	push	{r7}
 8101412:	b083      	sub	sp, #12
 8101414:	af00      	add	r7, sp, #0
 8101416:	6078      	str	r0, [r7, #4]
 8101418:	4b03      	ldr	r3, [pc, #12]	; (8101428 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 810141a:	4618      	mov	r0, r3
 810141c:	370c      	adds	r7, #12
 810141e:	46bd      	mov	sp, r7
 8101420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101424:	4770      	bx	lr
 8101426:	bf00      	nop
 8101428:	0810bc14 	.word	0x0810bc14

0810142c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 810142c:	b480      	push	{r7}
 810142e:	b083      	sub	sp, #12
 8101430:	af00      	add	r7, sp, #0
 8101432:	6078      	str	r0, [r7, #4]
 8101434:	4b03      	ldr	r3, [pc, #12]	; (8101444 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8101436:	4618      	mov	r0, r3
 8101438:	370c      	adds	r7, #12
 810143a:	46bd      	mov	sp, r7
 810143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101440:	4770      	bx	lr
 8101442:	bf00      	nop
 8101444:	0810bc24 	.word	0x0810bc24

08101448 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8101448:	b480      	push	{r7}
 810144a:	b085      	sub	sp, #20
 810144c:	af00      	add	r7, sp, #0
 810144e:	60f8      	str	r0, [r7, #12]
 8101450:	60b9      	str	r1, [r7, #8]
 8101452:	607a      	str	r2, [r7, #4]
 8101454:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8101456:	68fb      	ldr	r3, [r7, #12]
 8101458:	68ba      	ldr	r2, [r7, #8]
 810145a:	601a      	str	r2, [r3, #0]
 810145c:	68fb      	ldr	r3, [r7, #12]
 810145e:	687a      	ldr	r2, [r7, #4]
 8101460:	605a      	str	r2, [r3, #4]
 8101462:	68fb      	ldr	r3, [r7, #12]
 8101464:	683a      	ldr	r2, [r7, #0]
 8101466:	611a      	str	r2, [r3, #16]
 8101468:	68fb      	ldr	r3, [r7, #12]
 810146a:	4618      	mov	r0, r3
 810146c:	3714      	adds	r7, #20
 810146e:	46bd      	mov	sp, r7
 8101470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101474:	4770      	bx	lr

08101476 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8101476:	b580      	push	{r7, lr}
 8101478:	b082      	sub	sp, #8
 810147a:	af00      	add	r7, sp, #0
 810147c:	6078      	str	r0, [r7, #4]
 810147e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8101480:	687b      	ldr	r3, [r7, #4]
 8101482:	68d8      	ldr	r0, [r3, #12]
 8101484:	687b      	ldr	r3, [r7, #4]
 8101486:	68db      	ldr	r3, [r3, #12]
 8101488:	681b      	ldr	r3, [r3, #0]
 810148a:	681b      	ldr	r3, [r3, #0]
 810148c:	687a      	ldr	r2, [r7, #4]
 810148e:	6891      	ldr	r1, [r2, #8]
 8101490:	683a      	ldr	r2, [r7, #0]
 8101492:	4798      	blx	r3
 8101494:	4603      	mov	r3, r0
  };
 8101496:	4618      	mov	r0, r3
 8101498:	3708      	adds	r7, #8
 810149a:	46bd      	mov	sp, r7
 810149c:	bd80      	pop	{r7, pc}

0810149e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 810149e:	b480      	push	{r7}
 81014a0:	b083      	sub	sp, #12
 81014a2:	af00      	add	r7, sp, #0
 81014a4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 81014a6:	687b      	ldr	r3, [r7, #4]
 81014a8:	691b      	ldr	r3, [r3, #16]
  }
 81014aa:	4618      	mov	r0, r3
 81014ac:	370c      	adds	r7, #12
 81014ae:	46bd      	mov	sp, r7
 81014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014b4:	4770      	bx	lr

081014b6 <_ZN13STM32HardwareC1Ev>:


class STM32Hardware
{
public:
	STM32Hardware() {
 81014b6:	b480      	push	{r7}
 81014b8:	b083      	sub	sp, #12
 81014ba:	af00      	add	r7, sp, #0
 81014bc:	6078      	str	r0, [r7, #4]
	}
 81014be:	687b      	ldr	r3, [r7, #4]
 81014c0:	4618      	mov	r0, r3
 81014c2:	370c      	adds	r7, #12
 81014c4:	46bd      	mov	sp, r7
 81014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014ca:	4770      	bx	lr

081014cc <_ZN13STM32Hardware4initEv>:

	void init() {
 81014cc:	b480      	push	{r7}
 81014ce:	b083      	sub	sp, #12
 81014d0:	af00      	add	r7, sp, #0
 81014d2:	6078      	str	r0, [r7, #4]
	}
 81014d4:	bf00      	nop
 81014d6:	370c      	adds	r7, #12
 81014d8:	46bd      	mov	sp, r7
 81014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014de:	4770      	bx	lr

081014e0 <_ZN13STM32Hardware4readEv>:

	// Read a byte of data from ROS connection.
	// If no data , returns -1
	int read()
 81014e0:	b580      	push	{r7, lr}
 81014e2:	b084      	sub	sp, #16
 81014e4:	af00      	add	r7, sp, #0
 81014e6:	6078      	str	r0, [r7, #4]
	{
		uint32_t r;
		uint8_t ch = -1;
 81014e8:	23ff      	movs	r3, #255	; 0xff
 81014ea:	72fb      	strb	r3, [r7, #11]

		__HAL_UART_DISABLE_IT(&huart3, UART_IT_RXNE);
 81014ec:	4b10      	ldr	r3, [pc, #64]	; (8101530 <_ZN13STM32Hardware4readEv+0x50>)
 81014ee:	681b      	ldr	r3, [r3, #0]
 81014f0:	681a      	ldr	r2, [r3, #0]
 81014f2:	4b0f      	ldr	r3, [pc, #60]	; (8101530 <_ZN13STM32Hardware4readEv+0x50>)
 81014f4:	681b      	ldr	r3, [r3, #0]
 81014f6:	f022 0220 	bic.w	r2, r2, #32
 81014fa:	601a      	str	r2, [r3, #0]
		r = ringbuffer_getchar(&rb, &ch);
 81014fc:	f107 030b 	add.w	r3, r7, #11
 8101500:	4619      	mov	r1, r3
 8101502:	480c      	ldr	r0, [pc, #48]	; (8101534 <_ZN13STM32Hardware4readEv+0x54>)
 8101504:	f002 ffd7 	bl	81044b6 <_Z18ringbuffer_getcharP10ringbufferPh>
 8101508:	60f8      	str	r0, [r7, #12]
		__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 810150a:	4b09      	ldr	r3, [pc, #36]	; (8101530 <_ZN13STM32Hardware4readEv+0x50>)
 810150c:	681b      	ldr	r3, [r3, #0]
 810150e:	681a      	ldr	r2, [r3, #0]
 8101510:	4b07      	ldr	r3, [pc, #28]	; (8101530 <_ZN13STM32Hardware4readEv+0x50>)
 8101512:	681b      	ldr	r3, [r3, #0]
 8101514:	f042 0220 	orr.w	r2, r2, #32
 8101518:	601a      	str	r2, [r3, #0]

		if (1 == r)
 810151a:	68fb      	ldr	r3, [r7, #12]
 810151c:	2b01      	cmp	r3, #1
 810151e:	d101      	bne.n	8101524 <_ZN13STM32Hardware4readEv+0x44>
			return ch;
 8101520:	7afb      	ldrb	r3, [r7, #11]
 8101522:	e001      	b.n	8101528 <_ZN13STM32Hardware4readEv+0x48>
		else
			return -1;
 8101524:	f04f 33ff 	mov.w	r3, #4294967295
	}
 8101528:	4618      	mov	r0, r3
 810152a:	3710      	adds	r7, #16
 810152c:	46bd      	mov	sp, r7
 810152e:	bd80      	pop	{r7, pc}
 8101530:	100028b8 	.word	0x100028b8
 8101534:	100004a8 	.word	0x100004a8

08101538 <_ZN13STM32Hardware5writeEPhi>:

	// Send a byte of data to ROS connection
	void write(uint8_t* data, int length)
 8101538:	b580      	push	{r7, lr}
 810153a:	b084      	sub	sp, #16
 810153c:	af00      	add	r7, sp, #0
 810153e:	60f8      	str	r0, [r7, #12]
 8101540:	60b9      	str	r1, [r7, #8]
 8101542:	607a      	str	r2, [r7, #4]
	{
		HAL_UART_Transmit(&huart3, data, length, HAL_MAX_DELAY);
 8101544:	687b      	ldr	r3, [r7, #4]
 8101546:	b29a      	uxth	r2, r3
 8101548:	f04f 33ff 	mov.w	r3, #4294967295
 810154c:	68b9      	ldr	r1, [r7, #8]
 810154e:	4803      	ldr	r0, [pc, #12]	; (810155c <_ZN13STM32Hardware5writeEPhi+0x24>)
 8101550:	f008 fbae 	bl	8109cb0 <HAL_UART_Transmit>
	}
 8101554:	bf00      	nop
 8101556:	3710      	adds	r7, #16
 8101558:	46bd      	mov	sp, r7
 810155a:	bd80      	pop	{r7, pc}
 810155c:	100028b8 	.word	0x100028b8

08101560 <_ZN13STM32Hardware4timeEv>:

	// Returns milliseconds since start of program
	unsigned long time(void)
 8101560:	b580      	push	{r7, lr}
 8101562:	b082      	sub	sp, #8
 8101564:	af00      	add	r7, sp, #0
 8101566:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 8101568:	f003 fac6 	bl	8104af8 <HAL_GetTick>
 810156c:	4603      	mov	r3, r0
	}
 810156e:	4618      	mov	r0, r3
 8101570:	3708      	adds	r7, #8
 8101572:	46bd      	mov	sp, r7
 8101574:	bd80      	pop	{r7, pc}
	...

08101578 <_ZN13geometry_msgs5PointC1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Point():
 8101578:	b580      	push	{r7, lr}
 810157a:	b082      	sub	sp, #8
 810157c:	af00      	add	r7, sp, #0
 810157e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8101580:	687b      	ldr	r3, [r7, #4]
 8101582:	4618      	mov	r0, r3
 8101584:	f7ff f918 	bl	81007b8 <_ZN3ros3MsgC1Ev>
 8101588:	4a09      	ldr	r2, [pc, #36]	; (81015b0 <_ZN13geometry_msgs5PointC1Ev+0x38>)
 810158a:	687b      	ldr	r3, [r7, #4]
 810158c:	601a      	str	r2, [r3, #0]
 810158e:	687b      	ldr	r3, [r7, #4]
 8101590:	f04f 0200 	mov.w	r2, #0
 8101594:	605a      	str	r2, [r3, #4]
 8101596:	687b      	ldr	r3, [r7, #4]
 8101598:	f04f 0200 	mov.w	r2, #0
 810159c:	609a      	str	r2, [r3, #8]
 810159e:	687b      	ldr	r3, [r7, #4]
 81015a0:	f04f 0200 	mov.w	r2, #0
 81015a4:	60da      	str	r2, [r3, #12]
    {
    }
 81015a6:	687b      	ldr	r3, [r7, #4]
 81015a8:	4618      	mov	r0, r3
 81015aa:	3708      	adds	r7, #8
 81015ac:	46bd      	mov	sp, r7
 81015ae:	bd80      	pop	{r7, pc}
 81015b0:	0810c170 	.word	0x0810c170

081015b4 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 81015b4:	b580      	push	{r7, lr}
 81015b6:	b084      	sub	sp, #16
 81015b8:	af00      	add	r7, sp, #0
 81015ba:	6078      	str	r0, [r7, #4]
 81015bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 81015be:	2300      	movs	r3, #0
 81015c0:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 81015c2:	68fb      	ldr	r3, [r7, #12]
 81015c4:	683a      	ldr	r2, [r7, #0]
 81015c6:	441a      	add	r2, r3
 81015c8:	687b      	ldr	r3, [r7, #4]
 81015ca:	edd3 7a01 	vldr	s15, [r3, #4]
 81015ce:	eeb0 0a67 	vmov.f32	s0, s15
 81015d2:	4610      	mov	r0, r2
 81015d4:	f7ff f822 	bl	810061c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 81015d8:	4602      	mov	r2, r0
 81015da:	68fb      	ldr	r3, [r7, #12]
 81015dc:	4413      	add	r3, r2
 81015de:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 81015e0:	68fb      	ldr	r3, [r7, #12]
 81015e2:	683a      	ldr	r2, [r7, #0]
 81015e4:	441a      	add	r2, r3
 81015e6:	687b      	ldr	r3, [r7, #4]
 81015e8:	edd3 7a02 	vldr	s15, [r3, #8]
 81015ec:	eeb0 0a67 	vmov.f32	s0, s15
 81015f0:	4610      	mov	r0, r2
 81015f2:	f7ff f813 	bl	810061c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 81015f6:	4602      	mov	r2, r0
 81015f8:	68fb      	ldr	r3, [r7, #12]
 81015fa:	4413      	add	r3, r2
 81015fc:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 81015fe:	68fb      	ldr	r3, [r7, #12]
 8101600:	683a      	ldr	r2, [r7, #0]
 8101602:	441a      	add	r2, r3
 8101604:	687b      	ldr	r3, [r7, #4]
 8101606:	edd3 7a03 	vldr	s15, [r3, #12]
 810160a:	eeb0 0a67 	vmov.f32	s0, s15
 810160e:	4610      	mov	r0, r2
 8101610:	f7ff f804 	bl	810061c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8101614:	4602      	mov	r2, r0
 8101616:	68fb      	ldr	r3, [r7, #12]
 8101618:	4413      	add	r3, r2
 810161a:	60fb      	str	r3, [r7, #12]
      return offset;
 810161c:	68fb      	ldr	r3, [r7, #12]
    }
 810161e:	4618      	mov	r0, r3
 8101620:	3710      	adds	r7, #16
 8101622:	46bd      	mov	sp, r7
 8101624:	bd80      	pop	{r7, pc}

08101626 <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8101626:	b580      	push	{r7, lr}
 8101628:	b084      	sub	sp, #16
 810162a:	af00      	add	r7, sp, #0
 810162c:	6078      	str	r0, [r7, #4]
 810162e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8101630:	2300      	movs	r3, #0
 8101632:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8101634:	68fb      	ldr	r3, [r7, #12]
 8101636:	683a      	ldr	r2, [r7, #0]
 8101638:	441a      	add	r2, r3
 810163a:	687b      	ldr	r3, [r7, #4]
 810163c:	3304      	adds	r3, #4
 810163e:	4619      	mov	r1, r3
 8101640:	4610      	mov	r0, r2
 8101642:	f7ff f857 	bl	81006f4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8101646:	4602      	mov	r2, r0
 8101648:	68fb      	ldr	r3, [r7, #12]
 810164a:	4413      	add	r3, r2
 810164c:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 810164e:	68fb      	ldr	r3, [r7, #12]
 8101650:	683a      	ldr	r2, [r7, #0]
 8101652:	441a      	add	r2, r3
 8101654:	687b      	ldr	r3, [r7, #4]
 8101656:	3308      	adds	r3, #8
 8101658:	4619      	mov	r1, r3
 810165a:	4610      	mov	r0, r2
 810165c:	f7ff f84a 	bl	81006f4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8101660:	4602      	mov	r2, r0
 8101662:	68fb      	ldr	r3, [r7, #12]
 8101664:	4413      	add	r3, r2
 8101666:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8101668:	68fb      	ldr	r3, [r7, #12]
 810166a:	683a      	ldr	r2, [r7, #0]
 810166c:	441a      	add	r2, r3
 810166e:	687b      	ldr	r3, [r7, #4]
 8101670:	330c      	adds	r3, #12
 8101672:	4619      	mov	r1, r3
 8101674:	4610      	mov	r0, r2
 8101676:	f7ff f83d 	bl	81006f4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 810167a:	4602      	mov	r2, r0
 810167c:	68fb      	ldr	r3, [r7, #12]
 810167e:	4413      	add	r3, r2
 8101680:	60fb      	str	r3, [r7, #12]
     return offset;
 8101682:	68fb      	ldr	r3, [r7, #12]
    }
 8101684:	4618      	mov	r0, r3
 8101686:	3710      	adds	r7, #16
 8101688:	46bd      	mov	sp, r7
 810168a:	bd80      	pop	{r7, pc}

0810168c <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 810168c:	b480      	push	{r7}
 810168e:	b083      	sub	sp, #12
 8101690:	af00      	add	r7, sp, #0
 8101692:	6078      	str	r0, [r7, #4]
 8101694:	4b03      	ldr	r3, [pc, #12]	; (81016a4 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8101696:	4618      	mov	r0, r3
 8101698:	370c      	adds	r7, #12
 810169a:	46bd      	mov	sp, r7
 810169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016a0:	4770      	bx	lr
 81016a2:	bf00      	nop
 81016a4:	0810bc48 	.word	0x0810bc48

081016a8 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 81016a8:	b480      	push	{r7}
 81016aa:	b083      	sub	sp, #12
 81016ac:	af00      	add	r7, sp, #0
 81016ae:	6078      	str	r0, [r7, #4]
 81016b0:	4b03      	ldr	r3, [pc, #12]	; (81016c0 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 81016b2:	4618      	mov	r0, r3
 81016b4:	370c      	adds	r7, #12
 81016b6:	46bd      	mov	sp, r7
 81016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016bc:	4770      	bx	lr
 81016be:	bf00      	nop
 81016c0:	0810bc5c 	.word	0x0810bc5c

081016c4 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef float _z_type;
      _z_type z;
      typedef float _w_type;
      _w_type w;

    Quaternion():
 81016c4:	b580      	push	{r7, lr}
 81016c6:	b082      	sub	sp, #8
 81016c8:	af00      	add	r7, sp, #0
 81016ca:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 81016cc:	687b      	ldr	r3, [r7, #4]
 81016ce:	4618      	mov	r0, r3
 81016d0:	f7ff f872 	bl	81007b8 <_ZN3ros3MsgC1Ev>
 81016d4:	4a0b      	ldr	r2, [pc, #44]	; (8101704 <_ZN13geometry_msgs10QuaternionC1Ev+0x40>)
 81016d6:	687b      	ldr	r3, [r7, #4]
 81016d8:	601a      	str	r2, [r3, #0]
 81016da:	687b      	ldr	r3, [r7, #4]
 81016dc:	f04f 0200 	mov.w	r2, #0
 81016e0:	605a      	str	r2, [r3, #4]
 81016e2:	687b      	ldr	r3, [r7, #4]
 81016e4:	f04f 0200 	mov.w	r2, #0
 81016e8:	609a      	str	r2, [r3, #8]
 81016ea:	687b      	ldr	r3, [r7, #4]
 81016ec:	f04f 0200 	mov.w	r2, #0
 81016f0:	60da      	str	r2, [r3, #12]
 81016f2:	687b      	ldr	r3, [r7, #4]
 81016f4:	f04f 0200 	mov.w	r2, #0
 81016f8:	611a      	str	r2, [r3, #16]
    {
    }
 81016fa:	687b      	ldr	r3, [r7, #4]
 81016fc:	4618      	mov	r0, r3
 81016fe:	3708      	adds	r7, #8
 8101700:	46bd      	mov	sp, r7
 8101702:	bd80      	pop	{r7, pc}
 8101704:	0810c158 	.word	0x0810c158

08101708 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8101708:	b580      	push	{r7, lr}
 810170a:	b084      	sub	sp, #16
 810170c:	af00      	add	r7, sp, #0
 810170e:	6078      	str	r0, [r7, #4]
 8101710:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8101712:	2300      	movs	r3, #0
 8101714:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8101716:	68fb      	ldr	r3, [r7, #12]
 8101718:	683a      	ldr	r2, [r7, #0]
 810171a:	441a      	add	r2, r3
 810171c:	687b      	ldr	r3, [r7, #4]
 810171e:	edd3 7a01 	vldr	s15, [r3, #4]
 8101722:	eeb0 0a67 	vmov.f32	s0, s15
 8101726:	4610      	mov	r0, r2
 8101728:	f7fe ff78 	bl	810061c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 810172c:	4602      	mov	r2, r0
 810172e:	68fb      	ldr	r3, [r7, #12]
 8101730:	4413      	add	r3, r2
 8101732:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8101734:	68fb      	ldr	r3, [r7, #12]
 8101736:	683a      	ldr	r2, [r7, #0]
 8101738:	441a      	add	r2, r3
 810173a:	687b      	ldr	r3, [r7, #4]
 810173c:	edd3 7a02 	vldr	s15, [r3, #8]
 8101740:	eeb0 0a67 	vmov.f32	s0, s15
 8101744:	4610      	mov	r0, r2
 8101746:	f7fe ff69 	bl	810061c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 810174a:	4602      	mov	r2, r0
 810174c:	68fb      	ldr	r3, [r7, #12]
 810174e:	4413      	add	r3, r2
 8101750:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8101752:	68fb      	ldr	r3, [r7, #12]
 8101754:	683a      	ldr	r2, [r7, #0]
 8101756:	441a      	add	r2, r3
 8101758:	687b      	ldr	r3, [r7, #4]
 810175a:	edd3 7a03 	vldr	s15, [r3, #12]
 810175e:	eeb0 0a67 	vmov.f32	s0, s15
 8101762:	4610      	mov	r0, r2
 8101764:	f7fe ff5a 	bl	810061c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8101768:	4602      	mov	r2, r0
 810176a:	68fb      	ldr	r3, [r7, #12]
 810176c:	4413      	add	r3, r2
 810176e:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->w);
 8101770:	68fb      	ldr	r3, [r7, #12]
 8101772:	683a      	ldr	r2, [r7, #0]
 8101774:	441a      	add	r2, r3
 8101776:	687b      	ldr	r3, [r7, #4]
 8101778:	edd3 7a04 	vldr	s15, [r3, #16]
 810177c:	eeb0 0a67 	vmov.f32	s0, s15
 8101780:	4610      	mov	r0, r2
 8101782:	f7fe ff4b 	bl	810061c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8101786:	4602      	mov	r2, r0
 8101788:	68fb      	ldr	r3, [r7, #12]
 810178a:	4413      	add	r3, r2
 810178c:	60fb      	str	r3, [r7, #12]
      return offset;
 810178e:	68fb      	ldr	r3, [r7, #12]
    }
 8101790:	4618      	mov	r0, r3
 8101792:	3710      	adds	r7, #16
 8101794:	46bd      	mov	sp, r7
 8101796:	bd80      	pop	{r7, pc}

08101798 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8101798:	b580      	push	{r7, lr}
 810179a:	b084      	sub	sp, #16
 810179c:	af00      	add	r7, sp, #0
 810179e:	6078      	str	r0, [r7, #4]
 81017a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 81017a2:	2300      	movs	r3, #0
 81017a4:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 81017a6:	68fb      	ldr	r3, [r7, #12]
 81017a8:	683a      	ldr	r2, [r7, #0]
 81017aa:	441a      	add	r2, r3
 81017ac:	687b      	ldr	r3, [r7, #4]
 81017ae:	3304      	adds	r3, #4
 81017b0:	4619      	mov	r1, r3
 81017b2:	4610      	mov	r0, r2
 81017b4:	f7fe ff9e 	bl	81006f4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 81017b8:	4602      	mov	r2, r0
 81017ba:	68fb      	ldr	r3, [r7, #12]
 81017bc:	4413      	add	r3, r2
 81017be:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 81017c0:	68fb      	ldr	r3, [r7, #12]
 81017c2:	683a      	ldr	r2, [r7, #0]
 81017c4:	441a      	add	r2, r3
 81017c6:	687b      	ldr	r3, [r7, #4]
 81017c8:	3308      	adds	r3, #8
 81017ca:	4619      	mov	r1, r3
 81017cc:	4610      	mov	r0, r2
 81017ce:	f7fe ff91 	bl	81006f4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 81017d2:	4602      	mov	r2, r0
 81017d4:	68fb      	ldr	r3, [r7, #12]
 81017d6:	4413      	add	r3, r2
 81017d8:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 81017da:	68fb      	ldr	r3, [r7, #12]
 81017dc:	683a      	ldr	r2, [r7, #0]
 81017de:	441a      	add	r2, r3
 81017e0:	687b      	ldr	r3, [r7, #4]
 81017e2:	330c      	adds	r3, #12
 81017e4:	4619      	mov	r1, r3
 81017e6:	4610      	mov	r0, r2
 81017e8:	f7fe ff84 	bl	81006f4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 81017ec:	4602      	mov	r2, r0
 81017ee:	68fb      	ldr	r3, [r7, #12]
 81017f0:	4413      	add	r3, r2
 81017f2:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->w));
 81017f4:	68fb      	ldr	r3, [r7, #12]
 81017f6:	683a      	ldr	r2, [r7, #0]
 81017f8:	441a      	add	r2, r3
 81017fa:	687b      	ldr	r3, [r7, #4]
 81017fc:	3310      	adds	r3, #16
 81017fe:	4619      	mov	r1, r3
 8101800:	4610      	mov	r0, r2
 8101802:	f7fe ff77 	bl	81006f4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8101806:	4602      	mov	r2, r0
 8101808:	68fb      	ldr	r3, [r7, #12]
 810180a:	4413      	add	r3, r2
 810180c:	60fb      	str	r3, [r7, #12]
     return offset;
 810180e:	68fb      	ldr	r3, [r7, #12]
    }
 8101810:	4618      	mov	r0, r3
 8101812:	3710      	adds	r7, #16
 8101814:	46bd      	mov	sp, r7
 8101816:	bd80      	pop	{r7, pc}

08101818 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8101818:	b480      	push	{r7}
 810181a:	b083      	sub	sp, #12
 810181c:	af00      	add	r7, sp, #0
 810181e:	6078      	str	r0, [r7, #4]
 8101820:	4b03      	ldr	r3, [pc, #12]	; (8101830 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8101822:	4618      	mov	r0, r3
 8101824:	370c      	adds	r7, #12
 8101826:	46bd      	mov	sp, r7
 8101828:	f85d 7b04 	ldr.w	r7, [sp], #4
 810182c:	4770      	bx	lr
 810182e:	bf00      	nop
 8101830:	0810bc80 	.word	0x0810bc80

08101834 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 8101834:	b480      	push	{r7}
 8101836:	b083      	sub	sp, #12
 8101838:	af00      	add	r7, sp, #0
 810183a:	6078      	str	r0, [r7, #4]
 810183c:	4b03      	ldr	r3, [pc, #12]	; (810184c <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 810183e:	4618      	mov	r0, r3
 8101840:	370c      	adds	r7, #12
 8101842:	46bd      	mov	sp, r7
 8101844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101848:	4770      	bx	lr
 810184a:	bf00      	nop
 810184c:	0810bc9c 	.word	0x0810bc9c

08101850 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 8101850:	b580      	push	{r7, lr}
 8101852:	b082      	sub	sp, #8
 8101854:	af00      	add	r7, sp, #0
 8101856:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 8101858:	687b      	ldr	r3, [r7, #4]
 810185a:	4618      	mov	r0, r3
 810185c:	f7fe ffac 	bl	81007b8 <_ZN3ros3MsgC1Ev>
 8101860:	4a08      	ldr	r2, [pc, #32]	; (8101884 <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 8101862:	687b      	ldr	r3, [r7, #4]
 8101864:	601a      	str	r2, [r3, #0]
 8101866:	687b      	ldr	r3, [r7, #4]
 8101868:	3304      	adds	r3, #4
 810186a:	4618      	mov	r0, r3
 810186c:	f7ff fe84 	bl	8101578 <_ZN13geometry_msgs5PointC1Ev>
 8101870:	687b      	ldr	r3, [r7, #4]
 8101872:	3314      	adds	r3, #20
 8101874:	4618      	mov	r0, r3
 8101876:	f7ff ff25 	bl	81016c4 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 810187a:	687b      	ldr	r3, [r7, #4]
 810187c:	4618      	mov	r0, r3
 810187e:	3708      	adds	r7, #8
 8101880:	46bd      	mov	sp, r7
 8101882:	bd80      	pop	{r7, pc}
 8101884:	0810c140 	.word	0x0810c140

08101888 <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8101888:	b580      	push	{r7, lr}
 810188a:	b084      	sub	sp, #16
 810188c:	af00      	add	r7, sp, #0
 810188e:	6078      	str	r0, [r7, #4]
 8101890:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8101892:	2300      	movs	r3, #0
 8101894:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 8101896:	687b      	ldr	r3, [r7, #4]
 8101898:	1d18      	adds	r0, r3, #4
 810189a:	68fb      	ldr	r3, [r7, #12]
 810189c:	683a      	ldr	r2, [r7, #0]
 810189e:	4413      	add	r3, r2
 81018a0:	4619      	mov	r1, r3
 81018a2:	f7ff fe87 	bl	81015b4 <_ZNK13geometry_msgs5Point9serializeEPh>
 81018a6:	4602      	mov	r2, r0
 81018a8:	68fb      	ldr	r3, [r7, #12]
 81018aa:	4413      	add	r3, r2
 81018ac:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 81018ae:	687b      	ldr	r3, [r7, #4]
 81018b0:	f103 0014 	add.w	r0, r3, #20
 81018b4:	68fb      	ldr	r3, [r7, #12]
 81018b6:	683a      	ldr	r2, [r7, #0]
 81018b8:	4413      	add	r3, r2
 81018ba:	4619      	mov	r1, r3
 81018bc:	f7ff ff24 	bl	8101708 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 81018c0:	4602      	mov	r2, r0
 81018c2:	68fb      	ldr	r3, [r7, #12]
 81018c4:	4413      	add	r3, r2
 81018c6:	60fb      	str	r3, [r7, #12]
      return offset;
 81018c8:	68fb      	ldr	r3, [r7, #12]
    }
 81018ca:	4618      	mov	r0, r3
 81018cc:	3710      	adds	r7, #16
 81018ce:	46bd      	mov	sp, r7
 81018d0:	bd80      	pop	{r7, pc}

081018d2 <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 81018d2:	b580      	push	{r7, lr}
 81018d4:	b084      	sub	sp, #16
 81018d6:	af00      	add	r7, sp, #0
 81018d8:	6078      	str	r0, [r7, #4]
 81018da:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 81018dc:	2300      	movs	r3, #0
 81018de:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 81018e0:	687b      	ldr	r3, [r7, #4]
 81018e2:	1d18      	adds	r0, r3, #4
 81018e4:	68fb      	ldr	r3, [r7, #12]
 81018e6:	683a      	ldr	r2, [r7, #0]
 81018e8:	4413      	add	r3, r2
 81018ea:	4619      	mov	r1, r3
 81018ec:	f7ff fe9b 	bl	8101626 <_ZN13geometry_msgs5Point11deserializeEPh>
 81018f0:	4602      	mov	r2, r0
 81018f2:	68fb      	ldr	r3, [r7, #12]
 81018f4:	4413      	add	r3, r2
 81018f6:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 81018f8:	687b      	ldr	r3, [r7, #4]
 81018fa:	f103 0014 	add.w	r0, r3, #20
 81018fe:	68fb      	ldr	r3, [r7, #12]
 8101900:	683a      	ldr	r2, [r7, #0]
 8101902:	4413      	add	r3, r2
 8101904:	4619      	mov	r1, r3
 8101906:	f7ff ff47 	bl	8101798 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 810190a:	4602      	mov	r2, r0
 810190c:	68fb      	ldr	r3, [r7, #12]
 810190e:	4413      	add	r3, r2
 8101910:	60fb      	str	r3, [r7, #12]
     return offset;
 8101912:	68fb      	ldr	r3, [r7, #12]
    }
 8101914:	4618      	mov	r0, r3
 8101916:	3710      	adds	r7, #16
 8101918:	46bd      	mov	sp, r7
 810191a:	bd80      	pop	{r7, pc}

0810191c <_ZN13geometry_msgs4Pose7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Pose"; };
 810191c:	b480      	push	{r7}
 810191e:	b083      	sub	sp, #12
 8101920:	af00      	add	r7, sp, #0
 8101922:	6078      	str	r0, [r7, #4]
 8101924:	4b03      	ldr	r3, [pc, #12]	; (8101934 <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 8101926:	4618      	mov	r0, r3
 8101928:	370c      	adds	r7, #12
 810192a:	46bd      	mov	sp, r7
 810192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101930:	4770      	bx	lr
 8101932:	bf00      	nop
 8101934:	0810bcc0 	.word	0x0810bcc0

08101938 <_ZN13geometry_msgs4Pose6getMD5Ev>:
    const char * getMD5(){ return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8101938:	b480      	push	{r7}
 810193a:	b083      	sub	sp, #12
 810193c:	af00      	add	r7, sp, #0
 810193e:	6078      	str	r0, [r7, #4]
 8101940:	4b03      	ldr	r3, [pc, #12]	; (8101950 <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 8101942:	4618      	mov	r0, r3
 8101944:	370c      	adds	r7, #12
 8101946:	46bd      	mov	sp, r7
 8101948:	f85d 7b04 	ldr.w	r7, [sp], #4
 810194c:	4770      	bx	lr
 810194e:	bf00      	nop
 8101950:	0810bcd4 	.word	0x0810bcd4

08101954 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      float covariance[36];

    PoseWithCovariance():
 8101954:	b580      	push	{r7, lr}
 8101956:	b082      	sub	sp, #8
 8101958:	af00      	add	r7, sp, #0
 810195a:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 810195c:	687b      	ldr	r3, [r7, #4]
 810195e:	4618      	mov	r0, r3
 8101960:	f7fe ff2a 	bl	81007b8 <_ZN3ros3MsgC1Ev>
 8101964:	4a0c      	ldr	r2, [pc, #48]	; (8101998 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x44>)
 8101966:	687b      	ldr	r3, [r7, #4]
 8101968:	601a      	str	r2, [r3, #0]
 810196a:	687b      	ldr	r3, [r7, #4]
 810196c:	3304      	adds	r3, #4
 810196e:	4618      	mov	r0, r3
 8101970:	f7ff ff6e 	bl	8101850 <_ZN13geometry_msgs4PoseC1Ev>
 8101974:	687b      	ldr	r3, [r7, #4]
 8101976:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 810197a:	2323      	movs	r3, #35	; 0x23
 810197c:	2b00      	cmp	r3, #0
 810197e:	db05      	blt.n	810198c <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x38>
 8101980:	f04f 0100 	mov.w	r1, #0
 8101984:	6011      	str	r1, [r2, #0]
 8101986:	3204      	adds	r2, #4
 8101988:	3b01      	subs	r3, #1
 810198a:	e7f7      	b.n	810197c <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x28>
    {
    }
 810198c:	687b      	ldr	r3, [r7, #4]
 810198e:	4618      	mov	r0, r3
 8101990:	3708      	adds	r7, #8
 8101992:	46bd      	mov	sp, r7
 8101994:	bd80      	pop	{r7, pc}
 8101996:	bf00      	nop
 8101998:	0810c128 	.word	0x0810c128

0810199c <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 810199c:	b580      	push	{r7, lr}
 810199e:	b084      	sub	sp, #16
 81019a0:	af00      	add	r7, sp, #0
 81019a2:	6078      	str	r0, [r7, #4]
 81019a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 81019a6:	2300      	movs	r3, #0
 81019a8:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 81019aa:	687b      	ldr	r3, [r7, #4]
 81019ac:	1d18      	adds	r0, r3, #4
 81019ae:	68fb      	ldr	r3, [r7, #12]
 81019b0:	683a      	ldr	r2, [r7, #0]
 81019b2:	4413      	add	r3, r2
 81019b4:	4619      	mov	r1, r3
 81019b6:	f7ff ff67 	bl	8101888 <_ZNK13geometry_msgs4Pose9serializeEPh>
 81019ba:	4602      	mov	r2, r0
 81019bc:	68fb      	ldr	r3, [r7, #12]
 81019be:	4413      	add	r3, r2
 81019c0:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 81019c2:	2300      	movs	r3, #0
 81019c4:	60bb      	str	r3, [r7, #8]
 81019c6:	68bb      	ldr	r3, [r7, #8]
 81019c8:	2b23      	cmp	r3, #35	; 0x23
 81019ca:	d817      	bhi.n	81019fc <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x60>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 81019cc:	68fb      	ldr	r3, [r7, #12]
 81019ce:	683a      	ldr	r2, [r7, #0]
 81019d0:	18d1      	adds	r1, r2, r3
 81019d2:	687a      	ldr	r2, [r7, #4]
 81019d4:	68bb      	ldr	r3, [r7, #8]
 81019d6:	330a      	adds	r3, #10
 81019d8:	009b      	lsls	r3, r3, #2
 81019da:	4413      	add	r3, r2
 81019dc:	3304      	adds	r3, #4
 81019de:	edd3 7a00 	vldr	s15, [r3]
 81019e2:	eeb0 0a67 	vmov.f32	s0, s15
 81019e6:	4608      	mov	r0, r1
 81019e8:	f7fe fe18 	bl	810061c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 81019ec:	4602      	mov	r2, r0
 81019ee:	68fb      	ldr	r3, [r7, #12]
 81019f0:	4413      	add	r3, r2
 81019f2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 81019f4:	68bb      	ldr	r3, [r7, #8]
 81019f6:	3301      	adds	r3, #1
 81019f8:	60bb      	str	r3, [r7, #8]
 81019fa:	e7e4      	b.n	81019c6 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2a>
      }
      return offset;
 81019fc:	68fb      	ldr	r3, [r7, #12]
    }
 81019fe:	4618      	mov	r0, r3
 8101a00:	3710      	adds	r7, #16
 8101a02:	46bd      	mov	sp, r7
 8101a04:	bd80      	pop	{r7, pc}

08101a06 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8101a06:	b580      	push	{r7, lr}
 8101a08:	b084      	sub	sp, #16
 8101a0a:	af00      	add	r7, sp, #0
 8101a0c:	6078      	str	r0, [r7, #4]
 8101a0e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8101a10:	2300      	movs	r3, #0
 8101a12:	60fb      	str	r3, [r7, #12]
      offset += this->pose.deserialize(inbuffer + offset);
 8101a14:	687b      	ldr	r3, [r7, #4]
 8101a16:	1d18      	adds	r0, r3, #4
 8101a18:	68fb      	ldr	r3, [r7, #12]
 8101a1a:	683a      	ldr	r2, [r7, #0]
 8101a1c:	4413      	add	r3, r2
 8101a1e:	4619      	mov	r1, r3
 8101a20:	f7ff ff57 	bl	81018d2 <_ZN13geometry_msgs4Pose11deserializeEPh>
 8101a24:	4602      	mov	r2, r0
 8101a26:	68fb      	ldr	r3, [r7, #12]
 8101a28:	4413      	add	r3, r2
 8101a2a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8101a2c:	2300      	movs	r3, #0
 8101a2e:	60bb      	str	r3, [r7, #8]
 8101a30:	68bb      	ldr	r3, [r7, #8]
 8101a32:	2b23      	cmp	r3, #35	; 0x23
 8101a34:	d813      	bhi.n	8101a5e <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x58>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 8101a36:	68fb      	ldr	r3, [r7, #12]
 8101a38:	683a      	ldr	r2, [r7, #0]
 8101a3a:	18d0      	adds	r0, r2, r3
 8101a3c:	68bb      	ldr	r3, [r7, #8]
 8101a3e:	330a      	adds	r3, #10
 8101a40:	009b      	lsls	r3, r3, #2
 8101a42:	687a      	ldr	r2, [r7, #4]
 8101a44:	4413      	add	r3, r2
 8101a46:	3304      	adds	r3, #4
 8101a48:	4619      	mov	r1, r3
 8101a4a:	f7fe fe53 	bl	81006f4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8101a4e:	4602      	mov	r2, r0
 8101a50:	68fb      	ldr	r3, [r7, #12]
 8101a52:	4413      	add	r3, r2
 8101a54:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8101a56:	68bb      	ldr	r3, [r7, #8]
 8101a58:	3301      	adds	r3, #1
 8101a5a:	60bb      	str	r3, [r7, #8]
 8101a5c:	e7e8      	b.n	8101a30 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x2a>
      }
     return offset;
 8101a5e:	68fb      	ldr	r3, [r7, #12]
    }
 8101a60:	4618      	mov	r0, r3
 8101a62:	3710      	adds	r7, #16
 8101a64:	46bd      	mov	sp, r7
 8101a66:	bd80      	pop	{r7, pc}

08101a68 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/PoseWithCovariance"; };
 8101a68:	b480      	push	{r7}
 8101a6a:	b083      	sub	sp, #12
 8101a6c:	af00      	add	r7, sp, #0
 8101a6e:	6078      	str	r0, [r7, #4]
 8101a70:	4b03      	ldr	r3, [pc, #12]	; (8101a80 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x18>)
 8101a72:	4618      	mov	r0, r3
 8101a74:	370c      	adds	r7, #12
 8101a76:	46bd      	mov	sp, r7
 8101a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a7c:	4770      	bx	lr
 8101a7e:	bf00      	nop
 8101a80:	0810bcf8 	.word	0x0810bcf8

08101a84 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "c23e848cf1b7533a8d7c259073a97e6f"; };
 8101a84:	b480      	push	{r7}
 8101a86:	b083      	sub	sp, #12
 8101a88:	af00      	add	r7, sp, #0
 8101a8a:	6078      	str	r0, [r7, #4]
 8101a8c:	4b03      	ldr	r3, [pc, #12]	; (8101a9c <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x18>)
 8101a8e:	4618      	mov	r0, r3
 8101a90:	370c      	adds	r7, #12
 8101a92:	46bd      	mov	sp, r7
 8101a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a98:	4770      	bx	lr
 8101a9a:	bf00      	nop
 8101a9c:	0810bd1c 	.word	0x0810bd1c

08101aa0 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8101aa0:	b580      	push	{r7, lr}
 8101aa2:	b082      	sub	sp, #8
 8101aa4:	af00      	add	r7, sp, #0
 8101aa6:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8101aa8:	687b      	ldr	r3, [r7, #4]
 8101aaa:	4618      	mov	r0, r3
 8101aac:	f7fe fe84 	bl	81007b8 <_ZN3ros3MsgC1Ev>
 8101ab0:	4a09      	ldr	r2, [pc, #36]	; (8101ad8 <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 8101ab2:	687b      	ldr	r3, [r7, #4]
 8101ab4:	601a      	str	r2, [r3, #0]
 8101ab6:	687b      	ldr	r3, [r7, #4]
 8101ab8:	f04f 0200 	mov.w	r2, #0
 8101abc:	605a      	str	r2, [r3, #4]
 8101abe:	687b      	ldr	r3, [r7, #4]
 8101ac0:	f04f 0200 	mov.w	r2, #0
 8101ac4:	609a      	str	r2, [r3, #8]
 8101ac6:	687b      	ldr	r3, [r7, #4]
 8101ac8:	f04f 0200 	mov.w	r2, #0
 8101acc:	60da      	str	r2, [r3, #12]
    {
    }
 8101ace:	687b      	ldr	r3, [r7, #4]
 8101ad0:	4618      	mov	r0, r3
 8101ad2:	3708      	adds	r7, #8
 8101ad4:	46bd      	mov	sp, r7
 8101ad6:	bd80      	pop	{r7, pc}
 8101ad8:	0810c110 	.word	0x0810c110

08101adc <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8101adc:	b580      	push	{r7, lr}
 8101ade:	b084      	sub	sp, #16
 8101ae0:	af00      	add	r7, sp, #0
 8101ae2:	6078      	str	r0, [r7, #4]
 8101ae4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8101ae6:	2300      	movs	r3, #0
 8101ae8:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8101aea:	68fb      	ldr	r3, [r7, #12]
 8101aec:	683a      	ldr	r2, [r7, #0]
 8101aee:	441a      	add	r2, r3
 8101af0:	687b      	ldr	r3, [r7, #4]
 8101af2:	edd3 7a01 	vldr	s15, [r3, #4]
 8101af6:	eeb0 0a67 	vmov.f32	s0, s15
 8101afa:	4610      	mov	r0, r2
 8101afc:	f7fe fd8e 	bl	810061c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8101b00:	4602      	mov	r2, r0
 8101b02:	68fb      	ldr	r3, [r7, #12]
 8101b04:	4413      	add	r3, r2
 8101b06:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8101b08:	68fb      	ldr	r3, [r7, #12]
 8101b0a:	683a      	ldr	r2, [r7, #0]
 8101b0c:	441a      	add	r2, r3
 8101b0e:	687b      	ldr	r3, [r7, #4]
 8101b10:	edd3 7a02 	vldr	s15, [r3, #8]
 8101b14:	eeb0 0a67 	vmov.f32	s0, s15
 8101b18:	4610      	mov	r0, r2
 8101b1a:	f7fe fd7f 	bl	810061c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8101b1e:	4602      	mov	r2, r0
 8101b20:	68fb      	ldr	r3, [r7, #12]
 8101b22:	4413      	add	r3, r2
 8101b24:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8101b26:	68fb      	ldr	r3, [r7, #12]
 8101b28:	683a      	ldr	r2, [r7, #0]
 8101b2a:	441a      	add	r2, r3
 8101b2c:	687b      	ldr	r3, [r7, #4]
 8101b2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8101b32:	eeb0 0a67 	vmov.f32	s0, s15
 8101b36:	4610      	mov	r0, r2
 8101b38:	f7fe fd70 	bl	810061c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8101b3c:	4602      	mov	r2, r0
 8101b3e:	68fb      	ldr	r3, [r7, #12]
 8101b40:	4413      	add	r3, r2
 8101b42:	60fb      	str	r3, [r7, #12]
      return offset;
 8101b44:	68fb      	ldr	r3, [r7, #12]
    }
 8101b46:	4618      	mov	r0, r3
 8101b48:	3710      	adds	r7, #16
 8101b4a:	46bd      	mov	sp, r7
 8101b4c:	bd80      	pop	{r7, pc}

08101b4e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8101b4e:	b580      	push	{r7, lr}
 8101b50:	b084      	sub	sp, #16
 8101b52:	af00      	add	r7, sp, #0
 8101b54:	6078      	str	r0, [r7, #4]
 8101b56:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8101b58:	2300      	movs	r3, #0
 8101b5a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8101b5c:	68fb      	ldr	r3, [r7, #12]
 8101b5e:	683a      	ldr	r2, [r7, #0]
 8101b60:	441a      	add	r2, r3
 8101b62:	687b      	ldr	r3, [r7, #4]
 8101b64:	3304      	adds	r3, #4
 8101b66:	4619      	mov	r1, r3
 8101b68:	4610      	mov	r0, r2
 8101b6a:	f7fe fdc3 	bl	81006f4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8101b6e:	4602      	mov	r2, r0
 8101b70:	68fb      	ldr	r3, [r7, #12]
 8101b72:	4413      	add	r3, r2
 8101b74:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8101b76:	68fb      	ldr	r3, [r7, #12]
 8101b78:	683a      	ldr	r2, [r7, #0]
 8101b7a:	441a      	add	r2, r3
 8101b7c:	687b      	ldr	r3, [r7, #4]
 8101b7e:	3308      	adds	r3, #8
 8101b80:	4619      	mov	r1, r3
 8101b82:	4610      	mov	r0, r2
 8101b84:	f7fe fdb6 	bl	81006f4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8101b88:	4602      	mov	r2, r0
 8101b8a:	68fb      	ldr	r3, [r7, #12]
 8101b8c:	4413      	add	r3, r2
 8101b8e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8101b90:	68fb      	ldr	r3, [r7, #12]
 8101b92:	683a      	ldr	r2, [r7, #0]
 8101b94:	441a      	add	r2, r3
 8101b96:	687b      	ldr	r3, [r7, #4]
 8101b98:	330c      	adds	r3, #12
 8101b9a:	4619      	mov	r1, r3
 8101b9c:	4610      	mov	r0, r2
 8101b9e:	f7fe fda9 	bl	81006f4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8101ba2:	4602      	mov	r2, r0
 8101ba4:	68fb      	ldr	r3, [r7, #12]
 8101ba6:	4413      	add	r3, r2
 8101ba8:	60fb      	str	r3, [r7, #12]
     return offset;
 8101baa:	68fb      	ldr	r3, [r7, #12]
    }
 8101bac:	4618      	mov	r0, r3
 8101bae:	3710      	adds	r7, #16
 8101bb0:	46bd      	mov	sp, r7
 8101bb2:	bd80      	pop	{r7, pc}

08101bb4 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8101bb4:	b480      	push	{r7}
 8101bb6:	b083      	sub	sp, #12
 8101bb8:	af00      	add	r7, sp, #0
 8101bba:	6078      	str	r0, [r7, #4]
 8101bbc:	4b03      	ldr	r3, [pc, #12]	; (8101bcc <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8101bbe:	4618      	mov	r0, r3
 8101bc0:	370c      	adds	r7, #12
 8101bc2:	46bd      	mov	sp, r7
 8101bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bc8:	4770      	bx	lr
 8101bca:	bf00      	nop
 8101bcc:	0810bd40 	.word	0x0810bd40

08101bd0 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8101bd0:	b480      	push	{r7}
 8101bd2:	b083      	sub	sp, #12
 8101bd4:	af00      	add	r7, sp, #0
 8101bd6:	6078      	str	r0, [r7, #4]
 8101bd8:	4b03      	ldr	r3, [pc, #12]	; (8101be8 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8101bda:	4618      	mov	r0, r3
 8101bdc:	370c      	adds	r7, #12
 8101bde:	46bd      	mov	sp, r7
 8101be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101be4:	4770      	bx	lr
 8101be6:	bf00      	nop
 8101be8:	0810bc5c 	.word	0x0810bc5c

08101bec <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8101bec:	b580      	push	{r7, lr}
 8101bee:	b082      	sub	sp, #8
 8101bf0:	af00      	add	r7, sp, #0
 8101bf2:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8101bf4:	687b      	ldr	r3, [r7, #4]
 8101bf6:	4618      	mov	r0, r3
 8101bf8:	f7fe fdde 	bl	81007b8 <_ZN3ros3MsgC1Ev>
 8101bfc:	4a08      	ldr	r2, [pc, #32]	; (8101c20 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8101bfe:	687b      	ldr	r3, [r7, #4]
 8101c00:	601a      	str	r2, [r3, #0]
 8101c02:	687b      	ldr	r3, [r7, #4]
 8101c04:	3304      	adds	r3, #4
 8101c06:	4618      	mov	r0, r3
 8101c08:	f7ff ff4a 	bl	8101aa0 <_ZN13geometry_msgs7Vector3C1Ev>
 8101c0c:	687b      	ldr	r3, [r7, #4]
 8101c0e:	3314      	adds	r3, #20
 8101c10:	4618      	mov	r0, r3
 8101c12:	f7ff ff45 	bl	8101aa0 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8101c16:	687b      	ldr	r3, [r7, #4]
 8101c18:	4618      	mov	r0, r3
 8101c1a:	3708      	adds	r7, #8
 8101c1c:	46bd      	mov	sp, r7
 8101c1e:	bd80      	pop	{r7, pc}
 8101c20:	0810c0f8 	.word	0x0810c0f8

08101c24 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8101c24:	b580      	push	{r7, lr}
 8101c26:	b084      	sub	sp, #16
 8101c28:	af00      	add	r7, sp, #0
 8101c2a:	6078      	str	r0, [r7, #4]
 8101c2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8101c2e:	2300      	movs	r3, #0
 8101c30:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8101c32:	687b      	ldr	r3, [r7, #4]
 8101c34:	1d18      	adds	r0, r3, #4
 8101c36:	68fb      	ldr	r3, [r7, #12]
 8101c38:	683a      	ldr	r2, [r7, #0]
 8101c3a:	4413      	add	r3, r2
 8101c3c:	4619      	mov	r1, r3
 8101c3e:	f7ff ff4d 	bl	8101adc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8101c42:	4602      	mov	r2, r0
 8101c44:	68fb      	ldr	r3, [r7, #12]
 8101c46:	4413      	add	r3, r2
 8101c48:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8101c4a:	687b      	ldr	r3, [r7, #4]
 8101c4c:	f103 0014 	add.w	r0, r3, #20
 8101c50:	68fb      	ldr	r3, [r7, #12]
 8101c52:	683a      	ldr	r2, [r7, #0]
 8101c54:	4413      	add	r3, r2
 8101c56:	4619      	mov	r1, r3
 8101c58:	f7ff ff40 	bl	8101adc <_ZNK13geometry_msgs7Vector39serializeEPh>
 8101c5c:	4602      	mov	r2, r0
 8101c5e:	68fb      	ldr	r3, [r7, #12]
 8101c60:	4413      	add	r3, r2
 8101c62:	60fb      	str	r3, [r7, #12]
      return offset;
 8101c64:	68fb      	ldr	r3, [r7, #12]
    }
 8101c66:	4618      	mov	r0, r3
 8101c68:	3710      	adds	r7, #16
 8101c6a:	46bd      	mov	sp, r7
 8101c6c:	bd80      	pop	{r7, pc}

08101c6e <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8101c6e:	b580      	push	{r7, lr}
 8101c70:	b084      	sub	sp, #16
 8101c72:	af00      	add	r7, sp, #0
 8101c74:	6078      	str	r0, [r7, #4]
 8101c76:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8101c78:	2300      	movs	r3, #0
 8101c7a:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8101c7c:	687b      	ldr	r3, [r7, #4]
 8101c7e:	1d18      	adds	r0, r3, #4
 8101c80:	68fb      	ldr	r3, [r7, #12]
 8101c82:	683a      	ldr	r2, [r7, #0]
 8101c84:	4413      	add	r3, r2
 8101c86:	4619      	mov	r1, r3
 8101c88:	f7ff ff61 	bl	8101b4e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8101c8c:	4602      	mov	r2, r0
 8101c8e:	68fb      	ldr	r3, [r7, #12]
 8101c90:	4413      	add	r3, r2
 8101c92:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8101c94:	687b      	ldr	r3, [r7, #4]
 8101c96:	f103 0014 	add.w	r0, r3, #20
 8101c9a:	68fb      	ldr	r3, [r7, #12]
 8101c9c:	683a      	ldr	r2, [r7, #0]
 8101c9e:	4413      	add	r3, r2
 8101ca0:	4619      	mov	r1, r3
 8101ca2:	f7ff ff54 	bl	8101b4e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8101ca6:	4602      	mov	r2, r0
 8101ca8:	68fb      	ldr	r3, [r7, #12]
 8101caa:	4413      	add	r3, r2
 8101cac:	60fb      	str	r3, [r7, #12]
     return offset;
 8101cae:	68fb      	ldr	r3, [r7, #12]
    }
 8101cb0:	4618      	mov	r0, r3
 8101cb2:	3710      	adds	r7, #16
 8101cb4:	46bd      	mov	sp, r7
 8101cb6:	bd80      	pop	{r7, pc}

08101cb8 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8101cb8:	b480      	push	{r7}
 8101cba:	b083      	sub	sp, #12
 8101cbc:	af00      	add	r7, sp, #0
 8101cbe:	6078      	str	r0, [r7, #4]
 8101cc0:	4b03      	ldr	r3, [pc, #12]	; (8101cd0 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8101cc2:	4618      	mov	r0, r3
 8101cc4:	370c      	adds	r7, #12
 8101cc6:	46bd      	mov	sp, r7
 8101cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ccc:	4770      	bx	lr
 8101cce:	bf00      	nop
 8101cd0:	0810bd58 	.word	0x0810bd58

08101cd4 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8101cd4:	b480      	push	{r7}
 8101cd6:	b083      	sub	sp, #12
 8101cd8:	af00      	add	r7, sp, #0
 8101cda:	6078      	str	r0, [r7, #4]
 8101cdc:	4b03      	ldr	r3, [pc, #12]	; (8101cec <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8101cde:	4618      	mov	r0, r3
 8101ce0:	370c      	adds	r7, #12
 8101ce2:	46bd      	mov	sp, r7
 8101ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ce8:	4770      	bx	lr
 8101cea:	bf00      	nop
 8101cec:	0810bd6c 	.word	0x0810bd6c

08101cf0 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      float covariance[36];

    TwistWithCovariance():
 8101cf0:	b580      	push	{r7, lr}
 8101cf2:	b082      	sub	sp, #8
 8101cf4:	af00      	add	r7, sp, #0
 8101cf6:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 8101cf8:	687b      	ldr	r3, [r7, #4]
 8101cfa:	4618      	mov	r0, r3
 8101cfc:	f7fe fd5c 	bl	81007b8 <_ZN3ros3MsgC1Ev>
 8101d00:	4a0c      	ldr	r2, [pc, #48]	; (8101d34 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x44>)
 8101d02:	687b      	ldr	r3, [r7, #4]
 8101d04:	601a      	str	r2, [r3, #0]
 8101d06:	687b      	ldr	r3, [r7, #4]
 8101d08:	3304      	adds	r3, #4
 8101d0a:	4618      	mov	r0, r3
 8101d0c:	f7ff ff6e 	bl	8101bec <_ZN13geometry_msgs5TwistC1Ev>
 8101d10:	687b      	ldr	r3, [r7, #4]
 8101d12:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8101d16:	2323      	movs	r3, #35	; 0x23
 8101d18:	2b00      	cmp	r3, #0
 8101d1a:	db05      	blt.n	8101d28 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x38>
 8101d1c:	f04f 0100 	mov.w	r1, #0
 8101d20:	6011      	str	r1, [r2, #0]
 8101d22:	3204      	adds	r2, #4
 8101d24:	3b01      	subs	r3, #1
 8101d26:	e7f7      	b.n	8101d18 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x28>
    {
    }
 8101d28:	687b      	ldr	r3, [r7, #4]
 8101d2a:	4618      	mov	r0, r3
 8101d2c:	3708      	adds	r7, #8
 8101d2e:	46bd      	mov	sp, r7
 8101d30:	bd80      	pop	{r7, pc}
 8101d32:	bf00      	nop
 8101d34:	0810c0e0 	.word	0x0810c0e0

08101d38 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8101d38:	b580      	push	{r7, lr}
 8101d3a:	b084      	sub	sp, #16
 8101d3c:	af00      	add	r7, sp, #0
 8101d3e:	6078      	str	r0, [r7, #4]
 8101d40:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8101d42:	2300      	movs	r3, #0
 8101d44:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 8101d46:	687b      	ldr	r3, [r7, #4]
 8101d48:	1d18      	adds	r0, r3, #4
 8101d4a:	68fb      	ldr	r3, [r7, #12]
 8101d4c:	683a      	ldr	r2, [r7, #0]
 8101d4e:	4413      	add	r3, r2
 8101d50:	4619      	mov	r1, r3
 8101d52:	f7ff ff67 	bl	8101c24 <_ZNK13geometry_msgs5Twist9serializeEPh>
 8101d56:	4602      	mov	r2, r0
 8101d58:	68fb      	ldr	r3, [r7, #12]
 8101d5a:	4413      	add	r3, r2
 8101d5c:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8101d5e:	2300      	movs	r3, #0
 8101d60:	60bb      	str	r3, [r7, #8]
 8101d62:	68bb      	ldr	r3, [r7, #8]
 8101d64:	2b23      	cmp	r3, #35	; 0x23
 8101d66:	d816      	bhi.n	8101d96 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x5e>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 8101d68:	68fb      	ldr	r3, [r7, #12]
 8101d6a:	683a      	ldr	r2, [r7, #0]
 8101d6c:	18d1      	adds	r1, r2, r3
 8101d6e:	687a      	ldr	r2, [r7, #4]
 8101d70:	68bb      	ldr	r3, [r7, #8]
 8101d72:	330a      	adds	r3, #10
 8101d74:	009b      	lsls	r3, r3, #2
 8101d76:	4413      	add	r3, r2
 8101d78:	edd3 7a00 	vldr	s15, [r3]
 8101d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8101d80:	4608      	mov	r0, r1
 8101d82:	f7fe fc4b 	bl	810061c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8101d86:	4602      	mov	r2, r0
 8101d88:	68fb      	ldr	r3, [r7, #12]
 8101d8a:	4413      	add	r3, r2
 8101d8c:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8101d8e:	68bb      	ldr	r3, [r7, #8]
 8101d90:	3301      	adds	r3, #1
 8101d92:	60bb      	str	r3, [r7, #8]
 8101d94:	e7e5      	b.n	8101d62 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2a>
      }
      return offset;
 8101d96:	68fb      	ldr	r3, [r7, #12]
    }
 8101d98:	4618      	mov	r0, r3
 8101d9a:	3710      	adds	r7, #16
 8101d9c:	46bd      	mov	sp, r7
 8101d9e:	bd80      	pop	{r7, pc}

08101da0 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8101da0:	b580      	push	{r7, lr}
 8101da2:	b084      	sub	sp, #16
 8101da4:	af00      	add	r7, sp, #0
 8101da6:	6078      	str	r0, [r7, #4]
 8101da8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8101daa:	2300      	movs	r3, #0
 8101dac:	60fb      	str	r3, [r7, #12]
      offset += this->twist.deserialize(inbuffer + offset);
 8101dae:	687b      	ldr	r3, [r7, #4]
 8101db0:	1d18      	adds	r0, r3, #4
 8101db2:	68fb      	ldr	r3, [r7, #12]
 8101db4:	683a      	ldr	r2, [r7, #0]
 8101db6:	4413      	add	r3, r2
 8101db8:	4619      	mov	r1, r3
 8101dba:	f7ff ff58 	bl	8101c6e <_ZN13geometry_msgs5Twist11deserializeEPh>
 8101dbe:	4602      	mov	r2, r0
 8101dc0:	68fb      	ldr	r3, [r7, #12]
 8101dc2:	4413      	add	r3, r2
 8101dc4:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8101dc6:	2300      	movs	r3, #0
 8101dc8:	60bb      	str	r3, [r7, #8]
 8101dca:	68bb      	ldr	r3, [r7, #8]
 8101dcc:	2b23      	cmp	r3, #35	; 0x23
 8101dce:	d812      	bhi.n	8101df6 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x56>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 8101dd0:	68fb      	ldr	r3, [r7, #12]
 8101dd2:	683a      	ldr	r2, [r7, #0]
 8101dd4:	18d0      	adds	r0, r2, r3
 8101dd6:	68bb      	ldr	r3, [r7, #8]
 8101dd8:	330a      	adds	r3, #10
 8101dda:	009b      	lsls	r3, r3, #2
 8101ddc:	687a      	ldr	r2, [r7, #4]
 8101dde:	4413      	add	r3, r2
 8101de0:	4619      	mov	r1, r3
 8101de2:	f7fe fc87 	bl	81006f4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8101de6:	4602      	mov	r2, r0
 8101de8:	68fb      	ldr	r3, [r7, #12]
 8101dea:	4413      	add	r3, r2
 8101dec:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8101dee:	68bb      	ldr	r3, [r7, #8]
 8101df0:	3301      	adds	r3, #1
 8101df2:	60bb      	str	r3, [r7, #8]
 8101df4:	e7e9      	b.n	8101dca <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x2a>
      }
     return offset;
 8101df6:	68fb      	ldr	r3, [r7, #12]
    }
 8101df8:	4618      	mov	r0, r3
 8101dfa:	3710      	adds	r7, #16
 8101dfc:	46bd      	mov	sp, r7
 8101dfe:	bd80      	pop	{r7, pc}

08101e00 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TwistWithCovariance"; };
 8101e00:	b480      	push	{r7}
 8101e02:	b083      	sub	sp, #12
 8101e04:	af00      	add	r7, sp, #0
 8101e06:	6078      	str	r0, [r7, #4]
 8101e08:	4b03      	ldr	r3, [pc, #12]	; (8101e18 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x18>)
 8101e0a:	4618      	mov	r0, r3
 8101e0c:	370c      	adds	r7, #12
 8101e0e:	46bd      	mov	sp, r7
 8101e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e14:	4770      	bx	lr
 8101e16:	bf00      	nop
 8101e18:	0810bd90 	.word	0x0810bd90

08101e1c <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 8101e1c:	b480      	push	{r7}
 8101e1e:	b083      	sub	sp, #12
 8101e20:	af00      	add	r7, sp, #0
 8101e22:	6078      	str	r0, [r7, #4]
 8101e24:	4b03      	ldr	r3, [pc, #12]	; (8101e34 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x18>)
 8101e26:	4618      	mov	r0, r3
 8101e28:	370c      	adds	r7, #12
 8101e2a:	46bd      	mov	sp, r7
 8101e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e30:	4770      	bx	lr
 8101e32:	bf00      	nop
 8101e34:	0810bdb4 	.word	0x0810bdb4

08101e38 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8101e38:	b580      	push	{r7, lr}
 8101e3a:	b082      	sub	sp, #8
 8101e3c:	af00      	add	r7, sp, #0
 8101e3e:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8101e40:	687b      	ldr	r3, [r7, #4]
 8101e42:	4618      	mov	r0, r3
 8101e44:	f7fe fcb8 	bl	81007b8 <_ZN3ros3MsgC1Ev>
 8101e48:	4a09      	ldr	r2, [pc, #36]	; (8101e70 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8101e4a:	687b      	ldr	r3, [r7, #4]
 8101e4c:	601a      	str	r2, [r3, #0]
 8101e4e:	687b      	ldr	r3, [r7, #4]
 8101e50:	2200      	movs	r2, #0
 8101e52:	605a      	str	r2, [r3, #4]
 8101e54:	687b      	ldr	r3, [r7, #4]
 8101e56:	3308      	adds	r3, #8
 8101e58:	4618      	mov	r0, r3
 8101e5a:	f7ff f9f3 	bl	8101244 <_ZN3ros4TimeC1Ev>
 8101e5e:	687b      	ldr	r3, [r7, #4]
 8101e60:	4a04      	ldr	r2, [pc, #16]	; (8101e74 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8101e62:	611a      	str	r2, [r3, #16]
    {
    }
 8101e64:	687b      	ldr	r3, [r7, #4]
 8101e66:	4618      	mov	r0, r3
 8101e68:	3708      	adds	r7, #8
 8101e6a:	46bd      	mov	sp, r7
 8101e6c:	bd80      	pop	{r7, pc}
 8101e6e:	bf00      	nop
 8101e70:	0810c0c8 	.word	0x0810c0c8
 8101e74:	0810bb74 	.word	0x0810bb74

08101e78 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8101e78:	b580      	push	{r7, lr}
 8101e7a:	b084      	sub	sp, #16
 8101e7c:	af00      	add	r7, sp, #0
 8101e7e:	6078      	str	r0, [r7, #4]
 8101e80:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8101e82:	2300      	movs	r3, #0
 8101e84:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8101e86:	687b      	ldr	r3, [r7, #4]
 8101e88:	6859      	ldr	r1, [r3, #4]
 8101e8a:	68fb      	ldr	r3, [r7, #12]
 8101e8c:	683a      	ldr	r2, [r7, #0]
 8101e8e:	4413      	add	r3, r2
 8101e90:	b2ca      	uxtb	r2, r1
 8101e92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8101e94:	687b      	ldr	r3, [r7, #4]
 8101e96:	685b      	ldr	r3, [r3, #4]
 8101e98:	0a19      	lsrs	r1, r3, #8
 8101e9a:	68fb      	ldr	r3, [r7, #12]
 8101e9c:	3301      	adds	r3, #1
 8101e9e:	683a      	ldr	r2, [r7, #0]
 8101ea0:	4413      	add	r3, r2
 8101ea2:	b2ca      	uxtb	r2, r1
 8101ea4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8101ea6:	687b      	ldr	r3, [r7, #4]
 8101ea8:	685b      	ldr	r3, [r3, #4]
 8101eaa:	0c19      	lsrs	r1, r3, #16
 8101eac:	68fb      	ldr	r3, [r7, #12]
 8101eae:	3302      	adds	r3, #2
 8101eb0:	683a      	ldr	r2, [r7, #0]
 8101eb2:	4413      	add	r3, r2
 8101eb4:	b2ca      	uxtb	r2, r1
 8101eb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8101eb8:	687b      	ldr	r3, [r7, #4]
 8101eba:	685b      	ldr	r3, [r3, #4]
 8101ebc:	0e19      	lsrs	r1, r3, #24
 8101ebe:	68fb      	ldr	r3, [r7, #12]
 8101ec0:	3303      	adds	r3, #3
 8101ec2:	683a      	ldr	r2, [r7, #0]
 8101ec4:	4413      	add	r3, r2
 8101ec6:	b2ca      	uxtb	r2, r1
 8101ec8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8101eca:	68fb      	ldr	r3, [r7, #12]
 8101ecc:	3304      	adds	r3, #4
 8101ece:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8101ed0:	687b      	ldr	r3, [r7, #4]
 8101ed2:	6899      	ldr	r1, [r3, #8]
 8101ed4:	68fb      	ldr	r3, [r7, #12]
 8101ed6:	683a      	ldr	r2, [r7, #0]
 8101ed8:	4413      	add	r3, r2
 8101eda:	b2ca      	uxtb	r2, r1
 8101edc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8101ede:	687b      	ldr	r3, [r7, #4]
 8101ee0:	689b      	ldr	r3, [r3, #8]
 8101ee2:	0a19      	lsrs	r1, r3, #8
 8101ee4:	68fb      	ldr	r3, [r7, #12]
 8101ee6:	3301      	adds	r3, #1
 8101ee8:	683a      	ldr	r2, [r7, #0]
 8101eea:	4413      	add	r3, r2
 8101eec:	b2ca      	uxtb	r2, r1
 8101eee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8101ef0:	687b      	ldr	r3, [r7, #4]
 8101ef2:	689b      	ldr	r3, [r3, #8]
 8101ef4:	0c19      	lsrs	r1, r3, #16
 8101ef6:	68fb      	ldr	r3, [r7, #12]
 8101ef8:	3302      	adds	r3, #2
 8101efa:	683a      	ldr	r2, [r7, #0]
 8101efc:	4413      	add	r3, r2
 8101efe:	b2ca      	uxtb	r2, r1
 8101f00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8101f02:	687b      	ldr	r3, [r7, #4]
 8101f04:	689b      	ldr	r3, [r3, #8]
 8101f06:	0e19      	lsrs	r1, r3, #24
 8101f08:	68fb      	ldr	r3, [r7, #12]
 8101f0a:	3303      	adds	r3, #3
 8101f0c:	683a      	ldr	r2, [r7, #0]
 8101f0e:	4413      	add	r3, r2
 8101f10:	b2ca      	uxtb	r2, r1
 8101f12:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8101f14:	68fb      	ldr	r3, [r7, #12]
 8101f16:	3304      	adds	r3, #4
 8101f18:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8101f1a:	687b      	ldr	r3, [r7, #4]
 8101f1c:	68d9      	ldr	r1, [r3, #12]
 8101f1e:	68fb      	ldr	r3, [r7, #12]
 8101f20:	683a      	ldr	r2, [r7, #0]
 8101f22:	4413      	add	r3, r2
 8101f24:	b2ca      	uxtb	r2, r1
 8101f26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8101f28:	687b      	ldr	r3, [r7, #4]
 8101f2a:	68db      	ldr	r3, [r3, #12]
 8101f2c:	0a19      	lsrs	r1, r3, #8
 8101f2e:	68fb      	ldr	r3, [r7, #12]
 8101f30:	3301      	adds	r3, #1
 8101f32:	683a      	ldr	r2, [r7, #0]
 8101f34:	4413      	add	r3, r2
 8101f36:	b2ca      	uxtb	r2, r1
 8101f38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8101f3a:	687b      	ldr	r3, [r7, #4]
 8101f3c:	68db      	ldr	r3, [r3, #12]
 8101f3e:	0c19      	lsrs	r1, r3, #16
 8101f40:	68fb      	ldr	r3, [r7, #12]
 8101f42:	3302      	adds	r3, #2
 8101f44:	683a      	ldr	r2, [r7, #0]
 8101f46:	4413      	add	r3, r2
 8101f48:	b2ca      	uxtb	r2, r1
 8101f4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8101f4c:	687b      	ldr	r3, [r7, #4]
 8101f4e:	68db      	ldr	r3, [r3, #12]
 8101f50:	0e19      	lsrs	r1, r3, #24
 8101f52:	68fb      	ldr	r3, [r7, #12]
 8101f54:	3303      	adds	r3, #3
 8101f56:	683a      	ldr	r2, [r7, #0]
 8101f58:	4413      	add	r3, r2
 8101f5a:	b2ca      	uxtb	r2, r1
 8101f5c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8101f5e:	68fb      	ldr	r3, [r7, #12]
 8101f60:	3304      	adds	r3, #4
 8101f62:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8101f64:	687b      	ldr	r3, [r7, #4]
 8101f66:	691b      	ldr	r3, [r3, #16]
 8101f68:	4618      	mov	r0, r3
 8101f6a:	f7fe f9b5 	bl	81002d8 <strlen>
 8101f6e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8101f70:	68fb      	ldr	r3, [r7, #12]
 8101f72:	683a      	ldr	r2, [r7, #0]
 8101f74:	4413      	add	r3, r2
 8101f76:	68b9      	ldr	r1, [r7, #8]
 8101f78:	4618      	mov	r0, r3
 8101f7a:	f000 ff3d 	bl	8102df8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8101f7e:	68fb      	ldr	r3, [r7, #12]
 8101f80:	3304      	adds	r3, #4
 8101f82:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8101f84:	68fb      	ldr	r3, [r7, #12]
 8101f86:	683a      	ldr	r2, [r7, #0]
 8101f88:	18d0      	adds	r0, r2, r3
 8101f8a:	687b      	ldr	r3, [r7, #4]
 8101f8c:	691b      	ldr	r3, [r3, #16]
 8101f8e:	68ba      	ldr	r2, [r7, #8]
 8101f90:	4619      	mov	r1, r3
 8101f92:	f009 fc4b 	bl	810b82c <memcpy>
      offset += length_frame_id;
 8101f96:	68fa      	ldr	r2, [r7, #12]
 8101f98:	68bb      	ldr	r3, [r7, #8]
 8101f9a:	4413      	add	r3, r2
 8101f9c:	60fb      	str	r3, [r7, #12]
      return offset;
 8101f9e:	68fb      	ldr	r3, [r7, #12]
    }
 8101fa0:	4618      	mov	r0, r3
 8101fa2:	3710      	adds	r7, #16
 8101fa4:	46bd      	mov	sp, r7
 8101fa6:	bd80      	pop	{r7, pc}

08101fa8 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8101fa8:	b580      	push	{r7, lr}
 8101faa:	b086      	sub	sp, #24
 8101fac:	af00      	add	r7, sp, #0
 8101fae:	6078      	str	r0, [r7, #4]
 8101fb0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8101fb2:	2300      	movs	r3, #0
 8101fb4:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8101fb6:	693b      	ldr	r3, [r7, #16]
 8101fb8:	683a      	ldr	r2, [r7, #0]
 8101fba:	4413      	add	r3, r2
 8101fbc:	781b      	ldrb	r3, [r3, #0]
 8101fbe:	461a      	mov	r2, r3
 8101fc0:	687b      	ldr	r3, [r7, #4]
 8101fc2:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8101fc4:	687b      	ldr	r3, [r7, #4]
 8101fc6:	685a      	ldr	r2, [r3, #4]
 8101fc8:	693b      	ldr	r3, [r7, #16]
 8101fca:	3301      	adds	r3, #1
 8101fcc:	6839      	ldr	r1, [r7, #0]
 8101fce:	440b      	add	r3, r1
 8101fd0:	781b      	ldrb	r3, [r3, #0]
 8101fd2:	021b      	lsls	r3, r3, #8
 8101fd4:	431a      	orrs	r2, r3
 8101fd6:	687b      	ldr	r3, [r7, #4]
 8101fd8:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8101fda:	687b      	ldr	r3, [r7, #4]
 8101fdc:	685a      	ldr	r2, [r3, #4]
 8101fde:	693b      	ldr	r3, [r7, #16]
 8101fe0:	3302      	adds	r3, #2
 8101fe2:	6839      	ldr	r1, [r7, #0]
 8101fe4:	440b      	add	r3, r1
 8101fe6:	781b      	ldrb	r3, [r3, #0]
 8101fe8:	041b      	lsls	r3, r3, #16
 8101fea:	431a      	orrs	r2, r3
 8101fec:	687b      	ldr	r3, [r7, #4]
 8101fee:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8101ff0:	687b      	ldr	r3, [r7, #4]
 8101ff2:	685a      	ldr	r2, [r3, #4]
 8101ff4:	693b      	ldr	r3, [r7, #16]
 8101ff6:	3303      	adds	r3, #3
 8101ff8:	6839      	ldr	r1, [r7, #0]
 8101ffa:	440b      	add	r3, r1
 8101ffc:	781b      	ldrb	r3, [r3, #0]
 8101ffe:	061b      	lsls	r3, r3, #24
 8102000:	431a      	orrs	r2, r3
 8102002:	687b      	ldr	r3, [r7, #4]
 8102004:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 8102006:	693b      	ldr	r3, [r7, #16]
 8102008:	3304      	adds	r3, #4
 810200a:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 810200c:	693b      	ldr	r3, [r7, #16]
 810200e:	683a      	ldr	r2, [r7, #0]
 8102010:	4413      	add	r3, r2
 8102012:	781b      	ldrb	r3, [r3, #0]
 8102014:	461a      	mov	r2, r3
 8102016:	687b      	ldr	r3, [r7, #4]
 8102018:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 810201a:	687b      	ldr	r3, [r7, #4]
 810201c:	689a      	ldr	r2, [r3, #8]
 810201e:	693b      	ldr	r3, [r7, #16]
 8102020:	3301      	adds	r3, #1
 8102022:	6839      	ldr	r1, [r7, #0]
 8102024:	440b      	add	r3, r1
 8102026:	781b      	ldrb	r3, [r3, #0]
 8102028:	021b      	lsls	r3, r3, #8
 810202a:	431a      	orrs	r2, r3
 810202c:	687b      	ldr	r3, [r7, #4]
 810202e:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8102030:	687b      	ldr	r3, [r7, #4]
 8102032:	689a      	ldr	r2, [r3, #8]
 8102034:	693b      	ldr	r3, [r7, #16]
 8102036:	3302      	adds	r3, #2
 8102038:	6839      	ldr	r1, [r7, #0]
 810203a:	440b      	add	r3, r1
 810203c:	781b      	ldrb	r3, [r3, #0]
 810203e:	041b      	lsls	r3, r3, #16
 8102040:	431a      	orrs	r2, r3
 8102042:	687b      	ldr	r3, [r7, #4]
 8102044:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8102046:	687b      	ldr	r3, [r7, #4]
 8102048:	689a      	ldr	r2, [r3, #8]
 810204a:	693b      	ldr	r3, [r7, #16]
 810204c:	3303      	adds	r3, #3
 810204e:	6839      	ldr	r1, [r7, #0]
 8102050:	440b      	add	r3, r1
 8102052:	781b      	ldrb	r3, [r3, #0]
 8102054:	061b      	lsls	r3, r3, #24
 8102056:	431a      	orrs	r2, r3
 8102058:	687b      	ldr	r3, [r7, #4]
 810205a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 810205c:	693b      	ldr	r3, [r7, #16]
 810205e:	3304      	adds	r3, #4
 8102060:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8102062:	693b      	ldr	r3, [r7, #16]
 8102064:	683a      	ldr	r2, [r7, #0]
 8102066:	4413      	add	r3, r2
 8102068:	781b      	ldrb	r3, [r3, #0]
 810206a:	461a      	mov	r2, r3
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8102070:	687b      	ldr	r3, [r7, #4]
 8102072:	68da      	ldr	r2, [r3, #12]
 8102074:	693b      	ldr	r3, [r7, #16]
 8102076:	3301      	adds	r3, #1
 8102078:	6839      	ldr	r1, [r7, #0]
 810207a:	440b      	add	r3, r1
 810207c:	781b      	ldrb	r3, [r3, #0]
 810207e:	021b      	lsls	r3, r3, #8
 8102080:	431a      	orrs	r2, r3
 8102082:	687b      	ldr	r3, [r7, #4]
 8102084:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8102086:	687b      	ldr	r3, [r7, #4]
 8102088:	68da      	ldr	r2, [r3, #12]
 810208a:	693b      	ldr	r3, [r7, #16]
 810208c:	3302      	adds	r3, #2
 810208e:	6839      	ldr	r1, [r7, #0]
 8102090:	440b      	add	r3, r1
 8102092:	781b      	ldrb	r3, [r3, #0]
 8102094:	041b      	lsls	r3, r3, #16
 8102096:	431a      	orrs	r2, r3
 8102098:	687b      	ldr	r3, [r7, #4]
 810209a:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 810209c:	687b      	ldr	r3, [r7, #4]
 810209e:	68da      	ldr	r2, [r3, #12]
 81020a0:	693b      	ldr	r3, [r7, #16]
 81020a2:	3303      	adds	r3, #3
 81020a4:	6839      	ldr	r1, [r7, #0]
 81020a6:	440b      	add	r3, r1
 81020a8:	781b      	ldrb	r3, [r3, #0]
 81020aa:	061b      	lsls	r3, r3, #24
 81020ac:	431a      	orrs	r2, r3
 81020ae:	687b      	ldr	r3, [r7, #4]
 81020b0:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 81020b2:	693b      	ldr	r3, [r7, #16]
 81020b4:	3304      	adds	r3, #4
 81020b6:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 81020b8:	693b      	ldr	r3, [r7, #16]
 81020ba:	683a      	ldr	r2, [r7, #0]
 81020bc:	441a      	add	r2, r3
 81020be:	f107 030c 	add.w	r3, r7, #12
 81020c2:	4611      	mov	r1, r2
 81020c4:	4618      	mov	r0, r3
 81020c6:	f000 feb5 	bl	8102e34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 81020ca:	693b      	ldr	r3, [r7, #16]
 81020cc:	3304      	adds	r3, #4
 81020ce:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 81020d0:	693b      	ldr	r3, [r7, #16]
 81020d2:	617b      	str	r3, [r7, #20]
 81020d4:	693a      	ldr	r2, [r7, #16]
 81020d6:	68fb      	ldr	r3, [r7, #12]
 81020d8:	4413      	add	r3, r2
 81020da:	697a      	ldr	r2, [r7, #20]
 81020dc:	429a      	cmp	r2, r3
 81020de:	d20c      	bcs.n	81020fa <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 81020e0:	683a      	ldr	r2, [r7, #0]
 81020e2:	697b      	ldr	r3, [r7, #20]
 81020e4:	441a      	add	r2, r3
 81020e6:	697b      	ldr	r3, [r7, #20]
 81020e8:	3b01      	subs	r3, #1
 81020ea:	6839      	ldr	r1, [r7, #0]
 81020ec:	440b      	add	r3, r1
 81020ee:	7812      	ldrb	r2, [r2, #0]
 81020f0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 81020f2:	697b      	ldr	r3, [r7, #20]
 81020f4:	3301      	adds	r3, #1
 81020f6:	617b      	str	r3, [r7, #20]
 81020f8:	e7ec      	b.n	81020d4 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 81020fa:	693a      	ldr	r2, [r7, #16]
 81020fc:	68fb      	ldr	r3, [r7, #12]
 81020fe:	4413      	add	r3, r2
 8102100:	3b01      	subs	r3, #1
 8102102:	683a      	ldr	r2, [r7, #0]
 8102104:	4413      	add	r3, r2
 8102106:	2200      	movs	r2, #0
 8102108:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 810210a:	693b      	ldr	r3, [r7, #16]
 810210c:	3b01      	subs	r3, #1
 810210e:	683a      	ldr	r2, [r7, #0]
 8102110:	441a      	add	r2, r3
 8102112:	687b      	ldr	r3, [r7, #4]
 8102114:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 8102116:	693a      	ldr	r2, [r7, #16]
 8102118:	68fb      	ldr	r3, [r7, #12]
 810211a:	4413      	add	r3, r2
 810211c:	613b      	str	r3, [r7, #16]
     return offset;
 810211e:	693b      	ldr	r3, [r7, #16]
    }
 8102120:	4618      	mov	r0, r3
 8102122:	3718      	adds	r7, #24
 8102124:	46bd      	mov	sp, r7
 8102126:	bd80      	pop	{r7, pc}

08102128 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 8102128:	b480      	push	{r7}
 810212a:	b083      	sub	sp, #12
 810212c:	af00      	add	r7, sp, #0
 810212e:	6078      	str	r0, [r7, #4]
 8102130:	4b03      	ldr	r3, [pc, #12]	; (8102140 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 8102132:	4618      	mov	r0, r3
 8102134:	370c      	adds	r7, #12
 8102136:	46bd      	mov	sp, r7
 8102138:	f85d 7b04 	ldr.w	r7, [sp], #4
 810213c:	4770      	bx	lr
 810213e:	bf00      	nop
 8102140:	0810bdd8 	.word	0x0810bdd8

08102144 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 8102144:	b480      	push	{r7}
 8102146:	b083      	sub	sp, #12
 8102148:	af00      	add	r7, sp, #0
 810214a:	6078      	str	r0, [r7, #4]
 810214c:	4b03      	ldr	r3, [pc, #12]	; (810215c <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 810214e:	4618      	mov	r0, r3
 8102150:	370c      	adds	r7, #12
 8102152:	46bd      	mov	sp, r7
 8102154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102158:	4770      	bx	lr
 810215a:	bf00      	nop
 810215c:	0810bde8 	.word	0x0810bde8

08102160 <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 8102160:	b580      	push	{r7, lr}
 8102162:	b082      	sub	sp, #8
 8102164:	af00      	add	r7, sp, #0
 8102166:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 8102168:	687b      	ldr	r3, [r7, #4]
 810216a:	4618      	mov	r0, r3
 810216c:	f7fe fb24 	bl	81007b8 <_ZN3ros3MsgC1Ev>
 8102170:	4a0c      	ldr	r2, [pc, #48]	; (81021a4 <_ZN8nav_msgs8OdometryC1Ev+0x44>)
 8102172:	687b      	ldr	r3, [r7, #4]
 8102174:	601a      	str	r2, [r3, #0]
 8102176:	687b      	ldr	r3, [r7, #4]
 8102178:	3304      	adds	r3, #4
 810217a:	4618      	mov	r0, r3
 810217c:	f7ff fe5c 	bl	8101e38 <_ZN8std_msgs6HeaderC1Ev>
 8102180:	687b      	ldr	r3, [r7, #4]
 8102182:	4a09      	ldr	r2, [pc, #36]	; (81021a8 <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 8102184:	619a      	str	r2, [r3, #24]
 8102186:	687b      	ldr	r3, [r7, #4]
 8102188:	331c      	adds	r3, #28
 810218a:	4618      	mov	r0, r3
 810218c:	f7ff fbe2 	bl	8101954 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
 8102190:	687b      	ldr	r3, [r7, #4]
 8102192:	33d8      	adds	r3, #216	; 0xd8
 8102194:	4618      	mov	r0, r3
 8102196:	f7ff fdab 	bl	8101cf0 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 810219a:	687b      	ldr	r3, [r7, #4]
 810219c:	4618      	mov	r0, r3
 810219e:	3708      	adds	r7, #8
 81021a0:	46bd      	mov	sp, r7
 81021a2:	bd80      	pop	{r7, pc}
 81021a4:	0810c0b0 	.word	0x0810c0b0
 81021a8:	0810bb74 	.word	0x0810bb74

081021ac <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 81021ac:	b580      	push	{r7, lr}
 81021ae:	b084      	sub	sp, #16
 81021b0:	af00      	add	r7, sp, #0
 81021b2:	6078      	str	r0, [r7, #4]
 81021b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 81021b6:	2300      	movs	r3, #0
 81021b8:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 81021ba:	687b      	ldr	r3, [r7, #4]
 81021bc:	1d18      	adds	r0, r3, #4
 81021be:	68fb      	ldr	r3, [r7, #12]
 81021c0:	683a      	ldr	r2, [r7, #0]
 81021c2:	4413      	add	r3, r2
 81021c4:	4619      	mov	r1, r3
 81021c6:	f7ff fe57 	bl	8101e78 <_ZNK8std_msgs6Header9serializeEPh>
 81021ca:	4602      	mov	r2, r0
 81021cc:	68fb      	ldr	r3, [r7, #12]
 81021ce:	4413      	add	r3, r2
 81021d0:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 81021d2:	687b      	ldr	r3, [r7, #4]
 81021d4:	699b      	ldr	r3, [r3, #24]
 81021d6:	4618      	mov	r0, r3
 81021d8:	f7fe f87e 	bl	81002d8 <strlen>
 81021dc:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 81021de:	68fb      	ldr	r3, [r7, #12]
 81021e0:	683a      	ldr	r2, [r7, #0]
 81021e2:	4413      	add	r3, r2
 81021e4:	68b9      	ldr	r1, [r7, #8]
 81021e6:	4618      	mov	r0, r3
 81021e8:	f000 fe06 	bl	8102df8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 81021ec:	68fb      	ldr	r3, [r7, #12]
 81021ee:	3304      	adds	r3, #4
 81021f0:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 81021f2:	68fb      	ldr	r3, [r7, #12]
 81021f4:	683a      	ldr	r2, [r7, #0]
 81021f6:	18d0      	adds	r0, r2, r3
 81021f8:	687b      	ldr	r3, [r7, #4]
 81021fa:	699b      	ldr	r3, [r3, #24]
 81021fc:	68ba      	ldr	r2, [r7, #8]
 81021fe:	4619      	mov	r1, r3
 8102200:	f009 fb14 	bl	810b82c <memcpy>
      offset += length_child_frame_id;
 8102204:	68fa      	ldr	r2, [r7, #12]
 8102206:	68bb      	ldr	r3, [r7, #8]
 8102208:	4413      	add	r3, r2
 810220a:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 810220c:	687b      	ldr	r3, [r7, #4]
 810220e:	f103 001c 	add.w	r0, r3, #28
 8102212:	68fb      	ldr	r3, [r7, #12]
 8102214:	683a      	ldr	r2, [r7, #0]
 8102216:	4413      	add	r3, r2
 8102218:	4619      	mov	r1, r3
 810221a:	f7ff fbbf 	bl	810199c <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 810221e:	4602      	mov	r2, r0
 8102220:	68fb      	ldr	r3, [r7, #12]
 8102222:	4413      	add	r3, r2
 8102224:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 8102226:	687b      	ldr	r3, [r7, #4]
 8102228:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 810222c:	68fb      	ldr	r3, [r7, #12]
 810222e:	683a      	ldr	r2, [r7, #0]
 8102230:	4413      	add	r3, r2
 8102232:	4619      	mov	r1, r3
 8102234:	f7ff fd80 	bl	8101d38 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 8102238:	4602      	mov	r2, r0
 810223a:	68fb      	ldr	r3, [r7, #12]
 810223c:	4413      	add	r3, r2
 810223e:	60fb      	str	r3, [r7, #12]
      return offset;
 8102240:	68fb      	ldr	r3, [r7, #12]
    }
 8102242:	4618      	mov	r0, r3
 8102244:	3710      	adds	r7, #16
 8102246:	46bd      	mov	sp, r7
 8102248:	bd80      	pop	{r7, pc}

0810224a <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 810224a:	b580      	push	{r7, lr}
 810224c:	b086      	sub	sp, #24
 810224e:	af00      	add	r7, sp, #0
 8102250:	6078      	str	r0, [r7, #4]
 8102252:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8102254:	2300      	movs	r3, #0
 8102256:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8102258:	687b      	ldr	r3, [r7, #4]
 810225a:	1d18      	adds	r0, r3, #4
 810225c:	693b      	ldr	r3, [r7, #16]
 810225e:	683a      	ldr	r2, [r7, #0]
 8102260:	4413      	add	r3, r2
 8102262:	4619      	mov	r1, r3
 8102264:	f7ff fea0 	bl	8101fa8 <_ZN8std_msgs6Header11deserializeEPh>
 8102268:	4602      	mov	r2, r0
 810226a:	693b      	ldr	r3, [r7, #16]
 810226c:	4413      	add	r3, r2
 810226e:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 8102270:	693b      	ldr	r3, [r7, #16]
 8102272:	683a      	ldr	r2, [r7, #0]
 8102274:	441a      	add	r2, r3
 8102276:	f107 030c 	add.w	r3, r7, #12
 810227a:	4611      	mov	r1, r2
 810227c:	4618      	mov	r0, r3
 810227e:	f000 fdd9 	bl	8102e34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8102282:	693b      	ldr	r3, [r7, #16]
 8102284:	3304      	adds	r3, #4
 8102286:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8102288:	693b      	ldr	r3, [r7, #16]
 810228a:	617b      	str	r3, [r7, #20]
 810228c:	693a      	ldr	r2, [r7, #16]
 810228e:	68fb      	ldr	r3, [r7, #12]
 8102290:	4413      	add	r3, r2
 8102292:	697a      	ldr	r2, [r7, #20]
 8102294:	429a      	cmp	r2, r3
 8102296:	d20c      	bcs.n	81022b2 <_ZN8nav_msgs8Odometry11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 8102298:	683a      	ldr	r2, [r7, #0]
 810229a:	697b      	ldr	r3, [r7, #20]
 810229c:	441a      	add	r2, r3
 810229e:	697b      	ldr	r3, [r7, #20]
 81022a0:	3b01      	subs	r3, #1
 81022a2:	6839      	ldr	r1, [r7, #0]
 81022a4:	440b      	add	r3, r1
 81022a6:	7812      	ldrb	r2, [r2, #0]
 81022a8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 81022aa:	697b      	ldr	r3, [r7, #20]
 81022ac:	3301      	adds	r3, #1
 81022ae:	617b      	str	r3, [r7, #20]
 81022b0:	e7ec      	b.n	810228c <_ZN8nav_msgs8Odometry11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 81022b2:	693a      	ldr	r2, [r7, #16]
 81022b4:	68fb      	ldr	r3, [r7, #12]
 81022b6:	4413      	add	r3, r2
 81022b8:	3b01      	subs	r3, #1
 81022ba:	683a      	ldr	r2, [r7, #0]
 81022bc:	4413      	add	r3, r2
 81022be:	2200      	movs	r2, #0
 81022c0:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 81022c2:	693b      	ldr	r3, [r7, #16]
 81022c4:	3b01      	subs	r3, #1
 81022c6:	683a      	ldr	r2, [r7, #0]
 81022c8:	441a      	add	r2, r3
 81022ca:	687b      	ldr	r3, [r7, #4]
 81022cc:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 81022ce:	693a      	ldr	r2, [r7, #16]
 81022d0:	68fb      	ldr	r3, [r7, #12]
 81022d2:	4413      	add	r3, r2
 81022d4:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 81022d6:	687b      	ldr	r3, [r7, #4]
 81022d8:	f103 001c 	add.w	r0, r3, #28
 81022dc:	693b      	ldr	r3, [r7, #16]
 81022de:	683a      	ldr	r2, [r7, #0]
 81022e0:	4413      	add	r3, r2
 81022e2:	4619      	mov	r1, r3
 81022e4:	f7ff fb8f 	bl	8101a06 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 81022e8:	4602      	mov	r2, r0
 81022ea:	693b      	ldr	r3, [r7, #16]
 81022ec:	4413      	add	r3, r2
 81022ee:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 81022f0:	687b      	ldr	r3, [r7, #4]
 81022f2:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 81022f6:	693b      	ldr	r3, [r7, #16]
 81022f8:	683a      	ldr	r2, [r7, #0]
 81022fa:	4413      	add	r3, r2
 81022fc:	4619      	mov	r1, r3
 81022fe:	f7ff fd4f 	bl	8101da0 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 8102302:	4602      	mov	r2, r0
 8102304:	693b      	ldr	r3, [r7, #16]
 8102306:	4413      	add	r3, r2
 8102308:	613b      	str	r3, [r7, #16]
     return offset;
 810230a:	693b      	ldr	r3, [r7, #16]
    }
 810230c:	4618      	mov	r0, r3
 810230e:	3718      	adds	r7, #24
 8102310:	46bd      	mov	sp, r7
 8102312:	bd80      	pop	{r7, pc}

08102314 <_ZN8nav_msgs8Odometry7getTypeEv>:

    const char * getType(){ return "nav_msgs/Odometry"; };
 8102314:	b480      	push	{r7}
 8102316:	b083      	sub	sp, #12
 8102318:	af00      	add	r7, sp, #0
 810231a:	6078      	str	r0, [r7, #4]
 810231c:	4b03      	ldr	r3, [pc, #12]	; (810232c <_ZN8nav_msgs8Odometry7getTypeEv+0x18>)
 810231e:	4618      	mov	r0, r3
 8102320:	370c      	adds	r7, #12
 8102322:	46bd      	mov	sp, r7
 8102324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102328:	4770      	bx	lr
 810232a:	bf00      	nop
 810232c:	0810be0c 	.word	0x0810be0c

08102330 <_ZN8nav_msgs8Odometry6getMD5Ev>:
    const char * getMD5(){ return "cd5e73d190d741a2f92e81eda573aca7"; };
 8102330:	b480      	push	{r7}
 8102332:	b083      	sub	sp, #12
 8102334:	af00      	add	r7, sp, #0
 8102336:	6078      	str	r0, [r7, #4]
 8102338:	4b03      	ldr	r3, [pc, #12]	; (8102348 <_ZN8nav_msgs8Odometry6getMD5Ev+0x18>)
 810233a:	4618      	mov	r0, r3
 810233c:	370c      	adds	r7, #12
 810233e:	46bd      	mov	sp, r7
 8102340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102344:	4770      	bx	lr
 8102346:	bf00      	nop
 8102348:	0810be20 	.word	0x0810be20

0810234c <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 810234c:	b580      	push	{r7, lr}
 810234e:	b082      	sub	sp, #8
 8102350:	af00      	add	r7, sp, #0
 8102352:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8102354:	687b      	ldr	r3, [r7, #4]
 8102356:	4618      	mov	r0, r3
 8102358:	f7fe fa2e 	bl	81007b8 <_ZN3ros3MsgC1Ev>
 810235c:	4a08      	ldr	r2, [pc, #32]	; (8102380 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 810235e:	687b      	ldr	r3, [r7, #4]
 8102360:	601a      	str	r2, [r3, #0]
 8102362:	687b      	ldr	r3, [r7, #4]
 8102364:	4a07      	ldr	r2, [pc, #28]	; (8102384 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8102366:	605a      	str	r2, [r3, #4]
 8102368:	687b      	ldr	r3, [r7, #4]
 810236a:	2200      	movs	r2, #0
 810236c:	609a      	str	r2, [r3, #8]
 810236e:	687b      	ldr	r3, [r7, #4]
 8102370:	2200      	movs	r2, #0
 8102372:	60da      	str	r2, [r3, #12]
    {
    }
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	4618      	mov	r0, r3
 8102378:	3708      	adds	r7, #8
 810237a:	46bd      	mov	sp, r7
 810237c:	bd80      	pop	{r7, pc}
 810237e:	bf00      	nop
 8102380:	0810c098 	.word	0x0810c098
 8102384:	0810bb74 	.word	0x0810bb74

08102388 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8102388:	b580      	push	{r7, lr}
 810238a:	b084      	sub	sp, #16
 810238c:	af00      	add	r7, sp, #0
 810238e:	6078      	str	r0, [r7, #4]
 8102390:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8102392:	2300      	movs	r3, #0
 8102394:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8102396:	687b      	ldr	r3, [r7, #4]
 8102398:	685b      	ldr	r3, [r3, #4]
 810239a:	4618      	mov	r0, r3
 810239c:	f7fd ff9c 	bl	81002d8 <strlen>
 81023a0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 81023a2:	68fb      	ldr	r3, [r7, #12]
 81023a4:	683a      	ldr	r2, [r7, #0]
 81023a6:	4413      	add	r3, r2
 81023a8:	68b9      	ldr	r1, [r7, #8]
 81023aa:	4618      	mov	r0, r3
 81023ac:	f000 fd24 	bl	8102df8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 81023b0:	68fb      	ldr	r3, [r7, #12]
 81023b2:	3304      	adds	r3, #4
 81023b4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 81023b6:	68fb      	ldr	r3, [r7, #12]
 81023b8:	683a      	ldr	r2, [r7, #0]
 81023ba:	18d0      	adds	r0, r2, r3
 81023bc:	687b      	ldr	r3, [r7, #4]
 81023be:	685b      	ldr	r3, [r3, #4]
 81023c0:	68ba      	ldr	r2, [r7, #8]
 81023c2:	4619      	mov	r1, r3
 81023c4:	f009 fa32 	bl	810b82c <memcpy>
      offset += length_label;
 81023c8:	68fa      	ldr	r2, [r7, #12]
 81023ca:	68bb      	ldr	r3, [r7, #8]
 81023cc:	4413      	add	r3, r2
 81023ce:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 81023d0:	687b      	ldr	r3, [r7, #4]
 81023d2:	6899      	ldr	r1, [r3, #8]
 81023d4:	68fb      	ldr	r3, [r7, #12]
 81023d6:	683a      	ldr	r2, [r7, #0]
 81023d8:	4413      	add	r3, r2
 81023da:	b2ca      	uxtb	r2, r1
 81023dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 81023de:	687b      	ldr	r3, [r7, #4]
 81023e0:	689b      	ldr	r3, [r3, #8]
 81023e2:	0a19      	lsrs	r1, r3, #8
 81023e4:	68fb      	ldr	r3, [r7, #12]
 81023e6:	3301      	adds	r3, #1
 81023e8:	683a      	ldr	r2, [r7, #0]
 81023ea:	4413      	add	r3, r2
 81023ec:	b2ca      	uxtb	r2, r1
 81023ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 81023f0:	687b      	ldr	r3, [r7, #4]
 81023f2:	689b      	ldr	r3, [r3, #8]
 81023f4:	0c19      	lsrs	r1, r3, #16
 81023f6:	68fb      	ldr	r3, [r7, #12]
 81023f8:	3302      	adds	r3, #2
 81023fa:	683a      	ldr	r2, [r7, #0]
 81023fc:	4413      	add	r3, r2
 81023fe:	b2ca      	uxtb	r2, r1
 8102400:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8102402:	687b      	ldr	r3, [r7, #4]
 8102404:	689b      	ldr	r3, [r3, #8]
 8102406:	0e19      	lsrs	r1, r3, #24
 8102408:	68fb      	ldr	r3, [r7, #12]
 810240a:	3303      	adds	r3, #3
 810240c:	683a      	ldr	r2, [r7, #0]
 810240e:	4413      	add	r3, r2
 8102410:	b2ca      	uxtb	r2, r1
 8102412:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8102414:	68fb      	ldr	r3, [r7, #12]
 8102416:	3304      	adds	r3, #4
 8102418:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 810241a:	687b      	ldr	r3, [r7, #4]
 810241c:	68d9      	ldr	r1, [r3, #12]
 810241e:	68fb      	ldr	r3, [r7, #12]
 8102420:	683a      	ldr	r2, [r7, #0]
 8102422:	4413      	add	r3, r2
 8102424:	b2ca      	uxtb	r2, r1
 8102426:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8102428:	687b      	ldr	r3, [r7, #4]
 810242a:	68db      	ldr	r3, [r3, #12]
 810242c:	0a19      	lsrs	r1, r3, #8
 810242e:	68fb      	ldr	r3, [r7, #12]
 8102430:	3301      	adds	r3, #1
 8102432:	683a      	ldr	r2, [r7, #0]
 8102434:	4413      	add	r3, r2
 8102436:	b2ca      	uxtb	r2, r1
 8102438:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 810243a:	687b      	ldr	r3, [r7, #4]
 810243c:	68db      	ldr	r3, [r3, #12]
 810243e:	0c19      	lsrs	r1, r3, #16
 8102440:	68fb      	ldr	r3, [r7, #12]
 8102442:	3302      	adds	r3, #2
 8102444:	683a      	ldr	r2, [r7, #0]
 8102446:	4413      	add	r3, r2
 8102448:	b2ca      	uxtb	r2, r1
 810244a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 810244c:	687b      	ldr	r3, [r7, #4]
 810244e:	68db      	ldr	r3, [r3, #12]
 8102450:	0e19      	lsrs	r1, r3, #24
 8102452:	68fb      	ldr	r3, [r7, #12]
 8102454:	3303      	adds	r3, #3
 8102456:	683a      	ldr	r2, [r7, #0]
 8102458:	4413      	add	r3, r2
 810245a:	b2ca      	uxtb	r2, r1
 810245c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 810245e:	68fb      	ldr	r3, [r7, #12]
 8102460:	3304      	adds	r3, #4
 8102462:	60fb      	str	r3, [r7, #12]
      return offset;
 8102464:	68fb      	ldr	r3, [r7, #12]
    }
 8102466:	4618      	mov	r0, r3
 8102468:	3710      	adds	r7, #16
 810246a:	46bd      	mov	sp, r7
 810246c:	bd80      	pop	{r7, pc}

0810246e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 810246e:	b580      	push	{r7, lr}
 8102470:	b086      	sub	sp, #24
 8102472:	af00      	add	r7, sp, #0
 8102474:	6078      	str	r0, [r7, #4]
 8102476:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8102478:	2300      	movs	r3, #0
 810247a:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 810247c:	693b      	ldr	r3, [r7, #16]
 810247e:	683a      	ldr	r2, [r7, #0]
 8102480:	441a      	add	r2, r3
 8102482:	f107 030c 	add.w	r3, r7, #12
 8102486:	4611      	mov	r1, r2
 8102488:	4618      	mov	r0, r3
 810248a:	f000 fcd3 	bl	8102e34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 810248e:	693b      	ldr	r3, [r7, #16]
 8102490:	3304      	adds	r3, #4
 8102492:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8102494:	693b      	ldr	r3, [r7, #16]
 8102496:	617b      	str	r3, [r7, #20]
 8102498:	693a      	ldr	r2, [r7, #16]
 810249a:	68fb      	ldr	r3, [r7, #12]
 810249c:	4413      	add	r3, r2
 810249e:	697a      	ldr	r2, [r7, #20]
 81024a0:	429a      	cmp	r2, r3
 81024a2:	d20c      	bcs.n	81024be <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 81024a4:	683a      	ldr	r2, [r7, #0]
 81024a6:	697b      	ldr	r3, [r7, #20]
 81024a8:	441a      	add	r2, r3
 81024aa:	697b      	ldr	r3, [r7, #20]
 81024ac:	3b01      	subs	r3, #1
 81024ae:	6839      	ldr	r1, [r7, #0]
 81024b0:	440b      	add	r3, r1
 81024b2:	7812      	ldrb	r2, [r2, #0]
 81024b4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 81024b6:	697b      	ldr	r3, [r7, #20]
 81024b8:	3301      	adds	r3, #1
 81024ba:	617b      	str	r3, [r7, #20]
 81024bc:	e7ec      	b.n	8102498 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 81024be:	693a      	ldr	r2, [r7, #16]
 81024c0:	68fb      	ldr	r3, [r7, #12]
 81024c2:	4413      	add	r3, r2
 81024c4:	3b01      	subs	r3, #1
 81024c6:	683a      	ldr	r2, [r7, #0]
 81024c8:	4413      	add	r3, r2
 81024ca:	2200      	movs	r2, #0
 81024cc:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 81024ce:	693b      	ldr	r3, [r7, #16]
 81024d0:	3b01      	subs	r3, #1
 81024d2:	683a      	ldr	r2, [r7, #0]
 81024d4:	441a      	add	r2, r3
 81024d6:	687b      	ldr	r3, [r7, #4]
 81024d8:	605a      	str	r2, [r3, #4]
      offset += length_label;
 81024da:	693a      	ldr	r2, [r7, #16]
 81024dc:	68fb      	ldr	r3, [r7, #12]
 81024de:	4413      	add	r3, r2
 81024e0:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 81024e2:	693b      	ldr	r3, [r7, #16]
 81024e4:	683a      	ldr	r2, [r7, #0]
 81024e6:	4413      	add	r3, r2
 81024e8:	781b      	ldrb	r3, [r3, #0]
 81024ea:	461a      	mov	r2, r3
 81024ec:	687b      	ldr	r3, [r7, #4]
 81024ee:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 81024f0:	687b      	ldr	r3, [r7, #4]
 81024f2:	689a      	ldr	r2, [r3, #8]
 81024f4:	693b      	ldr	r3, [r7, #16]
 81024f6:	3301      	adds	r3, #1
 81024f8:	6839      	ldr	r1, [r7, #0]
 81024fa:	440b      	add	r3, r1
 81024fc:	781b      	ldrb	r3, [r3, #0]
 81024fe:	021b      	lsls	r3, r3, #8
 8102500:	431a      	orrs	r2, r3
 8102502:	687b      	ldr	r3, [r7, #4]
 8102504:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8102506:	687b      	ldr	r3, [r7, #4]
 8102508:	689a      	ldr	r2, [r3, #8]
 810250a:	693b      	ldr	r3, [r7, #16]
 810250c:	3302      	adds	r3, #2
 810250e:	6839      	ldr	r1, [r7, #0]
 8102510:	440b      	add	r3, r1
 8102512:	781b      	ldrb	r3, [r3, #0]
 8102514:	041b      	lsls	r3, r3, #16
 8102516:	431a      	orrs	r2, r3
 8102518:	687b      	ldr	r3, [r7, #4]
 810251a:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 810251c:	687b      	ldr	r3, [r7, #4]
 810251e:	689a      	ldr	r2, [r3, #8]
 8102520:	693b      	ldr	r3, [r7, #16]
 8102522:	3303      	adds	r3, #3
 8102524:	6839      	ldr	r1, [r7, #0]
 8102526:	440b      	add	r3, r1
 8102528:	781b      	ldrb	r3, [r3, #0]
 810252a:	061b      	lsls	r3, r3, #24
 810252c:	431a      	orrs	r2, r3
 810252e:	687b      	ldr	r3, [r7, #4]
 8102530:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8102532:	693b      	ldr	r3, [r7, #16]
 8102534:	3304      	adds	r3, #4
 8102536:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8102538:	693b      	ldr	r3, [r7, #16]
 810253a:	683a      	ldr	r2, [r7, #0]
 810253c:	4413      	add	r3, r2
 810253e:	781b      	ldrb	r3, [r3, #0]
 8102540:	461a      	mov	r2, r3
 8102542:	687b      	ldr	r3, [r7, #4]
 8102544:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8102546:	687b      	ldr	r3, [r7, #4]
 8102548:	68da      	ldr	r2, [r3, #12]
 810254a:	693b      	ldr	r3, [r7, #16]
 810254c:	3301      	adds	r3, #1
 810254e:	6839      	ldr	r1, [r7, #0]
 8102550:	440b      	add	r3, r1
 8102552:	781b      	ldrb	r3, [r3, #0]
 8102554:	021b      	lsls	r3, r3, #8
 8102556:	431a      	orrs	r2, r3
 8102558:	687b      	ldr	r3, [r7, #4]
 810255a:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 810255c:	687b      	ldr	r3, [r7, #4]
 810255e:	68da      	ldr	r2, [r3, #12]
 8102560:	693b      	ldr	r3, [r7, #16]
 8102562:	3302      	adds	r3, #2
 8102564:	6839      	ldr	r1, [r7, #0]
 8102566:	440b      	add	r3, r1
 8102568:	781b      	ldrb	r3, [r3, #0]
 810256a:	041b      	lsls	r3, r3, #16
 810256c:	431a      	orrs	r2, r3
 810256e:	687b      	ldr	r3, [r7, #4]
 8102570:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8102572:	687b      	ldr	r3, [r7, #4]
 8102574:	68da      	ldr	r2, [r3, #12]
 8102576:	693b      	ldr	r3, [r7, #16]
 8102578:	3303      	adds	r3, #3
 810257a:	6839      	ldr	r1, [r7, #0]
 810257c:	440b      	add	r3, r1
 810257e:	781b      	ldrb	r3, [r3, #0]
 8102580:	061b      	lsls	r3, r3, #24
 8102582:	431a      	orrs	r2, r3
 8102584:	687b      	ldr	r3, [r7, #4]
 8102586:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8102588:	693b      	ldr	r3, [r7, #16]
 810258a:	3304      	adds	r3, #4
 810258c:	613b      	str	r3, [r7, #16]
     return offset;
 810258e:	693b      	ldr	r3, [r7, #16]
    }
 8102590:	4618      	mov	r0, r3
 8102592:	3718      	adds	r7, #24
 8102594:	46bd      	mov	sp, r7
 8102596:	bd80      	pop	{r7, pc}

08102598 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 8102598:	b480      	push	{r7}
 810259a:	b083      	sub	sp, #12
 810259c:	af00      	add	r7, sp, #0
 810259e:	6078      	str	r0, [r7, #4]
 81025a0:	4b03      	ldr	r3, [pc, #12]	; (81025b0 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 81025a2:	4618      	mov	r0, r3
 81025a4:	370c      	adds	r7, #12
 81025a6:	46bd      	mov	sp, r7
 81025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025ac:	4770      	bx	lr
 81025ae:	bf00      	nop
 81025b0:	0810be44 	.word	0x0810be44

081025b4 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 81025b4:	b480      	push	{r7}
 81025b6:	b083      	sub	sp, #12
 81025b8:	af00      	add	r7, sp, #0
 81025ba:	6078      	str	r0, [r7, #4]
 81025bc:	4b03      	ldr	r3, [pc, #12]	; (81025cc <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 81025be:	4618      	mov	r0, r3
 81025c0:	370c      	adds	r7, #12
 81025c2:	46bd      	mov	sp, r7
 81025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025c8:	4770      	bx	lr
 81025ca:	bf00      	nop
 81025cc:	0810be64 	.word	0x0810be64

081025d0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 81025d0:	b580      	push	{r7, lr}
 81025d2:	b082      	sub	sp, #8
 81025d4:	af00      	add	r7, sp, #0
 81025d6:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 81025d8:	687b      	ldr	r3, [r7, #4]
 81025da:	4618      	mov	r0, r3
 81025dc:	f7fe f8ec 	bl	81007b8 <_ZN3ros3MsgC1Ev>
 81025e0:	4a0a      	ldr	r2, [pc, #40]	; (810260c <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 81025e2:	687b      	ldr	r3, [r7, #4]
 81025e4:	601a      	str	r2, [r3, #0]
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	2200      	movs	r2, #0
 81025ea:	605a      	str	r2, [r3, #4]
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	3308      	adds	r3, #8
 81025f0:	4618      	mov	r0, r3
 81025f2:	f7ff feab 	bl	810234c <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 81025f6:	687b      	ldr	r3, [r7, #4]
 81025f8:	2200      	movs	r2, #0
 81025fa:	619a      	str	r2, [r3, #24]
 81025fc:	687b      	ldr	r3, [r7, #4]
 81025fe:	2200      	movs	r2, #0
 8102600:	61da      	str	r2, [r3, #28]
    {
    }
 8102602:	687b      	ldr	r3, [r7, #4]
 8102604:	4618      	mov	r0, r3
 8102606:	3708      	adds	r7, #8
 8102608:	46bd      	mov	sp, r7
 810260a:	bd80      	pop	{r7, pc}
 810260c:	0810c080 	.word	0x0810c080

08102610 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8102610:	b580      	push	{r7, lr}
 8102612:	b084      	sub	sp, #16
 8102614:	af00      	add	r7, sp, #0
 8102616:	6078      	str	r0, [r7, #4]
 8102618:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 810261a:	2300      	movs	r3, #0
 810261c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 810261e:	687b      	ldr	r3, [r7, #4]
 8102620:	6859      	ldr	r1, [r3, #4]
 8102622:	68fb      	ldr	r3, [r7, #12]
 8102624:	683a      	ldr	r2, [r7, #0]
 8102626:	4413      	add	r3, r2
 8102628:	b2ca      	uxtb	r2, r1
 810262a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 810262c:	687b      	ldr	r3, [r7, #4]
 810262e:	685b      	ldr	r3, [r3, #4]
 8102630:	0a19      	lsrs	r1, r3, #8
 8102632:	68fb      	ldr	r3, [r7, #12]
 8102634:	3301      	adds	r3, #1
 8102636:	683a      	ldr	r2, [r7, #0]
 8102638:	4413      	add	r3, r2
 810263a:	b2ca      	uxtb	r2, r1
 810263c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 810263e:	687b      	ldr	r3, [r7, #4]
 8102640:	685b      	ldr	r3, [r3, #4]
 8102642:	0c19      	lsrs	r1, r3, #16
 8102644:	68fb      	ldr	r3, [r7, #12]
 8102646:	3302      	adds	r3, #2
 8102648:	683a      	ldr	r2, [r7, #0]
 810264a:	4413      	add	r3, r2
 810264c:	b2ca      	uxtb	r2, r1
 810264e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8102650:	687b      	ldr	r3, [r7, #4]
 8102652:	685b      	ldr	r3, [r3, #4]
 8102654:	0e19      	lsrs	r1, r3, #24
 8102656:	68fb      	ldr	r3, [r7, #12]
 8102658:	3303      	adds	r3, #3
 810265a:	683a      	ldr	r2, [r7, #0]
 810265c:	4413      	add	r3, r2
 810265e:	b2ca      	uxtb	r2, r1
 8102660:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8102662:	68fb      	ldr	r3, [r7, #12]
 8102664:	3304      	adds	r3, #4
 8102666:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8102668:	2300      	movs	r3, #0
 810266a:	60bb      	str	r3, [r7, #8]
 810266c:	687b      	ldr	r3, [r7, #4]
 810266e:	685b      	ldr	r3, [r3, #4]
 8102670:	68ba      	ldr	r2, [r7, #8]
 8102672:	429a      	cmp	r2, r3
 8102674:	d218      	bcs.n	81026a8 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 8102676:	687b      	ldr	r3, [r7, #4]
 8102678:	699a      	ldr	r2, [r3, #24]
 810267a:	68bb      	ldr	r3, [r7, #8]
 810267c:	011b      	lsls	r3, r3, #4
 810267e:	18d0      	adds	r0, r2, r3
 8102680:	687b      	ldr	r3, [r7, #4]
 8102682:	699a      	ldr	r2, [r3, #24]
 8102684:	68bb      	ldr	r3, [r7, #8]
 8102686:	011b      	lsls	r3, r3, #4
 8102688:	4413      	add	r3, r2
 810268a:	681b      	ldr	r3, [r3, #0]
 810268c:	681b      	ldr	r3, [r3, #0]
 810268e:	68fa      	ldr	r2, [r7, #12]
 8102690:	6839      	ldr	r1, [r7, #0]
 8102692:	440a      	add	r2, r1
 8102694:	4611      	mov	r1, r2
 8102696:	4798      	blx	r3
 8102698:	4602      	mov	r2, r0
 810269a:	68fb      	ldr	r3, [r7, #12]
 810269c:	4413      	add	r3, r2
 810269e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 81026a0:	68bb      	ldr	r3, [r7, #8]
 81026a2:	3301      	adds	r3, #1
 81026a4:	60bb      	str	r3, [r7, #8]
 81026a6:	e7e1      	b.n	810266c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 81026a8:	687b      	ldr	r3, [r7, #4]
 81026aa:	69d9      	ldr	r1, [r3, #28]
 81026ac:	68fb      	ldr	r3, [r7, #12]
 81026ae:	683a      	ldr	r2, [r7, #0]
 81026b0:	4413      	add	r3, r2
 81026b2:	b2ca      	uxtb	r2, r1
 81026b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 81026b6:	687b      	ldr	r3, [r7, #4]
 81026b8:	69db      	ldr	r3, [r3, #28]
 81026ba:	0a19      	lsrs	r1, r3, #8
 81026bc:	68fb      	ldr	r3, [r7, #12]
 81026be:	3301      	adds	r3, #1
 81026c0:	683a      	ldr	r2, [r7, #0]
 81026c2:	4413      	add	r3, r2
 81026c4:	b2ca      	uxtb	r2, r1
 81026c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 81026c8:	687b      	ldr	r3, [r7, #4]
 81026ca:	69db      	ldr	r3, [r3, #28]
 81026cc:	0c19      	lsrs	r1, r3, #16
 81026ce:	68fb      	ldr	r3, [r7, #12]
 81026d0:	3302      	adds	r3, #2
 81026d2:	683a      	ldr	r2, [r7, #0]
 81026d4:	4413      	add	r3, r2
 81026d6:	b2ca      	uxtb	r2, r1
 81026d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 81026da:	687b      	ldr	r3, [r7, #4]
 81026dc:	69db      	ldr	r3, [r3, #28]
 81026de:	0e19      	lsrs	r1, r3, #24
 81026e0:	68fb      	ldr	r3, [r7, #12]
 81026e2:	3303      	adds	r3, #3
 81026e4:	683a      	ldr	r2, [r7, #0]
 81026e6:	4413      	add	r3, r2
 81026e8:	b2ca      	uxtb	r2, r1
 81026ea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 81026ec:	68fb      	ldr	r3, [r7, #12]
 81026ee:	3304      	adds	r3, #4
 81026f0:	60fb      	str	r3, [r7, #12]
      return offset;
 81026f2:	68fb      	ldr	r3, [r7, #12]
    }
 81026f4:	4618      	mov	r0, r3
 81026f6:	3710      	adds	r7, #16
 81026f8:	46bd      	mov	sp, r7
 81026fa:	bd80      	pop	{r7, pc}

081026fc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 81026fc:	b580      	push	{r7, lr}
 81026fe:	b086      	sub	sp, #24
 8102700:	af00      	add	r7, sp, #0
 8102702:	6078      	str	r0, [r7, #4]
 8102704:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8102706:	2300      	movs	r3, #0
 8102708:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 810270a:	697b      	ldr	r3, [r7, #20]
 810270c:	683a      	ldr	r2, [r7, #0]
 810270e:	4413      	add	r3, r2
 8102710:	781b      	ldrb	r3, [r3, #0]
 8102712:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8102714:	697b      	ldr	r3, [r7, #20]
 8102716:	3301      	adds	r3, #1
 8102718:	683a      	ldr	r2, [r7, #0]
 810271a:	4413      	add	r3, r2
 810271c:	781b      	ldrb	r3, [r3, #0]
 810271e:	021b      	lsls	r3, r3, #8
 8102720:	68fa      	ldr	r2, [r7, #12]
 8102722:	4313      	orrs	r3, r2
 8102724:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8102726:	697b      	ldr	r3, [r7, #20]
 8102728:	3302      	adds	r3, #2
 810272a:	683a      	ldr	r2, [r7, #0]
 810272c:	4413      	add	r3, r2
 810272e:	781b      	ldrb	r3, [r3, #0]
 8102730:	041b      	lsls	r3, r3, #16
 8102732:	68fa      	ldr	r2, [r7, #12]
 8102734:	4313      	orrs	r3, r2
 8102736:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8102738:	697b      	ldr	r3, [r7, #20]
 810273a:	3303      	adds	r3, #3
 810273c:	683a      	ldr	r2, [r7, #0]
 810273e:	4413      	add	r3, r2
 8102740:	781b      	ldrb	r3, [r3, #0]
 8102742:	061b      	lsls	r3, r3, #24
 8102744:	68fa      	ldr	r2, [r7, #12]
 8102746:	4313      	orrs	r3, r2
 8102748:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 810274a:	697b      	ldr	r3, [r7, #20]
 810274c:	3304      	adds	r3, #4
 810274e:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8102750:	687b      	ldr	r3, [r7, #4]
 8102752:	685b      	ldr	r3, [r3, #4]
 8102754:	68fa      	ldr	r2, [r7, #12]
 8102756:	429a      	cmp	r2, r3
 8102758:	d90a      	bls.n	8102770 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 810275a:	687b      	ldr	r3, [r7, #4]
 810275c:	699a      	ldr	r2, [r3, #24]
 810275e:	68fb      	ldr	r3, [r7, #12]
 8102760:	011b      	lsls	r3, r3, #4
 8102762:	4619      	mov	r1, r3
 8102764:	4610      	mov	r0, r2
 8102766:	f009 f877 	bl	810b858 <realloc>
 810276a:	4602      	mov	r2, r0
 810276c:	687b      	ldr	r3, [r7, #4]
 810276e:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8102770:	687b      	ldr	r3, [r7, #4]
 8102772:	68fa      	ldr	r2, [r7, #12]
 8102774:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8102776:	2300      	movs	r3, #0
 8102778:	613b      	str	r3, [r7, #16]
 810277a:	687b      	ldr	r3, [r7, #4]
 810277c:	685b      	ldr	r3, [r3, #4]
 810277e:	693a      	ldr	r2, [r7, #16]
 8102780:	429a      	cmp	r2, r3
 8102782:	d21b      	bcs.n	81027bc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8102784:	687b      	ldr	r3, [r7, #4]
 8102786:	f103 0008 	add.w	r0, r3, #8
 810278a:	697b      	ldr	r3, [r7, #20]
 810278c:	683a      	ldr	r2, [r7, #0]
 810278e:	4413      	add	r3, r2
 8102790:	4619      	mov	r1, r3
 8102792:	f7ff fe6c 	bl	810246e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8102796:	4602      	mov	r2, r0
 8102798:	697b      	ldr	r3, [r7, #20]
 810279a:	4413      	add	r3, r2
 810279c:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 810279e:	687b      	ldr	r3, [r7, #4]
 81027a0:	699a      	ldr	r2, [r3, #24]
 81027a2:	693b      	ldr	r3, [r7, #16]
 81027a4:	011b      	lsls	r3, r3, #4
 81027a6:	18d0      	adds	r0, r2, r3
 81027a8:	687b      	ldr	r3, [r7, #4]
 81027aa:	3308      	adds	r3, #8
 81027ac:	2210      	movs	r2, #16
 81027ae:	4619      	mov	r1, r3
 81027b0:	f009 f83c 	bl	810b82c <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 81027b4:	693b      	ldr	r3, [r7, #16]
 81027b6:	3301      	adds	r3, #1
 81027b8:	613b      	str	r3, [r7, #16]
 81027ba:	e7de      	b.n	810277a <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 81027bc:	697b      	ldr	r3, [r7, #20]
 81027be:	683a      	ldr	r2, [r7, #0]
 81027c0:	4413      	add	r3, r2
 81027c2:	781b      	ldrb	r3, [r3, #0]
 81027c4:	461a      	mov	r2, r3
 81027c6:	687b      	ldr	r3, [r7, #4]
 81027c8:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 81027ca:	687b      	ldr	r3, [r7, #4]
 81027cc:	69da      	ldr	r2, [r3, #28]
 81027ce:	697b      	ldr	r3, [r7, #20]
 81027d0:	3301      	adds	r3, #1
 81027d2:	6839      	ldr	r1, [r7, #0]
 81027d4:	440b      	add	r3, r1
 81027d6:	781b      	ldrb	r3, [r3, #0]
 81027d8:	021b      	lsls	r3, r3, #8
 81027da:	431a      	orrs	r2, r3
 81027dc:	687b      	ldr	r3, [r7, #4]
 81027de:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 81027e0:	687b      	ldr	r3, [r7, #4]
 81027e2:	69da      	ldr	r2, [r3, #28]
 81027e4:	697b      	ldr	r3, [r7, #20]
 81027e6:	3302      	adds	r3, #2
 81027e8:	6839      	ldr	r1, [r7, #0]
 81027ea:	440b      	add	r3, r1
 81027ec:	781b      	ldrb	r3, [r3, #0]
 81027ee:	041b      	lsls	r3, r3, #16
 81027f0:	431a      	orrs	r2, r3
 81027f2:	687b      	ldr	r3, [r7, #4]
 81027f4:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 81027f6:	687b      	ldr	r3, [r7, #4]
 81027f8:	69da      	ldr	r2, [r3, #28]
 81027fa:	697b      	ldr	r3, [r7, #20]
 81027fc:	3303      	adds	r3, #3
 81027fe:	6839      	ldr	r1, [r7, #0]
 8102800:	440b      	add	r3, r1
 8102802:	781b      	ldrb	r3, [r3, #0]
 8102804:	061b      	lsls	r3, r3, #24
 8102806:	431a      	orrs	r2, r3
 8102808:	687b      	ldr	r3, [r7, #4]
 810280a:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 810280c:	697b      	ldr	r3, [r7, #20]
 810280e:	3304      	adds	r3, #4
 8102810:	617b      	str	r3, [r7, #20]
     return offset;
 8102812:	697b      	ldr	r3, [r7, #20]
    }
 8102814:	4618      	mov	r0, r3
 8102816:	3718      	adds	r7, #24
 8102818:	46bd      	mov	sp, r7
 810281a:	bd80      	pop	{r7, pc}

0810281c <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 810281c:	b480      	push	{r7}
 810281e:	b083      	sub	sp, #12
 8102820:	af00      	add	r7, sp, #0
 8102822:	6078      	str	r0, [r7, #4]
 8102824:	4b03      	ldr	r3, [pc, #12]	; (8102834 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8102826:	4618      	mov	r0, r3
 8102828:	370c      	adds	r7, #12
 810282a:	46bd      	mov	sp, r7
 810282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102830:	4770      	bx	lr
 8102832:	bf00      	nop
 8102834:	0810be88 	.word	0x0810be88

08102838 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8102838:	b480      	push	{r7}
 810283a:	b083      	sub	sp, #12
 810283c:	af00      	add	r7, sp, #0
 810283e:	6078      	str	r0, [r7, #4]
 8102840:	4b03      	ldr	r3, [pc, #12]	; (8102850 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8102842:	4618      	mov	r0, r3
 8102844:	370c      	adds	r7, #12
 8102846:	46bd      	mov	sp, r7
 8102848:	f85d 7b04 	ldr.w	r7, [sp], #4
 810284c:	4770      	bx	lr
 810284e:	bf00      	nop
 8102850:	0810bea4 	.word	0x0810bea4

08102854 <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 8102854:	b580      	push	{r7, lr}
 8102856:	b082      	sub	sp, #8
 8102858:	af00      	add	r7, sp, #0
 810285a:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 810285c:	687b      	ldr	r3, [r7, #4]
 810285e:	4618      	mov	r0, r3
 8102860:	f7fd ffaa 	bl	81007b8 <_ZN3ros3MsgC1Ev>
 8102864:	4a09      	ldr	r2, [pc, #36]	; (810288c <_ZN8std_msgs17Float32MultiArrayC1Ev+0x38>)
 8102866:	687b      	ldr	r3, [r7, #4]
 8102868:	601a      	str	r2, [r3, #0]
 810286a:	687b      	ldr	r3, [r7, #4]
 810286c:	3304      	adds	r3, #4
 810286e:	4618      	mov	r0, r3
 8102870:	f7ff feae 	bl	81025d0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 8102874:	687b      	ldr	r3, [r7, #4]
 8102876:	2200      	movs	r2, #0
 8102878:	625a      	str	r2, [r3, #36]	; 0x24
 810287a:	687b      	ldr	r3, [r7, #4]
 810287c:	2200      	movs	r2, #0
 810287e:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8102880:	687b      	ldr	r3, [r7, #4]
 8102882:	4618      	mov	r0, r3
 8102884:	3708      	adds	r7, #8
 8102886:	46bd      	mov	sp, r7
 8102888:	bd80      	pop	{r7, pc}
 810288a:	bf00      	nop
 810288c:	0810c068 	.word	0x0810c068

08102890 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8102890:	b580      	push	{r7, lr}
 8102892:	b086      	sub	sp, #24
 8102894:	af00      	add	r7, sp, #0
 8102896:	6078      	str	r0, [r7, #4]
 8102898:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 810289a:	2300      	movs	r3, #0
 810289c:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 810289e:	687b      	ldr	r3, [r7, #4]
 81028a0:	1d18      	adds	r0, r3, #4
 81028a2:	697b      	ldr	r3, [r7, #20]
 81028a4:	683a      	ldr	r2, [r7, #0]
 81028a6:	4413      	add	r3, r2
 81028a8:	4619      	mov	r1, r3
 81028aa:	f7ff feb1 	bl	8102610 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 81028ae:	4602      	mov	r2, r0
 81028b0:	697b      	ldr	r3, [r7, #20]
 81028b2:	4413      	add	r3, r2
 81028b4:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 81028b6:	687b      	ldr	r3, [r7, #4]
 81028b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 81028ba:	697b      	ldr	r3, [r7, #20]
 81028bc:	683a      	ldr	r2, [r7, #0]
 81028be:	4413      	add	r3, r2
 81028c0:	b2ca      	uxtb	r2, r1
 81028c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 81028c4:	687b      	ldr	r3, [r7, #4]
 81028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81028c8:	0a19      	lsrs	r1, r3, #8
 81028ca:	697b      	ldr	r3, [r7, #20]
 81028cc:	3301      	adds	r3, #1
 81028ce:	683a      	ldr	r2, [r7, #0]
 81028d0:	4413      	add	r3, r2
 81028d2:	b2ca      	uxtb	r2, r1
 81028d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 81028d6:	687b      	ldr	r3, [r7, #4]
 81028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81028da:	0c19      	lsrs	r1, r3, #16
 81028dc:	697b      	ldr	r3, [r7, #20]
 81028de:	3302      	adds	r3, #2
 81028e0:	683a      	ldr	r2, [r7, #0]
 81028e2:	4413      	add	r3, r2
 81028e4:	b2ca      	uxtb	r2, r1
 81028e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 81028e8:	687b      	ldr	r3, [r7, #4]
 81028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81028ec:	0e19      	lsrs	r1, r3, #24
 81028ee:	697b      	ldr	r3, [r7, #20]
 81028f0:	3303      	adds	r3, #3
 81028f2:	683a      	ldr	r2, [r7, #0]
 81028f4:	4413      	add	r3, r2
 81028f6:	b2ca      	uxtb	r2, r1
 81028f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 81028fa:	697b      	ldr	r3, [r7, #20]
 81028fc:	3304      	adds	r3, #4
 81028fe:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8102900:	2300      	movs	r3, #0
 8102902:	613b      	str	r3, [r7, #16]
 8102904:	687b      	ldr	r3, [r7, #4]
 8102906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102908:	693a      	ldr	r2, [r7, #16]
 810290a:	429a      	cmp	r2, r3
 810290c:	d22b      	bcs.n	8102966 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xd6>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 810290e:	687b      	ldr	r3, [r7, #4]
 8102910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102912:	693b      	ldr	r3, [r7, #16]
 8102914:	009b      	lsls	r3, r3, #2
 8102916:	4413      	add	r3, r2
 8102918:	681b      	ldr	r3, [r3, #0]
 810291a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 810291c:	68f9      	ldr	r1, [r7, #12]
 810291e:	697b      	ldr	r3, [r7, #20]
 8102920:	683a      	ldr	r2, [r7, #0]
 8102922:	4413      	add	r3, r2
 8102924:	b2ca      	uxtb	r2, r1
 8102926:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8102928:	68fb      	ldr	r3, [r7, #12]
 810292a:	0a19      	lsrs	r1, r3, #8
 810292c:	697b      	ldr	r3, [r7, #20]
 810292e:	3301      	adds	r3, #1
 8102930:	683a      	ldr	r2, [r7, #0]
 8102932:	4413      	add	r3, r2
 8102934:	b2ca      	uxtb	r2, r1
 8102936:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8102938:	68fb      	ldr	r3, [r7, #12]
 810293a:	0c19      	lsrs	r1, r3, #16
 810293c:	697b      	ldr	r3, [r7, #20]
 810293e:	3302      	adds	r3, #2
 8102940:	683a      	ldr	r2, [r7, #0]
 8102942:	4413      	add	r3, r2
 8102944:	b2ca      	uxtb	r2, r1
 8102946:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8102948:	68fb      	ldr	r3, [r7, #12]
 810294a:	0e19      	lsrs	r1, r3, #24
 810294c:	697b      	ldr	r3, [r7, #20]
 810294e:	3303      	adds	r3, #3
 8102950:	683a      	ldr	r2, [r7, #0]
 8102952:	4413      	add	r3, r2
 8102954:	b2ca      	uxtb	r2, r1
 8102956:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8102958:	697b      	ldr	r3, [r7, #20]
 810295a:	3304      	adds	r3, #4
 810295c:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 810295e:	693b      	ldr	r3, [r7, #16]
 8102960:	3301      	adds	r3, #1
 8102962:	613b      	str	r3, [r7, #16]
 8102964:	e7ce      	b.n	8102904 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x74>
      }
      return offset;
 8102966:	697b      	ldr	r3, [r7, #20]
    }
 8102968:	4618      	mov	r0, r3
 810296a:	3718      	adds	r7, #24
 810296c:	46bd      	mov	sp, r7
 810296e:	bd80      	pop	{r7, pc}

08102970 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8102970:	b580      	push	{r7, lr}
 8102972:	b086      	sub	sp, #24
 8102974:	af00      	add	r7, sp, #0
 8102976:	6078      	str	r0, [r7, #4]
 8102978:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 810297a:	2300      	movs	r3, #0
 810297c:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 810297e:	687b      	ldr	r3, [r7, #4]
 8102980:	1d18      	adds	r0, r3, #4
 8102982:	697b      	ldr	r3, [r7, #20]
 8102984:	683a      	ldr	r2, [r7, #0]
 8102986:	4413      	add	r3, r2
 8102988:	4619      	mov	r1, r3
 810298a:	f7ff feb7 	bl	81026fc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 810298e:	4602      	mov	r2, r0
 8102990:	697b      	ldr	r3, [r7, #20]
 8102992:	4413      	add	r3, r2
 8102994:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8102996:	697b      	ldr	r3, [r7, #20]
 8102998:	683a      	ldr	r2, [r7, #0]
 810299a:	4413      	add	r3, r2
 810299c:	781b      	ldrb	r3, [r3, #0]
 810299e:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 81029a0:	697b      	ldr	r3, [r7, #20]
 81029a2:	3301      	adds	r3, #1
 81029a4:	683a      	ldr	r2, [r7, #0]
 81029a6:	4413      	add	r3, r2
 81029a8:	781b      	ldrb	r3, [r3, #0]
 81029aa:	021b      	lsls	r3, r3, #8
 81029ac:	68fa      	ldr	r2, [r7, #12]
 81029ae:	4313      	orrs	r3, r2
 81029b0:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 81029b2:	697b      	ldr	r3, [r7, #20]
 81029b4:	3302      	adds	r3, #2
 81029b6:	683a      	ldr	r2, [r7, #0]
 81029b8:	4413      	add	r3, r2
 81029ba:	781b      	ldrb	r3, [r3, #0]
 81029bc:	041b      	lsls	r3, r3, #16
 81029be:	68fa      	ldr	r2, [r7, #12]
 81029c0:	4313      	orrs	r3, r2
 81029c2:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 81029c4:	697b      	ldr	r3, [r7, #20]
 81029c6:	3303      	adds	r3, #3
 81029c8:	683a      	ldr	r2, [r7, #0]
 81029ca:	4413      	add	r3, r2
 81029cc:	781b      	ldrb	r3, [r3, #0]
 81029ce:	061b      	lsls	r3, r3, #24
 81029d0:	68fa      	ldr	r2, [r7, #12]
 81029d2:	4313      	orrs	r3, r2
 81029d4:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 81029d6:	697b      	ldr	r3, [r7, #20]
 81029d8:	3304      	adds	r3, #4
 81029da:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81029e0:	68fa      	ldr	r2, [r7, #12]
 81029e2:	429a      	cmp	r2, r3
 81029e4:	d90a      	bls.n	81029fc <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 81029e6:	687b      	ldr	r3, [r7, #4]
 81029e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81029ea:	68fb      	ldr	r3, [r7, #12]
 81029ec:	009b      	lsls	r3, r3, #2
 81029ee:	4619      	mov	r1, r3
 81029f0:	4610      	mov	r0, r2
 81029f2:	f008 ff31 	bl	810b858 <realloc>
 81029f6:	4602      	mov	r2, r0
 81029f8:	687b      	ldr	r3, [r7, #4]
 81029fa:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 81029fc:	687b      	ldr	r3, [r7, #4]
 81029fe:	68fa      	ldr	r2, [r7, #12]
 8102a00:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8102a02:	2300      	movs	r3, #0
 8102a04:	613b      	str	r3, [r7, #16]
 8102a06:	687b      	ldr	r3, [r7, #4]
 8102a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102a0a:	693a      	ldr	r2, [r7, #16]
 8102a0c:	429a      	cmp	r2, r3
 8102a0e:	d236      	bcs.n	8102a7e <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x10e>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8102a10:	2300      	movs	r3, #0
 8102a12:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8102a14:	68bb      	ldr	r3, [r7, #8]
 8102a16:	697a      	ldr	r2, [r7, #20]
 8102a18:	6839      	ldr	r1, [r7, #0]
 8102a1a:	440a      	add	r2, r1
 8102a1c:	7812      	ldrb	r2, [r2, #0]
 8102a1e:	4313      	orrs	r3, r2
 8102a20:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8102a22:	68ba      	ldr	r2, [r7, #8]
 8102a24:	697b      	ldr	r3, [r7, #20]
 8102a26:	3301      	adds	r3, #1
 8102a28:	6839      	ldr	r1, [r7, #0]
 8102a2a:	440b      	add	r3, r1
 8102a2c:	781b      	ldrb	r3, [r3, #0]
 8102a2e:	021b      	lsls	r3, r3, #8
 8102a30:	4313      	orrs	r3, r2
 8102a32:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8102a34:	68ba      	ldr	r2, [r7, #8]
 8102a36:	697b      	ldr	r3, [r7, #20]
 8102a38:	3302      	adds	r3, #2
 8102a3a:	6839      	ldr	r1, [r7, #0]
 8102a3c:	440b      	add	r3, r1
 8102a3e:	781b      	ldrb	r3, [r3, #0]
 8102a40:	041b      	lsls	r3, r3, #16
 8102a42:	4313      	orrs	r3, r2
 8102a44:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8102a46:	68ba      	ldr	r2, [r7, #8]
 8102a48:	697b      	ldr	r3, [r7, #20]
 8102a4a:	3303      	adds	r3, #3
 8102a4c:	6839      	ldr	r1, [r7, #0]
 8102a4e:	440b      	add	r3, r1
 8102a50:	781b      	ldrb	r3, [r3, #0]
 8102a52:	061b      	lsls	r3, r3, #24
 8102a54:	4313      	orrs	r3, r2
 8102a56:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8102a58:	68ba      	ldr	r2, [r7, #8]
 8102a5a:	687b      	ldr	r3, [r7, #4]
 8102a5c:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8102a5e:	697b      	ldr	r3, [r7, #20]
 8102a60:	3304      	adds	r3, #4
 8102a62:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 8102a64:	687b      	ldr	r3, [r7, #4]
 8102a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102a68:	693b      	ldr	r3, [r7, #16]
 8102a6a:	009b      	lsls	r3, r3, #2
 8102a6c:	4413      	add	r3, r2
 8102a6e:	687a      	ldr	r2, [r7, #4]
 8102a70:	3228      	adds	r2, #40	; 0x28
 8102a72:	6812      	ldr	r2, [r2, #0]
 8102a74:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8102a76:	693b      	ldr	r3, [r7, #16]
 8102a78:	3301      	adds	r3, #1
 8102a7a:	613b      	str	r3, [r7, #16]
 8102a7c:	e7c3      	b.n	8102a06 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x96>
      }
     return offset;
 8102a7e:	697b      	ldr	r3, [r7, #20]
    }
 8102a80:	4618      	mov	r0, r3
 8102a82:	3718      	adds	r7, #24
 8102a84:	46bd      	mov	sp, r7
 8102a86:	bd80      	pop	{r7, pc}

08102a88 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/Float32MultiArray"; };
 8102a88:	b480      	push	{r7}
 8102a8a:	b083      	sub	sp, #12
 8102a8c:	af00      	add	r7, sp, #0
 8102a8e:	6078      	str	r0, [r7, #4]
 8102a90:	4b03      	ldr	r3, [pc, #12]	; (8102aa0 <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 8102a92:	4618      	mov	r0, r3
 8102a94:	370c      	adds	r7, #12
 8102a96:	46bd      	mov	sp, r7
 8102a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a9c:	4770      	bx	lr
 8102a9e:	bf00      	nop
 8102aa0:	0810bec8 	.word	0x0810bec8

08102aa4 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    const char * getMD5(){ return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 8102aa4:	b480      	push	{r7}
 8102aa6:	b083      	sub	sp, #12
 8102aa8:	af00      	add	r7, sp, #0
 8102aaa:	6078      	str	r0, [r7, #4]
 8102aac:	4b03      	ldr	r3, [pc, #12]	; (8102abc <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 8102aae:	4618      	mov	r0, r3
 8102ab0:	370c      	adds	r7, #12
 8102ab2:	46bd      	mov	sp, r7
 8102ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ab8:	4770      	bx	lr
 8102aba:	bf00      	nop
 8102abc:	0810bee4 	.word	0x0810bee4

08102ac0 <_ZN8std_msgs4Int8C1Ev>:
  {
    public:
      typedef int8_t _data_type;
      _data_type data;

    Int8():
 8102ac0:	b580      	push	{r7, lr}
 8102ac2:	b082      	sub	sp, #8
 8102ac4:	af00      	add	r7, sp, #0
 8102ac6:	6078      	str	r0, [r7, #4]
      data(0)
 8102ac8:	687b      	ldr	r3, [r7, #4]
 8102aca:	4618      	mov	r0, r3
 8102acc:	f7fd fe74 	bl	81007b8 <_ZN3ros3MsgC1Ev>
 8102ad0:	4a05      	ldr	r2, [pc, #20]	; (8102ae8 <_ZN8std_msgs4Int8C1Ev+0x28>)
 8102ad2:	687b      	ldr	r3, [r7, #4]
 8102ad4:	601a      	str	r2, [r3, #0]
 8102ad6:	687b      	ldr	r3, [r7, #4]
 8102ad8:	2200      	movs	r2, #0
 8102ada:	711a      	strb	r2, [r3, #4]
    {
    }
 8102adc:	687b      	ldr	r3, [r7, #4]
 8102ade:	4618      	mov	r0, r3
 8102ae0:	3708      	adds	r7, #8
 8102ae2:	46bd      	mov	sp, r7
 8102ae4:	bd80      	pop	{r7, pc}
 8102ae6:	bf00      	nop
 8102ae8:	0810c050 	.word	0x0810c050

08102aec <_ZNK8std_msgs4Int89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8102aec:	b480      	push	{r7}
 8102aee:	b085      	sub	sp, #20
 8102af0:	af00      	add	r7, sp, #0
 8102af2:	6078      	str	r0, [r7, #4]
 8102af4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8102af6:	2300      	movs	r3, #0
 8102af8:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8102afa:	687b      	ldr	r3, [r7, #4]
 8102afc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8102b00:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8102b02:	68fb      	ldr	r3, [r7, #12]
 8102b04:	683a      	ldr	r2, [r7, #0]
 8102b06:	4413      	add	r3, r2
 8102b08:	7a3a      	ldrb	r2, [r7, #8]
 8102b0a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8102b0c:	68fb      	ldr	r3, [r7, #12]
 8102b0e:	3301      	adds	r3, #1
 8102b10:	60fb      	str	r3, [r7, #12]
      return offset;
 8102b12:	68fb      	ldr	r3, [r7, #12]
    }
 8102b14:	4618      	mov	r0, r3
 8102b16:	3714      	adds	r7, #20
 8102b18:	46bd      	mov	sp, r7
 8102b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b1e:	4770      	bx	lr

08102b20 <_ZN8std_msgs4Int811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8102b20:	b480      	push	{r7}
 8102b22:	b085      	sub	sp, #20
 8102b24:	af00      	add	r7, sp, #0
 8102b26:	6078      	str	r0, [r7, #4]
 8102b28:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8102b2a:	2300      	movs	r3, #0
 8102b2c:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8102b2e:	2300      	movs	r3, #0
 8102b30:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8102b32:	7a3a      	ldrb	r2, [r7, #8]
 8102b34:	68fb      	ldr	r3, [r7, #12]
 8102b36:	6839      	ldr	r1, [r7, #0]
 8102b38:	440b      	add	r3, r1
 8102b3a:	781b      	ldrb	r3, [r3, #0]
 8102b3c:	4313      	orrs	r3, r2
 8102b3e:	b2db      	uxtb	r3, r3
 8102b40:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8102b42:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8102b46:	687b      	ldr	r3, [r7, #4]
 8102b48:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8102b4a:	68fb      	ldr	r3, [r7, #12]
 8102b4c:	3301      	adds	r3, #1
 8102b4e:	60fb      	str	r3, [r7, #12]
     return offset;
 8102b50:	68fb      	ldr	r3, [r7, #12]
    }
 8102b52:	4618      	mov	r0, r3
 8102b54:	3714      	adds	r7, #20
 8102b56:	46bd      	mov	sp, r7
 8102b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b5c:	4770      	bx	lr
	...

08102b60 <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 8102b60:	b480      	push	{r7}
 8102b62:	b083      	sub	sp, #12
 8102b64:	af00      	add	r7, sp, #0
 8102b66:	6078      	str	r0, [r7, #4]
 8102b68:	4b03      	ldr	r3, [pc, #12]	; (8102b78 <_ZN8std_msgs4Int87getTypeEv+0x18>)
 8102b6a:	4618      	mov	r0, r3
 8102b6c:	370c      	adds	r7, #12
 8102b6e:	46bd      	mov	sp, r7
 8102b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b74:	4770      	bx	lr
 8102b76:	bf00      	nop
 8102b78:	0810bf08 	.word	0x0810bf08

08102b7c <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 8102b7c:	b480      	push	{r7}
 8102b7e:	b083      	sub	sp, #12
 8102b80:	af00      	add	r7, sp, #0
 8102b82:	6078      	str	r0, [r7, #4]
 8102b84:	4b03      	ldr	r3, [pc, #12]	; (8102b94 <_ZN8std_msgs4Int86getMD5Ev+0x18>)
 8102b86:	4618      	mov	r0, r3
 8102b88:	370c      	adds	r7, #12
 8102b8a:	46bd      	mov	sp, r7
 8102b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b90:	4770      	bx	lr
 8102b92:	bf00      	nop
 8102b94:	0810bf18 	.word	0x0810bf18

08102b98 <_Z12ROS_SpinOncev>:
ros::Publisher Nav_CurrentXYThetaPublisher("Location_state", &ROBOT_CurrentXYTheta_toROS_arr);
ros::Publisher Nav_CurrentStatutsPublisher("Robot_Status"  , &Nav_Robot_Current_Status_i8 ) ;
ros::Subscriber<std_msgs::Float32MultiArray> Nav_Orders_Subscriber("MASTER_Orders", & Nav_Orders_MessageRecievedCallback);

void ROS_SpinOnce(void)
{
 8102b98:	b580      	push	{r7, lr}
 8102b9a:	af00      	add	r7, sp, #0
	nh.spinOnce();
 8102b9c:	4802      	ldr	r0, [pc, #8]	; (8102ba8 <_Z12ROS_SpinOncev+0x10>)
 8102b9e:	f000 fa47 	bl	8103030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv>
}
 8102ba2:	bf00      	nop
 8102ba4:	bd80      	pop	{r7, pc}
 8102ba6:	bf00      	nop
 8102ba8:	100004b4 	.word	0x100004b4

08102bac <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE>:
 * Brief : This function will be called every time MASTER publish new orders.
 *  first state is to verify the two  nodes are connected.
 * Second state is the real communication and will be sending ORDERS to CM7
 */
void Nav_Orders_MessageRecievedCallback(const std_msgs::Float32MultiArray & msg)
{
 8102bac:	b580      	push	{r7, lr}
 8102bae:	b084      	sub	sp, #16
 8102bb0:	af00      	add	r7, sp, #0
 8102bb2:	6078      	str	r0, [r7, #4]
	nh.loginfo("STM GOT THE ORDERS");
 8102bb4:	493a      	ldr	r1, [pc, #232]	; (8102ca0 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0xf4>)
 8102bb6:	483b      	ldr	r0, [pc, #236]	; (8102ca4 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0xf8>)
 8102bb8:	f000 fca5 	bl	8103506 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7loginfoEPKc>
	switch( ROS_Node_CurrentState_en)
 8102bbc:	4b3a      	ldr	r3, [pc, #232]	; (8102ca8 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0xfc>)
 8102bbe:	781b      	ldrb	r3, [r3, #0]
 8102bc0:	2b00      	cmp	r3, #0
 8102bc2:	d002      	beq.n	8102bca <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x1e>
 8102bc4:	2b01      	cmp	r3, #1
 8102bc6:	d009      	beq.n	8102bdc <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x30>
		ringbuff_write(rb_cm4_to_cm7, Nav_Orders_fromROS_arr, 4 * sizeof(float));
	}break;
	ROS_SpinOnce();

	}
}
 8102bc8:	e065      	b.n	8102c96 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0xea>
		vNav_CurrentStatus_Publisher();
 8102bca:	f000 f8c3 	bl	8102d54 <_Z28vNav_CurrentStatus_Publisherv>
		ROS_Node_CurrentState_en = ROS_Node_Communicating ;
 8102bce:	4b36      	ldr	r3, [pc, #216]	; (8102ca8 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0xfc>)
 8102bd0:	2201      	movs	r2, #1
 8102bd2:	701a      	strb	r2, [r3, #0]
		nh.spinOnce();
 8102bd4:	4833      	ldr	r0, [pc, #204]	; (8102ca4 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0xf8>)
 8102bd6:	f000 fa2b 	bl	8103030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv>
	}break;
 8102bda:	e05c      	b.n	8102c96 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0xea>
		Nav_XYTargets_RecievedFromMaster.data = msg.data ;
 8102bdc:	687b      	ldr	r3, [r7, #4]
 8102bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102be0:	4a32      	ldr	r2, [pc, #200]	; (8102cac <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x100>)
 8102be2:	62d3      	str	r3, [r2, #44]	; 0x2c
		for ( uint8_t index = 0 ; index < msg.data_length ; index ++ )
 8102be4:	2300      	movs	r3, #0
 8102be6:	73fb      	strb	r3, [r7, #15]
 8102be8:	7bfa      	ldrb	r2, [r7, #15]
 8102bea:	687b      	ldr	r3, [r7, #4]
 8102bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102bee:	429a      	cmp	r2, r3
 8102bf0:	d20e      	bcs.n	8102c10 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x64>
			Nav_Orders_fromROS_arr[index] = (float) Nav_XYTargets_RecievedFromMaster.data[index] ;
 8102bf2:	4b2e      	ldr	r3, [pc, #184]	; (8102cac <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x100>)
 8102bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102bf6:	7bfb      	ldrb	r3, [r7, #15]
 8102bf8:	009b      	lsls	r3, r3, #2
 8102bfa:	441a      	add	r2, r3
 8102bfc:	7bfb      	ldrb	r3, [r7, #15]
 8102bfe:	6812      	ldr	r2, [r2, #0]
 8102c00:	492b      	ldr	r1, [pc, #172]	; (8102cb0 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 8102c02:	009b      	lsls	r3, r3, #2
 8102c04:	440b      	add	r3, r1
 8102c06:	601a      	str	r2, [r3, #0]
		for ( uint8_t index = 0 ; index < msg.data_length ; index ++ )
 8102c08:	7bfb      	ldrb	r3, [r7, #15]
 8102c0a:	3301      	adds	r3, #1
 8102c0c:	73fb      	strb	r3, [r7, #15]
 8102c0e:	e7eb      	b.n	8102be8 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x3c>
		if (Nav_Orders_fromROS_arr[0] == MASTER_Navigator_Still_IDLE)
 8102c10:	4b27      	ldr	r3, [pc, #156]	; (8102cb0 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 8102c12:	ed93 7a00 	vldr	s14, [r3]
 8102c16:	4b27      	ldr	r3, [pc, #156]	; (8102cb4 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8102c18:	f993 3000 	ldrsb.w	r3, [r3]
 8102c1c:	ee07 3a90 	vmov	s15, r3
 8102c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102c24:	eeb4 7a67 	vcmp.f32	s14, s15
 8102c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102c2c:	d109      	bne.n	8102c42 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x96>
			Nav_Robot_Current_Status_i8.data =(int8_t) MASTER_Navigator_MessageRecieved 	;
 8102c2e:	4b22      	ldr	r3, [pc, #136]	; (8102cb8 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 8102c30:	f993 2000 	ldrsb.w	r2, [r3]
 8102c34:	4b21      	ldr	r3, [pc, #132]	; (8102cbc <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x110>)
 8102c36:	711a      	strb	r2, [r3, #4]
			Nav_CurrentStatutsPublisher.publish(&Nav_Robot_Current_Status_i8)		;
 8102c38:	4920      	ldr	r1, [pc, #128]	; (8102cbc <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x110>)
 8102c3a:	4821      	ldr	r0, [pc, #132]	; (8102cc0 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x114>)
 8102c3c:	f7fe fc1b 	bl	8101476 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
 8102c40:	e021      	b.n	8102c86 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0xda>
		else if(  Nav_Orders_fromROS_arr[0] == MASTER_Navigator_Stop_Flag )
 8102c42:	4b1b      	ldr	r3, [pc, #108]	; (8102cb0 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 8102c44:	ed93 7a00 	vldr	s14, [r3]
 8102c48:	4b1e      	ldr	r3, [pc, #120]	; (8102cc4 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x118>)
 8102c4a:	f993 3000 	ldrsb.w	r3, [r3]
 8102c4e:	ee07 3a90 	vmov	s15, r3
 8102c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8102c56:	eeb4 7a67 	vcmp.f32	s14, s15
 8102c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8102c5e:	d109      	bne.n	8102c74 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0xc8>
			nh.loginfo("SuddenStop");
 8102c60:	4919      	ldr	r1, [pc, #100]	; (8102cc8 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x11c>)
 8102c62:	4810      	ldr	r0, [pc, #64]	; (8102ca4 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0xf8>)
 8102c64:	f000 fc4f 	bl	8103506 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7loginfoEPKc>
			Nav_Robot_Current_Status_i8.data =(int8_t) MASTER_Navigator_Stop_Flag 	;
 8102c68:	4b16      	ldr	r3, [pc, #88]	; (8102cc4 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x118>)
 8102c6a:	f993 2000 	ldrsb.w	r2, [r3]
 8102c6e:	4b13      	ldr	r3, [pc, #76]	; (8102cbc <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x110>)
 8102c70:	711a      	strb	r2, [r3, #4]
 8102c72:	e008      	b.n	8102c86 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0xda>
			Nav_Robot_Current_Status_i8.data =(int8_t) MASTER_Navigator_MessageRecieved 	;
 8102c74:	4b10      	ldr	r3, [pc, #64]	; (8102cb8 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 8102c76:	f993 2000 	ldrsb.w	r2, [r3]
 8102c7a:	4b10      	ldr	r3, [pc, #64]	; (8102cbc <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x110>)
 8102c7c:	711a      	strb	r2, [r3, #4]
			Nav_CurrentStatutsPublisher.publish(&Nav_Robot_Current_Status_i8)	;
 8102c7e:	490f      	ldr	r1, [pc, #60]	; (8102cbc <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x110>)
 8102c80:	480f      	ldr	r0, [pc, #60]	; (8102cc0 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x114>)
 8102c82:	f7fe fbf8 	bl	8101476 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		ringbuff_write(rb_cm4_to_cm7, Nav_Orders_fromROS_arr, 4 * sizeof(float));
 8102c86:	4b11      	ldr	r3, [pc, #68]	; (8102ccc <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x120>)
 8102c88:	681b      	ldr	r3, [r3, #0]
 8102c8a:	2210      	movs	r2, #16
 8102c8c:	4908      	ldr	r1, [pc, #32]	; (8102cb0 <_Z34Nav_Orders_MessageRecievedCallbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 8102c8e:	4618      	mov	r0, r3
 8102c90:	f001 f9b6 	bl	8104000 <ringbuff_write>
	}break;
 8102c94:	bf00      	nop
}
 8102c96:	bf00      	nop
 8102c98:	3710      	adds	r7, #16
 8102c9a:	46bd      	mov	sp, r7
 8102c9c:	bd80      	pop	{r7, pc}
 8102c9e:	bf00      	nop
 8102ca0:	0810bf3c 	.word	0x0810bf3c
 8102ca4:	100004b4 	.word	0x100004b4
 8102ca8:	100000a4 	.word	0x100000a4
 8102cac:	100027c8 	.word	0x100027c8
 8102cb0:	100025e8 	.word	0x100025e8
 8102cb4:	10000009 	.word	0x10000009
 8102cb8:	100025e4 	.word	0x100025e4
 8102cbc:	100027f8 	.word	0x100027f8
 8102cc0:	10002814 	.word	0x10002814
 8102cc4:	10000008 	.word	0x10000008
 8102cc8:	0810bf50 	.word	0x0810bf50
 8102ccc:	1000000c 	.word	0x1000000c

08102cd0 <USART_RX_Callback>:


extern "C" void USART_RX_Callback()
{
 8102cd0:	b580      	push	{r7, lr}
 8102cd2:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	ringbuffer_putchar(&rb, huart3.Instance->RDR);
 8102cd4:	4b04      	ldr	r3, [pc, #16]	; (8102ce8 <USART_RX_Callback+0x18>)
 8102cd6:	681b      	ldr	r3, [r3, #0]
 8102cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102cda:	b2db      	uxtb	r3, r3
 8102cdc:	4619      	mov	r1, r3
 8102cde:	4803      	ldr	r0, [pc, #12]	; (8102cec <USART_RX_Callback+0x1c>)
 8102ce0:	f001 fb94 	bl	810440c <_Z18ringbuffer_putcharP10ringbufferh>
}
 8102ce4:	bf00      	nop
 8102ce6:	bd80      	pop	{r7, pc}
 8102ce8:	100028b8 	.word	0x100028b8
 8102cec:	100004a8 	.word	0x100004a8

08102cf0 <_Z10vROS_Setupv>:

void vROS_Setup()
{
 8102cf0:	b580      	push	{r7, lr}
 8102cf2:	af00      	add	r7, sp, #0

	ringbuffer_init(&rb, RxBuffer, rbuflen);
 8102cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102cf8:	490f      	ldr	r1, [pc, #60]	; (8102d38 <_Z10vROS_Setupv+0x48>)
 8102cfa:	4810      	ldr	r0, [pc, #64]	; (8102d3c <_Z10vROS_Setupv+0x4c>)
 8102cfc:	f001 fc2c 	bl	8104558 <_Z15ringbuffer_initP10ringbufferPhs>
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8102d00:	4b0f      	ldr	r3, [pc, #60]	; (8102d40 <_Z10vROS_Setupv+0x50>)
 8102d02:	681b      	ldr	r3, [r3, #0]
 8102d04:	681a      	ldr	r2, [r3, #0]
 8102d06:	4b0e      	ldr	r3, [pc, #56]	; (8102d40 <_Z10vROS_Setupv+0x50>)
 8102d08:	681b      	ldr	r3, [r3, #0]
 8102d0a:	f042 0220 	orr.w	r2, r2, #32
 8102d0e:	601a      	str	r2, [r3, #0]
	//	__HAL_UART_ENABLE_IT(&huart3,UART_IT_TXE);

	// Initialize ROS
	nh.initNode();
 8102d10:	480c      	ldr	r0, [pc, #48]	; (8102d44 <_Z10vROS_Setupv+0x54>)
 8102d12:	f000 fc06 	bl	8103522 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8initNodeEv>
	nh.subscribe(Nav_Orders_Subscriber);
 8102d16:	490c      	ldr	r1, [pc, #48]	; (8102d48 <_Z10vROS_Setupv+0x58>)
 8102d18:	480a      	ldr	r0, [pc, #40]	; (8102d44 <_Z10vROS_Setupv+0x54>)
 8102d1a:	f000 fc2b 	bl	8103574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeINS_10SubscriberIN8std_msgs17Float32MultiArrayEvEEEEbRT_>
	nh.advertise(Nav_CurrentStatutsPublisher);
 8102d1e:	490b      	ldr	r1, [pc, #44]	; (8102d4c <_Z10vROS_Setupv+0x5c>)
 8102d20:	4808      	ldr	r0, [pc, #32]	; (8102d44 <_Z10vROS_Setupv+0x54>)
 8102d22:	f000 fc54 	bl	81035ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE>
	nh.advertise(Nav_CurrentXYThetaPublisher) ;
 8102d26:	490a      	ldr	r1, [pc, #40]	; (8102d50 <_Z10vROS_Setupv+0x60>)
 8102d28:	4806      	ldr	r0, [pc, #24]	; (8102d44 <_Z10vROS_Setupv+0x54>)
 8102d2a:	f000 fc50 	bl	81035ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE>

	nh.spinOnce();
 8102d2e:	4805      	ldr	r0, [pc, #20]	; (8102d44 <_Z10vROS_Setupv+0x54>)
 8102d30:	f000 f97e 	bl	8103030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv>

}
 8102d34:	bf00      	nop
 8102d36:	bd80      	pop	{r7, pc}
 8102d38:	100000a8 	.word	0x100000a8
 8102d3c:	100004a8 	.word	0x100004a8
 8102d40:	100028b8 	.word	0x100028b8
 8102d44:	100004b4 	.word	0x100004b4
 8102d48:	10002828 	.word	0x10002828
 8102d4c:	10002814 	.word	0x10002814
 8102d50:	10002800 	.word	0x10002800

08102d54 <_Z28vNav_CurrentStatus_Publisherv>:
/*
 * Brief : This function will be called from Timer callback  ONLY WHEN there is an update in the status coming from CM7
 * */

void vNav_CurrentStatus_Publisher()
{
 8102d54:	b580      	push	{r7, lr}
 8102d56:	b082      	sub	sp, #8
 8102d58:	af00      	add	r7, sp, #0
	nh.loginfo("Status PUBLISHER");
 8102d5a:	490d      	ldr	r1, [pc, #52]	; (8102d90 <_Z28vNav_CurrentStatus_Publisherv+0x3c>)
 8102d5c:	480d      	ldr	r0, [pc, #52]	; (8102d94 <_Z28vNav_CurrentStatus_Publisherv+0x40>)
 8102d5e:	f000 fbd2 	bl	8103506 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7loginfoEPKc>

	Nav_Robot_Current_Status_i8.data =(int8_t) ROBOT_CurrentStatuts_i8 [0] 	;
 8102d62:	4b0d      	ldr	r3, [pc, #52]	; (8102d98 <_Z28vNav_CurrentStatus_Publisherv+0x44>)
 8102d64:	edd3 7a00 	vldr	s15, [r3]
 8102d68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8102d6c:	edc7 7a01 	vstr	s15, [r7, #4]
 8102d70:	793b      	ldrb	r3, [r7, #4]
 8102d72:	b25a      	sxtb	r2, r3
 8102d74:	4b09      	ldr	r3, [pc, #36]	; (8102d9c <_Z28vNav_CurrentStatus_Publisherv+0x48>)
 8102d76:	711a      	strb	r2, [r3, #4]
	Nav_CurrentStatutsPublisher.publish(&Nav_Robot_Current_Status_i8)	;
 8102d78:	4908      	ldr	r1, [pc, #32]	; (8102d9c <_Z28vNav_CurrentStatus_Publisherv+0x48>)
 8102d7a:	4809      	ldr	r0, [pc, #36]	; (8102da0 <_Z28vNav_CurrentStatus_Publisherv+0x4c>)
 8102d7c:	f7fe fb7b 	bl	8101476 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nh.spinOnce();
 8102d80:	4804      	ldr	r0, [pc, #16]	; (8102d94 <_Z28vNav_CurrentStatus_Publisherv+0x40>)
 8102d82:	f000 f955 	bl	8103030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv>
}
 8102d86:	bf00      	nop
 8102d88:	3708      	adds	r7, #8
 8102d8a:	46bd      	mov	sp, r7
 8102d8c:	bd80      	pop	{r7, pc}
 8102d8e:	bf00      	nop
 8102d90:	0810bf5c 	.word	0x0810bf5c
 8102d94:	100004b4 	.word	0x100004b4
 8102d98:	100000a0 	.word	0x100000a0
 8102d9c:	100027f8 	.word	0x100027f8
 8102da0:	10002814 	.word	0x10002814

08102da4 <_Z29vNav_CurrentXYTheta_Publisherv>:
/*
 * Brief : This function will be called on every TIMER call back
 */

void vNav_CurrentXYTheta_Publisher()
{
 8102da4:	b580      	push	{r7, lr}
 8102da6:	af00      	add	r7, sp, #0
	nh.loginfo("X Y THETA PUBLISHER");
 8102da8:	490e      	ldr	r1, [pc, #56]	; (8102de4 <_Z29vNav_CurrentXYTheta_Publisherv+0x40>)
 8102daa:	480f      	ldr	r0, [pc, #60]	; (8102de8 <_Z29vNav_CurrentXYTheta_Publisherv+0x44>)
 8102dac:	f000 fbab 	bl	8103506 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7loginfoEPKc>
	ROBOT_CurrentXYTheta_toROS_arr.pose.pose.position.x 	= ROBOT_CurrentXYTheta_fromCM7_arr [0]  ;
 8102db0:	4b0e      	ldr	r3, [pc, #56]	; (8102dec <_Z29vNav_CurrentXYTheta_Publisherv+0x48>)
 8102db2:	681b      	ldr	r3, [r3, #0]
 8102db4:	4a0e      	ldr	r2, [pc, #56]	; (8102df0 <_Z29vNav_CurrentXYTheta_Publisherv+0x4c>)
 8102db6:	6293      	str	r3, [r2, #40]	; 0x28
	ROBOT_CurrentXYTheta_toROS_arr.pose.pose.position.y 	= ROBOT_CurrentXYTheta_fromCM7_arr [1]  ;
 8102db8:	4b0c      	ldr	r3, [pc, #48]	; (8102dec <_Z29vNav_CurrentXYTheta_Publisherv+0x48>)
 8102dba:	685b      	ldr	r3, [r3, #4]
 8102dbc:	4a0c      	ldr	r2, [pc, #48]	; (8102df0 <_Z29vNav_CurrentXYTheta_Publisherv+0x4c>)
 8102dbe:	62d3      	str	r3, [r2, #44]	; 0x2c
	ROBOT_CurrentXYTheta_toROS_arr.pose.pose.orientation.z 	= ROBOT_CurrentXYTheta_fromCM7_arr [2]  ;
 8102dc0:	4b0a      	ldr	r3, [pc, #40]	; (8102dec <_Z29vNav_CurrentXYTheta_Publisherv+0x48>)
 8102dc2:	689b      	ldr	r3, [r3, #8]
 8102dc4:	4a0a      	ldr	r2, [pc, #40]	; (8102df0 <_Z29vNav_CurrentXYTheta_Publisherv+0x4c>)
 8102dc6:	6413      	str	r3, [r2, #64]	; 0x40
	ROBOT_CurrentXYTheta_toROS_arr.twist.twist.linear.x		= ROBOT_CurrentXYTheta_fromCM7_arr [3]  ;
 8102dc8:	4b08      	ldr	r3, [pc, #32]	; (8102dec <_Z29vNav_CurrentXYTheta_Publisherv+0x48>)
 8102dca:	68db      	ldr	r3, [r3, #12]
 8102dcc:	4a08      	ldr	r2, [pc, #32]	; (8102df0 <_Z29vNav_CurrentXYTheta_Publisherv+0x4c>)
 8102dce:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	Nav_CurrentXYThetaPublisher.publish(&ROBOT_CurrentXYTheta_toROS_arr) ;
 8102dd2:	4907      	ldr	r1, [pc, #28]	; (8102df0 <_Z29vNav_CurrentXYTheta_Publisherv+0x4c>)
 8102dd4:	4807      	ldr	r0, [pc, #28]	; (8102df4 <_Z29vNav_CurrentXYTheta_Publisherv+0x50>)
 8102dd6:	f7fe fb4e 	bl	8101476 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nh.spinOnce();
 8102dda:	4803      	ldr	r0, [pc, #12]	; (8102de8 <_Z29vNav_CurrentXYTheta_Publisherv+0x44>)
 8102ddc:	f000 f928 	bl	8103030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv>
}
 8102de0:	bf00      	nop
 8102de2:	bd80      	pop	{r7, pc}
 8102de4:	0810bf70 	.word	0x0810bf70
 8102de8:	100004b4 	.word	0x100004b4
 8102dec:	10002a40 	.word	0x10002a40
 8102df0:	10002638 	.word	0x10002638
 8102df4:	10002800 	.word	0x10002800

08102df8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8102df8:	b480      	push	{r7}
 8102dfa:	b085      	sub	sp, #20
 8102dfc:	af00      	add	r7, sp, #0
 8102dfe:	6078      	str	r0, [r7, #4]
 8102e00:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8102e02:	2300      	movs	r3, #0
 8102e04:	60fb      	str	r3, [r7, #12]
 8102e06:	68fb      	ldr	r3, [r7, #12]
 8102e08:	2b03      	cmp	r3, #3
 8102e0a:	d80d      	bhi.n	8102e28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8102e0c:	68fb      	ldr	r3, [r7, #12]
 8102e0e:	00db      	lsls	r3, r3, #3
 8102e10:	683a      	ldr	r2, [r7, #0]
 8102e12:	fa22 f103 	lsr.w	r1, r2, r3
 8102e16:	687a      	ldr	r2, [r7, #4]
 8102e18:	68fb      	ldr	r3, [r7, #12]
 8102e1a:	4413      	add	r3, r2
 8102e1c:	b2ca      	uxtb	r2, r1
 8102e1e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8102e20:	68fb      	ldr	r3, [r7, #12]
 8102e22:	3301      	adds	r3, #1
 8102e24:	60fb      	str	r3, [r7, #12]
 8102e26:	e7ee      	b.n	8102e06 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8102e28:	bf00      	nop
 8102e2a:	3714      	adds	r7, #20
 8102e2c:	46bd      	mov	sp, r7
 8102e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e32:	4770      	bx	lr

08102e34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8102e34:	b480      	push	{r7}
 8102e36:	b085      	sub	sp, #20
 8102e38:	af00      	add	r7, sp, #0
 8102e3a:	6078      	str	r0, [r7, #4]
 8102e3c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8102e3e:	687b      	ldr	r3, [r7, #4]
 8102e40:	2200      	movs	r2, #0
 8102e42:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8102e44:	2300      	movs	r3, #0
 8102e46:	60fb      	str	r3, [r7, #12]
 8102e48:	68fb      	ldr	r3, [r7, #12]
 8102e4a:	2b03      	cmp	r3, #3
 8102e4c:	d811      	bhi.n	8102e72 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8102e4e:	687b      	ldr	r3, [r7, #4]
 8102e50:	681b      	ldr	r3, [r3, #0]
 8102e52:	6839      	ldr	r1, [r7, #0]
 8102e54:	68fa      	ldr	r2, [r7, #12]
 8102e56:	440a      	add	r2, r1
 8102e58:	7812      	ldrb	r2, [r2, #0]
 8102e5a:	4611      	mov	r1, r2
 8102e5c:	68fa      	ldr	r2, [r7, #12]
 8102e5e:	00d2      	lsls	r2, r2, #3
 8102e60:	fa01 f202 	lsl.w	r2, r1, r2
 8102e64:	431a      	orrs	r2, r3
 8102e66:	687b      	ldr	r3, [r7, #4]
 8102e68:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8102e6a:	68fb      	ldr	r3, [r7, #12]
 8102e6c:	3301      	adds	r3, #1
 8102e6e:	60fb      	str	r3, [r7, #12]
 8102e70:	e7ea      	b.n	8102e48 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8102e72:	bf00      	nop
 8102e74:	3714      	adds	r7, #20
 8102e76:	46bd      	mov	sp, r7
 8102e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e7c:	4770      	bx	lr
	...

08102e80 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "../../ros_lib/std_msgs/Time.h"

namespace ros
{

class NodeHandleBase_
 8102e80:	b480      	push	{r7}
 8102e82:	b083      	sub	sp, #12
 8102e84:	af00      	add	r7, sp, #0
 8102e86:	6078      	str	r0, [r7, #4]
 8102e88:	4a04      	ldr	r2, [pc, #16]	; (8102e9c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	601a      	str	r2, [r3, #0]
 8102e8e:	687b      	ldr	r3, [r7, #4]
 8102e90:	4618      	mov	r0, r3
 8102e92:	370c      	adds	r7, #12
 8102e94:	46bd      	mov	sp, r7
 8102e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e9a:	4770      	bx	lr
 8102e9c:	0810c1a0 	.word	0x0810c1a0

08102ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8102ea0:	b580      	push	{r7, lr}
 8102ea2:	b086      	sub	sp, #24
 8102ea4:	af00      	add	r7, sp, #0
 8102ea6:	6078      	str	r0, [r7, #4]
 8102ea8:	687b      	ldr	r3, [r7, #4]
 8102eaa:	4618      	mov	r0, r3
 8102eac:	f7ff ffe8 	bl	8102e80 <_ZN3ros15NodeHandleBase_C1Ev>
 8102eb0:	4a44      	ldr	r2, [pc, #272]	; (8102fc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0x124>)
 8102eb2:	687b      	ldr	r3, [r7, #4]
 8102eb4:	601a      	str	r2, [r3, #0]
 8102eb6:	687b      	ldr	r3, [r7, #4]
 8102eb8:	3304      	adds	r3, #4
 8102eba:	4618      	mov	r0, r3
 8102ebc:	f7fe fafb 	bl	81014b6 <_ZN13STM32HardwareC1Ev>
 8102ec0:	687b      	ldr	r3, [r7, #4]
 8102ec2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8102ec6:	2200      	movs	r2, #0
 8102ec8:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 8102ecc:	687b      	ldr	r3, [r7, #4]
 8102ece:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8102ed2:	3308      	adds	r3, #8
 8102ed4:	4618      	mov	r0, r3
 8102ed6:	f7fd fd2f 	bl	8100938 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8102eda:	2300      	movs	r3, #0
 8102edc:	617b      	str	r3, [r7, #20]
 8102ede:	697b      	ldr	r3, [r7, #20]
 8102ee0:	2b18      	cmp	r3, #24
 8102ee2:	d80a      	bhi.n	8102efa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0x5a>
      publishers[i] = 0;
 8102ee4:	687b      	ldr	r3, [r7, #4]
 8102ee6:	697a      	ldr	r2, [r7, #20]
 8102ee8:	f602 0206 	addw	r2, r2, #2054	; 0x806
 8102eec:	2100      	movs	r1, #0
 8102eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8102ef2:	697b      	ldr	r3, [r7, #20]
 8102ef4:	3301      	adds	r3, #1
 8102ef6:	617b      	str	r3, [r7, #20]
 8102ef8:	e7f1      	b.n	8102ede <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8102efa:	2300      	movs	r3, #0
 8102efc:	613b      	str	r3, [r7, #16]
 8102efe:	693b      	ldr	r3, [r7, #16]
 8102f00:	2b18      	cmp	r3, #24
 8102f02:	d80b      	bhi.n	8102f1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0x7c>
      subscribers[i] = 0;
 8102f04:	687a      	ldr	r2, [r7, #4]
 8102f06:	693b      	ldr	r3, [r7, #16]
 8102f08:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8102f0c:	009b      	lsls	r3, r3, #2
 8102f0e:	4413      	add	r3, r2
 8102f10:	2200      	movs	r2, #0
 8102f12:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8102f14:	693b      	ldr	r3, [r7, #16]
 8102f16:	3301      	adds	r3, #1
 8102f18:	613b      	str	r3, [r7, #16]
 8102f1a:	e7f0      	b.n	8102efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0x5e>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8102f1c:	2300      	movs	r3, #0
 8102f1e:	60fb      	str	r3, [r7, #12]
 8102f20:	68fb      	ldr	r3, [r7, #12]
 8102f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102f26:	d209      	bcs.n	8102f3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0x9c>
      message_in[i] = 0;
 8102f28:	687a      	ldr	r2, [r7, #4]
 8102f2a:	68fb      	ldr	r3, [r7, #12]
 8102f2c:	4413      	add	r3, r2
 8102f2e:	3318      	adds	r3, #24
 8102f30:	2200      	movs	r2, #0
 8102f32:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8102f34:	68fb      	ldr	r3, [r7, #12]
 8102f36:	3301      	adds	r3, #1
 8102f38:	60fb      	str	r3, [r7, #12]
 8102f3a:	e7f1      	b.n	8102f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8102f3c:	2300      	movs	r3, #0
 8102f3e:	60bb      	str	r3, [r7, #8]
 8102f40:	68bb      	ldr	r3, [r7, #8]
 8102f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102f46:	d20b      	bcs.n	8102f60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0xc0>
      message_out[i] = 0;
 8102f48:	687a      	ldr	r2, [r7, #4]
 8102f4a:	68bb      	ldr	r3, [r7, #8]
 8102f4c:	4413      	add	r3, r2
 8102f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8102f52:	3318      	adds	r3, #24
 8102f54:	2200      	movs	r2, #0
 8102f56:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8102f58:	68bb      	ldr	r3, [r7, #8]
 8102f5a:	3301      	adds	r3, #1
 8102f5c:	60bb      	str	r3, [r7, #8]
 8102f5e:	e7ef      	b.n	8102f40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev+0xa0>

    req_param_resp.ints_length = 0;
 8102f60:	687b      	ldr	r3, [r7, #4]
 8102f62:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8102f66:	461a      	mov	r2, r3
 8102f68:	2300      	movs	r3, #0
 8102f6a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    req_param_resp.ints = NULL;
 8102f6e:	687b      	ldr	r3, [r7, #4]
 8102f70:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8102f74:	461a      	mov	r2, r3
 8102f76:	2300      	movs	r3, #0
 8102f78:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
    req_param_resp.floats_length = 0;
 8102f7c:	687b      	ldr	r3, [r7, #4]
 8102f7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8102f82:	461a      	mov	r2, r3
 8102f84:	2300      	movs	r3, #0
 8102f86:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    req_param_resp.floats = NULL;
 8102f8a:	687b      	ldr	r3, [r7, #4]
 8102f8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8102f90:	461a      	mov	r2, r3
 8102f92:	2300      	movs	r3, #0
 8102f94:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    req_param_resp.ints_length = 0;
 8102f98:	687b      	ldr	r3, [r7, #4]
 8102f9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8102f9e:	461a      	mov	r2, r3
 8102fa0:	2300      	movs	r3, #0
 8102fa2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    req_param_resp.ints = NULL;
 8102fa6:	687b      	ldr	r3, [r7, #4]
 8102fa8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8102fac:	461a      	mov	r2, r3
 8102fae:	2300      	movs	r3, #0
 8102fb0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    spin_timeout_ = 0;
 8102fb4:	687b      	ldr	r3, [r7, #4]
 8102fb6:	2200      	movs	r2, #0
 8102fb8:	615a      	str	r2, [r3, #20]
  }
 8102fba:	687b      	ldr	r3, [r7, #4]
 8102fbc:	4618      	mov	r0, r3
 8102fbe:	3718      	adds	r7, #24
 8102fc0:	46bd      	mov	sp, r7
 8102fc2:	bd80      	pop	{r7, pc}
 8102fc4:	0810c03c 	.word	0x0810c03c

08102fc8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8102fc8:	b480      	push	{r7}
 8102fca:	b083      	sub	sp, #12
 8102fcc:	af00      	add	r7, sp, #0
 8102fce:	6078      	str	r0, [r7, #4]
 8102fd0:	4a04      	ldr	r2, [pc, #16]	; (8102fe4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8102fd2:	687b      	ldr	r3, [r7, #4]
 8102fd4:	601a      	str	r2, [r3, #0]
 8102fd6:	687b      	ldr	r3, [r7, #4]
 8102fd8:	4618      	mov	r0, r3
 8102fda:	370c      	adds	r7, #12
 8102fdc:	46bd      	mov	sp, r7
 8102fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fe2:	4770      	bx	lr
 8102fe4:	0810c188 	.word	0x0810c188

08102fe8 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8102fe8:	b580      	push	{r7, lr}
 8102fea:	b084      	sub	sp, #16
 8102fec:	af00      	add	r7, sp, #0
 8102fee:	60f8      	str	r0, [r7, #12]
 8102ff0:	60b9      	str	r1, [r7, #8]
 8102ff2:	607a      	str	r2, [r7, #4]
 8102ff4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8102ff6:	68fb      	ldr	r3, [r7, #12]
 8102ff8:	4618      	mov	r0, r3
 8102ffa:	f7ff ffe5 	bl	8102fc8 <_ZN3ros11Subscriber_C1Ev>
 8102ffe:	4a0b      	ldr	r2, [pc, #44]	; (810302c <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 8103000:	68fb      	ldr	r3, [r7, #12]
 8103002:	601a      	str	r2, [r3, #0]
 8103004:	68fb      	ldr	r3, [r7, #12]
 8103006:	330c      	adds	r3, #12
 8103008:	4618      	mov	r0, r3
 810300a:	f7ff fc23 	bl	8102854 <_ZN8std_msgs17Float32MultiArrayC1Ev>
 810300e:	68fb      	ldr	r3, [r7, #12]
 8103010:	687a      	ldr	r2, [r7, #4]
 8103012:	63da      	str	r2, [r3, #60]	; 0x3c
 8103014:	68fb      	ldr	r3, [r7, #12]
 8103016:	683a      	ldr	r2, [r7, #0]
 8103018:	641a      	str	r2, [r3, #64]	; 0x40
  {
    topic_ = topic_name;
 810301a:	68fb      	ldr	r3, [r7, #12]
 810301c:	68ba      	ldr	r2, [r7, #8]
 810301e:	609a      	str	r2, [r3, #8]
  };
 8103020:	68fb      	ldr	r3, [r7, #12]
 8103022:	4618      	mov	r0, r3
 8103024:	3710      	adds	r7, #16
 8103026:	46bd      	mov	sp, r7
 8103028:	bd80      	pop	{r7, pc}
 810302a:	bf00      	nop
 810302c:	0810c024 	.word	0x0810c024

08103030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce()
 8103030:	b580      	push	{r7, lr}
 8103032:	b084      	sub	sp, #16
 8103034:	af00      	add	r7, sp, #0
 8103036:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 8103038:	687b      	ldr	r3, [r7, #4]
 810303a:	3304      	adds	r3, #4
 810303c:	4618      	mov	r0, r3
 810303e:	f7fe fa8f 	bl	8101560 <_ZN13STM32Hardware4timeEv>
 8103042:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8103044:	687b      	ldr	r3, [r7, #4]
 8103046:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 810304a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 810304e:	68fa      	ldr	r2, [r7, #12]
 8103050:	1ad3      	subs	r3, r2, r3
 8103052:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8103056:	4293      	cmp	r3, r2
 8103058:	d905      	bls.n	8103066 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x36>
    {
      configured_ = false;
 810305a:	687b      	ldr	r3, [r7, #4]
 810305c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103060:	2200      	movs	r2, #0
 8103062:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 810306c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103070:	2b00      	cmp	r3, #0
 8103072:	d00e      	beq.n	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
    {
      if (c_time > last_msg_timeout_time)
 8103074:	687b      	ldr	r3, [r7, #4]
 8103076:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 810307a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 810307e:	68fa      	ldr	r2, [r7, #12]
 8103080:	429a      	cmp	r2, r3
 8103082:	d906      	bls.n	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 8103084:	687b      	ldr	r3, [r7, #4]
 8103086:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 810308a:	461a      	mov	r2, r3
 810308c:	2300      	movs	r3, #0
 810308e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 8103092:	687b      	ldr	r3, [r7, #4]
 8103094:	695b      	ldr	r3, [r3, #20]
 8103096:	2b00      	cmp	r3, #0
 8103098:	d013      	beq.n	81030c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x92>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 810309a:	687b      	ldr	r3, [r7, #4]
 810309c:	3304      	adds	r3, #4
 810309e:	4618      	mov	r0, r3
 81030a0:	f7fe fa5e 	bl	8101560 <_ZN13STM32Hardware4timeEv>
 81030a4:	4602      	mov	r2, r0
 81030a6:	68fb      	ldr	r3, [r7, #12]
 81030a8:	1ad2      	subs	r2, r2, r3
 81030aa:	687b      	ldr	r3, [r7, #4]
 81030ac:	695b      	ldr	r3, [r3, #20]
 81030ae:	429a      	cmp	r2, r3
 81030b0:	bf8c      	ite	hi
 81030b2:	2301      	movhi	r3, #1
 81030b4:	2300      	movls	r3, #0
 81030b6:	b2db      	uxtb	r3, r3
 81030b8:	2b00      	cmp	r3, #0
 81030ba:	d002      	beq.n	81030c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x92>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 81030bc:	f06f 0301 	mvn.w	r3, #1
 81030c0:	e21d      	b.n	81034fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4ce>
        }
      }
      int data = hardware_.read();
 81030c2:	687b      	ldr	r3, [r7, #4]
 81030c4:	3304      	adds	r3, #4
 81030c6:	4618      	mov	r0, r3
 81030c8:	f7fe fa0a 	bl	81014e0 <_ZN13STM32Hardware4readEv>
 81030cc:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 81030ce:	68bb      	ldr	r3, [r7, #8]
 81030d0:	2b00      	cmp	r3, #0
 81030d2:	f2c0 81f6 	blt.w	81034c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x492>
        break;
      checksum_ += data;
 81030d6:	687b      	ldr	r3, [r7, #4]
 81030d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81030dc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 81030e0:	68bb      	ldr	r3, [r7, #8]
 81030e2:	4413      	add	r3, r2
 81030e4:	687a      	ldr	r2, [r7, #4]
 81030e6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 81030ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 81030ee:	687b      	ldr	r3, [r7, #4]
 81030f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81030f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81030f8:	2b07      	cmp	r3, #7
 81030fa:	d12a      	bne.n	8103152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x122>
      {
        message_in[index_++] = data;
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103102:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8103106:	1c5a      	adds	r2, r3, #1
 8103108:	6879      	ldr	r1, [r7, #4]
 810310a:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 810310e:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
 8103112:	68ba      	ldr	r2, [r7, #8]
 8103114:	b2d1      	uxtb	r1, r2
 8103116:	687a      	ldr	r2, [r7, #4]
 8103118:	4413      	add	r3, r2
 810311a:	460a      	mov	r2, r1
 810311c:	761a      	strb	r2, [r3, #24]
        bytes_--;
 810311e:	687b      	ldr	r3, [r7, #4]
 8103120:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103124:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8103128:	3b01      	subs	r3, #1
 810312a:	687a      	ldr	r2, [r7, #4]
 810312c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8103130:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8103134:	687b      	ldr	r3, [r7, #4]
 8103136:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 810313a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 810313e:	2b00      	cmp	r3, #0
 8103140:	d1a7      	bne.n	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8103142:	687b      	ldr	r3, [r7, #4]
 8103144:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103148:	461a      	mov	r2, r3
 810314a:	2308      	movs	r3, #8
 810314c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8103150:	e79f      	b.n	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_FIRST_FF)
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810315c:	2b00      	cmp	r3, #0
 810315e:	d130      	bne.n	81031c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x192>
      {
        if (data == 0xff)
 8103160:	68bb      	ldr	r3, [r7, #8]
 8103162:	2bff      	cmp	r3, #255	; 0xff
 8103164:	d112      	bne.n	810318c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x15c>
        {
          mode_++;
 8103166:	687b      	ldr	r3, [r7, #4]
 8103168:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 810316c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103170:	3301      	adds	r3, #1
 8103172:	687a      	ldr	r2, [r7, #4]
 8103174:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8103178:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 810317c:	68fb      	ldr	r3, [r7, #12]
 810317e:	3314      	adds	r3, #20
 8103180:	687a      	ldr	r2, [r7, #4]
 8103182:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8103186:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 810318a:	e782      	b.n	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 810318c:	687b      	ldr	r3, [r7, #4]
 810318e:	3304      	adds	r3, #4
 8103190:	4618      	mov	r0, r3
 8103192:	f7fe f9e5 	bl	8101560 <_ZN13STM32Hardware4timeEv>
 8103196:	4602      	mov	r2, r0
 8103198:	68fb      	ldr	r3, [r7, #12]
 810319a:	1ad3      	subs	r3, r2, r3
 810319c:	f241 3288 	movw	r2, #5000	; 0x1388
 81031a0:	4293      	cmp	r3, r2
 81031a2:	bf8c      	ite	hi
 81031a4:	2301      	movhi	r3, #1
 81031a6:	2300      	movls	r3, #0
 81031a8:	b2db      	uxtb	r3, r3
 81031aa:	2b00      	cmp	r3, #0
 81031ac:	f43f af71 	beq.w	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 81031b0:	687b      	ldr	r3, [r7, #4]
 81031b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81031b6:	2200      	movs	r2, #0
 81031b8:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
          return SPIN_TIMEOUT;
 81031bc:	f06f 0301 	mvn.w	r3, #1
 81031c0:	e19d      	b.n	81034fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4ce>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 81031c2:	687b      	ldr	r3, [r7, #4]
 81031c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81031c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81031cc:	2b01      	cmp	r3, #1
 81031ce:	d121      	bne.n	8103214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x1e4>
      {
        if (data == PROTOCOL_VER)
 81031d0:	68bb      	ldr	r3, [r7, #8]
 81031d2:	2bfe      	cmp	r3, #254	; 0xfe
 81031d4:	d10b      	bne.n	81031ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x1be>
        {
          mode_++;
 81031d6:	687b      	ldr	r3, [r7, #4]
 81031d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81031dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81031e0:	3301      	adds	r3, #1
 81031e2:	687a      	ldr	r2, [r7, #4]
 81031e4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 81031e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81031ec:	e751      	b.n	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 81031ee:	687b      	ldr	r3, [r7, #4]
 81031f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81031f4:	461a      	mov	r2, r3
 81031f6:	2300      	movs	r3, #0
 81031f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
          if (configured_ == false)
 81031fc:	687b      	ldr	r3, [r7, #4]
 81031fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103202:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8103206:	2b00      	cmp	r3, #0
 8103208:	f47f af43 	bne.w	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 810320c:	6878      	ldr	r0, [r7, #4]
 810320e:	f000 fa0c 	bl	810362a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>
 8103212:	e73e      	b.n	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8103214:	687b      	ldr	r3, [r7, #4]
 8103216:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 810321a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810321e:	2b02      	cmp	r3, #2
 8103220:	d120      	bne.n	8103264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x234>
      {
        bytes_ = data;
 8103222:	687b      	ldr	r3, [r7, #4]
 8103224:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103228:	461a      	mov	r2, r3
 810322a:	68bb      	ldr	r3, [r7, #8]
 810322c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
        index_ = 0;
 8103230:	687b      	ldr	r3, [r7, #4]
 8103232:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103236:	461a      	mov	r2, r3
 8103238:	2300      	movs	r3, #0
 810323a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        mode_++;
 810323e:	687b      	ldr	r3, [r7, #4]
 8103240:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103248:	3301      	adds	r3, #1
 810324a:	687a      	ldr	r2, [r7, #4]
 810324c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8103250:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
        checksum_ = data;               /* first byte for calculating size checksum */
 8103254:	687b      	ldr	r3, [r7, #4]
 8103256:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 810325a:	461a      	mov	r2, r3
 810325c:	68bb      	ldr	r3, [r7, #8]
 810325e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8103262:	e716      	b.n	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8103264:	687b      	ldr	r3, [r7, #4]
 8103266:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 810326a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810326e:	2b03      	cmp	r3, #3
 8103270:	d118      	bne.n	81032a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x274>
      {
        bytes_ += data << 8;
 8103272:	687b      	ldr	r3, [r7, #4]
 8103274:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103278:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 810327c:	68bb      	ldr	r3, [r7, #8]
 810327e:	021b      	lsls	r3, r3, #8
 8103280:	4413      	add	r3, r2
 8103282:	687a      	ldr	r2, [r7, #4]
 8103284:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8103288:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
        mode_++;
 810328c:	687b      	ldr	r3, [r7, #4]
 810328e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103296:	3301      	adds	r3, #1
 8103298:	687a      	ldr	r2, [r7, #4]
 810329a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 810329e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81032a2:	e6f6      	b.n	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 81032a4:	687b      	ldr	r3, [r7, #4]
 81032a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81032aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81032ae:	2b04      	cmp	r3, #4
 81032b0:	d11f      	bne.n	81032f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x2c2>
      {
        if ((checksum_ % 256) == 255)
 81032b2:	687b      	ldr	r3, [r7, #4]
 81032b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81032b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81032bc:	425a      	negs	r2, r3
 81032be:	b2db      	uxtb	r3, r3
 81032c0:	b2d2      	uxtb	r2, r2
 81032c2:	bf58      	it	pl
 81032c4:	4253      	negpl	r3, r2
 81032c6:	2bff      	cmp	r3, #255	; 0xff
 81032c8:	d10b      	bne.n	81032e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x2b2>
          mode_++;
 81032ca:	687b      	ldr	r3, [r7, #4]
 81032cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81032d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81032d4:	3301      	adds	r3, #1
 81032d6:	687a      	ldr	r2, [r7, #4]
 81032d8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 81032dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81032e0:	e6d7      	b.n	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 81032e2:	687b      	ldr	r3, [r7, #4]
 81032e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81032e8:	461a      	mov	r2, r3
 81032ea:	2300      	movs	r3, #0
 81032ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81032f0:	e6cf      	b.n	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 81032f2:	687b      	ldr	r3, [r7, #4]
 81032f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81032f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81032fc:	2b05      	cmp	r3, #5
 81032fe:	d119      	bne.n	8103334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x304>
      {
        topic_ = data;
 8103300:	687b      	ldr	r3, [r7, #4]
 8103302:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103306:	461a      	mov	r2, r3
 8103308:	68bb      	ldr	r3, [r7, #8]
 810330a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
        mode_++;
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103318:	3301      	adds	r3, #1
 810331a:	687a      	ldr	r2, [r7, #4]
 810331c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8103320:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
        checksum_ = data;               /* first byte included in checksum */
 8103324:	687b      	ldr	r3, [r7, #4]
 8103326:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 810332a:	461a      	mov	r2, r3
 810332c:	68bb      	ldr	r3, [r7, #8]
 810332e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8103332:	e6ae      	b.n	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8103334:	687b      	ldr	r3, [r7, #4]
 8103336:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 810333a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810333e:	2b06      	cmp	r3, #6
 8103340:	d123      	bne.n	810338a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x35a>
      {
        topic_ += data << 8;
 8103342:	687b      	ldr	r3, [r7, #4]
 8103344:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103348:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 810334c:	68bb      	ldr	r3, [r7, #8]
 810334e:	021b      	lsls	r3, r3, #8
 8103350:	4413      	add	r3, r2
 8103352:	687a      	ldr	r2, [r7, #4]
 8103354:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8103358:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
        mode_ = MODE_MESSAGE;
 810335c:	687b      	ldr	r3, [r7, #4]
 810335e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103362:	461a      	mov	r2, r3
 8103364:	2307      	movs	r3, #7
 8103366:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
        if (bytes_ == 0)
 810336a:	687b      	ldr	r3, [r7, #4]
 810336c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103370:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8103374:	2b00      	cmp	r3, #0
 8103376:	f47f ae8c 	bne.w	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 810337a:	687b      	ldr	r3, [r7, #4]
 810337c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103380:	461a      	mov	r2, r3
 8103382:	2308      	movs	r3, #8
 8103384:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8103388:	e683      	b.n	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 810338a:	687b      	ldr	r3, [r7, #4]
 810338c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103394:	2b08      	cmp	r3, #8
 8103396:	f47f ae7c 	bne.w	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 810339a:	687b      	ldr	r3, [r7, #4]
 810339c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81033a0:	461a      	mov	r2, r3
 81033a2:	2300      	movs	r3, #0
 81033a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
        if ((checksum_ % 256) == 255)
 81033a8:	687b      	ldr	r3, [r7, #4]
 81033aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81033ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81033b2:	425a      	negs	r2, r3
 81033b4:	b2db      	uxtb	r3, r3
 81033b6:	b2d2      	uxtb	r2, r2
 81033b8:	bf58      	it	pl
 81033ba:	4253      	negpl	r3, r2
 81033bc:	2bff      	cmp	r3, #255	; 0xff
 81033be:	f47f ae68 	bne.w	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 81033c2:	687b      	ldr	r3, [r7, #4]
 81033c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81033c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81033cc:	2b00      	cmp	r3, #0
 81033ce:	d116      	bne.n	81033fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x3ce>
          {
            requestSyncTime();
 81033d0:	6878      	ldr	r0, [r7, #4]
 81033d2:	f000 f92a 	bl	810362a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>
            negotiateTopics();
 81033d6:	6878      	ldr	r0, [r7, #4]
 81033d8:	f000 f944 	bl	8103664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv>
            last_sync_time = c_time;
 81033dc:	687b      	ldr	r3, [r7, #4]
 81033de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81033e2:	461a      	mov	r2, r3
 81033e4:	68fb      	ldr	r3, [r7, #12]
 81033e6:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
            last_sync_receive_time = c_time;
 81033ea:	687b      	ldr	r3, [r7, #4]
 81033ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81033f0:	461a      	mov	r2, r3
 81033f2:	68fb      	ldr	r3, [r7, #12]
 81033f4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
            return SPIN_ERR;
 81033f8:	f04f 33ff 	mov.w	r3, #4294967295
 81033fc:	e07f      	b.n	81034fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4ce>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 81033fe:	687b      	ldr	r3, [r7, #4]
 8103400:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103404:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8103408:	2b0a      	cmp	r3, #10
 810340a:	d106      	bne.n	810341a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x3ea>
          {
            syncTime(message_in);
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	3318      	adds	r3, #24
 8103410:	4619      	mov	r1, r3
 8103412:	6878      	ldr	r0, [r7, #4]
 8103414:	f000 fa08 	bl	8103828 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh>
 8103418:	e63b      	b.n	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 810341a:	687b      	ldr	r3, [r7, #4]
 810341c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8103424:	2b06      	cmp	r3, #6
 8103426:	d110      	bne.n	810344a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x41a>
          {
            req_param_resp.deserialize(message_in);
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 810342e:	3308      	adds	r3, #8
 8103430:	687a      	ldr	r2, [r7, #4]
 8103432:	3218      	adds	r2, #24
 8103434:	4611      	mov	r1, r2
 8103436:	4618      	mov	r0, r3
 8103438:	f7fd fbb3 	bl	8100ba2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 810343c:	687b      	ldr	r3, [r7, #4]
 810343e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103442:	2201      	movs	r2, #1
 8103444:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8103448:	e623      	b.n	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 810344a:	687b      	ldr	r3, [r7, #4]
 810344c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103450:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8103454:	2b0b      	cmp	r3, #11
 8103456:	d106      	bne.n	8103466 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x436>
          {
            configured_ = false;
 8103458:	687b      	ldr	r3, [r7, #4]
 810345a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 810345e:	2200      	movs	r2, #0
 8103460:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 8103464:	e615      	b.n	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
          }
          else
          {
            if (subscribers[topic_ - 100])
 8103466:	687b      	ldr	r3, [r7, #4]
 8103468:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 810346c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8103470:	3b64      	subs	r3, #100	; 0x64
 8103472:	687a      	ldr	r2, [r7, #4]
 8103474:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8103478:	009b      	lsls	r3, r3, #2
 810347a:	4413      	add	r3, r2
 810347c:	685b      	ldr	r3, [r3, #4]
 810347e:	2b00      	cmp	r3, #0
 8103480:	f43f ae07 	beq.w	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 810348a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810348e:	3b64      	subs	r3, #100	; 0x64
 8103490:	687a      	ldr	r2, [r7, #4]
 8103492:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8103496:	009b      	lsls	r3, r3, #2
 8103498:	4413      	add	r3, r2
 810349a:	6858      	ldr	r0, [r3, #4]
 810349c:	687b      	ldr	r3, [r7, #4]
 810349e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81034a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81034a6:	3b64      	subs	r3, #100	; 0x64
 81034a8:	687a      	ldr	r2, [r7, #4]
 81034aa:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 81034ae:	009b      	lsls	r3, r3, #2
 81034b0:	4413      	add	r3, r2
 81034b2:	685b      	ldr	r3, [r3, #4]
 81034b4:	681b      	ldr	r3, [r3, #0]
 81034b6:	681b      	ldr	r3, [r3, #0]
 81034b8:	687a      	ldr	r2, [r7, #4]
 81034ba:	3218      	adds	r2, #24
 81034bc:	4611      	mov	r1, r2
 81034be:	4798      	blx	r3
    while (true)
 81034c0:	e5e7      	b.n	8103092 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x62>
        break;
 81034c2:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 81034c4:	687b      	ldr	r3, [r7, #4]
 81034c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81034ca:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 81034ce:	2b00      	cmp	r3, #0
 81034d0:	d014      	beq.n	81034fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4cc>
 81034d2:	687b      	ldr	r3, [r7, #4]
 81034d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81034d8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 81034dc:	68fa      	ldr	r2, [r7, #12]
 81034de:	1ad3      	subs	r3, r2, r3
 81034e0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 81034e4:	4293      	cmp	r3, r2
 81034e6:	d909      	bls.n	81034fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8spinOnceEv+0x4cc>
    {
      requestSyncTime();
 81034e8:	6878      	ldr	r0, [r7, #4]
 81034ea:	f000 f89e 	bl	810362a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>
      last_sync_time = c_time;
 81034ee:	687b      	ldr	r3, [r7, #4]
 81034f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81034f4:	461a      	mov	r2, r3
 81034f6:	68fb      	ldr	r3, [r7, #12]
 81034f8:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
    }

    return SPIN_OK;
 81034fc:	2300      	movs	r3, #0
  }
 81034fe:	4618      	mov	r0, r3
 8103500:	3710      	adds	r7, #16
 8103502:	46bd      	mov	sp, r7
 8103504:	bd80      	pop	{r7, pc}

08103506 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7loginfoEPKc>:
public:
  void logdebug(const char* msg)
  {
    log(rosserial_msgs::Log::ROSDEBUG, msg);
  }
  void loginfo(const char * msg)
 8103506:	b580      	push	{r7, lr}
 8103508:	b082      	sub	sp, #8
 810350a:	af00      	add	r7, sp, #0
 810350c:	6078      	str	r0, [r7, #4]
 810350e:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::INFO, msg);
 8103510:	683a      	ldr	r2, [r7, #0]
 8103512:	2101      	movs	r1, #1
 8103514:	6878      	ldr	r0, [r7, #4]
 8103516:	f000 f9d3 	bl	81038c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3logEcPKc>
  }
 810351a:	bf00      	nop
 810351c:	3708      	adds	r7, #8
 810351e:	46bd      	mov	sp, r7
 8103520:	bd80      	pop	{r7, pc}

08103522 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8initNodeEv>:
  void initNode()
 8103522:	b580      	push	{r7, lr}
 8103524:	b082      	sub	sp, #8
 8103526:	af00      	add	r7, sp, #0
 8103528:	6078      	str	r0, [r7, #4]
    hardware_.init();
 810352a:	687b      	ldr	r3, [r7, #4]
 810352c:	3304      	adds	r3, #4
 810352e:	4618      	mov	r0, r3
 8103530:	f7fd ffcc 	bl	81014cc <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8103534:	687b      	ldr	r3, [r7, #4]
 8103536:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 810353a:	461a      	mov	r2, r3
 810353c:	2300      	movs	r3, #0
 810353e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    bytes_ = 0;
 8103542:	687b      	ldr	r3, [r7, #4]
 8103544:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103548:	461a      	mov	r2, r3
 810354a:	2300      	movs	r3, #0
 810354c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    index_ = 0;
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103556:	461a      	mov	r2, r3
 8103558:	2300      	movs	r3, #0
 810355a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
    topic_ = 0;
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103564:	461a      	mov	r2, r3
 8103566:	2300      	movs	r3, #0
 8103568:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  };
 810356c:	bf00      	nop
 810356e:	3708      	adds	r7, #8
 8103570:	46bd      	mov	sp, r7
 8103572:	bd80      	pop	{r7, pc}

08103574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeINS_10SubscriberIN8std_msgs17Float32MultiArrayEvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8103574:	b480      	push	{r7}
 8103576:	b085      	sub	sp, #20
 8103578:	af00      	add	r7, sp, #0
 810357a:	6078      	str	r0, [r7, #4]
 810357c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 810357e:	2300      	movs	r3, #0
 8103580:	60fb      	str	r3, [r7, #12]
 8103582:	68fb      	ldr	r3, [r7, #12]
 8103584:	2b18      	cmp	r3, #24
 8103586:	dc1b      	bgt.n	81035c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeINS_10SubscriberIN8std_msgs17Float32MultiArrayEvEEEEbRT_+0x4c>
      if (subscribers[i] == 0) // empty slot
 8103588:	687a      	ldr	r2, [r7, #4]
 810358a:	68fb      	ldr	r3, [r7, #12]
 810358c:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8103590:	009b      	lsls	r3, r3, #2
 8103592:	4413      	add	r3, r2
 8103594:	685b      	ldr	r3, [r3, #4]
 8103596:	2b00      	cmp	r3, #0
 8103598:	d10e      	bne.n	81035b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeINS_10SubscriberIN8std_msgs17Float32MultiArrayEvEEEEbRT_+0x44>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 810359a:	683a      	ldr	r2, [r7, #0]
 810359c:	6879      	ldr	r1, [r7, #4]
 810359e:	68fb      	ldr	r3, [r7, #12]
 81035a0:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 81035a4:	009b      	lsls	r3, r3, #2
 81035a6:	440b      	add	r3, r1
 81035a8:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 81035aa:	68fb      	ldr	r3, [r7, #12]
 81035ac:	f103 0264 	add.w	r2, r3, #100	; 0x64
 81035b0:	683b      	ldr	r3, [r7, #0]
 81035b2:	605a      	str	r2, [r3, #4]
        return true;
 81035b4:	2301      	movs	r3, #1
 81035b6:	e004      	b.n	81035c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeINS_10SubscriberIN8std_msgs17Float32MultiArrayEvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 81035b8:	68fb      	ldr	r3, [r7, #12]
 81035ba:	3301      	adds	r3, #1
 81035bc:	60fb      	str	r3, [r7, #12]
 81035be:	e7e0      	b.n	8103582 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9subscribeINS_10SubscriberIN8std_msgs17Float32MultiArrayEvEEEEbRT_+0xe>
    return false;
 81035c0:	2300      	movs	r3, #0
  }
 81035c2:	4618      	mov	r0, r3
 81035c4:	3714      	adds	r7, #20
 81035c6:	46bd      	mov	sp, r7
 81035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035cc:	4770      	bx	lr

081035ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 81035ce:	b480      	push	{r7}
 81035d0:	b085      	sub	sp, #20
 81035d2:	af00      	add	r7, sp, #0
 81035d4:	6078      	str	r0, [r7, #4]
 81035d6:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 81035d8:	2300      	movs	r3, #0
 81035da:	60fb      	str	r3, [r7, #12]
 81035dc:	68fb      	ldr	r3, [r7, #12]
 81035de:	2b18      	cmp	r3, #24
 81035e0:	dc1c      	bgt.n	810361c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x4e>
      if (publishers[i] == 0) // empty slot
 81035e2:	687b      	ldr	r3, [r7, #4]
 81035e4:	68fa      	ldr	r2, [r7, #12]
 81035e6:	f602 0206 	addw	r2, r2, #2054	; 0x806
 81035ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81035ee:	2b00      	cmp	r3, #0
 81035f0:	d110      	bne.n	8103614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 81035f2:	687b      	ldr	r3, [r7, #4]
 81035f4:	68fa      	ldr	r2, [r7, #12]
 81035f6:	f602 0206 	addw	r2, r2, #2054	; 0x806
 81035fa:	6839      	ldr	r1, [r7, #0]
 81035fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8103600:	68fb      	ldr	r3, [r7, #12]
 8103602:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8103606:	683b      	ldr	r3, [r7, #0]
 8103608:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 810360a:	687a      	ldr	r2, [r7, #4]
 810360c:	683b      	ldr	r3, [r7, #0]
 810360e:	60da      	str	r2, [r3, #12]
        return true;
 8103610:	2301      	movs	r3, #1
 8103612:	e004      	b.n	810361e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8103614:	68fb      	ldr	r3, [r7, #12]
 8103616:	3301      	adds	r3, #1
 8103618:	60fb      	str	r3, [r7, #12]
 810361a:	e7df      	b.n	81035dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9advertiseERNS_9PublisherE+0xe>
    return false;
 810361c:	2300      	movs	r3, #0
  }
 810361e:	4618      	mov	r0, r3
 8103620:	3714      	adds	r7, #20
 8103622:	46bd      	mov	sp, r7
 8103624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103628:	4770      	bx	lr

0810362a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15requestSyncTimeEv>:
  void requestSyncTime()
 810362a:	b580      	push	{r7, lr}
 810362c:	b086      	sub	sp, #24
 810362e:	af00      	add	r7, sp, #0
 8103630:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8103632:	f107 030c 	add.w	r3, r7, #12
 8103636:	4618      	mov	r0, r3
 8103638:	f7fd fe16 	bl	8101268 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 810363c:	687b      	ldr	r3, [r7, #4]
 810363e:	681b      	ldr	r3, [r3, #0]
 8103640:	681b      	ldr	r3, [r3, #0]
 8103642:	f107 020c 	add.w	r2, r7, #12
 8103646:	210a      	movs	r1, #10
 8103648:	6878      	ldr	r0, [r7, #4]
 810364a:	4798      	blx	r3
    rt_time = hardware_.time();
 810364c:	687b      	ldr	r3, [r7, #4]
 810364e:	3304      	adds	r3, #4
 8103650:	4618      	mov	r0, r3
 8103652:	f7fd ff85 	bl	8101560 <_ZN13STM32Hardware4timeEv>
 8103656:	4602      	mov	r2, r0
 8103658:	687b      	ldr	r3, [r7, #4]
 810365a:	609a      	str	r2, [r3, #8]
  }
 810365c:	bf00      	nop
 810365e:	3718      	adds	r7, #24
 8103660:	46bd      	mov	sp, r7
 8103662:	bd80      	pop	{r7, pc}

08103664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv>:
  void negotiateTopics()
 8103664:	b590      	push	{r4, r7, lr}
 8103666:	b08b      	sub	sp, #44	; 0x2c
 8103668:	af00      	add	r7, sp, #0
 810366a:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 810366c:	f107 030c 	add.w	r3, r7, #12
 8103670:	4618      	mov	r0, r3
 8103672:	f7fd fc23 	bl	8100ebc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8103676:	2300      	movs	r3, #0
 8103678:	627b      	str	r3, [r7, #36]	; 0x24
 810367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810367c:	2b18      	cmp	r3, #24
 810367e:	dc5b      	bgt.n	8103738 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0xd4>
      if (publishers[i] != 0) // non-empty slot
 8103680:	687b      	ldr	r3, [r7, #4]
 8103682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103684:	f602 0206 	addw	r2, r2, #2054	; 0x806
 8103688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810368c:	2b00      	cmp	r3, #0
 810368e:	d04f      	beq.n	8103730 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0xcc>
        ti.topic_id = publishers[i]->id_;
 8103690:	687b      	ldr	r3, [r7, #4]
 8103692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103694:	f602 0206 	addw	r2, r2, #2054	; 0x806
 8103698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810369c:	689b      	ldr	r3, [r3, #8]
 810369e:	b29b      	uxth	r3, r3
 81036a0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 81036a2:	687b      	ldr	r3, [r7, #4]
 81036a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81036a6:	f602 0206 	addw	r2, r2, #2054	; 0x806
 81036aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81036ae:	681b      	ldr	r3, [r3, #0]
 81036b0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 81036b2:	687b      	ldr	r3, [r7, #4]
 81036b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81036b6:	f602 0206 	addw	r2, r2, #2054	; 0x806
 81036ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81036be:	6859      	ldr	r1, [r3, #4]
 81036c0:	687b      	ldr	r3, [r7, #4]
 81036c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81036c4:	f602 0206 	addw	r2, r2, #2054	; 0x806
 81036c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81036cc:	685b      	ldr	r3, [r3, #4]
 81036ce:	681b      	ldr	r3, [r3, #0]
 81036d0:	3308      	adds	r3, #8
 81036d2:	681b      	ldr	r3, [r3, #0]
 81036d4:	4608      	mov	r0, r1
 81036d6:	4798      	blx	r3
 81036d8:	4603      	mov	r3, r0
 81036da:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 81036dc:	687b      	ldr	r3, [r7, #4]
 81036de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81036e0:	f602 0206 	addw	r2, r2, #2054	; 0x806
 81036e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81036e8:	6859      	ldr	r1, [r3, #4]
 81036ea:	687b      	ldr	r3, [r7, #4]
 81036ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81036ee:	f602 0206 	addw	r2, r2, #2054	; 0x806
 81036f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81036f6:	685b      	ldr	r3, [r3, #4]
 81036f8:	681b      	ldr	r3, [r3, #0]
 81036fa:	330c      	adds	r3, #12
 81036fc:	681b      	ldr	r3, [r3, #0]
 81036fe:	4608      	mov	r0, r1
 8103700:	4798      	blx	r3
 8103702:	4603      	mov	r3, r0
 8103704:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8103706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810370a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 810370c:	687b      	ldr	r3, [r7, #4]
 810370e:	681b      	ldr	r3, [r3, #0]
 8103710:	681c      	ldr	r4, [r3, #0]
 8103712:	687b      	ldr	r3, [r7, #4]
 8103714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103716:	f602 0206 	addw	r2, r2, #2054	; 0x806
 810371a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810371e:	4618      	mov	r0, r3
 8103720:	f7fd febd 	bl	810149e <_ZN3ros9Publisher15getEndpointTypeEv>
 8103724:	4601      	mov	r1, r0
 8103726:	f107 030c 	add.w	r3, r7, #12
 810372a:	461a      	mov	r2, r3
 810372c:	6878      	ldr	r0, [r7, #4]
 810372e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8103730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103732:	3301      	adds	r3, #1
 8103734:	627b      	str	r3, [r7, #36]	; 0x24
 8103736:	e7a0      	b.n	810367a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0x16>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8103738:	2300      	movs	r3, #0
 810373a:	627b      	str	r3, [r7, #36]	; 0x24
 810373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810373e:	2b18      	cmp	r3, #24
 8103740:	dc68      	bgt.n	8103814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0x1b0>
      if (subscribers[i] != 0) // non-empty slot
 8103742:	687a      	ldr	r2, [r7, #4]
 8103744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103746:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 810374a:	009b      	lsls	r3, r3, #2
 810374c:	4413      	add	r3, r2
 810374e:	685b      	ldr	r3, [r3, #4]
 8103750:	2b00      	cmp	r3, #0
 8103752:	d05b      	beq.n	810380c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0x1a8>
        ti.topic_id = subscribers[i]->id_;
 8103754:	687a      	ldr	r2, [r7, #4]
 8103756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103758:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 810375c:	009b      	lsls	r3, r3, #2
 810375e:	4413      	add	r3, r2
 8103760:	685b      	ldr	r3, [r3, #4]
 8103762:	685b      	ldr	r3, [r3, #4]
 8103764:	b29b      	uxth	r3, r3
 8103766:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8103768:	687a      	ldr	r2, [r7, #4]
 810376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810376c:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8103770:	009b      	lsls	r3, r3, #2
 8103772:	4413      	add	r3, r2
 8103774:	685b      	ldr	r3, [r3, #4]
 8103776:	689b      	ldr	r3, [r3, #8]
 8103778:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 810377a:	687a      	ldr	r2, [r7, #4]
 810377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810377e:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8103782:	009b      	lsls	r3, r3, #2
 8103784:	4413      	add	r3, r2
 8103786:	6859      	ldr	r1, [r3, #4]
 8103788:	687a      	ldr	r2, [r7, #4]
 810378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810378c:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 8103790:	009b      	lsls	r3, r3, #2
 8103792:	4413      	add	r3, r2
 8103794:	685b      	ldr	r3, [r3, #4]
 8103796:	681b      	ldr	r3, [r3, #0]
 8103798:	3308      	adds	r3, #8
 810379a:	681b      	ldr	r3, [r3, #0]
 810379c:	4608      	mov	r0, r1
 810379e:	4798      	blx	r3
 81037a0:	4603      	mov	r3, r0
 81037a2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 81037a4:	687a      	ldr	r2, [r7, #4]
 81037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81037a8:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 81037ac:	009b      	lsls	r3, r3, #2
 81037ae:	4413      	add	r3, r2
 81037b0:	6859      	ldr	r1, [r3, #4]
 81037b2:	687a      	ldr	r2, [r7, #4]
 81037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81037b6:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 81037ba:	009b      	lsls	r3, r3, #2
 81037bc:	4413      	add	r3, r2
 81037be:	685b      	ldr	r3, [r3, #4]
 81037c0:	681b      	ldr	r3, [r3, #0]
 81037c2:	330c      	adds	r3, #12
 81037c4:	681b      	ldr	r3, [r3, #0]
 81037c6:	4608      	mov	r0, r1
 81037c8:	4798      	blx	r3
 81037ca:	4603      	mov	r3, r0
 81037cc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 81037ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81037d2:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 81037d4:	687b      	ldr	r3, [r7, #4]
 81037d6:	681b      	ldr	r3, [r3, #0]
 81037d8:	681c      	ldr	r4, [r3, #0]
 81037da:	687a      	ldr	r2, [r7, #4]
 81037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81037de:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 81037e2:	009b      	lsls	r3, r3, #2
 81037e4:	4413      	add	r3, r2
 81037e6:	6859      	ldr	r1, [r3, #4]
 81037e8:	687a      	ldr	r2, [r7, #4]
 81037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81037ec:	f603 031e 	addw	r3, r3, #2078	; 0x81e
 81037f0:	009b      	lsls	r3, r3, #2
 81037f2:	4413      	add	r3, r2
 81037f4:	685b      	ldr	r3, [r3, #4]
 81037f6:	681b      	ldr	r3, [r3, #0]
 81037f8:	3304      	adds	r3, #4
 81037fa:	681b      	ldr	r3, [r3, #0]
 81037fc:	4608      	mov	r0, r1
 81037fe:	4798      	blx	r3
 8103800:	4601      	mov	r1, r0
 8103802:	f107 030c 	add.w	r3, r7, #12
 8103806:	461a      	mov	r2, r3
 8103808:	6878      	ldr	r0, [r7, #4]
 810380a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 810380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810380e:	3301      	adds	r3, #1
 8103810:	627b      	str	r3, [r7, #36]	; 0x24
 8103812:	e793      	b.n	810373c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE15negotiateTopicsEv+0xd8>
    configured_ = true;
 8103814:	687b      	ldr	r3, [r7, #4]
 8103816:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 810381a:	2201      	movs	r2, #1
 810381c:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
  }
 8103820:	bf00      	nop
 8103822:	372c      	adds	r7, #44	; 0x2c
 8103824:	46bd      	mov	sp, r7
 8103826:	bd90      	pop	{r4, r7, pc}

08103828 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8103828:	b580      	push	{r7, lr}
 810382a:	b086      	sub	sp, #24
 810382c:	af00      	add	r7, sp, #0
 810382e:	6078      	str	r0, [r7, #4]
 8103830:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8103832:	f107 0308 	add.w	r3, r7, #8
 8103836:	4618      	mov	r0, r3
 8103838:	f7fd fd16 	bl	8101268 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	3304      	adds	r3, #4
 8103840:	4618      	mov	r0, r3
 8103842:	f7fd fe8d 	bl	8101560 <_ZN13STM32Hardware4timeEv>
 8103846:	4602      	mov	r2, r0
 8103848:	687b      	ldr	r3, [r7, #4]
 810384a:	689b      	ldr	r3, [r3, #8]
 810384c:	1ad3      	subs	r3, r2, r3
 810384e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8103850:	f107 0308 	add.w	r3, r7, #8
 8103854:	6839      	ldr	r1, [r7, #0]
 8103856:	4618      	mov	r0, r3
 8103858:	f7fd fd76 	bl	8101348 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 810385c:	68fa      	ldr	r2, [r7, #12]
 810385e:	697b      	ldr	r3, [r7, #20]
 8103860:	4915      	ldr	r1, [pc, #84]	; (81038b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh+0x90>)
 8103862:	fba1 1303 	umull	r1, r3, r1, r3
 8103866:	099b      	lsrs	r3, r3, #6
 8103868:	4413      	add	r3, r2
 810386a:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 810386c:	6939      	ldr	r1, [r7, #16]
 810386e:	697a      	ldr	r2, [r7, #20]
 8103870:	4b11      	ldr	r3, [pc, #68]	; (81038b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh+0x90>)
 8103872:	fba3 0302 	umull	r0, r3, r3, r2
 8103876:	099b      	lsrs	r3, r3, #6
 8103878:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 810387c:	fb00 f303 	mul.w	r3, r0, r3
 8103880:	1ad3      	subs	r3, r2, r3
 8103882:	4a0e      	ldr	r2, [pc, #56]	; (81038bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8103884:	fb02 f303 	mul.w	r3, r2, r3
 8103888:	440b      	add	r3, r1
 810388a:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 810388c:	f107 0308 	add.w	r3, r7, #8
 8103890:	3304      	adds	r3, #4
 8103892:	4619      	mov	r1, r3
 8103894:	6878      	ldr	r0, [r7, #4]
 8103896:	f000 f8d3 	bl	8103a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 810389a:	687b      	ldr	r3, [r7, #4]
 810389c:	3304      	adds	r3, #4
 810389e:	4618      	mov	r0, r3
 81038a0:	f7fd fe5e 	bl	8101560 <_ZN13STM32Hardware4timeEv>
 81038a4:	4602      	mov	r2, r0
 81038a6:	687b      	ldr	r3, [r7, #4]
 81038a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 81038ac:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  }
 81038b0:	bf00      	nop
 81038b2:	3718      	adds	r7, #24
 81038b4:	46bd      	mov	sp, r7
 81038b6:	bd80      	pop	{r7, pc}
 81038b8:	10624dd3 	.word	0x10624dd3
 81038bc:	000f4240 	.word	0x000f4240

081038c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3logEcPKc>:
  void log(char byte, const char * msg)
 81038c0:	b580      	push	{r7, lr}
 81038c2:	b088      	sub	sp, #32
 81038c4:	af00      	add	r7, sp, #0
 81038c6:	60f8      	str	r0, [r7, #12]
 81038c8:	460b      	mov	r3, r1
 81038ca:	607a      	str	r2, [r7, #4]
 81038cc:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 81038ce:	f107 0314 	add.w	r3, r7, #20
 81038d2:	4618      	mov	r0, r3
 81038d4:	f7fc ff80 	bl	81007d8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 81038d8:	7afb      	ldrb	r3, [r7, #11]
 81038da:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 81038dc:	687b      	ldr	r3, [r7, #4]
 81038de:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 81038e0:	68fb      	ldr	r3, [r7, #12]
 81038e2:	681b      	ldr	r3, [r3, #0]
 81038e4:	681b      	ldr	r3, [r3, #0]
 81038e6:	f107 0214 	add.w	r2, r7, #20
 81038ea:	2107      	movs	r1, #7
 81038ec:	68f8      	ldr	r0, [r7, #12]
 81038ee:	4798      	blx	r3
  }
 81038f0:	bf00      	nop
 81038f2:	3720      	adds	r7, #32
 81038f4:	46bd      	mov	sp, r7
 81038f6:	bd80      	pop	{r7, pc}

081038f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg)
 81038f8:	b580      	push	{r7, lr}
 81038fa:	b088      	sub	sp, #32
 81038fc:	af00      	add	r7, sp, #0
 81038fe:	60f8      	str	r0, [r7, #12]
 8103900:	60b9      	str	r1, [r7, #8]
 8103902:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 8103904:	68bb      	ldr	r3, [r7, #8]
 8103906:	2b63      	cmp	r3, #99	; 0x63
 8103908:	dd0b      	ble.n	8103922 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
 810390a:	68fb      	ldr	r3, [r7, #12]
 810390c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103910:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8103914:	f083 0301 	eor.w	r3, r3, #1
 8103918:	b2db      	uxtb	r3, r3
 810391a:	2b00      	cmp	r3, #0
 810391c:	d001      	beq.n	8103922 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 810391e:	2300      	movs	r3, #0
 8103920:	e087      	b.n	8103a32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x13a>
    int l = msg->serialize(message_out + 7);
 8103922:	687b      	ldr	r3, [r7, #4]
 8103924:	681b      	ldr	r3, [r3, #0]
 8103926:	681a      	ldr	r2, [r3, #0]
 8103928:	68fb      	ldr	r3, [r7, #12]
 810392a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810392e:	3318      	adds	r3, #24
 8103930:	3307      	adds	r3, #7
 8103932:	4619      	mov	r1, r3
 8103934:	6878      	ldr	r0, [r7, #4]
 8103936:	4790      	blx	r2
 8103938:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 810393a:	68fb      	ldr	r3, [r7, #12]
 810393c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8103940:	22ff      	movs	r2, #255	; 0xff
 8103942:	761a      	strb	r2, [r3, #24]
    message_out[1] = PROTOCOL_VER;
 8103944:	68fb      	ldr	r3, [r7, #12]
 8103946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810394a:	22fe      	movs	r2, #254	; 0xfe
 810394c:	765a      	strb	r2, [r3, #25]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 810394e:	697b      	ldr	r3, [r7, #20]
 8103950:	b2da      	uxtb	r2, r3
 8103952:	68fb      	ldr	r3, [r7, #12]
 8103954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8103958:	769a      	strb	r2, [r3, #26]
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 810395a:	697b      	ldr	r3, [r7, #20]
 810395c:	b29b      	uxth	r3, r3
 810395e:	0a1b      	lsrs	r3, r3, #8
 8103960:	b29b      	uxth	r3, r3
 8103962:	b2da      	uxtb	r2, r3
 8103964:	68fb      	ldr	r3, [r7, #12]
 8103966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810396a:	76da      	strb	r2, [r3, #27]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 810396c:	68fb      	ldr	r3, [r7, #12]
 810396e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8103972:	7e9a      	ldrb	r2, [r3, #26]
 8103974:	68fb      	ldr	r3, [r7, #12]
 8103976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810397a:	7edb      	ldrb	r3, [r3, #27]
 810397c:	4413      	add	r3, r2
 810397e:	b2db      	uxtb	r3, r3
 8103980:	43db      	mvns	r3, r3
 8103982:	b2da      	uxtb	r2, r3
 8103984:	68fb      	ldr	r3, [r7, #12]
 8103986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810398a:	771a      	strb	r2, [r3, #28]
    message_out[5] = (uint8_t)((int16_t)id & 255);
 810398c:	68bb      	ldr	r3, [r7, #8]
 810398e:	b2da      	uxtb	r2, r3
 8103990:	68fb      	ldr	r3, [r7, #12]
 8103992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8103996:	775a      	strb	r2, [r3, #29]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8103998:	68bb      	ldr	r3, [r7, #8]
 810399a:	b21b      	sxth	r3, r3
 810399c:	121b      	asrs	r3, r3, #8
 810399e:	b21b      	sxth	r3, r3
 81039a0:	b2da      	uxtb	r2, r3
 81039a2:	68fb      	ldr	r3, [r7, #12]
 81039a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81039a8:	779a      	strb	r2, [r3, #30]
    int chk = 0;
 81039aa:	2300      	movs	r3, #0
 81039ac:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 81039ae:	2305      	movs	r3, #5
 81039b0:	61bb      	str	r3, [r7, #24]
 81039b2:	697b      	ldr	r3, [r7, #20]
 81039b4:	3306      	adds	r3, #6
 81039b6:	69ba      	ldr	r2, [r7, #24]
 81039b8:	429a      	cmp	r2, r3
 81039ba:	dc0e      	bgt.n	81039da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xe2>
      chk += message_out[i];
 81039bc:	68fa      	ldr	r2, [r7, #12]
 81039be:	69bb      	ldr	r3, [r7, #24]
 81039c0:	4413      	add	r3, r2
 81039c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81039c6:	3318      	adds	r3, #24
 81039c8:	781b      	ldrb	r3, [r3, #0]
 81039ca:	461a      	mov	r2, r3
 81039cc:	69fb      	ldr	r3, [r7, #28]
 81039ce:	4413      	add	r3, r2
 81039d0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 81039d2:	69bb      	ldr	r3, [r7, #24]
 81039d4:	3301      	adds	r3, #1
 81039d6:	61bb      	str	r3, [r7, #24]
 81039d8:	e7eb      	b.n	81039b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xba>
    l += 7;
 81039da:	697b      	ldr	r3, [r7, #20]
 81039dc:	3307      	adds	r3, #7
 81039de:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 81039e0:	69fb      	ldr	r3, [r7, #28]
 81039e2:	425a      	negs	r2, r3
 81039e4:	b2db      	uxtb	r3, r3
 81039e6:	b2d2      	uxtb	r2, r2
 81039e8:	bf58      	it	pl
 81039ea:	4253      	negpl	r3, r2
 81039ec:	b2da      	uxtb	r2, r3
 81039ee:	697b      	ldr	r3, [r7, #20]
 81039f0:	1c59      	adds	r1, r3, #1
 81039f2:	6179      	str	r1, [r7, #20]
 81039f4:	43d2      	mvns	r2, r2
 81039f6:	b2d1      	uxtb	r1, r2
 81039f8:	68fa      	ldr	r2, [r7, #12]
 81039fa:	4413      	add	r3, r2
 81039fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8103a00:	3318      	adds	r3, #24
 8103a02:	460a      	mov	r2, r1
 8103a04:	701a      	strb	r2, [r3, #0]
    if (l <= OUTPUT_SIZE)
 8103a06:	697b      	ldr	r3, [r7, #20]
 8103a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103a0c:	dc0b      	bgt.n	8103a26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x12e>
      hardware_.write(message_out, l);
 8103a0e:	68fb      	ldr	r3, [r7, #12]
 8103a10:	1d18      	adds	r0, r3, #4
 8103a12:	68fb      	ldr	r3, [r7, #12]
 8103a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8103a18:	3318      	adds	r3, #24
 8103a1a:	697a      	ldr	r2, [r7, #20]
 8103a1c:	4619      	mov	r1, r3
 8103a1e:	f7fd fd8b 	bl	8101538 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8103a22:	697b      	ldr	r3, [r7, #20]
 8103a24:	e005      	b.n	8103a32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x13a>
      logerror("Message from device dropped: message larger than buffer.");
 8103a26:	4905      	ldr	r1, [pc, #20]	; (8103a3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x144>)
 8103a28:	68f8      	ldr	r0, [r7, #12]
 8103a2a:	f000 f847 	bl	8103abc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8logerrorEPKc>
      return -1;
 8103a2e:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8103a32:	4618      	mov	r0, r3
 8103a34:	3720      	adds	r7, #32
 8103a36:	46bd      	mov	sp, r7
 8103a38:	bd80      	pop	{r7, pc}
 8103a3a:	bf00      	nop
 8103a3c:	0810bf84 	.word	0x0810bf84

08103a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8103a40:	b580      	push	{r7, lr}
 8103a42:	b084      	sub	sp, #16
 8103a44:	af00      	add	r7, sp, #0
 8103a46:	6078      	str	r0, [r7, #4]
 8103a48:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8103a4a:	687b      	ldr	r3, [r7, #4]
 8103a4c:	3304      	adds	r3, #4
 8103a4e:	4618      	mov	r0, r3
 8103a50:	f7fd fd86 	bl	8101560 <_ZN13STM32Hardware4timeEv>
 8103a54:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8103a56:	683b      	ldr	r3, [r7, #0]
 8103a58:	681a      	ldr	r2, [r3, #0]
 8103a5a:	68fb      	ldr	r3, [r7, #12]
 8103a5c:	4914      	ldr	r1, [pc, #80]	; (8103ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERNS_4TimeE+0x70>)
 8103a5e:	fba1 1303 	umull	r1, r3, r1, r3
 8103a62:	099b      	lsrs	r3, r3, #6
 8103a64:	1ad3      	subs	r3, r2, r3
 8103a66:	1e5a      	subs	r2, r3, #1
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8103a6c:	683b      	ldr	r3, [r7, #0]
 8103a6e:	6859      	ldr	r1, [r3, #4]
 8103a70:	68fa      	ldr	r2, [r7, #12]
 8103a72:	4b0f      	ldr	r3, [pc, #60]	; (8103ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERNS_4TimeE+0x70>)
 8103a74:	fba3 0302 	umull	r0, r3, r3, r2
 8103a78:	099b      	lsrs	r3, r3, #6
 8103a7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8103a7e:	fb00 f303 	mul.w	r3, r0, r3
 8103a82:	1ad3      	subs	r3, r2, r3
 8103a84:	4a0b      	ldr	r2, [pc, #44]	; (8103ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERNS_4TimeE+0x74>)
 8103a86:	fb02 f303 	mul.w	r3, r2, r3
 8103a8a:	1aca      	subs	r2, r1, r3
 8103a8c:	4b0a      	ldr	r3, [pc, #40]	; (8103ab8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE6setNowERNS_4TimeE+0x78>)
 8103a8e:	4413      	add	r3, r2
 8103a90:	687a      	ldr	r2, [r7, #4]
 8103a92:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	f103 020c 	add.w	r2, r3, #12
 8103a9a:	687b      	ldr	r3, [r7, #4]
 8103a9c:	3310      	adds	r3, #16
 8103a9e:	4619      	mov	r1, r3
 8103aa0:	4610      	mov	r0, r2
 8103aa2:	f007 fe51 	bl	810b748 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8103aa6:	bf00      	nop
 8103aa8:	3710      	adds	r7, #16
 8103aaa:	46bd      	mov	sp, r7
 8103aac:	bd80      	pop	{r7, pc}
 8103aae:	bf00      	nop
 8103ab0:	10624dd3 	.word	0x10624dd3
 8103ab4:	000f4240 	.word	0x000f4240
 8103ab8:	3b9aca00 	.word	0x3b9aca00

08103abc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE8logerrorEPKc>:
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8103abc:	b580      	push	{r7, lr}
 8103abe:	b082      	sub	sp, #8
 8103ac0:	af00      	add	r7, sp, #0
 8103ac2:	6078      	str	r0, [r7, #4]
 8103ac4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8103ac6:	683a      	ldr	r2, [r7, #0]
 8103ac8:	2103      	movs	r1, #3
 8103aca:	6878      	ldr	r0, [r7, #4]
 8103acc:	f7ff fef8 	bl	81038c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE3logEcPKc>
  }
 8103ad0:	bf00      	nop
 8103ad2:	3708      	adds	r7, #8
 8103ad4:	46bd      	mov	sp, r7
 8103ad6:	bd80      	pop	{r7, pc}

08103ad8 <_Z41__static_initialization_and_destruction_0ii>:
 8103ad8:	b580      	push	{r7, lr}
 8103ada:	b082      	sub	sp, #8
 8103adc:	af00      	add	r7, sp, #0
 8103ade:	6078      	str	r0, [r7, #4]
 8103ae0:	6039      	str	r1, [r7, #0]
 8103ae2:	687b      	ldr	r3, [r7, #4]
 8103ae4:	2b01      	cmp	r3, #1
 8103ae6:	d122      	bne.n	8103b2e <_Z41__static_initialization_and_destruction_0ii+0x56>
 8103ae8:	683b      	ldr	r3, [r7, #0]
 8103aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8103aee:	4293      	cmp	r3, r2
 8103af0:	d11d      	bne.n	8103b2e <_Z41__static_initialization_and_destruction_0ii+0x56>
ros::NodeHandle nh;
 8103af2:	4811      	ldr	r0, [pc, #68]	; (8103b38 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8103af4:	f7ff f9d4 	bl	8102ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EEC1Ev>
nav_msgs::Odometry ROBOT_CurrentXYTheta_toROS_arr ;
 8103af8:	4810      	ldr	r0, [pc, #64]	; (8103b3c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8103afa:	f7fe fb31 	bl	8102160 <_ZN8nav_msgs8OdometryC1Ev>
std_msgs::Float32MultiArray Nav_XYTargets_RecievedFromMaster;
 8103afe:	4810      	ldr	r0, [pc, #64]	; (8103b40 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8103b00:	f7fe fea8 	bl	8102854 <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Int8 				Nav_Robot_Current_Status_i8 ;
 8103b04:	480f      	ldr	r0, [pc, #60]	; (8103b44 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8103b06:	f7fe ffdb 	bl	8102ac0 <_ZN8std_msgs4Int8C1Ev>
ros::Publisher Nav_CurrentXYThetaPublisher("Location_state", &ROBOT_CurrentXYTheta_toROS_arr);
 8103b0a:	2300      	movs	r3, #0
 8103b0c:	4a0b      	ldr	r2, [pc, #44]	; (8103b3c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8103b0e:	490e      	ldr	r1, [pc, #56]	; (8103b48 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8103b10:	480e      	ldr	r0, [pc, #56]	; (8103b4c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8103b12:	f7fd fc99 	bl	8101448 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher Nav_CurrentStatutsPublisher("Robot_Status"  , &Nav_Robot_Current_Status_i8 ) ;
 8103b16:	2300      	movs	r3, #0
 8103b18:	4a0a      	ldr	r2, [pc, #40]	; (8103b44 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8103b1a:	490d      	ldr	r1, [pc, #52]	; (8103b50 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8103b1c:	480d      	ldr	r0, [pc, #52]	; (8103b54 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8103b1e:	f7fd fc93 	bl	8101448 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Float32MultiArray> Nav_Orders_Subscriber("MASTER_Orders", & Nav_Orders_MessageRecievedCallback);
 8103b22:	2301      	movs	r3, #1
 8103b24:	4a0c      	ldr	r2, [pc, #48]	; (8103b58 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8103b26:	490d      	ldr	r1, [pc, #52]	; (8103b5c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8103b28:	480d      	ldr	r0, [pc, #52]	; (8103b60 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8103b2a:	f7ff fa5d 	bl	8102fe8 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>
}
 8103b2e:	bf00      	nop
 8103b30:	3708      	adds	r7, #8
 8103b32:	46bd      	mov	sp, r7
 8103b34:	bd80      	pop	{r7, pc}
 8103b36:	bf00      	nop
 8103b38:	100004b4 	.word	0x100004b4
 8103b3c:	10002638 	.word	0x10002638
 8103b40:	100027c8 	.word	0x100027c8
 8103b44:	100027f8 	.word	0x100027f8
 8103b48:	0810bfc0 	.word	0x0810bfc0
 8103b4c:	10002800 	.word	0x10002800
 8103b50:	0810bfd0 	.word	0x0810bfd0
 8103b54:	10002814 	.word	0x10002814
 8103b58:	08102bad 	.word	0x08102bad
 8103b5c:	0810bfe0 	.word	0x0810bfe0
 8103b60:	10002828 	.word	0x10002828

08103b64 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8103b64:	b580      	push	{r7, lr}
 8103b66:	b082      	sub	sp, #8
 8103b68:	af00      	add	r7, sp, #0
 8103b6a:	6078      	str	r0, [r7, #4]
 8103b6c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8103b6e:	687b      	ldr	r3, [r7, #4]
 8103b70:	330c      	adds	r3, #12
 8103b72:	6839      	ldr	r1, [r7, #0]
 8103b74:	4618      	mov	r0, r3
 8103b76:	f7fe fefb 	bl	8102970 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>
    this->cb_(msg);
 8103b7a:	687b      	ldr	r3, [r7, #4]
 8103b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103b7e:	687a      	ldr	r2, [r7, #4]
 8103b80:	320c      	adds	r2, #12
 8103b82:	4610      	mov	r0, r2
 8103b84:	4798      	blx	r3
  }
 8103b86:	bf00      	nop
 8103b88:	3708      	adds	r7, #8
 8103b8a:	46bd      	mov	sp, r7
 8103b8c:	bd80      	pop	{r7, pc}

08103b8e <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8103b8e:	b480      	push	{r7}
 8103b90:	b083      	sub	sp, #12
 8103b92:	af00      	add	r7, sp, #0
 8103b94:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8103b96:	687b      	ldr	r3, [r7, #4]
 8103b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  }
 8103b9a:	4618      	mov	r0, r3
 8103b9c:	370c      	adds	r7, #12
 8103b9e:	46bd      	mov	sp, r7
 8103ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ba4:	4770      	bx	lr

08103ba6 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8103ba6:	b580      	push	{r7, lr}
 8103ba8:	b082      	sub	sp, #8
 8103baa:	af00      	add	r7, sp, #0
 8103bac:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8103bae:	687b      	ldr	r3, [r7, #4]
 8103bb0:	330c      	adds	r3, #12
 8103bb2:	4618      	mov	r0, r3
 8103bb4:	f7fe ff68 	bl	8102a88 <_ZN8std_msgs17Float32MultiArray7getTypeEv>
 8103bb8:	4603      	mov	r3, r0
  }
 8103bba:	4618      	mov	r0, r3
 8103bbc:	3708      	adds	r7, #8
 8103bbe:	46bd      	mov	sp, r7
 8103bc0:	bd80      	pop	{r7, pc}

08103bc2 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8103bc2:	b580      	push	{r7, lr}
 8103bc4:	b082      	sub	sp, #8
 8103bc6:	af00      	add	r7, sp, #0
 8103bc8:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8103bca:	687b      	ldr	r3, [r7, #4]
 8103bcc:	330c      	adds	r3, #12
 8103bce:	4618      	mov	r0, r3
 8103bd0:	f7fe ff68 	bl	8102aa4 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>
 8103bd4:	4603      	mov	r3, r0
  }
 8103bd6:	4618      	mov	r0, r3
 8103bd8:	3708      	adds	r7, #8
 8103bda:	46bd      	mov	sp, r7
 8103bdc:	bd80      	pop	{r7, pc}

08103bde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi4096ELi4096EE9connectedEv>:
  virtual bool connected()
 8103bde:	b480      	push	{r7}
 8103be0:	b083      	sub	sp, #12
 8103be2:	af00      	add	r7, sp, #0
 8103be4:	6078      	str	r0, [r7, #4]
    return configured_;
 8103be6:	687b      	ldr	r3, [r7, #4]
 8103be8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8103bec:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
  };
 8103bf0:	4618      	mov	r0, r3
 8103bf2:	370c      	adds	r7, #12
 8103bf4:	46bd      	mov	sp, r7
 8103bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bfa:	4770      	bx	lr

08103bfc <_GLOBAL__sub_I_ROS_DelayCounter>:
 8103bfc:	b580      	push	{r7, lr}
 8103bfe:	af00      	add	r7, sp, #0
 8103c00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8103c04:	2001      	movs	r0, #1
 8103c06:	f7ff ff67 	bl	8103ad8 <_Z41__static_initialization_and_destruction_0ii>
 8103c0a:	bd80      	pop	{r7, pc}

08103c0c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8103c0c:	b580      	push	{r7, lr}
 8103c0e:	b082      	sub	sp, #8
 8103c10:	af00      	add	r7, sp, #0
 8103c12:	6078      	str	r0, [r7, #4]
	if ( htim == &htim17)
 8103c14:	687b      	ldr	r3, [r7, #4]
 8103c16:	4a46      	ldr	r2, [pc, #280]	; (8103d30 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8103c18:	4293      	cmp	r3, r2
 8103c1a:	f040 8082 	bne.w	8103d22 <HAL_TIM_PeriodElapsedCallback+0x116>
	{

		switch (ROS_Node_CurrentState_en )
 8103c1e:	4b45      	ldr	r3, [pc, #276]	; (8103d34 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8103c20:	781b      	ldrb	r3, [r3, #0]
 8103c22:	2b00      	cmp	r3, #0
 8103c24:	d002      	beq.n	8103c2c <HAL_TIM_PeriodElapsedCallback+0x20>
 8103c26:	2b01      	cmp	r3, #1
 8103c28:	d008      	beq.n	8103c3c <HAL_TIM_PeriodElapsedCallback+0x30>
 8103c2a:	e07a      	b.n	8103d22 <HAL_TIM_PeriodElapsedCallback+0x116>
		{
		case ROS_Node_idle_en :
		{
		 //HAL_GPIO_WritePin(LD3_GPIO_PORT, LD3_GPIO_PIN,GPIO_PIN_SET);

		HAL_GPIO_TogglePin(LD3_GPIO_PORT, LD3_GPIO_PIN);
 8103c2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8103c30:	4841      	ldr	r0, [pc, #260]	; (8103d38 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8103c32:	f003 fc65 	bl	8107500 <HAL_GPIO_TogglePin>

		ROS_SpinOnce();
 8103c36:	f7fe ffaf 	bl	8102b98 <_Z12ROS_SpinOncev>
		}break ;
 8103c3a:	e072      	b.n	8103d22 <HAL_TIM_PeriodElapsedCallback+0x116>
		{

			//HAL_GPIO_TogglePin(LD3_GPIO_PORT, LD3_GPIO_PIN);

			// Receive Current State , X , Y and Theta from CM7
			if ( (len = ringbuff_get_full(rb_cm7_to_cm4)) > 0 )
 8103c3c:	4b3f      	ldr	r3, [pc, #252]	; (8103d3c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8103c3e:	681b      	ldr	r3, [r3, #0]
 8103c40:	4618      	mov	r0, r3
 8103c42:	f000 fb33 	bl	81042ac <ringbuff_get_full>
 8103c46:	4603      	mov	r3, r0
 8103c48:	4a3d      	ldr	r2, [pc, #244]	; (8103d40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8103c4a:	6013      	str	r3, [r2, #0]
 8103c4c:	4b3c      	ldr	r3, [pc, #240]	; (8103d40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8103c4e:	681b      	ldr	r3, [r3, #0]
 8103c50:	2b00      	cmp	r3, #0
 8103c52:	bf14      	ite	ne
 8103c54:	2301      	movne	r3, #1
 8103c56:	2300      	moveq	r3, #0
 8103c58:	b2db      	uxtb	r3, r3
 8103c5a:	2b00      	cmp	r3, #0
 8103c5c:	d060      	beq.n	8103d20 <HAL_TIM_PeriodElapsedCallback+0x114>
			{
				ringbuff_read(rb_cm7_to_cm4, ROBOT_INformationsRecievedFromCM7, len);
 8103c5e:	4b37      	ldr	r3, [pc, #220]	; (8103d3c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8103c60:	681b      	ldr	r3, [r3, #0]
 8103c62:	4a37      	ldr	r2, [pc, #220]	; (8103d40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8103c64:	6812      	ldr	r2, [r2, #0]
 8103c66:	4937      	ldr	r1, [pc, #220]	; (8103d44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8103c68:	4618      	mov	r0, r3
 8103c6a:	f000 fa51 	bl	8104110 <ringbuff_read>

				read_counter = 0 ;
 8103c6e:	4b36      	ldr	r3, [pc, #216]	; (8103d48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8103c70:	2200      	movs	r2, #0
 8103c72:	701a      	strb	r2, [r3, #0]

				while (read_counter < (len/4 - 1) )
 8103c74:	4b34      	ldr	r3, [pc, #208]	; (8103d48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8103c76:	781b      	ldrb	r3, [r3, #0]
 8103c78:	461a      	mov	r2, r3
 8103c7a:	4b31      	ldr	r3, [pc, #196]	; (8103d40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8103c7c:	681b      	ldr	r3, [r3, #0]
 8103c7e:	089b      	lsrs	r3, r3, #2
 8103c80:	3b01      	subs	r3, #1
 8103c82:	429a      	cmp	r2, r3
 8103c84:	d24c      	bcs.n	8103d20 <HAL_TIM_PeriodElapsedCallback+0x114>
				{
					if (ROBOT_INformationsRecievedFromCM7[read_counter] == 100)
 8103c86:	4b30      	ldr	r3, [pc, #192]	; (8103d48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8103c88:	781b      	ldrb	r3, [r3, #0]
 8103c8a:	4a2e      	ldr	r2, [pc, #184]	; (8103d44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8103c8c:	009b      	lsls	r3, r3, #2
 8103c8e:	4413      	add	r3, r2
 8103c90:	edd3 7a00 	vldr	s15, [r3]
 8103c94:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8103d4c <HAL_TIM_PeriodElapsedCallback+0x140>
 8103c98:	eef4 7a47 	vcmp.f32	s15, s14
 8103c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103ca0:	d12c      	bne.n	8103cfc <HAL_TIM_PeriodElapsedCallback+0xf0>
					{
						ROBOT_CurrentXYTheta_fromCM7_arr[0] = ROBOT_INformationsRecievedFromCM7[read_counter + 1];
 8103ca2:	4b29      	ldr	r3, [pc, #164]	; (8103d48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8103ca4:	781b      	ldrb	r3, [r3, #0]
 8103ca6:	3301      	adds	r3, #1
 8103ca8:	4a26      	ldr	r2, [pc, #152]	; (8103d44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8103caa:	009b      	lsls	r3, r3, #2
 8103cac:	4413      	add	r3, r2
 8103cae:	681b      	ldr	r3, [r3, #0]
 8103cb0:	4a27      	ldr	r2, [pc, #156]	; (8103d50 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8103cb2:	6013      	str	r3, [r2, #0]
						ROBOT_CurrentXYTheta_fromCM7_arr[1] = ROBOT_INformationsRecievedFromCM7[read_counter + 2];
 8103cb4:	4b24      	ldr	r3, [pc, #144]	; (8103d48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8103cb6:	781b      	ldrb	r3, [r3, #0]
 8103cb8:	3302      	adds	r3, #2
 8103cba:	4a22      	ldr	r2, [pc, #136]	; (8103d44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8103cbc:	009b      	lsls	r3, r3, #2
 8103cbe:	4413      	add	r3, r2
 8103cc0:	681b      	ldr	r3, [r3, #0]
 8103cc2:	4a23      	ldr	r2, [pc, #140]	; (8103d50 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8103cc4:	6053      	str	r3, [r2, #4]
						ROBOT_CurrentXYTheta_fromCM7_arr[2] = ROBOT_INformationsRecievedFromCM7[read_counter + 3];
 8103cc6:	4b20      	ldr	r3, [pc, #128]	; (8103d48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8103cc8:	781b      	ldrb	r3, [r3, #0]
 8103cca:	3303      	adds	r3, #3
 8103ccc:	4a1d      	ldr	r2, [pc, #116]	; (8103d44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8103cce:	009b      	lsls	r3, r3, #2
 8103cd0:	4413      	add	r3, r2
 8103cd2:	681b      	ldr	r3, [r3, #0]
 8103cd4:	4a1e      	ldr	r2, [pc, #120]	; (8103d50 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8103cd6:	6093      	str	r3, [r2, #8]
						ROBOT_CurrentXYTheta_fromCM7_arr[3] = ROBOT_INformationsRecievedFromCM7[read_counter + 4];
 8103cd8:	4b1b      	ldr	r3, [pc, #108]	; (8103d48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8103cda:	781b      	ldrb	r3, [r3, #0]
 8103cdc:	3304      	adds	r3, #4
 8103cde:	4a19      	ldr	r2, [pc, #100]	; (8103d44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8103ce0:	009b      	lsls	r3, r3, #2
 8103ce2:	4413      	add	r3, r2
 8103ce4:	681b      	ldr	r3, [r3, #0]
 8103ce6:	4a1a      	ldr	r2, [pc, #104]	; (8103d50 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8103ce8:	60d3      	str	r3, [r2, #12]
						read_counter += 4 ;
 8103cea:	4b17      	ldr	r3, [pc, #92]	; (8103d48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8103cec:	781b      	ldrb	r3, [r3, #0]
 8103cee:	3304      	adds	r3, #4
 8103cf0:	b2da      	uxtb	r2, r3
 8103cf2:	4b15      	ldr	r3, [pc, #84]	; (8103d48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8103cf4:	701a      	strb	r2, [r3, #0]
						vNav_CurrentXYTheta_Publisher();
 8103cf6:	f7ff f855 	bl	8102da4 <_Z29vNav_CurrentXYTheta_Publisherv>
 8103cfa:	e7bb      	b.n	8103c74 <HAL_TIM_PeriodElapsedCallback+0x68>
					}
					else
					{
						ROBOT_CurrentStatuts_i8[0] = ROBOT_INformationsRecievedFromCM7[read_counter + 1];
 8103cfc:	4b12      	ldr	r3, [pc, #72]	; (8103d48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8103cfe:	781b      	ldrb	r3, [r3, #0]
 8103d00:	3301      	adds	r3, #1
 8103d02:	4a10      	ldr	r2, [pc, #64]	; (8103d44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8103d04:	009b      	lsls	r3, r3, #2
 8103d06:	4413      	add	r3, r2
 8103d08:	681b      	ldr	r3, [r3, #0]
 8103d0a:	4a12      	ldr	r2, [pc, #72]	; (8103d54 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8103d0c:	6013      	str	r3, [r2, #0]
						read_counter += 1 ;
 8103d0e:	4b0e      	ldr	r3, [pc, #56]	; (8103d48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8103d10:	781b      	ldrb	r3, [r3, #0]
 8103d12:	3301      	adds	r3, #1
 8103d14:	b2da      	uxtb	r2, r3
 8103d16:	4b0c      	ldr	r3, [pc, #48]	; (8103d48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8103d18:	701a      	strb	r2, [r3, #0]
						vNav_CurrentStatus_Publisher();
 8103d1a:	f7ff f81b 	bl	8102d54 <_Z28vNav_CurrentStatus_Publisherv>
				while (read_counter < (len/4 - 1) )
 8103d1e:	e7a9      	b.n	8103c74 <HAL_TIM_PeriodElapsedCallback+0x68>
			}




		}break ;
 8103d20:	bf00      	nop

		// Transmission of Orders to CM7 will be placed in the subscriber callback ( See Ros_Communication.cpp )


	}
	ROS_SpinOnce();
 8103d22:	f7fe ff39 	bl	8102b98 <_Z12ROS_SpinOncev>

}
 8103d26:	bf00      	nop
 8103d28:	3708      	adds	r7, #8
 8103d2a:	46bd      	mov	sp, r7
 8103d2c:	bd80      	pop	{r7, pc}
 8103d2e:	bf00      	nop
 8103d30:	1000286c 	.word	0x1000286c
 8103d34:	100000a4 	.word	0x100000a4
 8103d38:	58020400 	.word	0x58020400
 8103d3c:	10000010 	.word	0x10000010
 8103d40:	10002aa0 	.word	0x10002aa0
 8103d44:	10002a50 	.word	0x10002a50
 8103d48:	10002a3c 	.word	0x10002a3c
 8103d4c:	42c80000 	.word	0x42c80000
 8103d50:	10002a40 	.word	0x10002a40
 8103d54:	100000a0 	.word	0x100000a0

08103d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8103d58:	b580      	push	{r7, lr}
 8103d5a:	b082      	sub	sp, #8
 8103d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t i = 0, time, t1, t2;
 8103d5e:	2300      	movs	r3, #0
 8103d60:	607b      	str	r3, [r7, #4]
	/* CPU2 goes to STOP mode and waits CPU1 to initialize all the steps first */
	/* CPU1 will wakeup CPU2 with semaphore take and release events */
	/* HW semaphore Clock enable */
	__HAL_RCC_HSEM_CLK_ENABLE();
 8103d62:	4b21      	ldr	r3, [pc, #132]	; (8103de8 <main+0x90>)
 8103d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103d68:	4a1f      	ldr	r2, [pc, #124]	; (8103de8 <main+0x90>)
 8103d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8103d72:	4b1d      	ldr	r3, [pc, #116]	; (8103de8 <main+0x90>)
 8103d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103d7c:	603b      	str	r3, [r7, #0]
 8103d7e:	683b      	ldr	r3, [r7, #0]
	HAL_HSEM_ActivateNotification(HSEM_WAKEUP_CPU2_MASK);
 8103d80:	2001      	movs	r0, #1
 8103d82:	f003 fbd7 	bl	8107534 <HAL_HSEM_ActivateNotification>
	HAL_PWREx_ClearPendingEvent();
 8103d86:	f003 fc61 	bl	810764c <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8103d8a:	2201      	movs	r2, #1
 8103d8c:	2102      	movs	r1, #2
 8103d8e:	2000      	movs	r0, #0
 8103d90:	f003 fbe2 	bl	8107558 <HAL_PWREx_EnterSTOPMode>
	__HAL_HSEM_CLEAR_FLAG(HSEM_WAKEUP_CPU2_MASK);
 8103d94:	4b15      	ldr	r3, [pc, #84]	; (8103dec <main+0x94>)
 8103d96:	681b      	ldr	r3, [r3, #0]
 8103d98:	091b      	lsrs	r3, r3, #4
 8103d9a:	f003 030f 	and.w	r3, r3, #15
 8103d9e:	2b07      	cmp	r3, #7
 8103da0:	d108      	bne.n	8103db4 <main+0x5c>
 8103da2:	4b13      	ldr	r3, [pc, #76]	; (8103df0 <main+0x98>)
 8103da4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8103da8:	4a11      	ldr	r2, [pc, #68]	; (8103df0 <main+0x98>)
 8103daa:	f043 0301 	orr.w	r3, r3, #1
 8103dae:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8103db2:	e007      	b.n	8103dc4 <main+0x6c>
 8103db4:	4b0e      	ldr	r3, [pc, #56]	; (8103df0 <main+0x98>)
 8103db6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8103dba:	4a0d      	ldr	r2, [pc, #52]	; (8103df0 <main+0x98>)
 8103dbc:	f043 0301 	orr.w	r3, r3, #1
 8103dc0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8103dc4:	f000 fdf0 	bl	81049a8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8103dc8:	f000 f8ca 	bl	8103f60 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8103dcc:	f000 f8a0 	bl	8103f10 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8103dd0:	f000 f83e 	bl	8103e50 <_ZL19MX_USART3_UART_Initv>
  MX_TIM17_Init();
 8103dd4:	f000 f810 	bl	8103df8 <_ZL13MX_TIM17_Initv>
  /* USER CODE BEGIN 2 */

	led_init();
 8103dd8:	f000 f8dc 	bl	8103f94 <_ZL8led_initv>
	vROS_Setup();
 8103ddc:	f7fe ff88 	bl	8102cf0 <_Z10vROS_Setupv>
	HAL_TIM_Base_Start_IT(&htim17);
 8103de0:	4804      	ldr	r0, [pc, #16]	; (8103df4 <main+0x9c>)
 8103de2:	f005 fc9d 	bl	8109720 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8103de6:	e7fe      	b.n	8103de6 <main+0x8e>
 8103de8:	58024400 	.word	0x58024400
 8103dec:	e000ed00 	.word	0xe000ed00
 8103df0:	58026400 	.word	0x58026400
 8103df4:	1000286c 	.word	0x1000286c

08103df8 <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8103df8:	b580      	push	{r7, lr}
 8103dfa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8103dfc:	4b12      	ldr	r3, [pc, #72]	; (8103e48 <_ZL13MX_TIM17_Initv+0x50>)
 8103dfe:	4a13      	ldr	r2, [pc, #76]	; (8103e4c <_ZL13MX_TIM17_Initv+0x54>)
 8103e00:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48;
 8103e02:	4b11      	ldr	r3, [pc, #68]	; (8103e48 <_ZL13MX_TIM17_Initv+0x50>)
 8103e04:	2230      	movs	r2, #48	; 0x30
 8103e06:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8103e08:	4b0f      	ldr	r3, [pc, #60]	; (8103e48 <_ZL13MX_TIM17_Initv+0x50>)
 8103e0a:	2200      	movs	r2, #0
 8103e0c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8103e0e:	4b0e      	ldr	r3, [pc, #56]	; (8103e48 <_ZL13MX_TIM17_Initv+0x50>)
 8103e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8103e14:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8103e16:	4b0c      	ldr	r3, [pc, #48]	; (8103e48 <_ZL13MX_TIM17_Initv+0x50>)
 8103e18:	2200      	movs	r2, #0
 8103e1a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8103e1c:	4b0a      	ldr	r3, [pc, #40]	; (8103e48 <_ZL13MX_TIM17_Initv+0x50>)
 8103e1e:	2200      	movs	r2, #0
 8103e20:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8103e22:	4b09      	ldr	r3, [pc, #36]	; (8103e48 <_ZL13MX_TIM17_Initv+0x50>)
 8103e24:	2200      	movs	r2, #0
 8103e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8103e28:	4807      	ldr	r0, [pc, #28]	; (8103e48 <_ZL13MX_TIM17_Initv+0x50>)
 8103e2a:	f005 fc21 	bl	8109670 <HAL_TIM_Base_Init>
 8103e2e:	4603      	mov	r3, r0
 8103e30:	2b00      	cmp	r3, #0
 8103e32:	bf14      	ite	ne
 8103e34:	2301      	movne	r3, #1
 8103e36:	2300      	moveq	r3, #0
 8103e38:	b2db      	uxtb	r3, r3
 8103e3a:	2b00      	cmp	r3, #0
 8103e3c:	d001      	beq.n	8103e42 <_ZL13MX_TIM17_Initv+0x4a>
  {
    Error_Handler();
 8103e3e:	f000 f8d9 	bl	8103ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8103e42:	bf00      	nop
 8103e44:	bd80      	pop	{r7, pc}
 8103e46:	bf00      	nop
 8103e48:	1000286c 	.word	0x1000286c
 8103e4c:	40014800 	.word	0x40014800

08103e50 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8103e50:	b580      	push	{r7, lr}
 8103e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8103e54:	4b2c      	ldr	r3, [pc, #176]	; (8103f08 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8103e56:	4a2d      	ldr	r2, [pc, #180]	; (8103f0c <_ZL19MX_USART3_UART_Initv+0xbc>)
 8103e58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8103e5a:	4b2b      	ldr	r3, [pc, #172]	; (8103f08 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8103e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8103e60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8103e62:	4b29      	ldr	r3, [pc, #164]	; (8103f08 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8103e64:	2200      	movs	r2, #0
 8103e66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8103e68:	4b27      	ldr	r3, [pc, #156]	; (8103f08 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8103e6a:	2200      	movs	r2, #0
 8103e6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8103e6e:	4b26      	ldr	r3, [pc, #152]	; (8103f08 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8103e70:	2200      	movs	r2, #0
 8103e72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8103e74:	4b24      	ldr	r3, [pc, #144]	; (8103f08 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8103e76:	220c      	movs	r2, #12
 8103e78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8103e7a:	4b23      	ldr	r3, [pc, #140]	; (8103f08 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8103e7c:	2200      	movs	r2, #0
 8103e7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8103e80:	4b21      	ldr	r3, [pc, #132]	; (8103f08 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8103e82:	2200      	movs	r2, #0
 8103e84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8103e86:	4b20      	ldr	r3, [pc, #128]	; (8103f08 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8103e88:	2200      	movs	r2, #0
 8103e8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8103e8c:	4b1e      	ldr	r3, [pc, #120]	; (8103f08 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8103e8e:	2200      	movs	r2, #0
 8103e90:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8103e92:	4b1d      	ldr	r3, [pc, #116]	; (8103f08 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8103e94:	2200      	movs	r2, #0
 8103e96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8103e98:	481b      	ldr	r0, [pc, #108]	; (8103f08 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8103e9a:	f005 feb9 	bl	8109c10 <HAL_UART_Init>
 8103e9e:	4603      	mov	r3, r0
 8103ea0:	2b00      	cmp	r3, #0
 8103ea2:	bf14      	ite	ne
 8103ea4:	2301      	movne	r3, #1
 8103ea6:	2300      	moveq	r3, #0
 8103ea8:	b2db      	uxtb	r3, r3
 8103eaa:	2b00      	cmp	r3, #0
 8103eac:	d001      	beq.n	8103eb2 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8103eae:	f000 f8a1 	bl	8103ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103eb2:	2100      	movs	r1, #0
 8103eb4:	4814      	ldr	r0, [pc, #80]	; (8103f08 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8103eb6:	f007 fb7c 	bl	810b5b2 <HAL_UARTEx_SetTxFifoThreshold>
 8103eba:	4603      	mov	r3, r0
 8103ebc:	2b00      	cmp	r3, #0
 8103ebe:	bf14      	ite	ne
 8103ec0:	2301      	movne	r3, #1
 8103ec2:	2300      	moveq	r3, #0
 8103ec4:	b2db      	uxtb	r3, r3
 8103ec6:	2b00      	cmp	r3, #0
 8103ec8:	d001      	beq.n	8103ece <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8103eca:	f000 f893 	bl	8103ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8103ece:	2100      	movs	r1, #0
 8103ed0:	480d      	ldr	r0, [pc, #52]	; (8103f08 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8103ed2:	f007 fbac 	bl	810b62e <HAL_UARTEx_SetRxFifoThreshold>
 8103ed6:	4603      	mov	r3, r0
 8103ed8:	2b00      	cmp	r3, #0
 8103eda:	bf14      	ite	ne
 8103edc:	2301      	movne	r3, #1
 8103ede:	2300      	moveq	r3, #0
 8103ee0:	b2db      	uxtb	r3, r3
 8103ee2:	2b00      	cmp	r3, #0
 8103ee4:	d001      	beq.n	8103eea <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8103ee6:	f000 f885 	bl	8103ff4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8103eea:	4807      	ldr	r0, [pc, #28]	; (8103f08 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8103eec:	f007 fb28 	bl	810b540 <HAL_UARTEx_DisableFifoMode>
 8103ef0:	4603      	mov	r3, r0
 8103ef2:	2b00      	cmp	r3, #0
 8103ef4:	bf14      	ite	ne
 8103ef6:	2301      	movne	r3, #1
 8103ef8:	2300      	moveq	r3, #0
 8103efa:	b2db      	uxtb	r3, r3
 8103efc:	2b00      	cmp	r3, #0
 8103efe:	d001      	beq.n	8103f04 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8103f00:	f000 f878 	bl	8103ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8103f04:	bf00      	nop
 8103f06:	bd80      	pop	{r7, pc}
 8103f08:	100028b8 	.word	0x100028b8
 8103f0c:	40004800 	.word	0x40004800

08103f10 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8103f10:	b580      	push	{r7, lr}
 8103f12:	b082      	sub	sp, #8
 8103f14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8103f16:	4b11      	ldr	r3, [pc, #68]	; (8103f5c <_ZL11MX_DMA_Initv+0x4c>)
 8103f18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8103f1c:	4a0f      	ldr	r2, [pc, #60]	; (8103f5c <_ZL11MX_DMA_Initv+0x4c>)
 8103f1e:	f043 0301 	orr.w	r3, r3, #1
 8103f22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8103f26:	4b0d      	ldr	r3, [pc, #52]	; (8103f5c <_ZL11MX_DMA_Initv+0x4c>)
 8103f28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8103f2c:	f003 0301 	and.w	r3, r3, #1
 8103f30:	607b      	str	r3, [r7, #4]
 8103f32:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8103f34:	2200      	movs	r2, #0
 8103f36:	2100      	movs	r1, #0
 8103f38:	200b      	movs	r0, #11
 8103f3a:	f000 fec4 	bl	8104cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8103f3e:	200b      	movs	r0, #11
 8103f40:	f000 fedb 	bl	8104cfa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8103f44:	2200      	movs	r2, #0
 8103f46:	2100      	movs	r1, #0
 8103f48:	200c      	movs	r0, #12
 8103f4a:	f000 febc 	bl	8104cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8103f4e:	200c      	movs	r0, #12
 8103f50:	f000 fed3 	bl	8104cfa <HAL_NVIC_EnableIRQ>

}
 8103f54:	bf00      	nop
 8103f56:	3708      	adds	r7, #8
 8103f58:	46bd      	mov	sp, r7
 8103f5a:	bd80      	pop	{r7, pc}
 8103f5c:	58024400 	.word	0x58024400

08103f60 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8103f60:	b480      	push	{r7}
 8103f62:	b083      	sub	sp, #12
 8103f64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8103f66:	4b0a      	ldr	r3, [pc, #40]	; (8103f90 <_ZL12MX_GPIO_Initv+0x30>)
 8103f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103f6c:	4a08      	ldr	r2, [pc, #32]	; (8103f90 <_ZL12MX_GPIO_Initv+0x30>)
 8103f6e:	f043 0308 	orr.w	r3, r3, #8
 8103f72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8103f76:	4b06      	ldr	r3, [pc, #24]	; (8103f90 <_ZL12MX_GPIO_Initv+0x30>)
 8103f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103f7c:	f003 0308 	and.w	r3, r3, #8
 8103f80:	607b      	str	r3, [r7, #4]
 8103f82:	687b      	ldr	r3, [r7, #4]

}
 8103f84:	bf00      	nop
 8103f86:	370c      	adds	r7, #12
 8103f88:	46bd      	mov	sp, r7
 8103f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f8e:	4770      	bx	lr
 8103f90:	58024400 	.word	0x58024400

08103f94 <_ZL8led_initv>:

/* USER CODE BEGIN 4 */
void
led_init(void) {
 8103f94:	b580      	push	{r7, lr}
 8103f96:	b086      	sub	sp, #24
 8103f98:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103f9a:	1d3b      	adds	r3, r7, #4
 8103f9c:	2200      	movs	r2, #0
 8103f9e:	601a      	str	r2, [r3, #0]
 8103fa0:	605a      	str	r2, [r3, #4]
 8103fa2:	609a      	str	r2, [r3, #8]
 8103fa4:	60da      	str	r2, [r3, #12]
 8103fa6:	611a      	str	r2, [r3, #16]

	LD3_GPIO_CLK_EN();
 8103fa8:	4b10      	ldr	r3, [pc, #64]	; (8103fec <_ZL8led_initv+0x58>)
 8103faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103fae:	4a0f      	ldr	r2, [pc, #60]	; (8103fec <_ZL8led_initv+0x58>)
 8103fb0:	f043 0302 	orr.w	r3, r3, #2
 8103fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8103fb8:	4b0c      	ldr	r3, [pc, #48]	; (8103fec <_ZL8led_initv+0x58>)
 8103fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103fbe:	f003 0302 	and.w	r3, r3, #2
 8103fc2:	603b      	str	r3, [r7, #0]
 8103fc4:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = LD3_GPIO_PIN;
 8103fc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8103fca:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8103fcc:	2301      	movs	r3, #1
 8103fce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103fd0:	2300      	movs	r3, #0
 8103fd2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103fd4:	2300      	movs	r3, #0
 8103fd6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LD3_GPIO_PORT, &GPIO_InitStruct);
 8103fd8:	1d3b      	adds	r3, r7, #4
 8103fda:	4619      	mov	r1, r3
 8103fdc:	4804      	ldr	r0, [pc, #16]	; (8103ff0 <_ZL8led_initv+0x5c>)
 8103fde:	f003 f8df 	bl	81071a0 <HAL_GPIO_Init>
}
 8103fe2:	bf00      	nop
 8103fe4:	3718      	adds	r7, #24
 8103fe6:	46bd      	mov	sp, r7
 8103fe8:	bd80      	pop	{r7, pc}
 8103fea:	bf00      	nop
 8103fec:	58024400 	.word	0x58024400
 8103ff0:	58020400 	.word	0x58020400

08103ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8103ff4:	b480      	push	{r7}
 8103ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8103ff8:	b672      	cpsid	i
}
 8103ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8103ffc:	e7fe      	b.n	8103ffc <Error_Handler+0x8>
	...

08104000 <ringbuff_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
ringbuff_write(RINGBUFF_VOLATILE ringbuff_t* buff, const void* data, size_t btw) {
 8104000:	b580      	push	{r7, lr}
 8104002:	b088      	sub	sp, #32
 8104004:	af00      	add	r7, sp, #0
 8104006:	60f8      	str	r0, [r7, #12]
 8104008:	60b9      	str	r1, [r7, #8]
 810400a:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 810400c:	68bb      	ldr	r3, [r7, #8]
 810400e:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8104010:	68fb      	ldr	r3, [r7, #12]
 8104012:	2b00      	cmp	r3, #0
 8104014:	d017      	beq.n	8104046 <ringbuff_write+0x46>
 8104016:	68fb      	ldr	r3, [r7, #12]
 8104018:	681b      	ldr	r3, [r3, #0]
 810401a:	4a3b      	ldr	r2, [pc, #236]	; (8104108 <ringbuff_write+0x108>)
 810401c:	4293      	cmp	r3, r2
 810401e:	d112      	bne.n	8104046 <ringbuff_write+0x46>
 8104020:	68fb      	ldr	r3, [r7, #12]
 8104022:	699b      	ldr	r3, [r3, #24]
 8104024:	4a39      	ldr	r2, [pc, #228]	; (810410c <ringbuff_write+0x10c>)
 8104026:	4293      	cmp	r3, r2
 8104028:	d10d      	bne.n	8104046 <ringbuff_write+0x46>
 810402a:	68fb      	ldr	r3, [r7, #12]
 810402c:	685b      	ldr	r3, [r3, #4]
 810402e:	2b00      	cmp	r3, #0
 8104030:	d009      	beq.n	8104046 <ringbuff_write+0x46>
 8104032:	68fb      	ldr	r3, [r7, #12]
 8104034:	689b      	ldr	r3, [r3, #8]
 8104036:	2b00      	cmp	r3, #0
 8104038:	d005      	beq.n	8104046 <ringbuff_write+0x46>
 810403a:	68bb      	ldr	r3, [r7, #8]
 810403c:	2b00      	cmp	r3, #0
 810403e:	d002      	beq.n	8104046 <ringbuff_write+0x46>
 8104040:	687b      	ldr	r3, [r7, #4]
 8104042:	2b00      	cmp	r3, #0
 8104044:	d101      	bne.n	810404a <ringbuff_write+0x4a>
        return 0;
 8104046:	2300      	movs	r3, #0
 8104048:	e059      	b.n	81040fe <ringbuff_write+0xfe>
    }

    /* Calculate maximum number of bytes available to write */
    free = ringbuff_get_free(buff);
 810404a:	68f8      	ldr	r0, [r7, #12]
 810404c:	f000 f8e8 	bl	8104220 <ringbuff_get_free>
 8104050:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 8104052:	687a      	ldr	r2, [r7, #4]
 8104054:	69bb      	ldr	r3, [r7, #24]
 8104056:	4293      	cmp	r3, r2
 8104058:	bf28      	it	cs
 810405a:	4613      	movcs	r3, r2
 810405c:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 810405e:	687b      	ldr	r3, [r7, #4]
 8104060:	2b00      	cmp	r3, #0
 8104062:	d101      	bne.n	8104068 <ringbuff_write+0x68>
        return 0;
 8104064:	2300      	movs	r3, #0
 8104066:	e04a      	b.n	81040fe <ringbuff_write+0xfe>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8104068:	68fb      	ldr	r3, [r7, #12]
 810406a:	689a      	ldr	r2, [r3, #8]
 810406c:	68fb      	ldr	r3, [r7, #12]
 810406e:	691b      	ldr	r3, [r3, #16]
 8104070:	1ad3      	subs	r3, r2, r3
 8104072:	687a      	ldr	r2, [r7, #4]
 8104074:	429a      	cmp	r2, r3
 8104076:	d905      	bls.n	8104084 <ringbuff_write+0x84>
 8104078:	68fb      	ldr	r3, [r7, #12]
 810407a:	689a      	ldr	r2, [r3, #8]
 810407c:	68fb      	ldr	r3, [r7, #12]
 810407e:	691b      	ldr	r3, [r3, #16]
 8104080:	1ad3      	subs	r3, r2, r3
 8104082:	e000      	b.n	8104086 <ringbuff_write+0x86>
 8104084:	687b      	ldr	r3, [r7, #4]
 8104086:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8104088:	68fb      	ldr	r3, [r7, #12]
 810408a:	685a      	ldr	r2, [r3, #4]
 810408c:	68fb      	ldr	r3, [r7, #12]
 810408e:	691b      	ldr	r3, [r3, #16]
 8104090:	4413      	add	r3, r2
 8104092:	697a      	ldr	r2, [r7, #20]
 8104094:	69f9      	ldr	r1, [r7, #28]
 8104096:	4618      	mov	r0, r3
 8104098:	f007 fbc8 	bl	810b82c <memcpy>
    buff->w += tocopy;
 810409c:	68fb      	ldr	r3, [r7, #12]
 810409e:	691a      	ldr	r2, [r3, #16]
 81040a0:	697b      	ldr	r3, [r7, #20]
 81040a2:	441a      	add	r2, r3
 81040a4:	68fb      	ldr	r3, [r7, #12]
 81040a6:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 81040a8:	687a      	ldr	r2, [r7, #4]
 81040aa:	697b      	ldr	r3, [r7, #20]
 81040ac:	1ad3      	subs	r3, r2, r3
 81040ae:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 81040b0:	687b      	ldr	r3, [r7, #4]
 81040b2:	2b00      	cmp	r3, #0
 81040b4:	d00b      	beq.n	81040ce <ringbuff_write+0xce>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 81040b6:	68fb      	ldr	r3, [r7, #12]
 81040b8:	6858      	ldr	r0, [r3, #4]
 81040ba:	69fa      	ldr	r2, [r7, #28]
 81040bc:	697b      	ldr	r3, [r7, #20]
 81040be:	4413      	add	r3, r2
 81040c0:	687a      	ldr	r2, [r7, #4]
 81040c2:	4619      	mov	r1, r3
 81040c4:	f007 fbb2 	bl	810b82c <memcpy>
        buff->w = btw;
 81040c8:	68fb      	ldr	r3, [r7, #12]
 81040ca:	687a      	ldr	r2, [r7, #4]
 81040cc:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 81040ce:	68fb      	ldr	r3, [r7, #12]
 81040d0:	691a      	ldr	r2, [r3, #16]
 81040d2:	68fb      	ldr	r3, [r7, #12]
 81040d4:	689b      	ldr	r3, [r3, #8]
 81040d6:	429a      	cmp	r2, r3
 81040d8:	d302      	bcc.n	81040e0 <ringbuff_write+0xe0>
        buff->w = 0;
 81040da:	68fb      	ldr	r3, [r7, #12]
 81040dc:	2200      	movs	r2, #0
 81040de:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 81040e0:	68fb      	ldr	r3, [r7, #12]
 81040e2:	695b      	ldr	r3, [r3, #20]
 81040e4:	2b00      	cmp	r3, #0
 81040e6:	d007      	beq.n	81040f8 <ringbuff_write+0xf8>
 81040e8:	68fb      	ldr	r3, [r7, #12]
 81040ea:	695b      	ldr	r3, [r3, #20]
 81040ec:	6979      	ldr	r1, [r7, #20]
 81040ee:	687a      	ldr	r2, [r7, #4]
 81040f0:	440a      	add	r2, r1
 81040f2:	2101      	movs	r1, #1
 81040f4:	68f8      	ldr	r0, [r7, #12]
 81040f6:	4798      	blx	r3
    return tocopy + btw;
 81040f8:	697a      	ldr	r2, [r7, #20]
 81040fa:	687b      	ldr	r3, [r7, #4]
 81040fc:	4413      	add	r3, r2
}
 81040fe:	4618      	mov	r0, r3
 8104100:	3720      	adds	r7, #32
 8104102:	46bd      	mov	sp, r7
 8104104:	bd80      	pop	{r7, pc}
 8104106:	bf00      	nop
 8104108:	deadbeef 	.word	0xdeadbeef
 810410c:	21524110 	.word	0x21524110

08104110 <ringbuff_read>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
size_t
ringbuff_read(RINGBUFF_VOLATILE ringbuff_t* buff, void* data, size_t btr) {
 8104110:	b580      	push	{r7, lr}
 8104112:	b088      	sub	sp, #32
 8104114:	af00      	add	r7, sp, #0
 8104116:	60f8      	str	r0, [r7, #12]
 8104118:	60b9      	str	r1, [r7, #8]
 810411a:	607a      	str	r2, [r7, #4]
    size_t tocopy, full;
    uint8_t *d = data;
 810411c:	68bb      	ldr	r3, [r7, #8]
 810411e:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 8104120:	68fb      	ldr	r3, [r7, #12]
 8104122:	2b00      	cmp	r3, #0
 8104124:	d017      	beq.n	8104156 <ringbuff_read+0x46>
 8104126:	68fb      	ldr	r3, [r7, #12]
 8104128:	681b      	ldr	r3, [r3, #0]
 810412a:	4a3b      	ldr	r2, [pc, #236]	; (8104218 <ringbuff_read+0x108>)
 810412c:	4293      	cmp	r3, r2
 810412e:	d112      	bne.n	8104156 <ringbuff_read+0x46>
 8104130:	68fb      	ldr	r3, [r7, #12]
 8104132:	699b      	ldr	r3, [r3, #24]
 8104134:	4a39      	ldr	r2, [pc, #228]	; (810421c <ringbuff_read+0x10c>)
 8104136:	4293      	cmp	r3, r2
 8104138:	d10d      	bne.n	8104156 <ringbuff_read+0x46>
 810413a:	68fb      	ldr	r3, [r7, #12]
 810413c:	685b      	ldr	r3, [r3, #4]
 810413e:	2b00      	cmp	r3, #0
 8104140:	d009      	beq.n	8104156 <ringbuff_read+0x46>
 8104142:	68fb      	ldr	r3, [r7, #12]
 8104144:	689b      	ldr	r3, [r3, #8]
 8104146:	2b00      	cmp	r3, #0
 8104148:	d005      	beq.n	8104156 <ringbuff_read+0x46>
 810414a:	68bb      	ldr	r3, [r7, #8]
 810414c:	2b00      	cmp	r3, #0
 810414e:	d002      	beq.n	8104156 <ringbuff_read+0x46>
 8104150:	687b      	ldr	r3, [r7, #4]
 8104152:	2b00      	cmp	r3, #0
 8104154:	d101      	bne.n	810415a <ringbuff_read+0x4a>
        return 0;
 8104156:	2300      	movs	r3, #0
 8104158:	e059      	b.n	810420e <ringbuff_read+0xfe>
    }

    /* Calculate maximum number of bytes available to read */
    full = ringbuff_get_full(buff);
 810415a:	68f8      	ldr	r0, [r7, #12]
 810415c:	f000 f8a6 	bl	81042ac <ringbuff_get_full>
 8104160:	61b8      	str	r0, [r7, #24]
    btr = BUF_MIN(full, btr);
 8104162:	687a      	ldr	r2, [r7, #4]
 8104164:	69bb      	ldr	r3, [r7, #24]
 8104166:	4293      	cmp	r3, r2
 8104168:	bf28      	it	cs
 810416a:	4613      	movcs	r3, r2
 810416c:	607b      	str	r3, [r7, #4]
    if (btr == 0) {
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	2b00      	cmp	r3, #0
 8104172:	d101      	bne.n	8104178 <ringbuff_read+0x68>
        return 0;
 8104174:	2300      	movs	r3, #0
 8104176:	e04a      	b.n	810420e <ringbuff_read+0xfe>
    }

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->r, btr);
 8104178:	68fb      	ldr	r3, [r7, #12]
 810417a:	689a      	ldr	r2, [r3, #8]
 810417c:	68fb      	ldr	r3, [r7, #12]
 810417e:	68db      	ldr	r3, [r3, #12]
 8104180:	1ad3      	subs	r3, r2, r3
 8104182:	687a      	ldr	r2, [r7, #4]
 8104184:	429a      	cmp	r2, r3
 8104186:	d905      	bls.n	8104194 <ringbuff_read+0x84>
 8104188:	68fb      	ldr	r3, [r7, #12]
 810418a:	689a      	ldr	r2, [r3, #8]
 810418c:	68fb      	ldr	r3, [r7, #12]
 810418e:	68db      	ldr	r3, [r3, #12]
 8104190:	1ad3      	subs	r3, r2, r3
 8104192:	e000      	b.n	8104196 <ringbuff_read+0x86>
 8104194:	687b      	ldr	r3, [r7, #4]
 8104196:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(d, &buff->buff[buff->r], tocopy);
 8104198:	68fb      	ldr	r3, [r7, #12]
 810419a:	685a      	ldr	r2, [r3, #4]
 810419c:	68fb      	ldr	r3, [r7, #12]
 810419e:	68db      	ldr	r3, [r3, #12]
 81041a0:	4413      	add	r3, r2
 81041a2:	697a      	ldr	r2, [r7, #20]
 81041a4:	4619      	mov	r1, r3
 81041a6:	69f8      	ldr	r0, [r7, #28]
 81041a8:	f007 fb40 	bl	810b82c <memcpy>
    buff->r += tocopy;
 81041ac:	68fb      	ldr	r3, [r7, #12]
 81041ae:	68da      	ldr	r2, [r3, #12]
 81041b0:	697b      	ldr	r3, [r7, #20]
 81041b2:	441a      	add	r2, r3
 81041b4:	68fb      	ldr	r3, [r7, #12]
 81041b6:	60da      	str	r2, [r3, #12]
    btr -= tocopy;
 81041b8:	687a      	ldr	r2, [r7, #4]
 81041ba:	697b      	ldr	r3, [r7, #20]
 81041bc:	1ad3      	subs	r3, r2, r3
 81041be:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 81041c0:	687b      	ldr	r3, [r7, #4]
 81041c2:	2b00      	cmp	r3, #0
 81041c4:	d00b      	beq.n	81041de <ringbuff_read+0xce>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 81041c6:	69fa      	ldr	r2, [r7, #28]
 81041c8:	697b      	ldr	r3, [r7, #20]
 81041ca:	18d0      	adds	r0, r2, r3
 81041cc:	68fb      	ldr	r3, [r7, #12]
 81041ce:	685b      	ldr	r3, [r3, #4]
 81041d0:	687a      	ldr	r2, [r7, #4]
 81041d2:	4619      	mov	r1, r3
 81041d4:	f007 fb2a 	bl	810b82c <memcpy>
        buff->r = btr;
 81041d8:	68fb      	ldr	r3, [r7, #12]
 81041da:	687a      	ldr	r2, [r7, #4]
 81041dc:	60da      	str	r2, [r3, #12]
    }

    /* Step 3: Check end of buffer */
    if (buff->r >= buff->size) {
 81041de:	68fb      	ldr	r3, [r7, #12]
 81041e0:	68da      	ldr	r2, [r3, #12]
 81041e2:	68fb      	ldr	r3, [r7, #12]
 81041e4:	689b      	ldr	r3, [r3, #8]
 81041e6:	429a      	cmp	r2, r3
 81041e8:	d302      	bcc.n	81041f0 <ringbuff_read+0xe0>
        buff->r = 0;
 81041ea:	68fb      	ldr	r3, [r7, #12]
 81041ec:	2200      	movs	r2, #0
 81041ee:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, tocopy + btr);
 81041f0:	68fb      	ldr	r3, [r7, #12]
 81041f2:	695b      	ldr	r3, [r3, #20]
 81041f4:	2b00      	cmp	r3, #0
 81041f6:	d007      	beq.n	8104208 <ringbuff_read+0xf8>
 81041f8:	68fb      	ldr	r3, [r7, #12]
 81041fa:	695b      	ldr	r3, [r3, #20]
 81041fc:	6979      	ldr	r1, [r7, #20]
 81041fe:	687a      	ldr	r2, [r7, #4]
 8104200:	440a      	add	r2, r1
 8104202:	2100      	movs	r1, #0
 8104204:	68f8      	ldr	r0, [r7, #12]
 8104206:	4798      	blx	r3
    return tocopy + btr;
 8104208:	697a      	ldr	r2, [r7, #20]
 810420a:	687b      	ldr	r3, [r7, #4]
 810420c:	4413      	add	r3, r2
}
 810420e:	4618      	mov	r0, r3
 8104210:	3720      	adds	r7, #32
 8104212:	46bd      	mov	sp, r7
 8104214:	bd80      	pop	{r7, pc}
 8104216:	bf00      	nop
 8104218:	deadbeef 	.word	0xdeadbeef
 810421c:	21524110 	.word	0x21524110

08104220 <ringbuff_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
ringbuff_get_free(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8104220:	b480      	push	{r7}
 8104222:	b087      	sub	sp, #28
 8104224:	af00      	add	r7, sp, #0
 8104226:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8104228:	687b      	ldr	r3, [r7, #4]
 810422a:	2b00      	cmp	r3, #0
 810422c:	d011      	beq.n	8104252 <ringbuff_get_free+0x32>
 810422e:	687b      	ldr	r3, [r7, #4]
 8104230:	681b      	ldr	r3, [r3, #0]
 8104232:	4a1c      	ldr	r2, [pc, #112]	; (81042a4 <ringbuff_get_free+0x84>)
 8104234:	4293      	cmp	r3, r2
 8104236:	d10c      	bne.n	8104252 <ringbuff_get_free+0x32>
 8104238:	687b      	ldr	r3, [r7, #4]
 810423a:	699b      	ldr	r3, [r3, #24]
 810423c:	4a1a      	ldr	r2, [pc, #104]	; (81042a8 <ringbuff_get_free+0x88>)
 810423e:	4293      	cmp	r3, r2
 8104240:	d107      	bne.n	8104252 <ringbuff_get_free+0x32>
 8104242:	687b      	ldr	r3, [r7, #4]
 8104244:	685b      	ldr	r3, [r3, #4]
 8104246:	2b00      	cmp	r3, #0
 8104248:	d003      	beq.n	8104252 <ringbuff_get_free+0x32>
 810424a:	687b      	ldr	r3, [r7, #4]
 810424c:	689b      	ldr	r3, [r3, #8]
 810424e:	2b00      	cmp	r3, #0
 8104250:	d101      	bne.n	8104256 <ringbuff_get_free+0x36>
        return 0;
 8104252:	2300      	movs	r3, #0
 8104254:	e01f      	b.n	8104296 <ringbuff_get_free+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8104256:	687b      	ldr	r3, [r7, #4]
 8104258:	691b      	ldr	r3, [r3, #16]
 810425a:	613b      	str	r3, [r7, #16]
    r = buff->r;
 810425c:	687b      	ldr	r3, [r7, #4]
 810425e:	68db      	ldr	r3, [r3, #12]
 8104260:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8104262:	693a      	ldr	r2, [r7, #16]
 8104264:	68fb      	ldr	r3, [r7, #12]
 8104266:	429a      	cmp	r2, r3
 8104268:	d103      	bne.n	8104272 <ringbuff_get_free+0x52>
        size = buff->size;
 810426a:	687b      	ldr	r3, [r7, #4]
 810426c:	689b      	ldr	r3, [r3, #8]
 810426e:	617b      	str	r3, [r7, #20]
 8104270:	e00f      	b.n	8104292 <ringbuff_get_free+0x72>
    } else if (r > w) {
 8104272:	68fa      	ldr	r2, [r7, #12]
 8104274:	693b      	ldr	r3, [r7, #16]
 8104276:	429a      	cmp	r2, r3
 8104278:	d904      	bls.n	8104284 <ringbuff_get_free+0x64>
        size = r - w;
 810427a:	68fa      	ldr	r2, [r7, #12]
 810427c:	693b      	ldr	r3, [r7, #16]
 810427e:	1ad3      	subs	r3, r2, r3
 8104280:	617b      	str	r3, [r7, #20]
 8104282:	e006      	b.n	8104292 <ringbuff_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 8104284:	687b      	ldr	r3, [r7, #4]
 8104286:	689a      	ldr	r2, [r3, #8]
 8104288:	68f9      	ldr	r1, [r7, #12]
 810428a:	693b      	ldr	r3, [r7, #16]
 810428c:	1acb      	subs	r3, r1, r3
 810428e:	4413      	add	r3, r2
 8104290:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8104292:	697b      	ldr	r3, [r7, #20]
 8104294:	3b01      	subs	r3, #1
}
 8104296:	4618      	mov	r0, r3
 8104298:	371c      	adds	r7, #28
 810429a:	46bd      	mov	sp, r7
 810429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042a0:	4770      	bx	lr
 81042a2:	bf00      	nop
 81042a4:	deadbeef 	.word	0xdeadbeef
 81042a8:	21524110 	.word	0x21524110

081042ac <ringbuff_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
ringbuff_get_full(RINGBUFF_VOLATILE ringbuff_t* buff) {
 81042ac:	b480      	push	{r7}
 81042ae:	b087      	sub	sp, #28
 81042b0:	af00      	add	r7, sp, #0
 81042b2:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 81042b4:	687b      	ldr	r3, [r7, #4]
 81042b6:	2b00      	cmp	r3, #0
 81042b8:	d011      	beq.n	81042de <ringbuff_get_full+0x32>
 81042ba:	687b      	ldr	r3, [r7, #4]
 81042bc:	681b      	ldr	r3, [r3, #0]
 81042be:	4a1b      	ldr	r2, [pc, #108]	; (810432c <ringbuff_get_full+0x80>)
 81042c0:	4293      	cmp	r3, r2
 81042c2:	d10c      	bne.n	81042de <ringbuff_get_full+0x32>
 81042c4:	687b      	ldr	r3, [r7, #4]
 81042c6:	699b      	ldr	r3, [r3, #24]
 81042c8:	4a19      	ldr	r2, [pc, #100]	; (8104330 <ringbuff_get_full+0x84>)
 81042ca:	4293      	cmp	r3, r2
 81042cc:	d107      	bne.n	81042de <ringbuff_get_full+0x32>
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	685b      	ldr	r3, [r3, #4]
 81042d2:	2b00      	cmp	r3, #0
 81042d4:	d003      	beq.n	81042de <ringbuff_get_full+0x32>
 81042d6:	687b      	ldr	r3, [r7, #4]
 81042d8:	689b      	ldr	r3, [r3, #8]
 81042da:	2b00      	cmp	r3, #0
 81042dc:	d101      	bne.n	81042e2 <ringbuff_get_full+0x36>
        return 0;
 81042de:	2300      	movs	r3, #0
 81042e0:	e01d      	b.n	810431e <ringbuff_get_full+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	691b      	ldr	r3, [r3, #16]
 81042e6:	613b      	str	r3, [r7, #16]
    r = buff->r;
 81042e8:	687b      	ldr	r3, [r7, #4]
 81042ea:	68db      	ldr	r3, [r3, #12]
 81042ec:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 81042ee:	693a      	ldr	r2, [r7, #16]
 81042f0:	68fb      	ldr	r3, [r7, #12]
 81042f2:	429a      	cmp	r2, r3
 81042f4:	d102      	bne.n	81042fc <ringbuff_get_full+0x50>
        size = 0;
 81042f6:	2300      	movs	r3, #0
 81042f8:	617b      	str	r3, [r7, #20]
 81042fa:	e00f      	b.n	810431c <ringbuff_get_full+0x70>
    } else if (w > r) {
 81042fc:	693a      	ldr	r2, [r7, #16]
 81042fe:	68fb      	ldr	r3, [r7, #12]
 8104300:	429a      	cmp	r2, r3
 8104302:	d904      	bls.n	810430e <ringbuff_get_full+0x62>
        size = w - r;
 8104304:	693a      	ldr	r2, [r7, #16]
 8104306:	68fb      	ldr	r3, [r7, #12]
 8104308:	1ad3      	subs	r3, r2, r3
 810430a:	617b      	str	r3, [r7, #20]
 810430c:	e006      	b.n	810431c <ringbuff_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 810430e:	687b      	ldr	r3, [r7, #4]
 8104310:	689a      	ldr	r2, [r3, #8]
 8104312:	6939      	ldr	r1, [r7, #16]
 8104314:	68fb      	ldr	r3, [r7, #12]
 8104316:	1acb      	subs	r3, r1, r3
 8104318:	4413      	add	r3, r2
 810431a:	617b      	str	r3, [r7, #20]
    }
    return size;
 810431c:	697b      	ldr	r3, [r7, #20]
}
 810431e:	4618      	mov	r0, r3
 8104320:	371c      	adds	r7, #28
 8104322:	46bd      	mov	sp, r7
 8104324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104328:	4770      	bx	lr
 810432a:	bf00      	nop
 810432c:	deadbeef 	.word	0xdeadbeef
 8104330:	21524110 	.word	0x21524110

08104334 <_Z17ringbuffer_statusP10ringbuffer>:
#include <string.h>

#define ASSERT(EX)                                                         \

__inline enum ringbuffer_state  ringbuffer_status(struct  ringbuffer *rb)
{
 8104334:	b480      	push	{r7}
 8104336:	b083      	sub	sp, #12
 8104338:	af00      	add	r7, sp, #0
 810433a:	6078      	str	r0, [r7, #4]
	if (rb->read_index == rb->write_index) {
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	889b      	ldrh	r3, [r3, #4]
 8104340:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8104344:	b29a      	uxth	r2, r3
 8104346:	687b      	ldr	r3, [r7, #4]
 8104348:	88db      	ldrh	r3, [r3, #6]
 810434a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 810434e:	b29b      	uxth	r3, r3
 8104350:	429a      	cmp	r2, r3
 8104352:	d10f      	bne.n	8104374 <_Z17ringbuffer_statusP10ringbuffer+0x40>
		if (rb->read_mirror == rb->write_mirror)
 8104354:	687b      	ldr	r3, [r7, #4]
 8104356:	791b      	ldrb	r3, [r3, #4]
 8104358:	f3c3 0300 	ubfx	r3, r3, #0, #1
 810435c:	b2da      	uxtb	r2, r3
 810435e:	687b      	ldr	r3, [r7, #4]
 8104360:	799b      	ldrb	r3, [r3, #6]
 8104362:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8104366:	b2db      	uxtb	r3, r3
 8104368:	429a      	cmp	r2, r3
 810436a:	d101      	bne.n	8104370 <_Z17ringbuffer_statusP10ringbuffer+0x3c>
			return RT_RINGBUFFER_EMPTY;
 810436c:	2300      	movs	r3, #0
 810436e:	e002      	b.n	8104376 <_Z17ringbuffer_statusP10ringbuffer+0x42>
		else
			return RT_RINGBUFFER_FULL;
 8104370:	2301      	movs	r3, #1
 8104372:	e000      	b.n	8104376 <_Z17ringbuffer_statusP10ringbuffer+0x42>
	}
	return RT_RINGBUFFER_HALFFULL;
 8104374:	2302      	movs	r3, #2
}
 8104376:	4618      	mov	r0, r3
 8104378:	370c      	adds	r7, #12
 810437a:	46bd      	mov	sp, r7
 810437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104380:	4770      	bx	lr

08104382 <_Z19ringbuffer_data_lenP10ringbuffer>:

/** return the size of data in rb */
uint16_t  ringbuffer_data_len(struct  ringbuffer *rb)
{
 8104382:	b580      	push	{r7, lr}
 8104384:	b082      	sub	sp, #8
 8104386:	af00      	add	r7, sp, #0
 8104388:	6078      	str	r0, [r7, #4]
	switch ( ringbuffer_status(rb)) {
 810438a:	6878      	ldr	r0, [r7, #4]
 810438c:	f7ff ffd2 	bl	8104334 <_Z17ringbuffer_statusP10ringbuffer>
 8104390:	4603      	mov	r3, r0
 8104392:	2b00      	cmp	r3, #0
 8104394:	d002      	beq.n	810439c <_Z19ringbuffer_data_lenP10ringbuffer+0x1a>
 8104396:	2b01      	cmp	r3, #1
 8104398:	d002      	beq.n	81043a0 <_Z19ringbuffer_data_lenP10ringbuffer+0x1e>
 810439a:	e006      	b.n	81043aa <_Z19ringbuffer_data_lenP10ringbuffer+0x28>
	case RT_RINGBUFFER_EMPTY:
		return 0;
 810439c:	2300      	movs	r3, #0
 810439e:	e031      	b.n	8104404 <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
	case RT_RINGBUFFER_FULL:
		return rb->buffer_size;
 81043a0:	687b      	ldr	r3, [r7, #4]
 81043a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 81043a6:	b29b      	uxth	r3, r3
 81043a8:	e02c      	b.n	8104404 <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
	case RT_RINGBUFFER_HALFFULL:
	default:
		if (rb->write_index > rb->read_index)
 81043aa:	687b      	ldr	r3, [r7, #4]
 81043ac:	88db      	ldrh	r3, [r3, #6]
 81043ae:	f3c3 034e 	ubfx	r3, r3, #1, #15
 81043b2:	b29a      	uxth	r2, r3
 81043b4:	687b      	ldr	r3, [r7, #4]
 81043b6:	889b      	ldrh	r3, [r3, #4]
 81043b8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 81043bc:	b29b      	uxth	r3, r3
 81043be:	429a      	cmp	r2, r3
 81043c0:	d90d      	bls.n	81043de <_Z19ringbuffer_data_lenP10ringbuffer+0x5c>
			return rb->write_index - rb->read_index;
 81043c2:	687b      	ldr	r3, [r7, #4]
 81043c4:	88db      	ldrh	r3, [r3, #6]
 81043c6:	f3c3 034e 	ubfx	r3, r3, #1, #15
 81043ca:	b29b      	uxth	r3, r3
 81043cc:	461a      	mov	r2, r3
 81043ce:	687b      	ldr	r3, [r7, #4]
 81043d0:	889b      	ldrh	r3, [r3, #4]
 81043d2:	f3c3 034e 	ubfx	r3, r3, #1, #15
 81043d6:	b29b      	uxth	r3, r3
 81043d8:	1ad3      	subs	r3, r2, r3
 81043da:	b29b      	uxth	r3, r3
 81043dc:	e012      	b.n	8104404 <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
		else
			return rb->buffer_size - (rb->read_index - rb->write_index);
 81043de:	687b      	ldr	r3, [r7, #4]
 81043e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 81043e4:	b29a      	uxth	r2, r3
 81043e6:	687b      	ldr	r3, [r7, #4]
 81043e8:	88db      	ldrh	r3, [r3, #6]
 81043ea:	f3c3 034e 	ubfx	r3, r3, #1, #15
 81043ee:	b29b      	uxth	r3, r3
 81043f0:	4619      	mov	r1, r3
 81043f2:	687b      	ldr	r3, [r7, #4]
 81043f4:	889b      	ldrh	r3, [r3, #4]
 81043f6:	f3c3 034e 	ubfx	r3, r3, #1, #15
 81043fa:	b29b      	uxth	r3, r3
 81043fc:	1acb      	subs	r3, r1, r3
 81043fe:	b29b      	uxth	r3, r3
 8104400:	4413      	add	r3, r2
 8104402:	b29b      	uxth	r3, r3
	};
}
 8104404:	4618      	mov	r0, r3
 8104406:	3708      	adds	r7, #8
 8104408:	46bd      	mov	sp, r7
 810440a:	bd80      	pop	{r7, pc}

0810440c <_Z18ringbuffer_putcharP10ringbufferh>:

/**
 * put a character into ring buffer
 */
uint32_t  ringbuffer_putchar(struct  ringbuffer *rb, const uint8_t ch)
{
 810440c:	b590      	push	{r4, r7, lr}
 810440e:	b083      	sub	sp, #12
 8104410:	af00      	add	r7, sp, #0
 8104412:	6078      	str	r0, [r7, #4]
 8104414:	460b      	mov	r3, r1
 8104416:	70fb      	strb	r3, [r7, #3]
    ASSERT(rb != NULL);

    /* whether has enough space */
	if (! ringbuffer_empty_space(rb))
 8104418:	687b      	ldr	r3, [r7, #4]
 810441a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 810441e:	461c      	mov	r4, r3
 8104420:	6878      	ldr	r0, [r7, #4]
 8104422:	f7ff ffae 	bl	8104382 <_Z19ringbuffer_data_lenP10ringbuffer>
 8104426:	4603      	mov	r3, r0
 8104428:	429c      	cmp	r4, r3
 810442a:	bf0c      	ite	eq
 810442c:	2301      	moveq	r3, #1
 810442e:	2300      	movne	r3, #0
 8104430:	b2db      	uxtb	r3, r3
 8104432:	2b00      	cmp	r3, #0
 8104434:	d001      	beq.n	810443a <_Z18ringbuffer_putcharP10ringbufferh+0x2e>
		return 0;
 8104436:	2300      	movs	r3, #0
 8104438:	e039      	b.n	81044ae <_Z18ringbuffer_putcharP10ringbufferh+0xa2>

	rb->buffer_ptr[rb->write_index] = ch;
 810443a:	687b      	ldr	r3, [r7, #4]
 810443c:	681b      	ldr	r3, [r3, #0]
 810443e:	687a      	ldr	r2, [r7, #4]
 8104440:	88d2      	ldrh	r2, [r2, #6]
 8104442:	f3c2 024e 	ubfx	r2, r2, #1, #15
 8104446:	b292      	uxth	r2, r2
 8104448:	4413      	add	r3, r2
 810444a:	78fa      	ldrb	r2, [r7, #3]
 810444c:	701a      	strb	r2, [r3, #0]

	/* flip mirror */
	if (rb->write_index == rb->buffer_size - 1) {
 810444e:	687b      	ldr	r3, [r7, #4]
 8104450:	88db      	ldrh	r3, [r3, #6]
 8104452:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8104456:	b29b      	uxth	r3, r3
 8104458:	461a      	mov	r2, r3
 810445a:	687b      	ldr	r3, [r7, #4]
 810445c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8104460:	3b01      	subs	r3, #1
 8104462:	429a      	cmp	r2, r3
 8104464:	d114      	bne.n	8104490 <_Z18ringbuffer_putcharP10ringbufferh+0x84>
		rb->write_mirror = ~rb->write_mirror;
 8104466:	687b      	ldr	r3, [r7, #4]
 8104468:	799b      	ldrb	r3, [r3, #6]
 810446a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 810446e:	b2db      	uxtb	r3, r3
 8104470:	43db      	mvns	r3, r3
 8104472:	b2db      	uxtb	r3, r3
 8104474:	f003 0301 	and.w	r3, r3, #1
 8104478:	b2d9      	uxtb	r1, r3
 810447a:	687a      	ldr	r2, [r7, #4]
 810447c:	7993      	ldrb	r3, [r2, #6]
 810447e:	f361 0300 	bfi	r3, r1, #0, #1
 8104482:	7193      	strb	r3, [r2, #6]
		rb->write_index = 0;
 8104484:	687a      	ldr	r2, [r7, #4]
 8104486:	88d3      	ldrh	r3, [r2, #6]
 8104488:	f36f 034f 	bfc	r3, #1, #15
 810448c:	80d3      	strh	r3, [r2, #6]
 810448e:	e00d      	b.n	81044ac <_Z18ringbuffer_putcharP10ringbufferh+0xa0>
	} else {
		rb->write_index++;
 8104490:	687b      	ldr	r3, [r7, #4]
 8104492:	88db      	ldrh	r3, [r3, #6]
 8104494:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8104498:	b29b      	uxth	r3, r3
 810449a:	3301      	adds	r3, #1
 810449c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 81044a0:	b299      	uxth	r1, r3
 81044a2:	687a      	ldr	r2, [r7, #4]
 81044a4:	88d3      	ldrh	r3, [r2, #6]
 81044a6:	f361 034f 	bfi	r3, r1, #1, #15
 81044aa:	80d3      	strh	r3, [r2, #6]
	}

	return 1;
 81044ac:	2301      	movs	r3, #1
}
 81044ae:	4618      	mov	r0, r3
 81044b0:	370c      	adds	r7, #12
 81044b2:	46bd      	mov	sp, r7
 81044b4:	bd90      	pop	{r4, r7, pc}

081044b6 <_Z18ringbuffer_getcharP10ringbufferPh>:

/**
 * get a character from a ringbuffer
 */
uint32_t  ringbuffer_getchar(struct  ringbuffer *rb, uint8_t *ch)
{
 81044b6:	b580      	push	{r7, lr}
 81044b8:	b082      	sub	sp, #8
 81044ba:	af00      	add	r7, sp, #0
 81044bc:	6078      	str	r0, [r7, #4]
 81044be:	6039      	str	r1, [r7, #0]
    ASSERT(rb != NULL);

    /* ringbuffer is empty */
    if (! ringbuffer_data_len(rb))
 81044c0:	6878      	ldr	r0, [r7, #4]
 81044c2:	f7ff ff5e 	bl	8104382 <_Z19ringbuffer_data_lenP10ringbuffer>
 81044c6:	4603      	mov	r3, r0
 81044c8:	2b00      	cmp	r3, #0
 81044ca:	bf0c      	ite	eq
 81044cc:	2301      	moveq	r3, #1
 81044ce:	2300      	movne	r3, #0
 81044d0:	b2db      	uxtb	r3, r3
 81044d2:	2b00      	cmp	r3, #0
 81044d4:	d001      	beq.n	81044da <_Z18ringbuffer_getcharP10ringbufferPh+0x24>
        return 0;
 81044d6:	2300      	movs	r3, #0
 81044d8:	e03a      	b.n	8104550 <_Z18ringbuffer_getcharP10ringbufferPh+0x9a>

    /* put character */
    *ch = rb->buffer_ptr[rb->read_index];
 81044da:	687b      	ldr	r3, [r7, #4]
 81044dc:	681b      	ldr	r3, [r3, #0]
 81044de:	687a      	ldr	r2, [r7, #4]
 81044e0:	8892      	ldrh	r2, [r2, #4]
 81044e2:	f3c2 024e 	ubfx	r2, r2, #1, #15
 81044e6:	b292      	uxth	r2, r2
 81044e8:	4413      	add	r3, r2
 81044ea:	781a      	ldrb	r2, [r3, #0]
 81044ec:	683b      	ldr	r3, [r7, #0]
 81044ee:	701a      	strb	r2, [r3, #0]

    if (rb->read_index == rb->buffer_size-1)
 81044f0:	687b      	ldr	r3, [r7, #4]
 81044f2:	889b      	ldrh	r3, [r3, #4]
 81044f4:	f3c3 034e 	ubfx	r3, r3, #1, #15
 81044f8:	b29b      	uxth	r3, r3
 81044fa:	461a      	mov	r2, r3
 81044fc:	687b      	ldr	r3, [r7, #4]
 81044fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8104502:	3b01      	subs	r3, #1
 8104504:	429a      	cmp	r2, r3
 8104506:	d114      	bne.n	8104532 <_Z18ringbuffer_getcharP10ringbufferPh+0x7c>
    {
        rb->read_mirror = ~rb->read_mirror;
 8104508:	687b      	ldr	r3, [r7, #4]
 810450a:	791b      	ldrb	r3, [r3, #4]
 810450c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8104510:	b2db      	uxtb	r3, r3
 8104512:	43db      	mvns	r3, r3
 8104514:	b2db      	uxtb	r3, r3
 8104516:	f003 0301 	and.w	r3, r3, #1
 810451a:	b2d9      	uxtb	r1, r3
 810451c:	687a      	ldr	r2, [r7, #4]
 810451e:	7913      	ldrb	r3, [r2, #4]
 8104520:	f361 0300 	bfi	r3, r1, #0, #1
 8104524:	7113      	strb	r3, [r2, #4]
        rb->read_index = 0;
 8104526:	687a      	ldr	r2, [r7, #4]
 8104528:	8893      	ldrh	r3, [r2, #4]
 810452a:	f36f 034f 	bfc	r3, #1, #15
 810452e:	8093      	strh	r3, [r2, #4]
 8104530:	e00d      	b.n	810454e <_Z18ringbuffer_getcharP10ringbufferPh+0x98>
    }
    else
    {
        rb->read_index++;
 8104532:	687b      	ldr	r3, [r7, #4]
 8104534:	889b      	ldrh	r3, [r3, #4]
 8104536:	f3c3 034e 	ubfx	r3, r3, #1, #15
 810453a:	b29b      	uxth	r3, r3
 810453c:	3301      	adds	r3, #1
 810453e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8104542:	b299      	uxth	r1, r3
 8104544:	687a      	ldr	r2, [r7, #4]
 8104546:	8893      	ldrh	r3, [r2, #4]
 8104548:	f361 034f 	bfi	r3, r1, #1, #15
 810454c:	8093      	strh	r3, [r2, #4]
    }

    return 1;
 810454e:	2301      	movs	r3, #1
}
 8104550:	4618      	mov	r0, r3
 8104552:	3708      	adds	r7, #8
 8104554:	46bd      	mov	sp, r7
 8104556:	bd80      	pop	{r7, pc}

08104558 <_Z15ringbuffer_initP10ringbufferPhs>:
}

void  ringbuffer_init(struct  ringbuffer *rb,
                        uint8_t           *pool,
                        int16_t            size)
{
 8104558:	b480      	push	{r7}
 810455a:	b085      	sub	sp, #20
 810455c:	af00      	add	r7, sp, #0
 810455e:	60f8      	str	r0, [r7, #12]
 8104560:	60b9      	str	r1, [r7, #8]
 8104562:	4613      	mov	r3, r2
 8104564:	80fb      	strh	r3, [r7, #6]
    ASSERT(rb != NULL);
    ASSERT(size > 0);

    /* initialize read and write index */
    rb->read_mirror = rb->read_index = 0;
 8104566:	68fa      	ldr	r2, [r7, #12]
 8104568:	8893      	ldrh	r3, [r2, #4]
 810456a:	f36f 034f 	bfc	r3, #1, #15
 810456e:	8093      	strh	r3, [r2, #4]
 8104570:	68fb      	ldr	r3, [r7, #12]
 8104572:	889b      	ldrh	r3, [r3, #4]
 8104574:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8104578:	b29b      	uxth	r3, r3
 810457a:	f003 0301 	and.w	r3, r3, #1
 810457e:	b2d9      	uxtb	r1, r3
 8104580:	68fa      	ldr	r2, [r7, #12]
 8104582:	7913      	ldrb	r3, [r2, #4]
 8104584:	f361 0300 	bfi	r3, r1, #0, #1
 8104588:	7113      	strb	r3, [r2, #4]
    rb->write_mirror = rb->write_index = 0;
 810458a:	68fa      	ldr	r2, [r7, #12]
 810458c:	88d3      	ldrh	r3, [r2, #6]
 810458e:	f36f 034f 	bfc	r3, #1, #15
 8104592:	80d3      	strh	r3, [r2, #6]
 8104594:	68fb      	ldr	r3, [r7, #12]
 8104596:	88db      	ldrh	r3, [r3, #6]
 8104598:	f3c3 034e 	ubfx	r3, r3, #1, #15
 810459c:	b29b      	uxth	r3, r3
 810459e:	f003 0301 	and.w	r3, r3, #1
 81045a2:	b2d9      	uxtb	r1, r3
 81045a4:	68fa      	ldr	r2, [r7, #12]
 81045a6:	7993      	ldrb	r3, [r2, #6]
 81045a8:	f361 0300 	bfi	r3, r1, #0, #1
 81045ac:	7193      	strb	r3, [r2, #6]

    /* set buffer pool and size */
    rb->buffer_ptr = pool;
 81045ae:	68fb      	ldr	r3, [r7, #12]
 81045b0:	68ba      	ldr	r2, [r7, #8]
 81045b2:	601a      	str	r2, [r3, #0]
    rb->buffer_size = size; //ALIGN_DOWN(size, ALIGN_SIZE);
 81045b4:	68fb      	ldr	r3, [r7, #12]
 81045b6:	88fa      	ldrh	r2, [r7, #6]
 81045b8:	811a      	strh	r2, [r3, #8]
}
 81045ba:	bf00      	nop
 81045bc:	3714      	adds	r7, #20
 81045be:	46bd      	mov	sp, r7
 81045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045c4:	4770      	bx	lr
	...

081045c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81045c8:	b480      	push	{r7}
 81045ca:	b083      	sub	sp, #12
 81045cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81045ce:	4b0a      	ldr	r3, [pc, #40]	; (81045f8 <HAL_MspInit+0x30>)
 81045d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81045d4:	4a08      	ldr	r2, [pc, #32]	; (81045f8 <HAL_MspInit+0x30>)
 81045d6:	f043 0302 	orr.w	r3, r3, #2
 81045da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81045de:	4b06      	ldr	r3, [pc, #24]	; (81045f8 <HAL_MspInit+0x30>)
 81045e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81045e4:	f003 0302 	and.w	r3, r3, #2
 81045e8:	607b      	str	r3, [r7, #4]
 81045ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81045ec:	bf00      	nop
 81045ee:	370c      	adds	r7, #12
 81045f0:	46bd      	mov	sp, r7
 81045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045f6:	4770      	bx	lr
 81045f8:	58024400 	.word	0x58024400

081045fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 81045fc:	b580      	push	{r7, lr}
 81045fe:	b084      	sub	sp, #16
 8104600:	af00      	add	r7, sp, #0
 8104602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8104604:	687b      	ldr	r3, [r7, #4]
 8104606:	681b      	ldr	r3, [r3, #0]
 8104608:	4a0e      	ldr	r2, [pc, #56]	; (8104644 <HAL_TIM_Base_MspInit+0x48>)
 810460a:	4293      	cmp	r3, r2
 810460c:	d116      	bne.n	810463c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 810460e:	4b0e      	ldr	r3, [pc, #56]	; (8104648 <HAL_TIM_Base_MspInit+0x4c>)
 8104610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8104614:	4a0c      	ldr	r2, [pc, #48]	; (8104648 <HAL_TIM_Base_MspInit+0x4c>)
 8104616:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810461a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810461e:	4b0a      	ldr	r3, [pc, #40]	; (8104648 <HAL_TIM_Base_MspInit+0x4c>)
 8104620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8104624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104628:	60fb      	str	r3, [r7, #12]
 810462a:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 810462c:	2200      	movs	r2, #0
 810462e:	2100      	movs	r1, #0
 8104630:	2076      	movs	r0, #118	; 0x76
 8104632:	f000 fb48 	bl	8104cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8104636:	2076      	movs	r0, #118	; 0x76
 8104638:	f000 fb5f 	bl	8104cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 810463c:	bf00      	nop
 810463e:	3710      	adds	r7, #16
 8104640:	46bd      	mov	sp, r7
 8104642:	bd80      	pop	{r7, pc}
 8104644:	40014800 	.word	0x40014800
 8104648:	58024400 	.word	0x58024400

0810464c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 810464c:	b580      	push	{r7, lr}
 810464e:	b0ba      	sub	sp, #232	; 0xe8
 8104650:	af00      	add	r7, sp, #0
 8104652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8104654:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8104658:	2200      	movs	r2, #0
 810465a:	601a      	str	r2, [r3, #0]
 810465c:	605a      	str	r2, [r3, #4]
 810465e:	609a      	str	r2, [r3, #8]
 8104660:	60da      	str	r2, [r3, #12]
 8104662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8104664:	f107 0310 	add.w	r3, r7, #16
 8104668:	22c0      	movs	r2, #192	; 0xc0
 810466a:	2100      	movs	r1, #0
 810466c:	4618      	mov	r0, r3
 810466e:	f007 f8eb 	bl	810b848 <memset>
  if(huart->Instance==USART3)
 8104672:	687b      	ldr	r3, [r7, #4]
 8104674:	681b      	ldr	r3, [r3, #0]
 8104676:	4a5a      	ldr	r2, [pc, #360]	; (81047e0 <HAL_UART_MspInit+0x194>)
 8104678:	4293      	cmp	r3, r2
 810467a:	f040 80ac 	bne.w	81047d6 <HAL_UART_MspInit+0x18a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 810467e:	f04f 0202 	mov.w	r2, #2
 8104682:	f04f 0300 	mov.w	r3, #0
 8104686:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 810468a:	2300      	movs	r3, #0
 810468c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8104690:	f107 0310 	add.w	r3, r7, #16
 8104694:	4618      	mov	r0, r3
 8104696:	f003 f9bf 	bl	8107a18 <HAL_RCCEx_PeriphCLKConfig>
 810469a:	4603      	mov	r3, r0
 810469c:	2b00      	cmp	r3, #0
 810469e:	d001      	beq.n	81046a4 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 81046a0:	f7ff fca8 	bl	8103ff4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 81046a4:	4b4f      	ldr	r3, [pc, #316]	; (81047e4 <HAL_UART_MspInit+0x198>)
 81046a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81046aa:	4a4e      	ldr	r2, [pc, #312]	; (81047e4 <HAL_UART_MspInit+0x198>)
 81046ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81046b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81046b4:	4b4b      	ldr	r3, [pc, #300]	; (81047e4 <HAL_UART_MspInit+0x198>)
 81046b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81046ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81046be:	60fb      	str	r3, [r7, #12]
 81046c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81046c2:	4b48      	ldr	r3, [pc, #288]	; (81047e4 <HAL_UART_MspInit+0x198>)
 81046c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81046c8:	4a46      	ldr	r2, [pc, #280]	; (81047e4 <HAL_UART_MspInit+0x198>)
 81046ca:	f043 0308 	orr.w	r3, r3, #8
 81046ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81046d2:	4b44      	ldr	r3, [pc, #272]	; (81047e4 <HAL_UART_MspInit+0x198>)
 81046d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81046d8:	f003 0308 	and.w	r3, r3, #8
 81046dc:	60bb      	str	r3, [r7, #8]
 81046de:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 81046e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 81046e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81046e8:	2302      	movs	r3, #2
 81046ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81046ee:	2300      	movs	r3, #0
 81046f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81046f4:	2300      	movs	r3, #0
 81046f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81046fa:	2307      	movs	r3, #7
 81046fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8104700:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8104704:	4619      	mov	r1, r3
 8104706:	4838      	ldr	r0, [pc, #224]	; (81047e8 <HAL_UART_MspInit+0x19c>)
 8104708:	f002 fd4a 	bl	81071a0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 810470c:	4b37      	ldr	r3, [pc, #220]	; (81047ec <HAL_UART_MspInit+0x1a0>)
 810470e:	4a38      	ldr	r2, [pc, #224]	; (81047f0 <HAL_UART_MspInit+0x1a4>)
 8104710:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8104712:	4b36      	ldr	r3, [pc, #216]	; (81047ec <HAL_UART_MspInit+0x1a0>)
 8104714:	222d      	movs	r2, #45	; 0x2d
 8104716:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8104718:	4b34      	ldr	r3, [pc, #208]	; (81047ec <HAL_UART_MspInit+0x1a0>)
 810471a:	2200      	movs	r2, #0
 810471c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 810471e:	4b33      	ldr	r3, [pc, #204]	; (81047ec <HAL_UART_MspInit+0x1a0>)
 8104720:	2200      	movs	r2, #0
 8104722:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8104724:	4b31      	ldr	r3, [pc, #196]	; (81047ec <HAL_UART_MspInit+0x1a0>)
 8104726:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810472a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810472c:	4b2f      	ldr	r3, [pc, #188]	; (81047ec <HAL_UART_MspInit+0x1a0>)
 810472e:	2200      	movs	r2, #0
 8104730:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8104732:	4b2e      	ldr	r3, [pc, #184]	; (81047ec <HAL_UART_MspInit+0x1a0>)
 8104734:	2200      	movs	r2, #0
 8104736:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8104738:	4b2c      	ldr	r3, [pc, #176]	; (81047ec <HAL_UART_MspInit+0x1a0>)
 810473a:	2200      	movs	r2, #0
 810473c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 810473e:	4b2b      	ldr	r3, [pc, #172]	; (81047ec <HAL_UART_MspInit+0x1a0>)
 8104740:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8104744:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8104746:	4b29      	ldr	r3, [pc, #164]	; (81047ec <HAL_UART_MspInit+0x1a0>)
 8104748:	2200      	movs	r2, #0
 810474a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 810474c:	4827      	ldr	r0, [pc, #156]	; (81047ec <HAL_UART_MspInit+0x1a0>)
 810474e:	f000 fb03 	bl	8104d58 <HAL_DMA_Init>
 8104752:	4603      	mov	r3, r0
 8104754:	2b00      	cmp	r3, #0
 8104756:	d001      	beq.n	810475c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8104758:	f7ff fc4c 	bl	8103ff4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 810475c:	687b      	ldr	r3, [r7, #4]
 810475e:	4a23      	ldr	r2, [pc, #140]	; (81047ec <HAL_UART_MspInit+0x1a0>)
 8104760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8104764:	4a21      	ldr	r2, [pc, #132]	; (81047ec <HAL_UART_MspInit+0x1a0>)
 8104766:	687b      	ldr	r3, [r7, #4]
 8104768:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 810476a:	4b22      	ldr	r3, [pc, #136]	; (81047f4 <HAL_UART_MspInit+0x1a8>)
 810476c:	4a22      	ldr	r2, [pc, #136]	; (81047f8 <HAL_UART_MspInit+0x1ac>)
 810476e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8104770:	4b20      	ldr	r3, [pc, #128]	; (81047f4 <HAL_UART_MspInit+0x1a8>)
 8104772:	222e      	movs	r2, #46	; 0x2e
 8104774:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8104776:	4b1f      	ldr	r3, [pc, #124]	; (81047f4 <HAL_UART_MspInit+0x1a8>)
 8104778:	2240      	movs	r2, #64	; 0x40
 810477a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 810477c:	4b1d      	ldr	r3, [pc, #116]	; (81047f4 <HAL_UART_MspInit+0x1a8>)
 810477e:	2200      	movs	r2, #0
 8104780:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8104782:	4b1c      	ldr	r3, [pc, #112]	; (81047f4 <HAL_UART_MspInit+0x1a8>)
 8104784:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8104788:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810478a:	4b1a      	ldr	r3, [pc, #104]	; (81047f4 <HAL_UART_MspInit+0x1a8>)
 810478c:	2200      	movs	r2, #0
 810478e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8104790:	4b18      	ldr	r3, [pc, #96]	; (81047f4 <HAL_UART_MspInit+0x1a8>)
 8104792:	2200      	movs	r2, #0
 8104794:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8104796:	4b17      	ldr	r3, [pc, #92]	; (81047f4 <HAL_UART_MspInit+0x1a8>)
 8104798:	2200      	movs	r2, #0
 810479a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 810479c:	4b15      	ldr	r3, [pc, #84]	; (81047f4 <HAL_UART_MspInit+0x1a8>)
 810479e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 81047a2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81047a4:	4b13      	ldr	r3, [pc, #76]	; (81047f4 <HAL_UART_MspInit+0x1a8>)
 81047a6:	2200      	movs	r2, #0
 81047a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 81047aa:	4812      	ldr	r0, [pc, #72]	; (81047f4 <HAL_UART_MspInit+0x1a8>)
 81047ac:	f000 fad4 	bl	8104d58 <HAL_DMA_Init>
 81047b0:	4603      	mov	r3, r0
 81047b2:	2b00      	cmp	r3, #0
 81047b4:	d001      	beq.n	81047ba <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 81047b6:	f7ff fc1d 	bl	8103ff4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 81047ba:	687b      	ldr	r3, [r7, #4]
 81047bc:	4a0d      	ldr	r2, [pc, #52]	; (81047f4 <HAL_UART_MspInit+0x1a8>)
 81047be:	67da      	str	r2, [r3, #124]	; 0x7c
 81047c0:	4a0c      	ldr	r2, [pc, #48]	; (81047f4 <HAL_UART_MspInit+0x1a8>)
 81047c2:	687b      	ldr	r3, [r7, #4]
 81047c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 81047c6:	2200      	movs	r2, #0
 81047c8:	2100      	movs	r1, #0
 81047ca:	2027      	movs	r0, #39	; 0x27
 81047cc:	f000 fa7b 	bl	8104cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 81047d0:	2027      	movs	r0, #39	; 0x27
 81047d2:	f000 fa92 	bl	8104cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 81047d6:	bf00      	nop
 81047d8:	37e8      	adds	r7, #232	; 0xe8
 81047da:	46bd      	mov	sp, r7
 81047dc:	bd80      	pop	{r7, pc}
 81047de:	bf00      	nop
 81047e0:	40004800 	.word	0x40004800
 81047e4:	58024400 	.word	0x58024400
 81047e8:	58020c00 	.word	0x58020c00
 81047ec:	1000294c 	.word	0x1000294c
 81047f0:	40020010 	.word	0x40020010
 81047f4:	100029c4 	.word	0x100029c4
 81047f8:	40020028 	.word	0x40020028

081047fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81047fc:	b480      	push	{r7}
 81047fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8104800:	e7fe      	b.n	8104800 <NMI_Handler+0x4>

08104802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8104802:	b480      	push	{r7}
 8104804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8104806:	e7fe      	b.n	8104806 <HardFault_Handler+0x4>

08104808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8104808:	b480      	push	{r7}
 810480a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810480c:	e7fe      	b.n	810480c <MemManage_Handler+0x4>

0810480e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810480e:	b480      	push	{r7}
 8104810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8104812:	e7fe      	b.n	8104812 <BusFault_Handler+0x4>

08104814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8104814:	b480      	push	{r7}
 8104816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8104818:	e7fe      	b.n	8104818 <UsageFault_Handler+0x4>

0810481a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810481a:	b480      	push	{r7}
 810481c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810481e:	bf00      	nop
 8104820:	46bd      	mov	sp, r7
 8104822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104826:	4770      	bx	lr

08104828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8104828:	b480      	push	{r7}
 810482a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810482c:	bf00      	nop
 810482e:	46bd      	mov	sp, r7
 8104830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104834:	4770      	bx	lr

08104836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8104836:	b480      	push	{r7}
 8104838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810483a:	bf00      	nop
 810483c:	46bd      	mov	sp, r7
 810483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104842:	4770      	bx	lr

08104844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8104844:	b580      	push	{r7, lr}
 8104846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8104848:	f000 f942 	bl	8104ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810484c:	bf00      	nop
 810484e:	bd80      	pop	{r7, pc}

08104850 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8104850:	b580      	push	{r7, lr}
 8104852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8104854:	4802      	ldr	r0, [pc, #8]	; (8104860 <DMA1_Stream0_IRQHandler+0x10>)
 8104856:	f001 fb3d 	bl	8105ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 810485a:	bf00      	nop
 810485c:	bd80      	pop	{r7, pc}
 810485e:	bf00      	nop
 8104860:	1000294c 	.word	0x1000294c

08104864 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8104864:	b580      	push	{r7, lr}
 8104866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8104868:	4802      	ldr	r0, [pc, #8]	; (8104874 <DMA1_Stream1_IRQHandler+0x10>)
 810486a:	f001 fb33 	bl	8105ed4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 810486e:	bf00      	nop
 8104870:	bd80      	pop	{r7, pc}
 8104872:	bf00      	nop
 8104874:	100029c4 	.word	0x100029c4

08104878 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8104878:	b580      	push	{r7, lr}
 810487a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	USART_RX_Callback();
 810487c:	f7fe fa28 	bl	8102cd0 <USART_RX_Callback>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8104880:	4802      	ldr	r0, [pc, #8]	; (810488c <USART3_IRQHandler+0x14>)
 8104882:	f005 faa3 	bl	8109dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8104886:	bf00      	nop
 8104888:	bd80      	pop	{r7, pc}
 810488a:	bf00      	nop
 810488c:	100028b8 	.word	0x100028b8

08104890 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8104890:	b580      	push	{r7, lr}
 8104892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8104894:	4802      	ldr	r0, [pc, #8]	; (81048a0 <TIM17_IRQHandler+0x10>)
 8104896:	f004 ffbb 	bl	8109810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 810489a:	bf00      	nop
 810489c:	bd80      	pop	{r7, pc}
 810489e:	bf00      	nop
 81048a0:	1000286c 	.word	0x1000286c

081048a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81048a4:	b480      	push	{r7}
 81048a6:	af00      	add	r7, sp, #0
	return 1;
 81048a8:	2301      	movs	r3, #1
}
 81048aa:	4618      	mov	r0, r3
 81048ac:	46bd      	mov	sp, r7
 81048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048b2:	4770      	bx	lr

081048b4 <_kill>:

int _kill(int pid, int sig)
{
 81048b4:	b580      	push	{r7, lr}
 81048b6:	b082      	sub	sp, #8
 81048b8:	af00      	add	r7, sp, #0
 81048ba:	6078      	str	r0, [r7, #4]
 81048bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 81048be:	f006 ff8b 	bl	810b7d8 <__errno>
 81048c2:	4603      	mov	r3, r0
 81048c4:	2216      	movs	r2, #22
 81048c6:	601a      	str	r2, [r3, #0]
	return -1;
 81048c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 81048cc:	4618      	mov	r0, r3
 81048ce:	3708      	adds	r7, #8
 81048d0:	46bd      	mov	sp, r7
 81048d2:	bd80      	pop	{r7, pc}

081048d4 <_exit>:

void _exit (int status)
{
 81048d4:	b580      	push	{r7, lr}
 81048d6:	b082      	sub	sp, #8
 81048d8:	af00      	add	r7, sp, #0
 81048da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 81048dc:	f04f 31ff 	mov.w	r1, #4294967295
 81048e0:	6878      	ldr	r0, [r7, #4]
 81048e2:	f7ff ffe7 	bl	81048b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 81048e6:	e7fe      	b.n	81048e6 <_exit+0x12>

081048e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81048e8:	b580      	push	{r7, lr}
 81048ea:	b086      	sub	sp, #24
 81048ec:	af00      	add	r7, sp, #0
 81048ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81048f0:	4a14      	ldr	r2, [pc, #80]	; (8104944 <_sbrk+0x5c>)
 81048f2:	4b15      	ldr	r3, [pc, #84]	; (8104948 <_sbrk+0x60>)
 81048f4:	1ad3      	subs	r3, r2, r3
 81048f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81048f8:	697b      	ldr	r3, [r7, #20]
 81048fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81048fc:	4b13      	ldr	r3, [pc, #76]	; (810494c <_sbrk+0x64>)
 81048fe:	681b      	ldr	r3, [r3, #0]
 8104900:	2b00      	cmp	r3, #0
 8104902:	d102      	bne.n	810490a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8104904:	4b11      	ldr	r3, [pc, #68]	; (810494c <_sbrk+0x64>)
 8104906:	4a12      	ldr	r2, [pc, #72]	; (8104950 <_sbrk+0x68>)
 8104908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810490a:	4b10      	ldr	r3, [pc, #64]	; (810494c <_sbrk+0x64>)
 810490c:	681a      	ldr	r2, [r3, #0]
 810490e:	687b      	ldr	r3, [r7, #4]
 8104910:	4413      	add	r3, r2
 8104912:	693a      	ldr	r2, [r7, #16]
 8104914:	429a      	cmp	r2, r3
 8104916:	d207      	bcs.n	8104928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8104918:	f006 ff5e 	bl	810b7d8 <__errno>
 810491c:	4603      	mov	r3, r0
 810491e:	220c      	movs	r2, #12
 8104920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8104922:	f04f 33ff 	mov.w	r3, #4294967295
 8104926:	e009      	b.n	810493c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8104928:	4b08      	ldr	r3, [pc, #32]	; (810494c <_sbrk+0x64>)
 810492a:	681b      	ldr	r3, [r3, #0]
 810492c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810492e:	4b07      	ldr	r3, [pc, #28]	; (810494c <_sbrk+0x64>)
 8104930:	681a      	ldr	r2, [r3, #0]
 8104932:	687b      	ldr	r3, [r7, #4]
 8104934:	4413      	add	r3, r2
 8104936:	4a05      	ldr	r2, [pc, #20]	; (810494c <_sbrk+0x64>)
 8104938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810493a:	68fb      	ldr	r3, [r7, #12]
}
 810493c:	4618      	mov	r0, r3
 810493e:	3718      	adds	r7, #24
 8104940:	46bd      	mov	sp, r7
 8104942:	bd80      	pop	{r7, pc}
 8104944:	10048000 	.word	0x10048000
 8104948:	00000400 	.word	0x00000400
 810494c:	10002aa4 	.word	0x10002aa4
 8104950:	10002ac0 	.word	0x10002ac0

08104954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8104954:	f8df d034 	ldr.w	sp, [pc, #52]	; 810498c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8104958:	f7fb fe48 	bl	81005ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810495c:	480c      	ldr	r0, [pc, #48]	; (8104990 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810495e:	490d      	ldr	r1, [pc, #52]	; (8104994 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8104960:	4a0d      	ldr	r2, [pc, #52]	; (8104998 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8104962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8104964:	e002      	b.n	810496c <LoopCopyDataInit>

08104966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8104966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8104968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810496a:	3304      	adds	r3, #4

0810496c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810496c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810496e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8104970:	d3f9      	bcc.n	8104966 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8104972:	4a0a      	ldr	r2, [pc, #40]	; (810499c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8104974:	4c0a      	ldr	r4, [pc, #40]	; (81049a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8104976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8104978:	e001      	b.n	810497e <LoopFillZerobss>

0810497a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810497a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810497c:	3204      	adds	r2, #4

0810497e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810497e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8104980:	d3fb      	bcc.n	810497a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8104982:	f006 ff2f 	bl	810b7e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8104986:	f7ff f9e7 	bl	8103d58 <main>
  bx  lr
 810498a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810498c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8104990:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8104994:	10000084 	.word	0x10000084
  ldr r2, =_sidata
 8104998:	0810c268 	.word	0x0810c268
  ldr r2, =_sbss
 810499c:	10000084 	.word	0x10000084
  ldr r4, =_ebss
 81049a0:	10002abc 	.word	0x10002abc

081049a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81049a4:	e7fe      	b.n	81049a4 <ADC3_IRQHandler>
	...

081049a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81049a8:	b580      	push	{r7, lr}
 81049aa:	b082      	sub	sp, #8
 81049ac:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81049ae:	4b28      	ldr	r3, [pc, #160]	; (8104a50 <HAL_Init+0xa8>)
 81049b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81049b4:	4a26      	ldr	r2, [pc, #152]	; (8104a50 <HAL_Init+0xa8>)
 81049b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81049ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81049be:	4b24      	ldr	r3, [pc, #144]	; (8104a50 <HAL_Init+0xa8>)
 81049c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81049c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81049c8:	603b      	str	r3, [r7, #0]
 81049ca:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81049cc:	4b21      	ldr	r3, [pc, #132]	; (8104a54 <HAL_Init+0xac>)
 81049ce:	681b      	ldr	r3, [r3, #0]
 81049d0:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81049d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81049d8:	4a1e      	ldr	r2, [pc, #120]	; (8104a54 <HAL_Init+0xac>)
 81049da:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81049de:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81049e0:	4b1c      	ldr	r3, [pc, #112]	; (8104a54 <HAL_Init+0xac>)
 81049e2:	681b      	ldr	r3, [r3, #0]
 81049e4:	4a1b      	ldr	r2, [pc, #108]	; (8104a54 <HAL_Init+0xac>)
 81049e6:	f043 0301 	orr.w	r3, r3, #1
 81049ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81049ec:	2003      	movs	r0, #3
 81049ee:	f000 f95f 	bl	8104cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81049f2:	f002 fe39 	bl	8107668 <HAL_RCC_GetSysClockFreq>
 81049f6:	4602      	mov	r2, r0
 81049f8:	4b15      	ldr	r3, [pc, #84]	; (8104a50 <HAL_Init+0xa8>)
 81049fa:	699b      	ldr	r3, [r3, #24]
 81049fc:	0a1b      	lsrs	r3, r3, #8
 81049fe:	f003 030f 	and.w	r3, r3, #15
 8104a02:	4915      	ldr	r1, [pc, #84]	; (8104a58 <HAL_Init+0xb0>)
 8104a04:	5ccb      	ldrb	r3, [r1, r3]
 8104a06:	f003 031f 	and.w	r3, r3, #31
 8104a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8104a0e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104a10:	4b0f      	ldr	r3, [pc, #60]	; (8104a50 <HAL_Init+0xa8>)
 8104a12:	699b      	ldr	r3, [r3, #24]
 8104a14:	f003 030f 	and.w	r3, r3, #15
 8104a18:	4a0f      	ldr	r2, [pc, #60]	; (8104a58 <HAL_Init+0xb0>)
 8104a1a:	5cd3      	ldrb	r3, [r2, r3]
 8104a1c:	f003 031f 	and.w	r3, r3, #31
 8104a20:	687a      	ldr	r2, [r7, #4]
 8104a22:	fa22 f303 	lsr.w	r3, r2, r3
 8104a26:	4a0d      	ldr	r2, [pc, #52]	; (8104a5c <HAL_Init+0xb4>)
 8104a28:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104a2a:	4b0c      	ldr	r3, [pc, #48]	; (8104a5c <HAL_Init+0xb4>)
 8104a2c:	681b      	ldr	r3, [r3, #0]
 8104a2e:	4a0c      	ldr	r2, [pc, #48]	; (8104a60 <HAL_Init+0xb8>)
 8104a30:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8104a32:	200f      	movs	r0, #15
 8104a34:	f000 f816 	bl	8104a64 <HAL_InitTick>
 8104a38:	4603      	mov	r3, r0
 8104a3a:	2b00      	cmp	r3, #0
 8104a3c:	d001      	beq.n	8104a42 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8104a3e:	2301      	movs	r3, #1
 8104a40:	e002      	b.n	8104a48 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8104a42:	f7ff fdc1 	bl	81045c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8104a46:	2300      	movs	r3, #0
}
 8104a48:	4618      	mov	r0, r3
 8104a4a:	3708      	adds	r7, #8
 8104a4c:	46bd      	mov	sp, r7
 8104a4e:	bd80      	pop	{r7, pc}
 8104a50:	58024400 	.word	0x58024400
 8104a54:	40024400 	.word	0x40024400
 8104a58:	0810bff0 	.word	0x0810bff0
 8104a5c:	10000004 	.word	0x10000004
 8104a60:	10000000 	.word	0x10000000

08104a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8104a64:	b580      	push	{r7, lr}
 8104a66:	b082      	sub	sp, #8
 8104a68:	af00      	add	r7, sp, #0
 8104a6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8104a6c:	4b15      	ldr	r3, [pc, #84]	; (8104ac4 <HAL_InitTick+0x60>)
 8104a6e:	781b      	ldrb	r3, [r3, #0]
 8104a70:	2b00      	cmp	r3, #0
 8104a72:	d101      	bne.n	8104a78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8104a74:	2301      	movs	r3, #1
 8104a76:	e021      	b.n	8104abc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8104a78:	4b13      	ldr	r3, [pc, #76]	; (8104ac8 <HAL_InitTick+0x64>)
 8104a7a:	681a      	ldr	r2, [r3, #0]
 8104a7c:	4b11      	ldr	r3, [pc, #68]	; (8104ac4 <HAL_InitTick+0x60>)
 8104a7e:	781b      	ldrb	r3, [r3, #0]
 8104a80:	4619      	mov	r1, r3
 8104a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8104a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8104a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8104a8e:	4618      	mov	r0, r3
 8104a90:	f000 f941 	bl	8104d16 <HAL_SYSTICK_Config>
 8104a94:	4603      	mov	r3, r0
 8104a96:	2b00      	cmp	r3, #0
 8104a98:	d001      	beq.n	8104a9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8104a9a:	2301      	movs	r3, #1
 8104a9c:	e00e      	b.n	8104abc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8104a9e:	687b      	ldr	r3, [r7, #4]
 8104aa0:	2b0f      	cmp	r3, #15
 8104aa2:	d80a      	bhi.n	8104aba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8104aa4:	2200      	movs	r2, #0
 8104aa6:	6879      	ldr	r1, [r7, #4]
 8104aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8104aac:	f000 f90b 	bl	8104cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8104ab0:	4a06      	ldr	r2, [pc, #24]	; (8104acc <HAL_InitTick+0x68>)
 8104ab2:	687b      	ldr	r3, [r7, #4]
 8104ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8104ab6:	2300      	movs	r3, #0
 8104ab8:	e000      	b.n	8104abc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8104aba:	2301      	movs	r3, #1
}
 8104abc:	4618      	mov	r0, r3
 8104abe:	3708      	adds	r7, #8
 8104ac0:	46bd      	mov	sp, r7
 8104ac2:	bd80      	pop	{r7, pc}
 8104ac4:	10000018 	.word	0x10000018
 8104ac8:	10000000 	.word	0x10000000
 8104acc:	10000014 	.word	0x10000014

08104ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8104ad0:	b480      	push	{r7}
 8104ad2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8104ad4:	4b06      	ldr	r3, [pc, #24]	; (8104af0 <HAL_IncTick+0x20>)
 8104ad6:	781b      	ldrb	r3, [r3, #0]
 8104ad8:	461a      	mov	r2, r3
 8104ada:	4b06      	ldr	r3, [pc, #24]	; (8104af4 <HAL_IncTick+0x24>)
 8104adc:	681b      	ldr	r3, [r3, #0]
 8104ade:	4413      	add	r3, r2
 8104ae0:	4a04      	ldr	r2, [pc, #16]	; (8104af4 <HAL_IncTick+0x24>)
 8104ae2:	6013      	str	r3, [r2, #0]
}
 8104ae4:	bf00      	nop
 8104ae6:	46bd      	mov	sp, r7
 8104ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104aec:	4770      	bx	lr
 8104aee:	bf00      	nop
 8104af0:	10000018 	.word	0x10000018
 8104af4:	10002aa8 	.word	0x10002aa8

08104af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8104af8:	b480      	push	{r7}
 8104afa:	af00      	add	r7, sp, #0
  return uwTick;
 8104afc:	4b03      	ldr	r3, [pc, #12]	; (8104b0c <HAL_GetTick+0x14>)
 8104afe:	681b      	ldr	r3, [r3, #0]
}
 8104b00:	4618      	mov	r0, r3
 8104b02:	46bd      	mov	sp, r7
 8104b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b08:	4770      	bx	lr
 8104b0a:	bf00      	nop
 8104b0c:	10002aa8 	.word	0x10002aa8

08104b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104b10:	b480      	push	{r7}
 8104b12:	b085      	sub	sp, #20
 8104b14:	af00      	add	r7, sp, #0
 8104b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8104b18:	687b      	ldr	r3, [r7, #4]
 8104b1a:	f003 0307 	and.w	r3, r3, #7
 8104b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8104b20:	4b0c      	ldr	r3, [pc, #48]	; (8104b54 <__NVIC_SetPriorityGrouping+0x44>)
 8104b22:	68db      	ldr	r3, [r3, #12]
 8104b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8104b26:	68ba      	ldr	r2, [r7, #8]
 8104b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8104b2c:	4013      	ands	r3, r2
 8104b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8104b30:	68fb      	ldr	r3, [r7, #12]
 8104b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8104b34:	68bb      	ldr	r3, [r7, #8]
 8104b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8104b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8104b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8104b42:	4a04      	ldr	r2, [pc, #16]	; (8104b54 <__NVIC_SetPriorityGrouping+0x44>)
 8104b44:	68bb      	ldr	r3, [r7, #8]
 8104b46:	60d3      	str	r3, [r2, #12]
}
 8104b48:	bf00      	nop
 8104b4a:	3714      	adds	r7, #20
 8104b4c:	46bd      	mov	sp, r7
 8104b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b52:	4770      	bx	lr
 8104b54:	e000ed00 	.word	0xe000ed00

08104b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8104b58:	b480      	push	{r7}
 8104b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104b5c:	4b04      	ldr	r3, [pc, #16]	; (8104b70 <__NVIC_GetPriorityGrouping+0x18>)
 8104b5e:	68db      	ldr	r3, [r3, #12]
 8104b60:	0a1b      	lsrs	r3, r3, #8
 8104b62:	f003 0307 	and.w	r3, r3, #7
}
 8104b66:	4618      	mov	r0, r3
 8104b68:	46bd      	mov	sp, r7
 8104b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b6e:	4770      	bx	lr
 8104b70:	e000ed00 	.word	0xe000ed00

08104b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104b74:	b480      	push	{r7}
 8104b76:	b083      	sub	sp, #12
 8104b78:	af00      	add	r7, sp, #0
 8104b7a:	4603      	mov	r3, r0
 8104b7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104b82:	2b00      	cmp	r3, #0
 8104b84:	db0b      	blt.n	8104b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8104b86:	88fb      	ldrh	r3, [r7, #6]
 8104b88:	f003 021f 	and.w	r2, r3, #31
 8104b8c:	4907      	ldr	r1, [pc, #28]	; (8104bac <__NVIC_EnableIRQ+0x38>)
 8104b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104b92:	095b      	lsrs	r3, r3, #5
 8104b94:	2001      	movs	r0, #1
 8104b96:	fa00 f202 	lsl.w	r2, r0, r2
 8104b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8104b9e:	bf00      	nop
 8104ba0:	370c      	adds	r7, #12
 8104ba2:	46bd      	mov	sp, r7
 8104ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ba8:	4770      	bx	lr
 8104baa:	bf00      	nop
 8104bac:	e000e100 	.word	0xe000e100

08104bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8104bb0:	b480      	push	{r7}
 8104bb2:	b083      	sub	sp, #12
 8104bb4:	af00      	add	r7, sp, #0
 8104bb6:	4603      	mov	r3, r0
 8104bb8:	6039      	str	r1, [r7, #0]
 8104bba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104bc0:	2b00      	cmp	r3, #0
 8104bc2:	db0a      	blt.n	8104bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104bc4:	683b      	ldr	r3, [r7, #0]
 8104bc6:	b2da      	uxtb	r2, r3
 8104bc8:	490c      	ldr	r1, [pc, #48]	; (8104bfc <__NVIC_SetPriority+0x4c>)
 8104bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104bce:	0112      	lsls	r2, r2, #4
 8104bd0:	b2d2      	uxtb	r2, r2
 8104bd2:	440b      	add	r3, r1
 8104bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8104bd8:	e00a      	b.n	8104bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104bda:	683b      	ldr	r3, [r7, #0]
 8104bdc:	b2da      	uxtb	r2, r3
 8104bde:	4908      	ldr	r1, [pc, #32]	; (8104c00 <__NVIC_SetPriority+0x50>)
 8104be0:	88fb      	ldrh	r3, [r7, #6]
 8104be2:	f003 030f 	and.w	r3, r3, #15
 8104be6:	3b04      	subs	r3, #4
 8104be8:	0112      	lsls	r2, r2, #4
 8104bea:	b2d2      	uxtb	r2, r2
 8104bec:	440b      	add	r3, r1
 8104bee:	761a      	strb	r2, [r3, #24]
}
 8104bf0:	bf00      	nop
 8104bf2:	370c      	adds	r7, #12
 8104bf4:	46bd      	mov	sp, r7
 8104bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bfa:	4770      	bx	lr
 8104bfc:	e000e100 	.word	0xe000e100
 8104c00:	e000ed00 	.word	0xe000ed00

08104c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104c04:	b480      	push	{r7}
 8104c06:	b089      	sub	sp, #36	; 0x24
 8104c08:	af00      	add	r7, sp, #0
 8104c0a:	60f8      	str	r0, [r7, #12]
 8104c0c:	60b9      	str	r1, [r7, #8]
 8104c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8104c10:	68fb      	ldr	r3, [r7, #12]
 8104c12:	f003 0307 	and.w	r3, r3, #7
 8104c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8104c18:	69fb      	ldr	r3, [r7, #28]
 8104c1a:	f1c3 0307 	rsb	r3, r3, #7
 8104c1e:	2b04      	cmp	r3, #4
 8104c20:	bf28      	it	cs
 8104c22:	2304      	movcs	r3, #4
 8104c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8104c26:	69fb      	ldr	r3, [r7, #28]
 8104c28:	3304      	adds	r3, #4
 8104c2a:	2b06      	cmp	r3, #6
 8104c2c:	d902      	bls.n	8104c34 <NVIC_EncodePriority+0x30>
 8104c2e:	69fb      	ldr	r3, [r7, #28]
 8104c30:	3b03      	subs	r3, #3
 8104c32:	e000      	b.n	8104c36 <NVIC_EncodePriority+0x32>
 8104c34:	2300      	movs	r3, #0
 8104c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104c38:	f04f 32ff 	mov.w	r2, #4294967295
 8104c3c:	69bb      	ldr	r3, [r7, #24]
 8104c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8104c42:	43da      	mvns	r2, r3
 8104c44:	68bb      	ldr	r3, [r7, #8]
 8104c46:	401a      	ands	r2, r3
 8104c48:	697b      	ldr	r3, [r7, #20]
 8104c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8104c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8104c50:	697b      	ldr	r3, [r7, #20]
 8104c52:	fa01 f303 	lsl.w	r3, r1, r3
 8104c56:	43d9      	mvns	r1, r3
 8104c58:	687b      	ldr	r3, [r7, #4]
 8104c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104c5c:	4313      	orrs	r3, r2
         );
}
 8104c5e:	4618      	mov	r0, r3
 8104c60:	3724      	adds	r7, #36	; 0x24
 8104c62:	46bd      	mov	sp, r7
 8104c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c68:	4770      	bx	lr
	...

08104c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8104c6c:	b580      	push	{r7, lr}
 8104c6e:	b082      	sub	sp, #8
 8104c70:	af00      	add	r7, sp, #0
 8104c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8104c74:	687b      	ldr	r3, [r7, #4]
 8104c76:	3b01      	subs	r3, #1
 8104c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104c7c:	d301      	bcc.n	8104c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8104c7e:	2301      	movs	r3, #1
 8104c80:	e00f      	b.n	8104ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8104c82:	4a0a      	ldr	r2, [pc, #40]	; (8104cac <SysTick_Config+0x40>)
 8104c84:	687b      	ldr	r3, [r7, #4]
 8104c86:	3b01      	subs	r3, #1
 8104c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8104c8a:	210f      	movs	r1, #15
 8104c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8104c90:	f7ff ff8e 	bl	8104bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8104c94:	4b05      	ldr	r3, [pc, #20]	; (8104cac <SysTick_Config+0x40>)
 8104c96:	2200      	movs	r2, #0
 8104c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8104c9a:	4b04      	ldr	r3, [pc, #16]	; (8104cac <SysTick_Config+0x40>)
 8104c9c:	2207      	movs	r2, #7
 8104c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8104ca0:	2300      	movs	r3, #0
}
 8104ca2:	4618      	mov	r0, r3
 8104ca4:	3708      	adds	r7, #8
 8104ca6:	46bd      	mov	sp, r7
 8104ca8:	bd80      	pop	{r7, pc}
 8104caa:	bf00      	nop
 8104cac:	e000e010 	.word	0xe000e010

08104cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104cb0:	b580      	push	{r7, lr}
 8104cb2:	b082      	sub	sp, #8
 8104cb4:	af00      	add	r7, sp, #0
 8104cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8104cb8:	6878      	ldr	r0, [r7, #4]
 8104cba:	f7ff ff29 	bl	8104b10 <__NVIC_SetPriorityGrouping>
}
 8104cbe:	bf00      	nop
 8104cc0:	3708      	adds	r7, #8
 8104cc2:	46bd      	mov	sp, r7
 8104cc4:	bd80      	pop	{r7, pc}

08104cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8104cc6:	b580      	push	{r7, lr}
 8104cc8:	b086      	sub	sp, #24
 8104cca:	af00      	add	r7, sp, #0
 8104ccc:	4603      	mov	r3, r0
 8104cce:	60b9      	str	r1, [r7, #8]
 8104cd0:	607a      	str	r2, [r7, #4]
 8104cd2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8104cd4:	f7ff ff40 	bl	8104b58 <__NVIC_GetPriorityGrouping>
 8104cd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8104cda:	687a      	ldr	r2, [r7, #4]
 8104cdc:	68b9      	ldr	r1, [r7, #8]
 8104cde:	6978      	ldr	r0, [r7, #20]
 8104ce0:	f7ff ff90 	bl	8104c04 <NVIC_EncodePriority>
 8104ce4:	4602      	mov	r2, r0
 8104ce6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8104cea:	4611      	mov	r1, r2
 8104cec:	4618      	mov	r0, r3
 8104cee:	f7ff ff5f 	bl	8104bb0 <__NVIC_SetPriority>
}
 8104cf2:	bf00      	nop
 8104cf4:	3718      	adds	r7, #24
 8104cf6:	46bd      	mov	sp, r7
 8104cf8:	bd80      	pop	{r7, pc}

08104cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104cfa:	b580      	push	{r7, lr}
 8104cfc:	b082      	sub	sp, #8
 8104cfe:	af00      	add	r7, sp, #0
 8104d00:	4603      	mov	r3, r0
 8104d02:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8104d04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104d08:	4618      	mov	r0, r3
 8104d0a:	f7ff ff33 	bl	8104b74 <__NVIC_EnableIRQ>
}
 8104d0e:	bf00      	nop
 8104d10:	3708      	adds	r7, #8
 8104d12:	46bd      	mov	sp, r7
 8104d14:	bd80      	pop	{r7, pc}

08104d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8104d16:	b580      	push	{r7, lr}
 8104d18:	b082      	sub	sp, #8
 8104d1a:	af00      	add	r7, sp, #0
 8104d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8104d1e:	6878      	ldr	r0, [r7, #4]
 8104d20:	f7ff ffa4 	bl	8104c6c <SysTick_Config>
 8104d24:	4603      	mov	r3, r0
}
 8104d26:	4618      	mov	r0, r3
 8104d28:	3708      	adds	r7, #8
 8104d2a:	46bd      	mov	sp, r7
 8104d2c:	bd80      	pop	{r7, pc}
	...

08104d30 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8104d30:	b480      	push	{r7}
 8104d32:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8104d34:	4b07      	ldr	r3, [pc, #28]	; (8104d54 <HAL_GetCurrentCPUID+0x24>)
 8104d36:	681b      	ldr	r3, [r3, #0]
 8104d38:	091b      	lsrs	r3, r3, #4
 8104d3a:	f003 030f 	and.w	r3, r3, #15
 8104d3e:	2b07      	cmp	r3, #7
 8104d40:	d101      	bne.n	8104d46 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8104d42:	2303      	movs	r3, #3
 8104d44:	e000      	b.n	8104d48 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8104d46:	2301      	movs	r3, #1
  }
}
 8104d48:	4618      	mov	r0, r3
 8104d4a:	46bd      	mov	sp, r7
 8104d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d50:	4770      	bx	lr
 8104d52:	bf00      	nop
 8104d54:	e000ed00 	.word	0xe000ed00

08104d58 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8104d58:	b580      	push	{r7, lr}
 8104d5a:	b086      	sub	sp, #24
 8104d5c:	af00      	add	r7, sp, #0
 8104d5e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8104d60:	f7ff feca 	bl	8104af8 <HAL_GetTick>
 8104d64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104d66:	687b      	ldr	r3, [r7, #4]
 8104d68:	2b00      	cmp	r3, #0
 8104d6a:	d101      	bne.n	8104d70 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8104d6c:	2301      	movs	r3, #1
 8104d6e:	e314      	b.n	810539a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104d70:	687b      	ldr	r3, [r7, #4]
 8104d72:	681b      	ldr	r3, [r3, #0]
 8104d74:	4a66      	ldr	r2, [pc, #408]	; (8104f10 <HAL_DMA_Init+0x1b8>)
 8104d76:	4293      	cmp	r3, r2
 8104d78:	d04a      	beq.n	8104e10 <HAL_DMA_Init+0xb8>
 8104d7a:	687b      	ldr	r3, [r7, #4]
 8104d7c:	681b      	ldr	r3, [r3, #0]
 8104d7e:	4a65      	ldr	r2, [pc, #404]	; (8104f14 <HAL_DMA_Init+0x1bc>)
 8104d80:	4293      	cmp	r3, r2
 8104d82:	d045      	beq.n	8104e10 <HAL_DMA_Init+0xb8>
 8104d84:	687b      	ldr	r3, [r7, #4]
 8104d86:	681b      	ldr	r3, [r3, #0]
 8104d88:	4a63      	ldr	r2, [pc, #396]	; (8104f18 <HAL_DMA_Init+0x1c0>)
 8104d8a:	4293      	cmp	r3, r2
 8104d8c:	d040      	beq.n	8104e10 <HAL_DMA_Init+0xb8>
 8104d8e:	687b      	ldr	r3, [r7, #4]
 8104d90:	681b      	ldr	r3, [r3, #0]
 8104d92:	4a62      	ldr	r2, [pc, #392]	; (8104f1c <HAL_DMA_Init+0x1c4>)
 8104d94:	4293      	cmp	r3, r2
 8104d96:	d03b      	beq.n	8104e10 <HAL_DMA_Init+0xb8>
 8104d98:	687b      	ldr	r3, [r7, #4]
 8104d9a:	681b      	ldr	r3, [r3, #0]
 8104d9c:	4a60      	ldr	r2, [pc, #384]	; (8104f20 <HAL_DMA_Init+0x1c8>)
 8104d9e:	4293      	cmp	r3, r2
 8104da0:	d036      	beq.n	8104e10 <HAL_DMA_Init+0xb8>
 8104da2:	687b      	ldr	r3, [r7, #4]
 8104da4:	681b      	ldr	r3, [r3, #0]
 8104da6:	4a5f      	ldr	r2, [pc, #380]	; (8104f24 <HAL_DMA_Init+0x1cc>)
 8104da8:	4293      	cmp	r3, r2
 8104daa:	d031      	beq.n	8104e10 <HAL_DMA_Init+0xb8>
 8104dac:	687b      	ldr	r3, [r7, #4]
 8104dae:	681b      	ldr	r3, [r3, #0]
 8104db0:	4a5d      	ldr	r2, [pc, #372]	; (8104f28 <HAL_DMA_Init+0x1d0>)
 8104db2:	4293      	cmp	r3, r2
 8104db4:	d02c      	beq.n	8104e10 <HAL_DMA_Init+0xb8>
 8104db6:	687b      	ldr	r3, [r7, #4]
 8104db8:	681b      	ldr	r3, [r3, #0]
 8104dba:	4a5c      	ldr	r2, [pc, #368]	; (8104f2c <HAL_DMA_Init+0x1d4>)
 8104dbc:	4293      	cmp	r3, r2
 8104dbe:	d027      	beq.n	8104e10 <HAL_DMA_Init+0xb8>
 8104dc0:	687b      	ldr	r3, [r7, #4]
 8104dc2:	681b      	ldr	r3, [r3, #0]
 8104dc4:	4a5a      	ldr	r2, [pc, #360]	; (8104f30 <HAL_DMA_Init+0x1d8>)
 8104dc6:	4293      	cmp	r3, r2
 8104dc8:	d022      	beq.n	8104e10 <HAL_DMA_Init+0xb8>
 8104dca:	687b      	ldr	r3, [r7, #4]
 8104dcc:	681b      	ldr	r3, [r3, #0]
 8104dce:	4a59      	ldr	r2, [pc, #356]	; (8104f34 <HAL_DMA_Init+0x1dc>)
 8104dd0:	4293      	cmp	r3, r2
 8104dd2:	d01d      	beq.n	8104e10 <HAL_DMA_Init+0xb8>
 8104dd4:	687b      	ldr	r3, [r7, #4]
 8104dd6:	681b      	ldr	r3, [r3, #0]
 8104dd8:	4a57      	ldr	r2, [pc, #348]	; (8104f38 <HAL_DMA_Init+0x1e0>)
 8104dda:	4293      	cmp	r3, r2
 8104ddc:	d018      	beq.n	8104e10 <HAL_DMA_Init+0xb8>
 8104dde:	687b      	ldr	r3, [r7, #4]
 8104de0:	681b      	ldr	r3, [r3, #0]
 8104de2:	4a56      	ldr	r2, [pc, #344]	; (8104f3c <HAL_DMA_Init+0x1e4>)
 8104de4:	4293      	cmp	r3, r2
 8104de6:	d013      	beq.n	8104e10 <HAL_DMA_Init+0xb8>
 8104de8:	687b      	ldr	r3, [r7, #4]
 8104dea:	681b      	ldr	r3, [r3, #0]
 8104dec:	4a54      	ldr	r2, [pc, #336]	; (8104f40 <HAL_DMA_Init+0x1e8>)
 8104dee:	4293      	cmp	r3, r2
 8104df0:	d00e      	beq.n	8104e10 <HAL_DMA_Init+0xb8>
 8104df2:	687b      	ldr	r3, [r7, #4]
 8104df4:	681b      	ldr	r3, [r3, #0]
 8104df6:	4a53      	ldr	r2, [pc, #332]	; (8104f44 <HAL_DMA_Init+0x1ec>)
 8104df8:	4293      	cmp	r3, r2
 8104dfa:	d009      	beq.n	8104e10 <HAL_DMA_Init+0xb8>
 8104dfc:	687b      	ldr	r3, [r7, #4]
 8104dfe:	681b      	ldr	r3, [r3, #0]
 8104e00:	4a51      	ldr	r2, [pc, #324]	; (8104f48 <HAL_DMA_Init+0x1f0>)
 8104e02:	4293      	cmp	r3, r2
 8104e04:	d004      	beq.n	8104e10 <HAL_DMA_Init+0xb8>
 8104e06:	687b      	ldr	r3, [r7, #4]
 8104e08:	681b      	ldr	r3, [r3, #0]
 8104e0a:	4a50      	ldr	r2, [pc, #320]	; (8104f4c <HAL_DMA_Init+0x1f4>)
 8104e0c:	4293      	cmp	r3, r2
 8104e0e:	d101      	bne.n	8104e14 <HAL_DMA_Init+0xbc>
 8104e10:	2301      	movs	r3, #1
 8104e12:	e000      	b.n	8104e16 <HAL_DMA_Init+0xbe>
 8104e14:	2300      	movs	r3, #0
 8104e16:	2b00      	cmp	r3, #0
 8104e18:	f000 813b 	beq.w	8105092 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8104e1c:	687b      	ldr	r3, [r7, #4]
 8104e1e:	2202      	movs	r2, #2
 8104e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8104e24:	687b      	ldr	r3, [r7, #4]
 8104e26:	2200      	movs	r2, #0
 8104e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8104e2c:	687b      	ldr	r3, [r7, #4]
 8104e2e:	681b      	ldr	r3, [r3, #0]
 8104e30:	4a37      	ldr	r2, [pc, #220]	; (8104f10 <HAL_DMA_Init+0x1b8>)
 8104e32:	4293      	cmp	r3, r2
 8104e34:	d04a      	beq.n	8104ecc <HAL_DMA_Init+0x174>
 8104e36:	687b      	ldr	r3, [r7, #4]
 8104e38:	681b      	ldr	r3, [r3, #0]
 8104e3a:	4a36      	ldr	r2, [pc, #216]	; (8104f14 <HAL_DMA_Init+0x1bc>)
 8104e3c:	4293      	cmp	r3, r2
 8104e3e:	d045      	beq.n	8104ecc <HAL_DMA_Init+0x174>
 8104e40:	687b      	ldr	r3, [r7, #4]
 8104e42:	681b      	ldr	r3, [r3, #0]
 8104e44:	4a34      	ldr	r2, [pc, #208]	; (8104f18 <HAL_DMA_Init+0x1c0>)
 8104e46:	4293      	cmp	r3, r2
 8104e48:	d040      	beq.n	8104ecc <HAL_DMA_Init+0x174>
 8104e4a:	687b      	ldr	r3, [r7, #4]
 8104e4c:	681b      	ldr	r3, [r3, #0]
 8104e4e:	4a33      	ldr	r2, [pc, #204]	; (8104f1c <HAL_DMA_Init+0x1c4>)
 8104e50:	4293      	cmp	r3, r2
 8104e52:	d03b      	beq.n	8104ecc <HAL_DMA_Init+0x174>
 8104e54:	687b      	ldr	r3, [r7, #4]
 8104e56:	681b      	ldr	r3, [r3, #0]
 8104e58:	4a31      	ldr	r2, [pc, #196]	; (8104f20 <HAL_DMA_Init+0x1c8>)
 8104e5a:	4293      	cmp	r3, r2
 8104e5c:	d036      	beq.n	8104ecc <HAL_DMA_Init+0x174>
 8104e5e:	687b      	ldr	r3, [r7, #4]
 8104e60:	681b      	ldr	r3, [r3, #0]
 8104e62:	4a30      	ldr	r2, [pc, #192]	; (8104f24 <HAL_DMA_Init+0x1cc>)
 8104e64:	4293      	cmp	r3, r2
 8104e66:	d031      	beq.n	8104ecc <HAL_DMA_Init+0x174>
 8104e68:	687b      	ldr	r3, [r7, #4]
 8104e6a:	681b      	ldr	r3, [r3, #0]
 8104e6c:	4a2e      	ldr	r2, [pc, #184]	; (8104f28 <HAL_DMA_Init+0x1d0>)
 8104e6e:	4293      	cmp	r3, r2
 8104e70:	d02c      	beq.n	8104ecc <HAL_DMA_Init+0x174>
 8104e72:	687b      	ldr	r3, [r7, #4]
 8104e74:	681b      	ldr	r3, [r3, #0]
 8104e76:	4a2d      	ldr	r2, [pc, #180]	; (8104f2c <HAL_DMA_Init+0x1d4>)
 8104e78:	4293      	cmp	r3, r2
 8104e7a:	d027      	beq.n	8104ecc <HAL_DMA_Init+0x174>
 8104e7c:	687b      	ldr	r3, [r7, #4]
 8104e7e:	681b      	ldr	r3, [r3, #0]
 8104e80:	4a2b      	ldr	r2, [pc, #172]	; (8104f30 <HAL_DMA_Init+0x1d8>)
 8104e82:	4293      	cmp	r3, r2
 8104e84:	d022      	beq.n	8104ecc <HAL_DMA_Init+0x174>
 8104e86:	687b      	ldr	r3, [r7, #4]
 8104e88:	681b      	ldr	r3, [r3, #0]
 8104e8a:	4a2a      	ldr	r2, [pc, #168]	; (8104f34 <HAL_DMA_Init+0x1dc>)
 8104e8c:	4293      	cmp	r3, r2
 8104e8e:	d01d      	beq.n	8104ecc <HAL_DMA_Init+0x174>
 8104e90:	687b      	ldr	r3, [r7, #4]
 8104e92:	681b      	ldr	r3, [r3, #0]
 8104e94:	4a28      	ldr	r2, [pc, #160]	; (8104f38 <HAL_DMA_Init+0x1e0>)
 8104e96:	4293      	cmp	r3, r2
 8104e98:	d018      	beq.n	8104ecc <HAL_DMA_Init+0x174>
 8104e9a:	687b      	ldr	r3, [r7, #4]
 8104e9c:	681b      	ldr	r3, [r3, #0]
 8104e9e:	4a27      	ldr	r2, [pc, #156]	; (8104f3c <HAL_DMA_Init+0x1e4>)
 8104ea0:	4293      	cmp	r3, r2
 8104ea2:	d013      	beq.n	8104ecc <HAL_DMA_Init+0x174>
 8104ea4:	687b      	ldr	r3, [r7, #4]
 8104ea6:	681b      	ldr	r3, [r3, #0]
 8104ea8:	4a25      	ldr	r2, [pc, #148]	; (8104f40 <HAL_DMA_Init+0x1e8>)
 8104eaa:	4293      	cmp	r3, r2
 8104eac:	d00e      	beq.n	8104ecc <HAL_DMA_Init+0x174>
 8104eae:	687b      	ldr	r3, [r7, #4]
 8104eb0:	681b      	ldr	r3, [r3, #0]
 8104eb2:	4a24      	ldr	r2, [pc, #144]	; (8104f44 <HAL_DMA_Init+0x1ec>)
 8104eb4:	4293      	cmp	r3, r2
 8104eb6:	d009      	beq.n	8104ecc <HAL_DMA_Init+0x174>
 8104eb8:	687b      	ldr	r3, [r7, #4]
 8104eba:	681b      	ldr	r3, [r3, #0]
 8104ebc:	4a22      	ldr	r2, [pc, #136]	; (8104f48 <HAL_DMA_Init+0x1f0>)
 8104ebe:	4293      	cmp	r3, r2
 8104ec0:	d004      	beq.n	8104ecc <HAL_DMA_Init+0x174>
 8104ec2:	687b      	ldr	r3, [r7, #4]
 8104ec4:	681b      	ldr	r3, [r3, #0]
 8104ec6:	4a21      	ldr	r2, [pc, #132]	; (8104f4c <HAL_DMA_Init+0x1f4>)
 8104ec8:	4293      	cmp	r3, r2
 8104eca:	d108      	bne.n	8104ede <HAL_DMA_Init+0x186>
 8104ecc:	687b      	ldr	r3, [r7, #4]
 8104ece:	681b      	ldr	r3, [r3, #0]
 8104ed0:	681a      	ldr	r2, [r3, #0]
 8104ed2:	687b      	ldr	r3, [r7, #4]
 8104ed4:	681b      	ldr	r3, [r3, #0]
 8104ed6:	f022 0201 	bic.w	r2, r2, #1
 8104eda:	601a      	str	r2, [r3, #0]
 8104edc:	e007      	b.n	8104eee <HAL_DMA_Init+0x196>
 8104ede:	687b      	ldr	r3, [r7, #4]
 8104ee0:	681b      	ldr	r3, [r3, #0]
 8104ee2:	681a      	ldr	r2, [r3, #0]
 8104ee4:	687b      	ldr	r3, [r7, #4]
 8104ee6:	681b      	ldr	r3, [r3, #0]
 8104ee8:	f022 0201 	bic.w	r2, r2, #1
 8104eec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8104eee:	e02f      	b.n	8104f50 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8104ef0:	f7ff fe02 	bl	8104af8 <HAL_GetTick>
 8104ef4:	4602      	mov	r2, r0
 8104ef6:	693b      	ldr	r3, [r7, #16]
 8104ef8:	1ad3      	subs	r3, r2, r3
 8104efa:	2b05      	cmp	r3, #5
 8104efc:	d928      	bls.n	8104f50 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8104efe:	687b      	ldr	r3, [r7, #4]
 8104f00:	2220      	movs	r2, #32
 8104f02:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8104f04:	687b      	ldr	r3, [r7, #4]
 8104f06:	2203      	movs	r2, #3
 8104f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8104f0c:	2301      	movs	r3, #1
 8104f0e:	e244      	b.n	810539a <HAL_DMA_Init+0x642>
 8104f10:	40020010 	.word	0x40020010
 8104f14:	40020028 	.word	0x40020028
 8104f18:	40020040 	.word	0x40020040
 8104f1c:	40020058 	.word	0x40020058
 8104f20:	40020070 	.word	0x40020070
 8104f24:	40020088 	.word	0x40020088
 8104f28:	400200a0 	.word	0x400200a0
 8104f2c:	400200b8 	.word	0x400200b8
 8104f30:	40020410 	.word	0x40020410
 8104f34:	40020428 	.word	0x40020428
 8104f38:	40020440 	.word	0x40020440
 8104f3c:	40020458 	.word	0x40020458
 8104f40:	40020470 	.word	0x40020470
 8104f44:	40020488 	.word	0x40020488
 8104f48:	400204a0 	.word	0x400204a0
 8104f4c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8104f50:	687b      	ldr	r3, [r7, #4]
 8104f52:	681b      	ldr	r3, [r3, #0]
 8104f54:	681b      	ldr	r3, [r3, #0]
 8104f56:	f003 0301 	and.w	r3, r3, #1
 8104f5a:	2b00      	cmp	r3, #0
 8104f5c:	d1c8      	bne.n	8104ef0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8104f5e:	687b      	ldr	r3, [r7, #4]
 8104f60:	681b      	ldr	r3, [r3, #0]
 8104f62:	681b      	ldr	r3, [r3, #0]
 8104f64:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8104f66:	697a      	ldr	r2, [r7, #20]
 8104f68:	4b84      	ldr	r3, [pc, #528]	; (810517c <HAL_DMA_Init+0x424>)
 8104f6a:	4013      	ands	r3, r2
 8104f6c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8104f6e:	687b      	ldr	r3, [r7, #4]
 8104f70:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8104f72:	687b      	ldr	r3, [r7, #4]
 8104f74:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8104f76:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8104f78:	687b      	ldr	r3, [r7, #4]
 8104f7a:	691b      	ldr	r3, [r3, #16]
 8104f7c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104f7e:	687b      	ldr	r3, [r7, #4]
 8104f80:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8104f82:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104f84:	687b      	ldr	r3, [r7, #4]
 8104f86:	699b      	ldr	r3, [r3, #24]
 8104f88:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8104f8a:	687b      	ldr	r3, [r7, #4]
 8104f8c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8104f8e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8104f90:	687b      	ldr	r3, [r7, #4]
 8104f92:	6a1b      	ldr	r3, [r3, #32]
 8104f94:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8104f96:	697a      	ldr	r2, [r7, #20]
 8104f98:	4313      	orrs	r3, r2
 8104f9a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8104f9c:	687b      	ldr	r3, [r7, #4]
 8104f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104fa0:	2b04      	cmp	r3, #4
 8104fa2:	d107      	bne.n	8104fb4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8104fa4:	687b      	ldr	r3, [r7, #4]
 8104fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104fa8:	687b      	ldr	r3, [r7, #4]
 8104faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104fac:	4313      	orrs	r3, r2
 8104fae:	697a      	ldr	r2, [r7, #20]
 8104fb0:	4313      	orrs	r3, r2
 8104fb2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8104fb4:	4b72      	ldr	r3, [pc, #456]	; (8105180 <HAL_DMA_Init+0x428>)
 8104fb6:	681b      	ldr	r3, [r3, #0]
 8104fb8:	0c1b      	lsrs	r3, r3, #16
 8104fba:	041b      	lsls	r3, r3, #16
 8104fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104fc0:	d328      	bcc.n	8105014 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8104fc2:	687b      	ldr	r3, [r7, #4]
 8104fc4:	685b      	ldr	r3, [r3, #4]
 8104fc6:	2b28      	cmp	r3, #40	; 0x28
 8104fc8:	d903      	bls.n	8104fd2 <HAL_DMA_Init+0x27a>
 8104fca:	687b      	ldr	r3, [r7, #4]
 8104fcc:	685b      	ldr	r3, [r3, #4]
 8104fce:	2b2e      	cmp	r3, #46	; 0x2e
 8104fd0:	d917      	bls.n	8105002 <HAL_DMA_Init+0x2aa>
 8104fd2:	687b      	ldr	r3, [r7, #4]
 8104fd4:	685b      	ldr	r3, [r3, #4]
 8104fd6:	2b3e      	cmp	r3, #62	; 0x3e
 8104fd8:	d903      	bls.n	8104fe2 <HAL_DMA_Init+0x28a>
 8104fda:	687b      	ldr	r3, [r7, #4]
 8104fdc:	685b      	ldr	r3, [r3, #4]
 8104fde:	2b42      	cmp	r3, #66	; 0x42
 8104fe0:	d90f      	bls.n	8105002 <HAL_DMA_Init+0x2aa>
 8104fe2:	687b      	ldr	r3, [r7, #4]
 8104fe4:	685b      	ldr	r3, [r3, #4]
 8104fe6:	2b46      	cmp	r3, #70	; 0x46
 8104fe8:	d903      	bls.n	8104ff2 <HAL_DMA_Init+0x29a>
 8104fea:	687b      	ldr	r3, [r7, #4]
 8104fec:	685b      	ldr	r3, [r3, #4]
 8104fee:	2b48      	cmp	r3, #72	; 0x48
 8104ff0:	d907      	bls.n	8105002 <HAL_DMA_Init+0x2aa>
 8104ff2:	687b      	ldr	r3, [r7, #4]
 8104ff4:	685b      	ldr	r3, [r3, #4]
 8104ff6:	2b4e      	cmp	r3, #78	; 0x4e
 8104ff8:	d905      	bls.n	8105006 <HAL_DMA_Init+0x2ae>
 8104ffa:	687b      	ldr	r3, [r7, #4]
 8104ffc:	685b      	ldr	r3, [r3, #4]
 8104ffe:	2b52      	cmp	r3, #82	; 0x52
 8105000:	d801      	bhi.n	8105006 <HAL_DMA_Init+0x2ae>
 8105002:	2301      	movs	r3, #1
 8105004:	e000      	b.n	8105008 <HAL_DMA_Init+0x2b0>
 8105006:	2300      	movs	r3, #0
 8105008:	2b00      	cmp	r3, #0
 810500a:	d003      	beq.n	8105014 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 810500c:	697b      	ldr	r3, [r7, #20]
 810500e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8105012:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8105014:	687b      	ldr	r3, [r7, #4]
 8105016:	681b      	ldr	r3, [r3, #0]
 8105018:	697a      	ldr	r2, [r7, #20]
 810501a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 810501c:	687b      	ldr	r3, [r7, #4]
 810501e:	681b      	ldr	r3, [r3, #0]
 8105020:	695b      	ldr	r3, [r3, #20]
 8105022:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8105024:	697b      	ldr	r3, [r7, #20]
 8105026:	f023 0307 	bic.w	r3, r3, #7
 810502a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 810502c:	687b      	ldr	r3, [r7, #4]
 810502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105030:	697a      	ldr	r2, [r7, #20]
 8105032:	4313      	orrs	r3, r2
 8105034:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8105036:	687b      	ldr	r3, [r7, #4]
 8105038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810503a:	2b04      	cmp	r3, #4
 810503c:	d117      	bne.n	810506e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 810503e:	687b      	ldr	r3, [r7, #4]
 8105040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105042:	697a      	ldr	r2, [r7, #20]
 8105044:	4313      	orrs	r3, r2
 8105046:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8105048:	687b      	ldr	r3, [r7, #4]
 810504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810504c:	2b00      	cmp	r3, #0
 810504e:	d00e      	beq.n	810506e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8105050:	6878      	ldr	r0, [r7, #4]
 8105052:	f001 ff1b 	bl	8106e8c <DMA_CheckFifoParam>
 8105056:	4603      	mov	r3, r0
 8105058:	2b00      	cmp	r3, #0
 810505a:	d008      	beq.n	810506e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 810505c:	687b      	ldr	r3, [r7, #4]
 810505e:	2240      	movs	r2, #64	; 0x40
 8105060:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8105062:	687b      	ldr	r3, [r7, #4]
 8105064:	2201      	movs	r2, #1
 8105066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 810506a:	2301      	movs	r3, #1
 810506c:	e195      	b.n	810539a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 810506e:	687b      	ldr	r3, [r7, #4]
 8105070:	681b      	ldr	r3, [r3, #0]
 8105072:	697a      	ldr	r2, [r7, #20]
 8105074:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8105076:	6878      	ldr	r0, [r7, #4]
 8105078:	f001 fe56 	bl	8106d28 <DMA_CalcBaseAndBitshift>
 810507c:	4603      	mov	r3, r0
 810507e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8105080:	687b      	ldr	r3, [r7, #4]
 8105082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105084:	f003 031f 	and.w	r3, r3, #31
 8105088:	223f      	movs	r2, #63	; 0x3f
 810508a:	409a      	lsls	r2, r3
 810508c:	68bb      	ldr	r3, [r7, #8]
 810508e:	609a      	str	r2, [r3, #8]
 8105090:	e0cb      	b.n	810522a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8105092:	687b      	ldr	r3, [r7, #4]
 8105094:	681b      	ldr	r3, [r3, #0]
 8105096:	4a3b      	ldr	r2, [pc, #236]	; (8105184 <HAL_DMA_Init+0x42c>)
 8105098:	4293      	cmp	r3, r2
 810509a:	d022      	beq.n	81050e2 <HAL_DMA_Init+0x38a>
 810509c:	687b      	ldr	r3, [r7, #4]
 810509e:	681b      	ldr	r3, [r3, #0]
 81050a0:	4a39      	ldr	r2, [pc, #228]	; (8105188 <HAL_DMA_Init+0x430>)
 81050a2:	4293      	cmp	r3, r2
 81050a4:	d01d      	beq.n	81050e2 <HAL_DMA_Init+0x38a>
 81050a6:	687b      	ldr	r3, [r7, #4]
 81050a8:	681b      	ldr	r3, [r3, #0]
 81050aa:	4a38      	ldr	r2, [pc, #224]	; (810518c <HAL_DMA_Init+0x434>)
 81050ac:	4293      	cmp	r3, r2
 81050ae:	d018      	beq.n	81050e2 <HAL_DMA_Init+0x38a>
 81050b0:	687b      	ldr	r3, [r7, #4]
 81050b2:	681b      	ldr	r3, [r3, #0]
 81050b4:	4a36      	ldr	r2, [pc, #216]	; (8105190 <HAL_DMA_Init+0x438>)
 81050b6:	4293      	cmp	r3, r2
 81050b8:	d013      	beq.n	81050e2 <HAL_DMA_Init+0x38a>
 81050ba:	687b      	ldr	r3, [r7, #4]
 81050bc:	681b      	ldr	r3, [r3, #0]
 81050be:	4a35      	ldr	r2, [pc, #212]	; (8105194 <HAL_DMA_Init+0x43c>)
 81050c0:	4293      	cmp	r3, r2
 81050c2:	d00e      	beq.n	81050e2 <HAL_DMA_Init+0x38a>
 81050c4:	687b      	ldr	r3, [r7, #4]
 81050c6:	681b      	ldr	r3, [r3, #0]
 81050c8:	4a33      	ldr	r2, [pc, #204]	; (8105198 <HAL_DMA_Init+0x440>)
 81050ca:	4293      	cmp	r3, r2
 81050cc:	d009      	beq.n	81050e2 <HAL_DMA_Init+0x38a>
 81050ce:	687b      	ldr	r3, [r7, #4]
 81050d0:	681b      	ldr	r3, [r3, #0]
 81050d2:	4a32      	ldr	r2, [pc, #200]	; (810519c <HAL_DMA_Init+0x444>)
 81050d4:	4293      	cmp	r3, r2
 81050d6:	d004      	beq.n	81050e2 <HAL_DMA_Init+0x38a>
 81050d8:	687b      	ldr	r3, [r7, #4]
 81050da:	681b      	ldr	r3, [r3, #0]
 81050dc:	4a30      	ldr	r2, [pc, #192]	; (81051a0 <HAL_DMA_Init+0x448>)
 81050de:	4293      	cmp	r3, r2
 81050e0:	d101      	bne.n	81050e6 <HAL_DMA_Init+0x38e>
 81050e2:	2301      	movs	r3, #1
 81050e4:	e000      	b.n	81050e8 <HAL_DMA_Init+0x390>
 81050e6:	2300      	movs	r3, #0
 81050e8:	2b00      	cmp	r3, #0
 81050ea:	f000 8095 	beq.w	8105218 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81050ee:	687b      	ldr	r3, [r7, #4]
 81050f0:	681b      	ldr	r3, [r3, #0]
 81050f2:	4a24      	ldr	r2, [pc, #144]	; (8105184 <HAL_DMA_Init+0x42c>)
 81050f4:	4293      	cmp	r3, r2
 81050f6:	d021      	beq.n	810513c <HAL_DMA_Init+0x3e4>
 81050f8:	687b      	ldr	r3, [r7, #4]
 81050fa:	681b      	ldr	r3, [r3, #0]
 81050fc:	4a22      	ldr	r2, [pc, #136]	; (8105188 <HAL_DMA_Init+0x430>)
 81050fe:	4293      	cmp	r3, r2
 8105100:	d01c      	beq.n	810513c <HAL_DMA_Init+0x3e4>
 8105102:	687b      	ldr	r3, [r7, #4]
 8105104:	681b      	ldr	r3, [r3, #0]
 8105106:	4a21      	ldr	r2, [pc, #132]	; (810518c <HAL_DMA_Init+0x434>)
 8105108:	4293      	cmp	r3, r2
 810510a:	d017      	beq.n	810513c <HAL_DMA_Init+0x3e4>
 810510c:	687b      	ldr	r3, [r7, #4]
 810510e:	681b      	ldr	r3, [r3, #0]
 8105110:	4a1f      	ldr	r2, [pc, #124]	; (8105190 <HAL_DMA_Init+0x438>)
 8105112:	4293      	cmp	r3, r2
 8105114:	d012      	beq.n	810513c <HAL_DMA_Init+0x3e4>
 8105116:	687b      	ldr	r3, [r7, #4]
 8105118:	681b      	ldr	r3, [r3, #0]
 810511a:	4a1e      	ldr	r2, [pc, #120]	; (8105194 <HAL_DMA_Init+0x43c>)
 810511c:	4293      	cmp	r3, r2
 810511e:	d00d      	beq.n	810513c <HAL_DMA_Init+0x3e4>
 8105120:	687b      	ldr	r3, [r7, #4]
 8105122:	681b      	ldr	r3, [r3, #0]
 8105124:	4a1c      	ldr	r2, [pc, #112]	; (8105198 <HAL_DMA_Init+0x440>)
 8105126:	4293      	cmp	r3, r2
 8105128:	d008      	beq.n	810513c <HAL_DMA_Init+0x3e4>
 810512a:	687b      	ldr	r3, [r7, #4]
 810512c:	681b      	ldr	r3, [r3, #0]
 810512e:	4a1b      	ldr	r2, [pc, #108]	; (810519c <HAL_DMA_Init+0x444>)
 8105130:	4293      	cmp	r3, r2
 8105132:	d003      	beq.n	810513c <HAL_DMA_Init+0x3e4>
 8105134:	687b      	ldr	r3, [r7, #4]
 8105136:	681b      	ldr	r3, [r3, #0]
 8105138:	4a19      	ldr	r2, [pc, #100]	; (81051a0 <HAL_DMA_Init+0x448>)
 810513a:	4293      	cmp	r3, r2
 810513c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 810513e:	687b      	ldr	r3, [r7, #4]
 8105140:	2202      	movs	r2, #2
 8105142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8105146:	687b      	ldr	r3, [r7, #4]
 8105148:	2200      	movs	r2, #0
 810514a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 810514e:	687b      	ldr	r3, [r7, #4]
 8105150:	681b      	ldr	r3, [r3, #0]
 8105152:	681b      	ldr	r3, [r3, #0]
 8105154:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8105156:	697b      	ldr	r3, [r7, #20]
 8105158:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 810515c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8105160:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8105162:	687b      	ldr	r3, [r7, #4]
 8105164:	689b      	ldr	r3, [r3, #8]
 8105166:	2b40      	cmp	r3, #64	; 0x40
 8105168:	d01c      	beq.n	81051a4 <HAL_DMA_Init+0x44c>
 810516a:	687b      	ldr	r3, [r7, #4]
 810516c:	689b      	ldr	r3, [r3, #8]
 810516e:	2b80      	cmp	r3, #128	; 0x80
 8105170:	d102      	bne.n	8105178 <HAL_DMA_Init+0x420>
 8105172:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8105176:	e016      	b.n	81051a6 <HAL_DMA_Init+0x44e>
 8105178:	2300      	movs	r3, #0
 810517a:	e014      	b.n	81051a6 <HAL_DMA_Init+0x44e>
 810517c:	fe10803f 	.word	0xfe10803f
 8105180:	5c001000 	.word	0x5c001000
 8105184:	58025408 	.word	0x58025408
 8105188:	5802541c 	.word	0x5802541c
 810518c:	58025430 	.word	0x58025430
 8105190:	58025444 	.word	0x58025444
 8105194:	58025458 	.word	0x58025458
 8105198:	5802546c 	.word	0x5802546c
 810519c:	58025480 	.word	0x58025480
 81051a0:	58025494 	.word	0x58025494
 81051a4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81051a6:	687a      	ldr	r2, [r7, #4]
 81051a8:	68d2      	ldr	r2, [r2, #12]
 81051aa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81051ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81051ae:	687b      	ldr	r3, [r7, #4]
 81051b0:	691b      	ldr	r3, [r3, #16]
 81051b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81051b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81051b6:	687b      	ldr	r3, [r7, #4]
 81051b8:	695b      	ldr	r3, [r3, #20]
 81051ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81051bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81051be:	687b      	ldr	r3, [r7, #4]
 81051c0:	699b      	ldr	r3, [r3, #24]
 81051c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81051c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81051c6:	687b      	ldr	r3, [r7, #4]
 81051c8:	69db      	ldr	r3, [r3, #28]
 81051ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81051cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 81051ce:	687b      	ldr	r3, [r7, #4]
 81051d0:	6a1b      	ldr	r3, [r3, #32]
 81051d2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81051d4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81051d6:	697a      	ldr	r2, [r7, #20]
 81051d8:	4313      	orrs	r3, r2
 81051da:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 81051dc:	687b      	ldr	r3, [r7, #4]
 81051de:	681b      	ldr	r3, [r3, #0]
 81051e0:	697a      	ldr	r2, [r7, #20]
 81051e2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81051e4:	687b      	ldr	r3, [r7, #4]
 81051e6:	681b      	ldr	r3, [r3, #0]
 81051e8:	461a      	mov	r2, r3
 81051ea:	4b6e      	ldr	r3, [pc, #440]	; (81053a4 <HAL_DMA_Init+0x64c>)
 81051ec:	4413      	add	r3, r2
 81051ee:	4a6e      	ldr	r2, [pc, #440]	; (81053a8 <HAL_DMA_Init+0x650>)
 81051f0:	fba2 2303 	umull	r2, r3, r2, r3
 81051f4:	091b      	lsrs	r3, r3, #4
 81051f6:	009a      	lsls	r2, r3, #2
 81051f8:	687b      	ldr	r3, [r7, #4]
 81051fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81051fc:	6878      	ldr	r0, [r7, #4]
 81051fe:	f001 fd93 	bl	8106d28 <DMA_CalcBaseAndBitshift>
 8105202:	4603      	mov	r3, r0
 8105204:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8105206:	687b      	ldr	r3, [r7, #4]
 8105208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810520a:	f003 031f 	and.w	r3, r3, #31
 810520e:	2201      	movs	r2, #1
 8105210:	409a      	lsls	r2, r3
 8105212:	68fb      	ldr	r3, [r7, #12]
 8105214:	605a      	str	r2, [r3, #4]
 8105216:	e008      	b.n	810522a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8105218:	687b      	ldr	r3, [r7, #4]
 810521a:	2240      	movs	r2, #64	; 0x40
 810521c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 810521e:	687b      	ldr	r3, [r7, #4]
 8105220:	2203      	movs	r2, #3
 8105222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8105226:	2301      	movs	r3, #1
 8105228:	e0b7      	b.n	810539a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810522a:	687b      	ldr	r3, [r7, #4]
 810522c:	681b      	ldr	r3, [r3, #0]
 810522e:	4a5f      	ldr	r2, [pc, #380]	; (81053ac <HAL_DMA_Init+0x654>)
 8105230:	4293      	cmp	r3, r2
 8105232:	d072      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 8105234:	687b      	ldr	r3, [r7, #4]
 8105236:	681b      	ldr	r3, [r3, #0]
 8105238:	4a5d      	ldr	r2, [pc, #372]	; (81053b0 <HAL_DMA_Init+0x658>)
 810523a:	4293      	cmp	r3, r2
 810523c:	d06d      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 810523e:	687b      	ldr	r3, [r7, #4]
 8105240:	681b      	ldr	r3, [r3, #0]
 8105242:	4a5c      	ldr	r2, [pc, #368]	; (81053b4 <HAL_DMA_Init+0x65c>)
 8105244:	4293      	cmp	r3, r2
 8105246:	d068      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 8105248:	687b      	ldr	r3, [r7, #4]
 810524a:	681b      	ldr	r3, [r3, #0]
 810524c:	4a5a      	ldr	r2, [pc, #360]	; (81053b8 <HAL_DMA_Init+0x660>)
 810524e:	4293      	cmp	r3, r2
 8105250:	d063      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 8105252:	687b      	ldr	r3, [r7, #4]
 8105254:	681b      	ldr	r3, [r3, #0]
 8105256:	4a59      	ldr	r2, [pc, #356]	; (81053bc <HAL_DMA_Init+0x664>)
 8105258:	4293      	cmp	r3, r2
 810525a:	d05e      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 810525c:	687b      	ldr	r3, [r7, #4]
 810525e:	681b      	ldr	r3, [r3, #0]
 8105260:	4a57      	ldr	r2, [pc, #348]	; (81053c0 <HAL_DMA_Init+0x668>)
 8105262:	4293      	cmp	r3, r2
 8105264:	d059      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 8105266:	687b      	ldr	r3, [r7, #4]
 8105268:	681b      	ldr	r3, [r3, #0]
 810526a:	4a56      	ldr	r2, [pc, #344]	; (81053c4 <HAL_DMA_Init+0x66c>)
 810526c:	4293      	cmp	r3, r2
 810526e:	d054      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 8105270:	687b      	ldr	r3, [r7, #4]
 8105272:	681b      	ldr	r3, [r3, #0]
 8105274:	4a54      	ldr	r2, [pc, #336]	; (81053c8 <HAL_DMA_Init+0x670>)
 8105276:	4293      	cmp	r3, r2
 8105278:	d04f      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 810527a:	687b      	ldr	r3, [r7, #4]
 810527c:	681b      	ldr	r3, [r3, #0]
 810527e:	4a53      	ldr	r2, [pc, #332]	; (81053cc <HAL_DMA_Init+0x674>)
 8105280:	4293      	cmp	r3, r2
 8105282:	d04a      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 8105284:	687b      	ldr	r3, [r7, #4]
 8105286:	681b      	ldr	r3, [r3, #0]
 8105288:	4a51      	ldr	r2, [pc, #324]	; (81053d0 <HAL_DMA_Init+0x678>)
 810528a:	4293      	cmp	r3, r2
 810528c:	d045      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 810528e:	687b      	ldr	r3, [r7, #4]
 8105290:	681b      	ldr	r3, [r3, #0]
 8105292:	4a50      	ldr	r2, [pc, #320]	; (81053d4 <HAL_DMA_Init+0x67c>)
 8105294:	4293      	cmp	r3, r2
 8105296:	d040      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 8105298:	687b      	ldr	r3, [r7, #4]
 810529a:	681b      	ldr	r3, [r3, #0]
 810529c:	4a4e      	ldr	r2, [pc, #312]	; (81053d8 <HAL_DMA_Init+0x680>)
 810529e:	4293      	cmp	r3, r2
 81052a0:	d03b      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 81052a2:	687b      	ldr	r3, [r7, #4]
 81052a4:	681b      	ldr	r3, [r3, #0]
 81052a6:	4a4d      	ldr	r2, [pc, #308]	; (81053dc <HAL_DMA_Init+0x684>)
 81052a8:	4293      	cmp	r3, r2
 81052aa:	d036      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 81052ac:	687b      	ldr	r3, [r7, #4]
 81052ae:	681b      	ldr	r3, [r3, #0]
 81052b0:	4a4b      	ldr	r2, [pc, #300]	; (81053e0 <HAL_DMA_Init+0x688>)
 81052b2:	4293      	cmp	r3, r2
 81052b4:	d031      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 81052b6:	687b      	ldr	r3, [r7, #4]
 81052b8:	681b      	ldr	r3, [r3, #0]
 81052ba:	4a4a      	ldr	r2, [pc, #296]	; (81053e4 <HAL_DMA_Init+0x68c>)
 81052bc:	4293      	cmp	r3, r2
 81052be:	d02c      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 81052c0:	687b      	ldr	r3, [r7, #4]
 81052c2:	681b      	ldr	r3, [r3, #0]
 81052c4:	4a48      	ldr	r2, [pc, #288]	; (81053e8 <HAL_DMA_Init+0x690>)
 81052c6:	4293      	cmp	r3, r2
 81052c8:	d027      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 81052ca:	687b      	ldr	r3, [r7, #4]
 81052cc:	681b      	ldr	r3, [r3, #0]
 81052ce:	4a47      	ldr	r2, [pc, #284]	; (81053ec <HAL_DMA_Init+0x694>)
 81052d0:	4293      	cmp	r3, r2
 81052d2:	d022      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 81052d4:	687b      	ldr	r3, [r7, #4]
 81052d6:	681b      	ldr	r3, [r3, #0]
 81052d8:	4a45      	ldr	r2, [pc, #276]	; (81053f0 <HAL_DMA_Init+0x698>)
 81052da:	4293      	cmp	r3, r2
 81052dc:	d01d      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 81052de:	687b      	ldr	r3, [r7, #4]
 81052e0:	681b      	ldr	r3, [r3, #0]
 81052e2:	4a44      	ldr	r2, [pc, #272]	; (81053f4 <HAL_DMA_Init+0x69c>)
 81052e4:	4293      	cmp	r3, r2
 81052e6:	d018      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 81052e8:	687b      	ldr	r3, [r7, #4]
 81052ea:	681b      	ldr	r3, [r3, #0]
 81052ec:	4a42      	ldr	r2, [pc, #264]	; (81053f8 <HAL_DMA_Init+0x6a0>)
 81052ee:	4293      	cmp	r3, r2
 81052f0:	d013      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 81052f2:	687b      	ldr	r3, [r7, #4]
 81052f4:	681b      	ldr	r3, [r3, #0]
 81052f6:	4a41      	ldr	r2, [pc, #260]	; (81053fc <HAL_DMA_Init+0x6a4>)
 81052f8:	4293      	cmp	r3, r2
 81052fa:	d00e      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 81052fc:	687b      	ldr	r3, [r7, #4]
 81052fe:	681b      	ldr	r3, [r3, #0]
 8105300:	4a3f      	ldr	r2, [pc, #252]	; (8105400 <HAL_DMA_Init+0x6a8>)
 8105302:	4293      	cmp	r3, r2
 8105304:	d009      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 8105306:	687b      	ldr	r3, [r7, #4]
 8105308:	681b      	ldr	r3, [r3, #0]
 810530a:	4a3e      	ldr	r2, [pc, #248]	; (8105404 <HAL_DMA_Init+0x6ac>)
 810530c:	4293      	cmp	r3, r2
 810530e:	d004      	beq.n	810531a <HAL_DMA_Init+0x5c2>
 8105310:	687b      	ldr	r3, [r7, #4]
 8105312:	681b      	ldr	r3, [r3, #0]
 8105314:	4a3c      	ldr	r2, [pc, #240]	; (8105408 <HAL_DMA_Init+0x6b0>)
 8105316:	4293      	cmp	r3, r2
 8105318:	d101      	bne.n	810531e <HAL_DMA_Init+0x5c6>
 810531a:	2301      	movs	r3, #1
 810531c:	e000      	b.n	8105320 <HAL_DMA_Init+0x5c8>
 810531e:	2300      	movs	r3, #0
 8105320:	2b00      	cmp	r3, #0
 8105322:	d032      	beq.n	810538a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8105324:	6878      	ldr	r0, [r7, #4]
 8105326:	f001 fe2d 	bl	8106f84 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 810532a:	687b      	ldr	r3, [r7, #4]
 810532c:	689b      	ldr	r3, [r3, #8]
 810532e:	2b80      	cmp	r3, #128	; 0x80
 8105330:	d102      	bne.n	8105338 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8105332:	687b      	ldr	r3, [r7, #4]
 8105334:	2200      	movs	r2, #0
 8105336:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8105338:	687b      	ldr	r3, [r7, #4]
 810533a:	685a      	ldr	r2, [r3, #4]
 810533c:	687b      	ldr	r3, [r7, #4]
 810533e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105340:	b2d2      	uxtb	r2, r2
 8105342:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105344:	687b      	ldr	r3, [r7, #4]
 8105346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105348:	687a      	ldr	r2, [r7, #4]
 810534a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810534c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 810534e:	687b      	ldr	r3, [r7, #4]
 8105350:	685b      	ldr	r3, [r3, #4]
 8105352:	2b00      	cmp	r3, #0
 8105354:	d010      	beq.n	8105378 <HAL_DMA_Init+0x620>
 8105356:	687b      	ldr	r3, [r7, #4]
 8105358:	685b      	ldr	r3, [r3, #4]
 810535a:	2b08      	cmp	r3, #8
 810535c:	d80c      	bhi.n	8105378 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 810535e:	6878      	ldr	r0, [r7, #4]
 8105360:	f001 feaa 	bl	81070b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8105364:	687b      	ldr	r3, [r7, #4]
 8105366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105368:	2200      	movs	r2, #0
 810536a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810536c:	687b      	ldr	r3, [r7, #4]
 810536e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105370:	687a      	ldr	r2, [r7, #4]
 8105372:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8105374:	605a      	str	r2, [r3, #4]
 8105376:	e008      	b.n	810538a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8105378:	687b      	ldr	r3, [r7, #4]
 810537a:	2200      	movs	r2, #0
 810537c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 810537e:	687b      	ldr	r3, [r7, #4]
 8105380:	2200      	movs	r2, #0
 8105382:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8105384:	687b      	ldr	r3, [r7, #4]
 8105386:	2200      	movs	r2, #0
 8105388:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 810538a:	687b      	ldr	r3, [r7, #4]
 810538c:	2200      	movs	r2, #0
 810538e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8105390:	687b      	ldr	r3, [r7, #4]
 8105392:	2201      	movs	r2, #1
 8105394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8105398:	2300      	movs	r3, #0
}
 810539a:	4618      	mov	r0, r3
 810539c:	3718      	adds	r7, #24
 810539e:	46bd      	mov	sp, r7
 81053a0:	bd80      	pop	{r7, pc}
 81053a2:	bf00      	nop
 81053a4:	a7fdabf8 	.word	0xa7fdabf8
 81053a8:	cccccccd 	.word	0xcccccccd
 81053ac:	40020010 	.word	0x40020010
 81053b0:	40020028 	.word	0x40020028
 81053b4:	40020040 	.word	0x40020040
 81053b8:	40020058 	.word	0x40020058
 81053bc:	40020070 	.word	0x40020070
 81053c0:	40020088 	.word	0x40020088
 81053c4:	400200a0 	.word	0x400200a0
 81053c8:	400200b8 	.word	0x400200b8
 81053cc:	40020410 	.word	0x40020410
 81053d0:	40020428 	.word	0x40020428
 81053d4:	40020440 	.word	0x40020440
 81053d8:	40020458 	.word	0x40020458
 81053dc:	40020470 	.word	0x40020470
 81053e0:	40020488 	.word	0x40020488
 81053e4:	400204a0 	.word	0x400204a0
 81053e8:	400204b8 	.word	0x400204b8
 81053ec:	58025408 	.word	0x58025408
 81053f0:	5802541c 	.word	0x5802541c
 81053f4:	58025430 	.word	0x58025430
 81053f8:	58025444 	.word	0x58025444
 81053fc:	58025458 	.word	0x58025458
 8105400:	5802546c 	.word	0x5802546c
 8105404:	58025480 	.word	0x58025480
 8105408:	58025494 	.word	0x58025494

0810540c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 810540c:	b580      	push	{r7, lr}
 810540e:	b086      	sub	sp, #24
 8105410:	af00      	add	r7, sp, #0
 8105412:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8105414:	f7ff fb70 	bl	8104af8 <HAL_GetTick>
 8105418:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810541a:	687b      	ldr	r3, [r7, #4]
 810541c:	2b00      	cmp	r3, #0
 810541e:	d101      	bne.n	8105424 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8105420:	2301      	movs	r3, #1
 8105422:	e2dc      	b.n	81059de <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8105424:	687b      	ldr	r3, [r7, #4]
 8105426:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810542a:	b2db      	uxtb	r3, r3
 810542c:	2b02      	cmp	r3, #2
 810542e:	d008      	beq.n	8105442 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8105430:	687b      	ldr	r3, [r7, #4]
 8105432:	2280      	movs	r2, #128	; 0x80
 8105434:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8105436:	687b      	ldr	r3, [r7, #4]
 8105438:	2200      	movs	r2, #0
 810543a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 810543e:	2301      	movs	r3, #1
 8105440:	e2cd      	b.n	81059de <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105442:	687b      	ldr	r3, [r7, #4]
 8105444:	681b      	ldr	r3, [r3, #0]
 8105446:	4a76      	ldr	r2, [pc, #472]	; (8105620 <HAL_DMA_Abort+0x214>)
 8105448:	4293      	cmp	r3, r2
 810544a:	d04a      	beq.n	81054e2 <HAL_DMA_Abort+0xd6>
 810544c:	687b      	ldr	r3, [r7, #4]
 810544e:	681b      	ldr	r3, [r3, #0]
 8105450:	4a74      	ldr	r2, [pc, #464]	; (8105624 <HAL_DMA_Abort+0x218>)
 8105452:	4293      	cmp	r3, r2
 8105454:	d045      	beq.n	81054e2 <HAL_DMA_Abort+0xd6>
 8105456:	687b      	ldr	r3, [r7, #4]
 8105458:	681b      	ldr	r3, [r3, #0]
 810545a:	4a73      	ldr	r2, [pc, #460]	; (8105628 <HAL_DMA_Abort+0x21c>)
 810545c:	4293      	cmp	r3, r2
 810545e:	d040      	beq.n	81054e2 <HAL_DMA_Abort+0xd6>
 8105460:	687b      	ldr	r3, [r7, #4]
 8105462:	681b      	ldr	r3, [r3, #0]
 8105464:	4a71      	ldr	r2, [pc, #452]	; (810562c <HAL_DMA_Abort+0x220>)
 8105466:	4293      	cmp	r3, r2
 8105468:	d03b      	beq.n	81054e2 <HAL_DMA_Abort+0xd6>
 810546a:	687b      	ldr	r3, [r7, #4]
 810546c:	681b      	ldr	r3, [r3, #0]
 810546e:	4a70      	ldr	r2, [pc, #448]	; (8105630 <HAL_DMA_Abort+0x224>)
 8105470:	4293      	cmp	r3, r2
 8105472:	d036      	beq.n	81054e2 <HAL_DMA_Abort+0xd6>
 8105474:	687b      	ldr	r3, [r7, #4]
 8105476:	681b      	ldr	r3, [r3, #0]
 8105478:	4a6e      	ldr	r2, [pc, #440]	; (8105634 <HAL_DMA_Abort+0x228>)
 810547a:	4293      	cmp	r3, r2
 810547c:	d031      	beq.n	81054e2 <HAL_DMA_Abort+0xd6>
 810547e:	687b      	ldr	r3, [r7, #4]
 8105480:	681b      	ldr	r3, [r3, #0]
 8105482:	4a6d      	ldr	r2, [pc, #436]	; (8105638 <HAL_DMA_Abort+0x22c>)
 8105484:	4293      	cmp	r3, r2
 8105486:	d02c      	beq.n	81054e2 <HAL_DMA_Abort+0xd6>
 8105488:	687b      	ldr	r3, [r7, #4]
 810548a:	681b      	ldr	r3, [r3, #0]
 810548c:	4a6b      	ldr	r2, [pc, #428]	; (810563c <HAL_DMA_Abort+0x230>)
 810548e:	4293      	cmp	r3, r2
 8105490:	d027      	beq.n	81054e2 <HAL_DMA_Abort+0xd6>
 8105492:	687b      	ldr	r3, [r7, #4]
 8105494:	681b      	ldr	r3, [r3, #0]
 8105496:	4a6a      	ldr	r2, [pc, #424]	; (8105640 <HAL_DMA_Abort+0x234>)
 8105498:	4293      	cmp	r3, r2
 810549a:	d022      	beq.n	81054e2 <HAL_DMA_Abort+0xd6>
 810549c:	687b      	ldr	r3, [r7, #4]
 810549e:	681b      	ldr	r3, [r3, #0]
 81054a0:	4a68      	ldr	r2, [pc, #416]	; (8105644 <HAL_DMA_Abort+0x238>)
 81054a2:	4293      	cmp	r3, r2
 81054a4:	d01d      	beq.n	81054e2 <HAL_DMA_Abort+0xd6>
 81054a6:	687b      	ldr	r3, [r7, #4]
 81054a8:	681b      	ldr	r3, [r3, #0]
 81054aa:	4a67      	ldr	r2, [pc, #412]	; (8105648 <HAL_DMA_Abort+0x23c>)
 81054ac:	4293      	cmp	r3, r2
 81054ae:	d018      	beq.n	81054e2 <HAL_DMA_Abort+0xd6>
 81054b0:	687b      	ldr	r3, [r7, #4]
 81054b2:	681b      	ldr	r3, [r3, #0]
 81054b4:	4a65      	ldr	r2, [pc, #404]	; (810564c <HAL_DMA_Abort+0x240>)
 81054b6:	4293      	cmp	r3, r2
 81054b8:	d013      	beq.n	81054e2 <HAL_DMA_Abort+0xd6>
 81054ba:	687b      	ldr	r3, [r7, #4]
 81054bc:	681b      	ldr	r3, [r3, #0]
 81054be:	4a64      	ldr	r2, [pc, #400]	; (8105650 <HAL_DMA_Abort+0x244>)
 81054c0:	4293      	cmp	r3, r2
 81054c2:	d00e      	beq.n	81054e2 <HAL_DMA_Abort+0xd6>
 81054c4:	687b      	ldr	r3, [r7, #4]
 81054c6:	681b      	ldr	r3, [r3, #0]
 81054c8:	4a62      	ldr	r2, [pc, #392]	; (8105654 <HAL_DMA_Abort+0x248>)
 81054ca:	4293      	cmp	r3, r2
 81054cc:	d009      	beq.n	81054e2 <HAL_DMA_Abort+0xd6>
 81054ce:	687b      	ldr	r3, [r7, #4]
 81054d0:	681b      	ldr	r3, [r3, #0]
 81054d2:	4a61      	ldr	r2, [pc, #388]	; (8105658 <HAL_DMA_Abort+0x24c>)
 81054d4:	4293      	cmp	r3, r2
 81054d6:	d004      	beq.n	81054e2 <HAL_DMA_Abort+0xd6>
 81054d8:	687b      	ldr	r3, [r7, #4]
 81054da:	681b      	ldr	r3, [r3, #0]
 81054dc:	4a5f      	ldr	r2, [pc, #380]	; (810565c <HAL_DMA_Abort+0x250>)
 81054de:	4293      	cmp	r3, r2
 81054e0:	d101      	bne.n	81054e6 <HAL_DMA_Abort+0xda>
 81054e2:	2301      	movs	r3, #1
 81054e4:	e000      	b.n	81054e8 <HAL_DMA_Abort+0xdc>
 81054e6:	2300      	movs	r3, #0
 81054e8:	2b00      	cmp	r3, #0
 81054ea:	d013      	beq.n	8105514 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 81054ec:	687b      	ldr	r3, [r7, #4]
 81054ee:	681b      	ldr	r3, [r3, #0]
 81054f0:	681a      	ldr	r2, [r3, #0]
 81054f2:	687b      	ldr	r3, [r7, #4]
 81054f4:	681b      	ldr	r3, [r3, #0]
 81054f6:	f022 021e 	bic.w	r2, r2, #30
 81054fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81054fc:	687b      	ldr	r3, [r7, #4]
 81054fe:	681b      	ldr	r3, [r3, #0]
 8105500:	695a      	ldr	r2, [r3, #20]
 8105502:	687b      	ldr	r3, [r7, #4]
 8105504:	681b      	ldr	r3, [r3, #0]
 8105506:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810550a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 810550c:	687b      	ldr	r3, [r7, #4]
 810550e:	681b      	ldr	r3, [r3, #0]
 8105510:	617b      	str	r3, [r7, #20]
 8105512:	e00a      	b.n	810552a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8105514:	687b      	ldr	r3, [r7, #4]
 8105516:	681b      	ldr	r3, [r3, #0]
 8105518:	681a      	ldr	r2, [r3, #0]
 810551a:	687b      	ldr	r3, [r7, #4]
 810551c:	681b      	ldr	r3, [r3, #0]
 810551e:	f022 020e 	bic.w	r2, r2, #14
 8105522:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8105524:	687b      	ldr	r3, [r7, #4]
 8105526:	681b      	ldr	r3, [r3, #0]
 8105528:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810552a:	687b      	ldr	r3, [r7, #4]
 810552c:	681b      	ldr	r3, [r3, #0]
 810552e:	4a3c      	ldr	r2, [pc, #240]	; (8105620 <HAL_DMA_Abort+0x214>)
 8105530:	4293      	cmp	r3, r2
 8105532:	d072      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 8105534:	687b      	ldr	r3, [r7, #4]
 8105536:	681b      	ldr	r3, [r3, #0]
 8105538:	4a3a      	ldr	r2, [pc, #232]	; (8105624 <HAL_DMA_Abort+0x218>)
 810553a:	4293      	cmp	r3, r2
 810553c:	d06d      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 810553e:	687b      	ldr	r3, [r7, #4]
 8105540:	681b      	ldr	r3, [r3, #0]
 8105542:	4a39      	ldr	r2, [pc, #228]	; (8105628 <HAL_DMA_Abort+0x21c>)
 8105544:	4293      	cmp	r3, r2
 8105546:	d068      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 8105548:	687b      	ldr	r3, [r7, #4]
 810554a:	681b      	ldr	r3, [r3, #0]
 810554c:	4a37      	ldr	r2, [pc, #220]	; (810562c <HAL_DMA_Abort+0x220>)
 810554e:	4293      	cmp	r3, r2
 8105550:	d063      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 8105552:	687b      	ldr	r3, [r7, #4]
 8105554:	681b      	ldr	r3, [r3, #0]
 8105556:	4a36      	ldr	r2, [pc, #216]	; (8105630 <HAL_DMA_Abort+0x224>)
 8105558:	4293      	cmp	r3, r2
 810555a:	d05e      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 810555c:	687b      	ldr	r3, [r7, #4]
 810555e:	681b      	ldr	r3, [r3, #0]
 8105560:	4a34      	ldr	r2, [pc, #208]	; (8105634 <HAL_DMA_Abort+0x228>)
 8105562:	4293      	cmp	r3, r2
 8105564:	d059      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 8105566:	687b      	ldr	r3, [r7, #4]
 8105568:	681b      	ldr	r3, [r3, #0]
 810556a:	4a33      	ldr	r2, [pc, #204]	; (8105638 <HAL_DMA_Abort+0x22c>)
 810556c:	4293      	cmp	r3, r2
 810556e:	d054      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 8105570:	687b      	ldr	r3, [r7, #4]
 8105572:	681b      	ldr	r3, [r3, #0]
 8105574:	4a31      	ldr	r2, [pc, #196]	; (810563c <HAL_DMA_Abort+0x230>)
 8105576:	4293      	cmp	r3, r2
 8105578:	d04f      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 810557a:	687b      	ldr	r3, [r7, #4]
 810557c:	681b      	ldr	r3, [r3, #0]
 810557e:	4a30      	ldr	r2, [pc, #192]	; (8105640 <HAL_DMA_Abort+0x234>)
 8105580:	4293      	cmp	r3, r2
 8105582:	d04a      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 8105584:	687b      	ldr	r3, [r7, #4]
 8105586:	681b      	ldr	r3, [r3, #0]
 8105588:	4a2e      	ldr	r2, [pc, #184]	; (8105644 <HAL_DMA_Abort+0x238>)
 810558a:	4293      	cmp	r3, r2
 810558c:	d045      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	681b      	ldr	r3, [r3, #0]
 8105592:	4a2d      	ldr	r2, [pc, #180]	; (8105648 <HAL_DMA_Abort+0x23c>)
 8105594:	4293      	cmp	r3, r2
 8105596:	d040      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	681b      	ldr	r3, [r3, #0]
 810559c:	4a2b      	ldr	r2, [pc, #172]	; (810564c <HAL_DMA_Abort+0x240>)
 810559e:	4293      	cmp	r3, r2
 81055a0:	d03b      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 81055a2:	687b      	ldr	r3, [r7, #4]
 81055a4:	681b      	ldr	r3, [r3, #0]
 81055a6:	4a2a      	ldr	r2, [pc, #168]	; (8105650 <HAL_DMA_Abort+0x244>)
 81055a8:	4293      	cmp	r3, r2
 81055aa:	d036      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 81055ac:	687b      	ldr	r3, [r7, #4]
 81055ae:	681b      	ldr	r3, [r3, #0]
 81055b0:	4a28      	ldr	r2, [pc, #160]	; (8105654 <HAL_DMA_Abort+0x248>)
 81055b2:	4293      	cmp	r3, r2
 81055b4:	d031      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 81055b6:	687b      	ldr	r3, [r7, #4]
 81055b8:	681b      	ldr	r3, [r3, #0]
 81055ba:	4a27      	ldr	r2, [pc, #156]	; (8105658 <HAL_DMA_Abort+0x24c>)
 81055bc:	4293      	cmp	r3, r2
 81055be:	d02c      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 81055c0:	687b      	ldr	r3, [r7, #4]
 81055c2:	681b      	ldr	r3, [r3, #0]
 81055c4:	4a25      	ldr	r2, [pc, #148]	; (810565c <HAL_DMA_Abort+0x250>)
 81055c6:	4293      	cmp	r3, r2
 81055c8:	d027      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 81055ca:	687b      	ldr	r3, [r7, #4]
 81055cc:	681b      	ldr	r3, [r3, #0]
 81055ce:	4a24      	ldr	r2, [pc, #144]	; (8105660 <HAL_DMA_Abort+0x254>)
 81055d0:	4293      	cmp	r3, r2
 81055d2:	d022      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 81055d4:	687b      	ldr	r3, [r7, #4]
 81055d6:	681b      	ldr	r3, [r3, #0]
 81055d8:	4a22      	ldr	r2, [pc, #136]	; (8105664 <HAL_DMA_Abort+0x258>)
 81055da:	4293      	cmp	r3, r2
 81055dc:	d01d      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 81055de:	687b      	ldr	r3, [r7, #4]
 81055e0:	681b      	ldr	r3, [r3, #0]
 81055e2:	4a21      	ldr	r2, [pc, #132]	; (8105668 <HAL_DMA_Abort+0x25c>)
 81055e4:	4293      	cmp	r3, r2
 81055e6:	d018      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 81055e8:	687b      	ldr	r3, [r7, #4]
 81055ea:	681b      	ldr	r3, [r3, #0]
 81055ec:	4a1f      	ldr	r2, [pc, #124]	; (810566c <HAL_DMA_Abort+0x260>)
 81055ee:	4293      	cmp	r3, r2
 81055f0:	d013      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 81055f2:	687b      	ldr	r3, [r7, #4]
 81055f4:	681b      	ldr	r3, [r3, #0]
 81055f6:	4a1e      	ldr	r2, [pc, #120]	; (8105670 <HAL_DMA_Abort+0x264>)
 81055f8:	4293      	cmp	r3, r2
 81055fa:	d00e      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 81055fc:	687b      	ldr	r3, [r7, #4]
 81055fe:	681b      	ldr	r3, [r3, #0]
 8105600:	4a1c      	ldr	r2, [pc, #112]	; (8105674 <HAL_DMA_Abort+0x268>)
 8105602:	4293      	cmp	r3, r2
 8105604:	d009      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	681b      	ldr	r3, [r3, #0]
 810560a:	4a1b      	ldr	r2, [pc, #108]	; (8105678 <HAL_DMA_Abort+0x26c>)
 810560c:	4293      	cmp	r3, r2
 810560e:	d004      	beq.n	810561a <HAL_DMA_Abort+0x20e>
 8105610:	687b      	ldr	r3, [r7, #4]
 8105612:	681b      	ldr	r3, [r3, #0]
 8105614:	4a19      	ldr	r2, [pc, #100]	; (810567c <HAL_DMA_Abort+0x270>)
 8105616:	4293      	cmp	r3, r2
 8105618:	d132      	bne.n	8105680 <HAL_DMA_Abort+0x274>
 810561a:	2301      	movs	r3, #1
 810561c:	e031      	b.n	8105682 <HAL_DMA_Abort+0x276>
 810561e:	bf00      	nop
 8105620:	40020010 	.word	0x40020010
 8105624:	40020028 	.word	0x40020028
 8105628:	40020040 	.word	0x40020040
 810562c:	40020058 	.word	0x40020058
 8105630:	40020070 	.word	0x40020070
 8105634:	40020088 	.word	0x40020088
 8105638:	400200a0 	.word	0x400200a0
 810563c:	400200b8 	.word	0x400200b8
 8105640:	40020410 	.word	0x40020410
 8105644:	40020428 	.word	0x40020428
 8105648:	40020440 	.word	0x40020440
 810564c:	40020458 	.word	0x40020458
 8105650:	40020470 	.word	0x40020470
 8105654:	40020488 	.word	0x40020488
 8105658:	400204a0 	.word	0x400204a0
 810565c:	400204b8 	.word	0x400204b8
 8105660:	58025408 	.word	0x58025408
 8105664:	5802541c 	.word	0x5802541c
 8105668:	58025430 	.word	0x58025430
 810566c:	58025444 	.word	0x58025444
 8105670:	58025458 	.word	0x58025458
 8105674:	5802546c 	.word	0x5802546c
 8105678:	58025480 	.word	0x58025480
 810567c:	58025494 	.word	0x58025494
 8105680:	2300      	movs	r3, #0
 8105682:	2b00      	cmp	r3, #0
 8105684:	d007      	beq.n	8105696 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8105686:	687b      	ldr	r3, [r7, #4]
 8105688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810568a:	681a      	ldr	r2, [r3, #0]
 810568c:	687b      	ldr	r3, [r7, #4]
 810568e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8105694:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8105696:	687b      	ldr	r3, [r7, #4]
 8105698:	681b      	ldr	r3, [r3, #0]
 810569a:	4a6d      	ldr	r2, [pc, #436]	; (8105850 <HAL_DMA_Abort+0x444>)
 810569c:	4293      	cmp	r3, r2
 810569e:	d04a      	beq.n	8105736 <HAL_DMA_Abort+0x32a>
 81056a0:	687b      	ldr	r3, [r7, #4]
 81056a2:	681b      	ldr	r3, [r3, #0]
 81056a4:	4a6b      	ldr	r2, [pc, #428]	; (8105854 <HAL_DMA_Abort+0x448>)
 81056a6:	4293      	cmp	r3, r2
 81056a8:	d045      	beq.n	8105736 <HAL_DMA_Abort+0x32a>
 81056aa:	687b      	ldr	r3, [r7, #4]
 81056ac:	681b      	ldr	r3, [r3, #0]
 81056ae:	4a6a      	ldr	r2, [pc, #424]	; (8105858 <HAL_DMA_Abort+0x44c>)
 81056b0:	4293      	cmp	r3, r2
 81056b2:	d040      	beq.n	8105736 <HAL_DMA_Abort+0x32a>
 81056b4:	687b      	ldr	r3, [r7, #4]
 81056b6:	681b      	ldr	r3, [r3, #0]
 81056b8:	4a68      	ldr	r2, [pc, #416]	; (810585c <HAL_DMA_Abort+0x450>)
 81056ba:	4293      	cmp	r3, r2
 81056bc:	d03b      	beq.n	8105736 <HAL_DMA_Abort+0x32a>
 81056be:	687b      	ldr	r3, [r7, #4]
 81056c0:	681b      	ldr	r3, [r3, #0]
 81056c2:	4a67      	ldr	r2, [pc, #412]	; (8105860 <HAL_DMA_Abort+0x454>)
 81056c4:	4293      	cmp	r3, r2
 81056c6:	d036      	beq.n	8105736 <HAL_DMA_Abort+0x32a>
 81056c8:	687b      	ldr	r3, [r7, #4]
 81056ca:	681b      	ldr	r3, [r3, #0]
 81056cc:	4a65      	ldr	r2, [pc, #404]	; (8105864 <HAL_DMA_Abort+0x458>)
 81056ce:	4293      	cmp	r3, r2
 81056d0:	d031      	beq.n	8105736 <HAL_DMA_Abort+0x32a>
 81056d2:	687b      	ldr	r3, [r7, #4]
 81056d4:	681b      	ldr	r3, [r3, #0]
 81056d6:	4a64      	ldr	r2, [pc, #400]	; (8105868 <HAL_DMA_Abort+0x45c>)
 81056d8:	4293      	cmp	r3, r2
 81056da:	d02c      	beq.n	8105736 <HAL_DMA_Abort+0x32a>
 81056dc:	687b      	ldr	r3, [r7, #4]
 81056de:	681b      	ldr	r3, [r3, #0]
 81056e0:	4a62      	ldr	r2, [pc, #392]	; (810586c <HAL_DMA_Abort+0x460>)
 81056e2:	4293      	cmp	r3, r2
 81056e4:	d027      	beq.n	8105736 <HAL_DMA_Abort+0x32a>
 81056e6:	687b      	ldr	r3, [r7, #4]
 81056e8:	681b      	ldr	r3, [r3, #0]
 81056ea:	4a61      	ldr	r2, [pc, #388]	; (8105870 <HAL_DMA_Abort+0x464>)
 81056ec:	4293      	cmp	r3, r2
 81056ee:	d022      	beq.n	8105736 <HAL_DMA_Abort+0x32a>
 81056f0:	687b      	ldr	r3, [r7, #4]
 81056f2:	681b      	ldr	r3, [r3, #0]
 81056f4:	4a5f      	ldr	r2, [pc, #380]	; (8105874 <HAL_DMA_Abort+0x468>)
 81056f6:	4293      	cmp	r3, r2
 81056f8:	d01d      	beq.n	8105736 <HAL_DMA_Abort+0x32a>
 81056fa:	687b      	ldr	r3, [r7, #4]
 81056fc:	681b      	ldr	r3, [r3, #0]
 81056fe:	4a5e      	ldr	r2, [pc, #376]	; (8105878 <HAL_DMA_Abort+0x46c>)
 8105700:	4293      	cmp	r3, r2
 8105702:	d018      	beq.n	8105736 <HAL_DMA_Abort+0x32a>
 8105704:	687b      	ldr	r3, [r7, #4]
 8105706:	681b      	ldr	r3, [r3, #0]
 8105708:	4a5c      	ldr	r2, [pc, #368]	; (810587c <HAL_DMA_Abort+0x470>)
 810570a:	4293      	cmp	r3, r2
 810570c:	d013      	beq.n	8105736 <HAL_DMA_Abort+0x32a>
 810570e:	687b      	ldr	r3, [r7, #4]
 8105710:	681b      	ldr	r3, [r3, #0]
 8105712:	4a5b      	ldr	r2, [pc, #364]	; (8105880 <HAL_DMA_Abort+0x474>)
 8105714:	4293      	cmp	r3, r2
 8105716:	d00e      	beq.n	8105736 <HAL_DMA_Abort+0x32a>
 8105718:	687b      	ldr	r3, [r7, #4]
 810571a:	681b      	ldr	r3, [r3, #0]
 810571c:	4a59      	ldr	r2, [pc, #356]	; (8105884 <HAL_DMA_Abort+0x478>)
 810571e:	4293      	cmp	r3, r2
 8105720:	d009      	beq.n	8105736 <HAL_DMA_Abort+0x32a>
 8105722:	687b      	ldr	r3, [r7, #4]
 8105724:	681b      	ldr	r3, [r3, #0]
 8105726:	4a58      	ldr	r2, [pc, #352]	; (8105888 <HAL_DMA_Abort+0x47c>)
 8105728:	4293      	cmp	r3, r2
 810572a:	d004      	beq.n	8105736 <HAL_DMA_Abort+0x32a>
 810572c:	687b      	ldr	r3, [r7, #4]
 810572e:	681b      	ldr	r3, [r3, #0]
 8105730:	4a56      	ldr	r2, [pc, #344]	; (810588c <HAL_DMA_Abort+0x480>)
 8105732:	4293      	cmp	r3, r2
 8105734:	d108      	bne.n	8105748 <HAL_DMA_Abort+0x33c>
 8105736:	687b      	ldr	r3, [r7, #4]
 8105738:	681b      	ldr	r3, [r3, #0]
 810573a:	681a      	ldr	r2, [r3, #0]
 810573c:	687b      	ldr	r3, [r7, #4]
 810573e:	681b      	ldr	r3, [r3, #0]
 8105740:	f022 0201 	bic.w	r2, r2, #1
 8105744:	601a      	str	r2, [r3, #0]
 8105746:	e007      	b.n	8105758 <HAL_DMA_Abort+0x34c>
 8105748:	687b      	ldr	r3, [r7, #4]
 810574a:	681b      	ldr	r3, [r3, #0]
 810574c:	681a      	ldr	r2, [r3, #0]
 810574e:	687b      	ldr	r3, [r7, #4]
 8105750:	681b      	ldr	r3, [r3, #0]
 8105752:	f022 0201 	bic.w	r2, r2, #1
 8105756:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8105758:	e013      	b.n	8105782 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 810575a:	f7ff f9cd 	bl	8104af8 <HAL_GetTick>
 810575e:	4602      	mov	r2, r0
 8105760:	693b      	ldr	r3, [r7, #16]
 8105762:	1ad3      	subs	r3, r2, r3
 8105764:	2b05      	cmp	r3, #5
 8105766:	d90c      	bls.n	8105782 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8105768:	687b      	ldr	r3, [r7, #4]
 810576a:	2220      	movs	r2, #32
 810576c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 810576e:	687b      	ldr	r3, [r7, #4]
 8105770:	2203      	movs	r2, #3
 8105772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8105776:	687b      	ldr	r3, [r7, #4]
 8105778:	2200      	movs	r2, #0
 810577a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 810577e:	2301      	movs	r3, #1
 8105780:	e12d      	b.n	81059de <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8105782:	697b      	ldr	r3, [r7, #20]
 8105784:	681b      	ldr	r3, [r3, #0]
 8105786:	f003 0301 	and.w	r3, r3, #1
 810578a:	2b00      	cmp	r3, #0
 810578c:	d1e5      	bne.n	810575a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810578e:	687b      	ldr	r3, [r7, #4]
 8105790:	681b      	ldr	r3, [r3, #0]
 8105792:	4a2f      	ldr	r2, [pc, #188]	; (8105850 <HAL_DMA_Abort+0x444>)
 8105794:	4293      	cmp	r3, r2
 8105796:	d04a      	beq.n	810582e <HAL_DMA_Abort+0x422>
 8105798:	687b      	ldr	r3, [r7, #4]
 810579a:	681b      	ldr	r3, [r3, #0]
 810579c:	4a2d      	ldr	r2, [pc, #180]	; (8105854 <HAL_DMA_Abort+0x448>)
 810579e:	4293      	cmp	r3, r2
 81057a0:	d045      	beq.n	810582e <HAL_DMA_Abort+0x422>
 81057a2:	687b      	ldr	r3, [r7, #4]
 81057a4:	681b      	ldr	r3, [r3, #0]
 81057a6:	4a2c      	ldr	r2, [pc, #176]	; (8105858 <HAL_DMA_Abort+0x44c>)
 81057a8:	4293      	cmp	r3, r2
 81057aa:	d040      	beq.n	810582e <HAL_DMA_Abort+0x422>
 81057ac:	687b      	ldr	r3, [r7, #4]
 81057ae:	681b      	ldr	r3, [r3, #0]
 81057b0:	4a2a      	ldr	r2, [pc, #168]	; (810585c <HAL_DMA_Abort+0x450>)
 81057b2:	4293      	cmp	r3, r2
 81057b4:	d03b      	beq.n	810582e <HAL_DMA_Abort+0x422>
 81057b6:	687b      	ldr	r3, [r7, #4]
 81057b8:	681b      	ldr	r3, [r3, #0]
 81057ba:	4a29      	ldr	r2, [pc, #164]	; (8105860 <HAL_DMA_Abort+0x454>)
 81057bc:	4293      	cmp	r3, r2
 81057be:	d036      	beq.n	810582e <HAL_DMA_Abort+0x422>
 81057c0:	687b      	ldr	r3, [r7, #4]
 81057c2:	681b      	ldr	r3, [r3, #0]
 81057c4:	4a27      	ldr	r2, [pc, #156]	; (8105864 <HAL_DMA_Abort+0x458>)
 81057c6:	4293      	cmp	r3, r2
 81057c8:	d031      	beq.n	810582e <HAL_DMA_Abort+0x422>
 81057ca:	687b      	ldr	r3, [r7, #4]
 81057cc:	681b      	ldr	r3, [r3, #0]
 81057ce:	4a26      	ldr	r2, [pc, #152]	; (8105868 <HAL_DMA_Abort+0x45c>)
 81057d0:	4293      	cmp	r3, r2
 81057d2:	d02c      	beq.n	810582e <HAL_DMA_Abort+0x422>
 81057d4:	687b      	ldr	r3, [r7, #4]
 81057d6:	681b      	ldr	r3, [r3, #0]
 81057d8:	4a24      	ldr	r2, [pc, #144]	; (810586c <HAL_DMA_Abort+0x460>)
 81057da:	4293      	cmp	r3, r2
 81057dc:	d027      	beq.n	810582e <HAL_DMA_Abort+0x422>
 81057de:	687b      	ldr	r3, [r7, #4]
 81057e0:	681b      	ldr	r3, [r3, #0]
 81057e2:	4a23      	ldr	r2, [pc, #140]	; (8105870 <HAL_DMA_Abort+0x464>)
 81057e4:	4293      	cmp	r3, r2
 81057e6:	d022      	beq.n	810582e <HAL_DMA_Abort+0x422>
 81057e8:	687b      	ldr	r3, [r7, #4]
 81057ea:	681b      	ldr	r3, [r3, #0]
 81057ec:	4a21      	ldr	r2, [pc, #132]	; (8105874 <HAL_DMA_Abort+0x468>)
 81057ee:	4293      	cmp	r3, r2
 81057f0:	d01d      	beq.n	810582e <HAL_DMA_Abort+0x422>
 81057f2:	687b      	ldr	r3, [r7, #4]
 81057f4:	681b      	ldr	r3, [r3, #0]
 81057f6:	4a20      	ldr	r2, [pc, #128]	; (8105878 <HAL_DMA_Abort+0x46c>)
 81057f8:	4293      	cmp	r3, r2
 81057fa:	d018      	beq.n	810582e <HAL_DMA_Abort+0x422>
 81057fc:	687b      	ldr	r3, [r7, #4]
 81057fe:	681b      	ldr	r3, [r3, #0]
 8105800:	4a1e      	ldr	r2, [pc, #120]	; (810587c <HAL_DMA_Abort+0x470>)
 8105802:	4293      	cmp	r3, r2
 8105804:	d013      	beq.n	810582e <HAL_DMA_Abort+0x422>
 8105806:	687b      	ldr	r3, [r7, #4]
 8105808:	681b      	ldr	r3, [r3, #0]
 810580a:	4a1d      	ldr	r2, [pc, #116]	; (8105880 <HAL_DMA_Abort+0x474>)
 810580c:	4293      	cmp	r3, r2
 810580e:	d00e      	beq.n	810582e <HAL_DMA_Abort+0x422>
 8105810:	687b      	ldr	r3, [r7, #4]
 8105812:	681b      	ldr	r3, [r3, #0]
 8105814:	4a1b      	ldr	r2, [pc, #108]	; (8105884 <HAL_DMA_Abort+0x478>)
 8105816:	4293      	cmp	r3, r2
 8105818:	d009      	beq.n	810582e <HAL_DMA_Abort+0x422>
 810581a:	687b      	ldr	r3, [r7, #4]
 810581c:	681b      	ldr	r3, [r3, #0]
 810581e:	4a1a      	ldr	r2, [pc, #104]	; (8105888 <HAL_DMA_Abort+0x47c>)
 8105820:	4293      	cmp	r3, r2
 8105822:	d004      	beq.n	810582e <HAL_DMA_Abort+0x422>
 8105824:	687b      	ldr	r3, [r7, #4]
 8105826:	681b      	ldr	r3, [r3, #0]
 8105828:	4a18      	ldr	r2, [pc, #96]	; (810588c <HAL_DMA_Abort+0x480>)
 810582a:	4293      	cmp	r3, r2
 810582c:	d101      	bne.n	8105832 <HAL_DMA_Abort+0x426>
 810582e:	2301      	movs	r3, #1
 8105830:	e000      	b.n	8105834 <HAL_DMA_Abort+0x428>
 8105832:	2300      	movs	r3, #0
 8105834:	2b00      	cmp	r3, #0
 8105836:	d02b      	beq.n	8105890 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8105838:	687b      	ldr	r3, [r7, #4]
 810583a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810583c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810583e:	687b      	ldr	r3, [r7, #4]
 8105840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105842:	f003 031f 	and.w	r3, r3, #31
 8105846:	223f      	movs	r2, #63	; 0x3f
 8105848:	409a      	lsls	r2, r3
 810584a:	68bb      	ldr	r3, [r7, #8]
 810584c:	609a      	str	r2, [r3, #8]
 810584e:	e02a      	b.n	81058a6 <HAL_DMA_Abort+0x49a>
 8105850:	40020010 	.word	0x40020010
 8105854:	40020028 	.word	0x40020028
 8105858:	40020040 	.word	0x40020040
 810585c:	40020058 	.word	0x40020058
 8105860:	40020070 	.word	0x40020070
 8105864:	40020088 	.word	0x40020088
 8105868:	400200a0 	.word	0x400200a0
 810586c:	400200b8 	.word	0x400200b8
 8105870:	40020410 	.word	0x40020410
 8105874:	40020428 	.word	0x40020428
 8105878:	40020440 	.word	0x40020440
 810587c:	40020458 	.word	0x40020458
 8105880:	40020470 	.word	0x40020470
 8105884:	40020488 	.word	0x40020488
 8105888:	400204a0 	.word	0x400204a0
 810588c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105890:	687b      	ldr	r3, [r7, #4]
 8105892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105894:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8105896:	687b      	ldr	r3, [r7, #4]
 8105898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810589a:	f003 031f 	and.w	r3, r3, #31
 810589e:	2201      	movs	r2, #1
 81058a0:	409a      	lsls	r2, r3
 81058a2:	68fb      	ldr	r3, [r7, #12]
 81058a4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81058a6:	687b      	ldr	r3, [r7, #4]
 81058a8:	681b      	ldr	r3, [r3, #0]
 81058aa:	4a4f      	ldr	r2, [pc, #316]	; (81059e8 <HAL_DMA_Abort+0x5dc>)
 81058ac:	4293      	cmp	r3, r2
 81058ae:	d072      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 81058b0:	687b      	ldr	r3, [r7, #4]
 81058b2:	681b      	ldr	r3, [r3, #0]
 81058b4:	4a4d      	ldr	r2, [pc, #308]	; (81059ec <HAL_DMA_Abort+0x5e0>)
 81058b6:	4293      	cmp	r3, r2
 81058b8:	d06d      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 81058ba:	687b      	ldr	r3, [r7, #4]
 81058bc:	681b      	ldr	r3, [r3, #0]
 81058be:	4a4c      	ldr	r2, [pc, #304]	; (81059f0 <HAL_DMA_Abort+0x5e4>)
 81058c0:	4293      	cmp	r3, r2
 81058c2:	d068      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 81058c4:	687b      	ldr	r3, [r7, #4]
 81058c6:	681b      	ldr	r3, [r3, #0]
 81058c8:	4a4a      	ldr	r2, [pc, #296]	; (81059f4 <HAL_DMA_Abort+0x5e8>)
 81058ca:	4293      	cmp	r3, r2
 81058cc:	d063      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 81058ce:	687b      	ldr	r3, [r7, #4]
 81058d0:	681b      	ldr	r3, [r3, #0]
 81058d2:	4a49      	ldr	r2, [pc, #292]	; (81059f8 <HAL_DMA_Abort+0x5ec>)
 81058d4:	4293      	cmp	r3, r2
 81058d6:	d05e      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 81058d8:	687b      	ldr	r3, [r7, #4]
 81058da:	681b      	ldr	r3, [r3, #0]
 81058dc:	4a47      	ldr	r2, [pc, #284]	; (81059fc <HAL_DMA_Abort+0x5f0>)
 81058de:	4293      	cmp	r3, r2
 81058e0:	d059      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 81058e2:	687b      	ldr	r3, [r7, #4]
 81058e4:	681b      	ldr	r3, [r3, #0]
 81058e6:	4a46      	ldr	r2, [pc, #280]	; (8105a00 <HAL_DMA_Abort+0x5f4>)
 81058e8:	4293      	cmp	r3, r2
 81058ea:	d054      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 81058ec:	687b      	ldr	r3, [r7, #4]
 81058ee:	681b      	ldr	r3, [r3, #0]
 81058f0:	4a44      	ldr	r2, [pc, #272]	; (8105a04 <HAL_DMA_Abort+0x5f8>)
 81058f2:	4293      	cmp	r3, r2
 81058f4:	d04f      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 81058f6:	687b      	ldr	r3, [r7, #4]
 81058f8:	681b      	ldr	r3, [r3, #0]
 81058fa:	4a43      	ldr	r2, [pc, #268]	; (8105a08 <HAL_DMA_Abort+0x5fc>)
 81058fc:	4293      	cmp	r3, r2
 81058fe:	d04a      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 8105900:	687b      	ldr	r3, [r7, #4]
 8105902:	681b      	ldr	r3, [r3, #0]
 8105904:	4a41      	ldr	r2, [pc, #260]	; (8105a0c <HAL_DMA_Abort+0x600>)
 8105906:	4293      	cmp	r3, r2
 8105908:	d045      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 810590a:	687b      	ldr	r3, [r7, #4]
 810590c:	681b      	ldr	r3, [r3, #0]
 810590e:	4a40      	ldr	r2, [pc, #256]	; (8105a10 <HAL_DMA_Abort+0x604>)
 8105910:	4293      	cmp	r3, r2
 8105912:	d040      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 8105914:	687b      	ldr	r3, [r7, #4]
 8105916:	681b      	ldr	r3, [r3, #0]
 8105918:	4a3e      	ldr	r2, [pc, #248]	; (8105a14 <HAL_DMA_Abort+0x608>)
 810591a:	4293      	cmp	r3, r2
 810591c:	d03b      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 810591e:	687b      	ldr	r3, [r7, #4]
 8105920:	681b      	ldr	r3, [r3, #0]
 8105922:	4a3d      	ldr	r2, [pc, #244]	; (8105a18 <HAL_DMA_Abort+0x60c>)
 8105924:	4293      	cmp	r3, r2
 8105926:	d036      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 8105928:	687b      	ldr	r3, [r7, #4]
 810592a:	681b      	ldr	r3, [r3, #0]
 810592c:	4a3b      	ldr	r2, [pc, #236]	; (8105a1c <HAL_DMA_Abort+0x610>)
 810592e:	4293      	cmp	r3, r2
 8105930:	d031      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 8105932:	687b      	ldr	r3, [r7, #4]
 8105934:	681b      	ldr	r3, [r3, #0]
 8105936:	4a3a      	ldr	r2, [pc, #232]	; (8105a20 <HAL_DMA_Abort+0x614>)
 8105938:	4293      	cmp	r3, r2
 810593a:	d02c      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 810593c:	687b      	ldr	r3, [r7, #4]
 810593e:	681b      	ldr	r3, [r3, #0]
 8105940:	4a38      	ldr	r2, [pc, #224]	; (8105a24 <HAL_DMA_Abort+0x618>)
 8105942:	4293      	cmp	r3, r2
 8105944:	d027      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 8105946:	687b      	ldr	r3, [r7, #4]
 8105948:	681b      	ldr	r3, [r3, #0]
 810594a:	4a37      	ldr	r2, [pc, #220]	; (8105a28 <HAL_DMA_Abort+0x61c>)
 810594c:	4293      	cmp	r3, r2
 810594e:	d022      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 8105950:	687b      	ldr	r3, [r7, #4]
 8105952:	681b      	ldr	r3, [r3, #0]
 8105954:	4a35      	ldr	r2, [pc, #212]	; (8105a2c <HAL_DMA_Abort+0x620>)
 8105956:	4293      	cmp	r3, r2
 8105958:	d01d      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 810595a:	687b      	ldr	r3, [r7, #4]
 810595c:	681b      	ldr	r3, [r3, #0]
 810595e:	4a34      	ldr	r2, [pc, #208]	; (8105a30 <HAL_DMA_Abort+0x624>)
 8105960:	4293      	cmp	r3, r2
 8105962:	d018      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 8105964:	687b      	ldr	r3, [r7, #4]
 8105966:	681b      	ldr	r3, [r3, #0]
 8105968:	4a32      	ldr	r2, [pc, #200]	; (8105a34 <HAL_DMA_Abort+0x628>)
 810596a:	4293      	cmp	r3, r2
 810596c:	d013      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 810596e:	687b      	ldr	r3, [r7, #4]
 8105970:	681b      	ldr	r3, [r3, #0]
 8105972:	4a31      	ldr	r2, [pc, #196]	; (8105a38 <HAL_DMA_Abort+0x62c>)
 8105974:	4293      	cmp	r3, r2
 8105976:	d00e      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 8105978:	687b      	ldr	r3, [r7, #4]
 810597a:	681b      	ldr	r3, [r3, #0]
 810597c:	4a2f      	ldr	r2, [pc, #188]	; (8105a3c <HAL_DMA_Abort+0x630>)
 810597e:	4293      	cmp	r3, r2
 8105980:	d009      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 8105982:	687b      	ldr	r3, [r7, #4]
 8105984:	681b      	ldr	r3, [r3, #0]
 8105986:	4a2e      	ldr	r2, [pc, #184]	; (8105a40 <HAL_DMA_Abort+0x634>)
 8105988:	4293      	cmp	r3, r2
 810598a:	d004      	beq.n	8105996 <HAL_DMA_Abort+0x58a>
 810598c:	687b      	ldr	r3, [r7, #4]
 810598e:	681b      	ldr	r3, [r3, #0]
 8105990:	4a2c      	ldr	r2, [pc, #176]	; (8105a44 <HAL_DMA_Abort+0x638>)
 8105992:	4293      	cmp	r3, r2
 8105994:	d101      	bne.n	810599a <HAL_DMA_Abort+0x58e>
 8105996:	2301      	movs	r3, #1
 8105998:	e000      	b.n	810599c <HAL_DMA_Abort+0x590>
 810599a:	2300      	movs	r3, #0
 810599c:	2b00      	cmp	r3, #0
 810599e:	d015      	beq.n	81059cc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81059a0:	687b      	ldr	r3, [r7, #4]
 81059a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81059a4:	687a      	ldr	r2, [r7, #4]
 81059a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81059a8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 81059aa:	687b      	ldr	r3, [r7, #4]
 81059ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81059ae:	2b00      	cmp	r3, #0
 81059b0:	d00c      	beq.n	81059cc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81059b2:	687b      	ldr	r3, [r7, #4]
 81059b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81059b6:	681a      	ldr	r2, [r3, #0]
 81059b8:	687b      	ldr	r3, [r7, #4]
 81059ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81059bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81059c0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81059c2:	687b      	ldr	r3, [r7, #4]
 81059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81059c6:	687a      	ldr	r2, [r7, #4]
 81059c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81059ca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 81059cc:	687b      	ldr	r3, [r7, #4]
 81059ce:	2201      	movs	r2, #1
 81059d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81059d4:	687b      	ldr	r3, [r7, #4]
 81059d6:	2200      	movs	r2, #0
 81059d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 81059dc:	2300      	movs	r3, #0
}
 81059de:	4618      	mov	r0, r3
 81059e0:	3718      	adds	r7, #24
 81059e2:	46bd      	mov	sp, r7
 81059e4:	bd80      	pop	{r7, pc}
 81059e6:	bf00      	nop
 81059e8:	40020010 	.word	0x40020010
 81059ec:	40020028 	.word	0x40020028
 81059f0:	40020040 	.word	0x40020040
 81059f4:	40020058 	.word	0x40020058
 81059f8:	40020070 	.word	0x40020070
 81059fc:	40020088 	.word	0x40020088
 8105a00:	400200a0 	.word	0x400200a0
 8105a04:	400200b8 	.word	0x400200b8
 8105a08:	40020410 	.word	0x40020410
 8105a0c:	40020428 	.word	0x40020428
 8105a10:	40020440 	.word	0x40020440
 8105a14:	40020458 	.word	0x40020458
 8105a18:	40020470 	.word	0x40020470
 8105a1c:	40020488 	.word	0x40020488
 8105a20:	400204a0 	.word	0x400204a0
 8105a24:	400204b8 	.word	0x400204b8
 8105a28:	58025408 	.word	0x58025408
 8105a2c:	5802541c 	.word	0x5802541c
 8105a30:	58025430 	.word	0x58025430
 8105a34:	58025444 	.word	0x58025444
 8105a38:	58025458 	.word	0x58025458
 8105a3c:	5802546c 	.word	0x5802546c
 8105a40:	58025480 	.word	0x58025480
 8105a44:	58025494 	.word	0x58025494

08105a48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8105a48:	b580      	push	{r7, lr}
 8105a4a:	b084      	sub	sp, #16
 8105a4c:	af00      	add	r7, sp, #0
 8105a4e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8105a50:	687b      	ldr	r3, [r7, #4]
 8105a52:	2b00      	cmp	r3, #0
 8105a54:	d101      	bne.n	8105a5a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8105a56:	2301      	movs	r3, #1
 8105a58:	e237      	b.n	8105eca <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8105a5a:	687b      	ldr	r3, [r7, #4]
 8105a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8105a60:	b2db      	uxtb	r3, r3
 8105a62:	2b02      	cmp	r3, #2
 8105a64:	d004      	beq.n	8105a70 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8105a66:	687b      	ldr	r3, [r7, #4]
 8105a68:	2280      	movs	r2, #128	; 0x80
 8105a6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8105a6c:	2301      	movs	r3, #1
 8105a6e:	e22c      	b.n	8105eca <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105a70:	687b      	ldr	r3, [r7, #4]
 8105a72:	681b      	ldr	r3, [r3, #0]
 8105a74:	4a5c      	ldr	r2, [pc, #368]	; (8105be8 <HAL_DMA_Abort_IT+0x1a0>)
 8105a76:	4293      	cmp	r3, r2
 8105a78:	d04a      	beq.n	8105b10 <HAL_DMA_Abort_IT+0xc8>
 8105a7a:	687b      	ldr	r3, [r7, #4]
 8105a7c:	681b      	ldr	r3, [r3, #0]
 8105a7e:	4a5b      	ldr	r2, [pc, #364]	; (8105bec <HAL_DMA_Abort_IT+0x1a4>)
 8105a80:	4293      	cmp	r3, r2
 8105a82:	d045      	beq.n	8105b10 <HAL_DMA_Abort_IT+0xc8>
 8105a84:	687b      	ldr	r3, [r7, #4]
 8105a86:	681b      	ldr	r3, [r3, #0]
 8105a88:	4a59      	ldr	r2, [pc, #356]	; (8105bf0 <HAL_DMA_Abort_IT+0x1a8>)
 8105a8a:	4293      	cmp	r3, r2
 8105a8c:	d040      	beq.n	8105b10 <HAL_DMA_Abort_IT+0xc8>
 8105a8e:	687b      	ldr	r3, [r7, #4]
 8105a90:	681b      	ldr	r3, [r3, #0]
 8105a92:	4a58      	ldr	r2, [pc, #352]	; (8105bf4 <HAL_DMA_Abort_IT+0x1ac>)
 8105a94:	4293      	cmp	r3, r2
 8105a96:	d03b      	beq.n	8105b10 <HAL_DMA_Abort_IT+0xc8>
 8105a98:	687b      	ldr	r3, [r7, #4]
 8105a9a:	681b      	ldr	r3, [r3, #0]
 8105a9c:	4a56      	ldr	r2, [pc, #344]	; (8105bf8 <HAL_DMA_Abort_IT+0x1b0>)
 8105a9e:	4293      	cmp	r3, r2
 8105aa0:	d036      	beq.n	8105b10 <HAL_DMA_Abort_IT+0xc8>
 8105aa2:	687b      	ldr	r3, [r7, #4]
 8105aa4:	681b      	ldr	r3, [r3, #0]
 8105aa6:	4a55      	ldr	r2, [pc, #340]	; (8105bfc <HAL_DMA_Abort_IT+0x1b4>)
 8105aa8:	4293      	cmp	r3, r2
 8105aaa:	d031      	beq.n	8105b10 <HAL_DMA_Abort_IT+0xc8>
 8105aac:	687b      	ldr	r3, [r7, #4]
 8105aae:	681b      	ldr	r3, [r3, #0]
 8105ab0:	4a53      	ldr	r2, [pc, #332]	; (8105c00 <HAL_DMA_Abort_IT+0x1b8>)
 8105ab2:	4293      	cmp	r3, r2
 8105ab4:	d02c      	beq.n	8105b10 <HAL_DMA_Abort_IT+0xc8>
 8105ab6:	687b      	ldr	r3, [r7, #4]
 8105ab8:	681b      	ldr	r3, [r3, #0]
 8105aba:	4a52      	ldr	r2, [pc, #328]	; (8105c04 <HAL_DMA_Abort_IT+0x1bc>)
 8105abc:	4293      	cmp	r3, r2
 8105abe:	d027      	beq.n	8105b10 <HAL_DMA_Abort_IT+0xc8>
 8105ac0:	687b      	ldr	r3, [r7, #4]
 8105ac2:	681b      	ldr	r3, [r3, #0]
 8105ac4:	4a50      	ldr	r2, [pc, #320]	; (8105c08 <HAL_DMA_Abort_IT+0x1c0>)
 8105ac6:	4293      	cmp	r3, r2
 8105ac8:	d022      	beq.n	8105b10 <HAL_DMA_Abort_IT+0xc8>
 8105aca:	687b      	ldr	r3, [r7, #4]
 8105acc:	681b      	ldr	r3, [r3, #0]
 8105ace:	4a4f      	ldr	r2, [pc, #316]	; (8105c0c <HAL_DMA_Abort_IT+0x1c4>)
 8105ad0:	4293      	cmp	r3, r2
 8105ad2:	d01d      	beq.n	8105b10 <HAL_DMA_Abort_IT+0xc8>
 8105ad4:	687b      	ldr	r3, [r7, #4]
 8105ad6:	681b      	ldr	r3, [r3, #0]
 8105ad8:	4a4d      	ldr	r2, [pc, #308]	; (8105c10 <HAL_DMA_Abort_IT+0x1c8>)
 8105ada:	4293      	cmp	r3, r2
 8105adc:	d018      	beq.n	8105b10 <HAL_DMA_Abort_IT+0xc8>
 8105ade:	687b      	ldr	r3, [r7, #4]
 8105ae0:	681b      	ldr	r3, [r3, #0]
 8105ae2:	4a4c      	ldr	r2, [pc, #304]	; (8105c14 <HAL_DMA_Abort_IT+0x1cc>)
 8105ae4:	4293      	cmp	r3, r2
 8105ae6:	d013      	beq.n	8105b10 <HAL_DMA_Abort_IT+0xc8>
 8105ae8:	687b      	ldr	r3, [r7, #4]
 8105aea:	681b      	ldr	r3, [r3, #0]
 8105aec:	4a4a      	ldr	r2, [pc, #296]	; (8105c18 <HAL_DMA_Abort_IT+0x1d0>)
 8105aee:	4293      	cmp	r3, r2
 8105af0:	d00e      	beq.n	8105b10 <HAL_DMA_Abort_IT+0xc8>
 8105af2:	687b      	ldr	r3, [r7, #4]
 8105af4:	681b      	ldr	r3, [r3, #0]
 8105af6:	4a49      	ldr	r2, [pc, #292]	; (8105c1c <HAL_DMA_Abort_IT+0x1d4>)
 8105af8:	4293      	cmp	r3, r2
 8105afa:	d009      	beq.n	8105b10 <HAL_DMA_Abort_IT+0xc8>
 8105afc:	687b      	ldr	r3, [r7, #4]
 8105afe:	681b      	ldr	r3, [r3, #0]
 8105b00:	4a47      	ldr	r2, [pc, #284]	; (8105c20 <HAL_DMA_Abort_IT+0x1d8>)
 8105b02:	4293      	cmp	r3, r2
 8105b04:	d004      	beq.n	8105b10 <HAL_DMA_Abort_IT+0xc8>
 8105b06:	687b      	ldr	r3, [r7, #4]
 8105b08:	681b      	ldr	r3, [r3, #0]
 8105b0a:	4a46      	ldr	r2, [pc, #280]	; (8105c24 <HAL_DMA_Abort_IT+0x1dc>)
 8105b0c:	4293      	cmp	r3, r2
 8105b0e:	d101      	bne.n	8105b14 <HAL_DMA_Abort_IT+0xcc>
 8105b10:	2301      	movs	r3, #1
 8105b12:	e000      	b.n	8105b16 <HAL_DMA_Abort_IT+0xce>
 8105b14:	2300      	movs	r3, #0
 8105b16:	2b00      	cmp	r3, #0
 8105b18:	f000 8086 	beq.w	8105c28 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8105b1c:	687b      	ldr	r3, [r7, #4]
 8105b1e:	2204      	movs	r2, #4
 8105b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8105b24:	687b      	ldr	r3, [r7, #4]
 8105b26:	681b      	ldr	r3, [r3, #0]
 8105b28:	4a2f      	ldr	r2, [pc, #188]	; (8105be8 <HAL_DMA_Abort_IT+0x1a0>)
 8105b2a:	4293      	cmp	r3, r2
 8105b2c:	d04a      	beq.n	8105bc4 <HAL_DMA_Abort_IT+0x17c>
 8105b2e:	687b      	ldr	r3, [r7, #4]
 8105b30:	681b      	ldr	r3, [r3, #0]
 8105b32:	4a2e      	ldr	r2, [pc, #184]	; (8105bec <HAL_DMA_Abort_IT+0x1a4>)
 8105b34:	4293      	cmp	r3, r2
 8105b36:	d045      	beq.n	8105bc4 <HAL_DMA_Abort_IT+0x17c>
 8105b38:	687b      	ldr	r3, [r7, #4]
 8105b3a:	681b      	ldr	r3, [r3, #0]
 8105b3c:	4a2c      	ldr	r2, [pc, #176]	; (8105bf0 <HAL_DMA_Abort_IT+0x1a8>)
 8105b3e:	4293      	cmp	r3, r2
 8105b40:	d040      	beq.n	8105bc4 <HAL_DMA_Abort_IT+0x17c>
 8105b42:	687b      	ldr	r3, [r7, #4]
 8105b44:	681b      	ldr	r3, [r3, #0]
 8105b46:	4a2b      	ldr	r2, [pc, #172]	; (8105bf4 <HAL_DMA_Abort_IT+0x1ac>)
 8105b48:	4293      	cmp	r3, r2
 8105b4a:	d03b      	beq.n	8105bc4 <HAL_DMA_Abort_IT+0x17c>
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	681b      	ldr	r3, [r3, #0]
 8105b50:	4a29      	ldr	r2, [pc, #164]	; (8105bf8 <HAL_DMA_Abort_IT+0x1b0>)
 8105b52:	4293      	cmp	r3, r2
 8105b54:	d036      	beq.n	8105bc4 <HAL_DMA_Abort_IT+0x17c>
 8105b56:	687b      	ldr	r3, [r7, #4]
 8105b58:	681b      	ldr	r3, [r3, #0]
 8105b5a:	4a28      	ldr	r2, [pc, #160]	; (8105bfc <HAL_DMA_Abort_IT+0x1b4>)
 8105b5c:	4293      	cmp	r3, r2
 8105b5e:	d031      	beq.n	8105bc4 <HAL_DMA_Abort_IT+0x17c>
 8105b60:	687b      	ldr	r3, [r7, #4]
 8105b62:	681b      	ldr	r3, [r3, #0]
 8105b64:	4a26      	ldr	r2, [pc, #152]	; (8105c00 <HAL_DMA_Abort_IT+0x1b8>)
 8105b66:	4293      	cmp	r3, r2
 8105b68:	d02c      	beq.n	8105bc4 <HAL_DMA_Abort_IT+0x17c>
 8105b6a:	687b      	ldr	r3, [r7, #4]
 8105b6c:	681b      	ldr	r3, [r3, #0]
 8105b6e:	4a25      	ldr	r2, [pc, #148]	; (8105c04 <HAL_DMA_Abort_IT+0x1bc>)
 8105b70:	4293      	cmp	r3, r2
 8105b72:	d027      	beq.n	8105bc4 <HAL_DMA_Abort_IT+0x17c>
 8105b74:	687b      	ldr	r3, [r7, #4]
 8105b76:	681b      	ldr	r3, [r3, #0]
 8105b78:	4a23      	ldr	r2, [pc, #140]	; (8105c08 <HAL_DMA_Abort_IT+0x1c0>)
 8105b7a:	4293      	cmp	r3, r2
 8105b7c:	d022      	beq.n	8105bc4 <HAL_DMA_Abort_IT+0x17c>
 8105b7e:	687b      	ldr	r3, [r7, #4]
 8105b80:	681b      	ldr	r3, [r3, #0]
 8105b82:	4a22      	ldr	r2, [pc, #136]	; (8105c0c <HAL_DMA_Abort_IT+0x1c4>)
 8105b84:	4293      	cmp	r3, r2
 8105b86:	d01d      	beq.n	8105bc4 <HAL_DMA_Abort_IT+0x17c>
 8105b88:	687b      	ldr	r3, [r7, #4]
 8105b8a:	681b      	ldr	r3, [r3, #0]
 8105b8c:	4a20      	ldr	r2, [pc, #128]	; (8105c10 <HAL_DMA_Abort_IT+0x1c8>)
 8105b8e:	4293      	cmp	r3, r2
 8105b90:	d018      	beq.n	8105bc4 <HAL_DMA_Abort_IT+0x17c>
 8105b92:	687b      	ldr	r3, [r7, #4]
 8105b94:	681b      	ldr	r3, [r3, #0]
 8105b96:	4a1f      	ldr	r2, [pc, #124]	; (8105c14 <HAL_DMA_Abort_IT+0x1cc>)
 8105b98:	4293      	cmp	r3, r2
 8105b9a:	d013      	beq.n	8105bc4 <HAL_DMA_Abort_IT+0x17c>
 8105b9c:	687b      	ldr	r3, [r7, #4]
 8105b9e:	681b      	ldr	r3, [r3, #0]
 8105ba0:	4a1d      	ldr	r2, [pc, #116]	; (8105c18 <HAL_DMA_Abort_IT+0x1d0>)
 8105ba2:	4293      	cmp	r3, r2
 8105ba4:	d00e      	beq.n	8105bc4 <HAL_DMA_Abort_IT+0x17c>
 8105ba6:	687b      	ldr	r3, [r7, #4]
 8105ba8:	681b      	ldr	r3, [r3, #0]
 8105baa:	4a1c      	ldr	r2, [pc, #112]	; (8105c1c <HAL_DMA_Abort_IT+0x1d4>)
 8105bac:	4293      	cmp	r3, r2
 8105bae:	d009      	beq.n	8105bc4 <HAL_DMA_Abort_IT+0x17c>
 8105bb0:	687b      	ldr	r3, [r7, #4]
 8105bb2:	681b      	ldr	r3, [r3, #0]
 8105bb4:	4a1a      	ldr	r2, [pc, #104]	; (8105c20 <HAL_DMA_Abort_IT+0x1d8>)
 8105bb6:	4293      	cmp	r3, r2
 8105bb8:	d004      	beq.n	8105bc4 <HAL_DMA_Abort_IT+0x17c>
 8105bba:	687b      	ldr	r3, [r7, #4]
 8105bbc:	681b      	ldr	r3, [r3, #0]
 8105bbe:	4a19      	ldr	r2, [pc, #100]	; (8105c24 <HAL_DMA_Abort_IT+0x1dc>)
 8105bc0:	4293      	cmp	r3, r2
 8105bc2:	d108      	bne.n	8105bd6 <HAL_DMA_Abort_IT+0x18e>
 8105bc4:	687b      	ldr	r3, [r7, #4]
 8105bc6:	681b      	ldr	r3, [r3, #0]
 8105bc8:	681a      	ldr	r2, [r3, #0]
 8105bca:	687b      	ldr	r3, [r7, #4]
 8105bcc:	681b      	ldr	r3, [r3, #0]
 8105bce:	f022 0201 	bic.w	r2, r2, #1
 8105bd2:	601a      	str	r2, [r3, #0]
 8105bd4:	e178      	b.n	8105ec8 <HAL_DMA_Abort_IT+0x480>
 8105bd6:	687b      	ldr	r3, [r7, #4]
 8105bd8:	681b      	ldr	r3, [r3, #0]
 8105bda:	681a      	ldr	r2, [r3, #0]
 8105bdc:	687b      	ldr	r3, [r7, #4]
 8105bde:	681b      	ldr	r3, [r3, #0]
 8105be0:	f022 0201 	bic.w	r2, r2, #1
 8105be4:	601a      	str	r2, [r3, #0]
 8105be6:	e16f      	b.n	8105ec8 <HAL_DMA_Abort_IT+0x480>
 8105be8:	40020010 	.word	0x40020010
 8105bec:	40020028 	.word	0x40020028
 8105bf0:	40020040 	.word	0x40020040
 8105bf4:	40020058 	.word	0x40020058
 8105bf8:	40020070 	.word	0x40020070
 8105bfc:	40020088 	.word	0x40020088
 8105c00:	400200a0 	.word	0x400200a0
 8105c04:	400200b8 	.word	0x400200b8
 8105c08:	40020410 	.word	0x40020410
 8105c0c:	40020428 	.word	0x40020428
 8105c10:	40020440 	.word	0x40020440
 8105c14:	40020458 	.word	0x40020458
 8105c18:	40020470 	.word	0x40020470
 8105c1c:	40020488 	.word	0x40020488
 8105c20:	400204a0 	.word	0x400204a0
 8105c24:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8105c28:	687b      	ldr	r3, [r7, #4]
 8105c2a:	681b      	ldr	r3, [r3, #0]
 8105c2c:	681a      	ldr	r2, [r3, #0]
 8105c2e:	687b      	ldr	r3, [r7, #4]
 8105c30:	681b      	ldr	r3, [r3, #0]
 8105c32:	f022 020e 	bic.w	r2, r2, #14
 8105c36:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8105c38:	687b      	ldr	r3, [r7, #4]
 8105c3a:	681b      	ldr	r3, [r3, #0]
 8105c3c:	4a6c      	ldr	r2, [pc, #432]	; (8105df0 <HAL_DMA_Abort_IT+0x3a8>)
 8105c3e:	4293      	cmp	r3, r2
 8105c40:	d04a      	beq.n	8105cd8 <HAL_DMA_Abort_IT+0x290>
 8105c42:	687b      	ldr	r3, [r7, #4]
 8105c44:	681b      	ldr	r3, [r3, #0]
 8105c46:	4a6b      	ldr	r2, [pc, #428]	; (8105df4 <HAL_DMA_Abort_IT+0x3ac>)
 8105c48:	4293      	cmp	r3, r2
 8105c4a:	d045      	beq.n	8105cd8 <HAL_DMA_Abort_IT+0x290>
 8105c4c:	687b      	ldr	r3, [r7, #4]
 8105c4e:	681b      	ldr	r3, [r3, #0]
 8105c50:	4a69      	ldr	r2, [pc, #420]	; (8105df8 <HAL_DMA_Abort_IT+0x3b0>)
 8105c52:	4293      	cmp	r3, r2
 8105c54:	d040      	beq.n	8105cd8 <HAL_DMA_Abort_IT+0x290>
 8105c56:	687b      	ldr	r3, [r7, #4]
 8105c58:	681b      	ldr	r3, [r3, #0]
 8105c5a:	4a68      	ldr	r2, [pc, #416]	; (8105dfc <HAL_DMA_Abort_IT+0x3b4>)
 8105c5c:	4293      	cmp	r3, r2
 8105c5e:	d03b      	beq.n	8105cd8 <HAL_DMA_Abort_IT+0x290>
 8105c60:	687b      	ldr	r3, [r7, #4]
 8105c62:	681b      	ldr	r3, [r3, #0]
 8105c64:	4a66      	ldr	r2, [pc, #408]	; (8105e00 <HAL_DMA_Abort_IT+0x3b8>)
 8105c66:	4293      	cmp	r3, r2
 8105c68:	d036      	beq.n	8105cd8 <HAL_DMA_Abort_IT+0x290>
 8105c6a:	687b      	ldr	r3, [r7, #4]
 8105c6c:	681b      	ldr	r3, [r3, #0]
 8105c6e:	4a65      	ldr	r2, [pc, #404]	; (8105e04 <HAL_DMA_Abort_IT+0x3bc>)
 8105c70:	4293      	cmp	r3, r2
 8105c72:	d031      	beq.n	8105cd8 <HAL_DMA_Abort_IT+0x290>
 8105c74:	687b      	ldr	r3, [r7, #4]
 8105c76:	681b      	ldr	r3, [r3, #0]
 8105c78:	4a63      	ldr	r2, [pc, #396]	; (8105e08 <HAL_DMA_Abort_IT+0x3c0>)
 8105c7a:	4293      	cmp	r3, r2
 8105c7c:	d02c      	beq.n	8105cd8 <HAL_DMA_Abort_IT+0x290>
 8105c7e:	687b      	ldr	r3, [r7, #4]
 8105c80:	681b      	ldr	r3, [r3, #0]
 8105c82:	4a62      	ldr	r2, [pc, #392]	; (8105e0c <HAL_DMA_Abort_IT+0x3c4>)
 8105c84:	4293      	cmp	r3, r2
 8105c86:	d027      	beq.n	8105cd8 <HAL_DMA_Abort_IT+0x290>
 8105c88:	687b      	ldr	r3, [r7, #4]
 8105c8a:	681b      	ldr	r3, [r3, #0]
 8105c8c:	4a60      	ldr	r2, [pc, #384]	; (8105e10 <HAL_DMA_Abort_IT+0x3c8>)
 8105c8e:	4293      	cmp	r3, r2
 8105c90:	d022      	beq.n	8105cd8 <HAL_DMA_Abort_IT+0x290>
 8105c92:	687b      	ldr	r3, [r7, #4]
 8105c94:	681b      	ldr	r3, [r3, #0]
 8105c96:	4a5f      	ldr	r2, [pc, #380]	; (8105e14 <HAL_DMA_Abort_IT+0x3cc>)
 8105c98:	4293      	cmp	r3, r2
 8105c9a:	d01d      	beq.n	8105cd8 <HAL_DMA_Abort_IT+0x290>
 8105c9c:	687b      	ldr	r3, [r7, #4]
 8105c9e:	681b      	ldr	r3, [r3, #0]
 8105ca0:	4a5d      	ldr	r2, [pc, #372]	; (8105e18 <HAL_DMA_Abort_IT+0x3d0>)
 8105ca2:	4293      	cmp	r3, r2
 8105ca4:	d018      	beq.n	8105cd8 <HAL_DMA_Abort_IT+0x290>
 8105ca6:	687b      	ldr	r3, [r7, #4]
 8105ca8:	681b      	ldr	r3, [r3, #0]
 8105caa:	4a5c      	ldr	r2, [pc, #368]	; (8105e1c <HAL_DMA_Abort_IT+0x3d4>)
 8105cac:	4293      	cmp	r3, r2
 8105cae:	d013      	beq.n	8105cd8 <HAL_DMA_Abort_IT+0x290>
 8105cb0:	687b      	ldr	r3, [r7, #4]
 8105cb2:	681b      	ldr	r3, [r3, #0]
 8105cb4:	4a5a      	ldr	r2, [pc, #360]	; (8105e20 <HAL_DMA_Abort_IT+0x3d8>)
 8105cb6:	4293      	cmp	r3, r2
 8105cb8:	d00e      	beq.n	8105cd8 <HAL_DMA_Abort_IT+0x290>
 8105cba:	687b      	ldr	r3, [r7, #4]
 8105cbc:	681b      	ldr	r3, [r3, #0]
 8105cbe:	4a59      	ldr	r2, [pc, #356]	; (8105e24 <HAL_DMA_Abort_IT+0x3dc>)
 8105cc0:	4293      	cmp	r3, r2
 8105cc2:	d009      	beq.n	8105cd8 <HAL_DMA_Abort_IT+0x290>
 8105cc4:	687b      	ldr	r3, [r7, #4]
 8105cc6:	681b      	ldr	r3, [r3, #0]
 8105cc8:	4a57      	ldr	r2, [pc, #348]	; (8105e28 <HAL_DMA_Abort_IT+0x3e0>)
 8105cca:	4293      	cmp	r3, r2
 8105ccc:	d004      	beq.n	8105cd8 <HAL_DMA_Abort_IT+0x290>
 8105cce:	687b      	ldr	r3, [r7, #4]
 8105cd0:	681b      	ldr	r3, [r3, #0]
 8105cd2:	4a56      	ldr	r2, [pc, #344]	; (8105e2c <HAL_DMA_Abort_IT+0x3e4>)
 8105cd4:	4293      	cmp	r3, r2
 8105cd6:	d108      	bne.n	8105cea <HAL_DMA_Abort_IT+0x2a2>
 8105cd8:	687b      	ldr	r3, [r7, #4]
 8105cda:	681b      	ldr	r3, [r3, #0]
 8105cdc:	681a      	ldr	r2, [r3, #0]
 8105cde:	687b      	ldr	r3, [r7, #4]
 8105ce0:	681b      	ldr	r3, [r3, #0]
 8105ce2:	f022 0201 	bic.w	r2, r2, #1
 8105ce6:	601a      	str	r2, [r3, #0]
 8105ce8:	e007      	b.n	8105cfa <HAL_DMA_Abort_IT+0x2b2>
 8105cea:	687b      	ldr	r3, [r7, #4]
 8105cec:	681b      	ldr	r3, [r3, #0]
 8105cee:	681a      	ldr	r2, [r3, #0]
 8105cf0:	687b      	ldr	r3, [r7, #4]
 8105cf2:	681b      	ldr	r3, [r3, #0]
 8105cf4:	f022 0201 	bic.w	r2, r2, #1
 8105cf8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8105cfa:	687b      	ldr	r3, [r7, #4]
 8105cfc:	681b      	ldr	r3, [r3, #0]
 8105cfe:	4a3c      	ldr	r2, [pc, #240]	; (8105df0 <HAL_DMA_Abort_IT+0x3a8>)
 8105d00:	4293      	cmp	r3, r2
 8105d02:	d072      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105d04:	687b      	ldr	r3, [r7, #4]
 8105d06:	681b      	ldr	r3, [r3, #0]
 8105d08:	4a3a      	ldr	r2, [pc, #232]	; (8105df4 <HAL_DMA_Abort_IT+0x3ac>)
 8105d0a:	4293      	cmp	r3, r2
 8105d0c:	d06d      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105d0e:	687b      	ldr	r3, [r7, #4]
 8105d10:	681b      	ldr	r3, [r3, #0]
 8105d12:	4a39      	ldr	r2, [pc, #228]	; (8105df8 <HAL_DMA_Abort_IT+0x3b0>)
 8105d14:	4293      	cmp	r3, r2
 8105d16:	d068      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105d18:	687b      	ldr	r3, [r7, #4]
 8105d1a:	681b      	ldr	r3, [r3, #0]
 8105d1c:	4a37      	ldr	r2, [pc, #220]	; (8105dfc <HAL_DMA_Abort_IT+0x3b4>)
 8105d1e:	4293      	cmp	r3, r2
 8105d20:	d063      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105d22:	687b      	ldr	r3, [r7, #4]
 8105d24:	681b      	ldr	r3, [r3, #0]
 8105d26:	4a36      	ldr	r2, [pc, #216]	; (8105e00 <HAL_DMA_Abort_IT+0x3b8>)
 8105d28:	4293      	cmp	r3, r2
 8105d2a:	d05e      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105d2c:	687b      	ldr	r3, [r7, #4]
 8105d2e:	681b      	ldr	r3, [r3, #0]
 8105d30:	4a34      	ldr	r2, [pc, #208]	; (8105e04 <HAL_DMA_Abort_IT+0x3bc>)
 8105d32:	4293      	cmp	r3, r2
 8105d34:	d059      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105d36:	687b      	ldr	r3, [r7, #4]
 8105d38:	681b      	ldr	r3, [r3, #0]
 8105d3a:	4a33      	ldr	r2, [pc, #204]	; (8105e08 <HAL_DMA_Abort_IT+0x3c0>)
 8105d3c:	4293      	cmp	r3, r2
 8105d3e:	d054      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105d40:	687b      	ldr	r3, [r7, #4]
 8105d42:	681b      	ldr	r3, [r3, #0]
 8105d44:	4a31      	ldr	r2, [pc, #196]	; (8105e0c <HAL_DMA_Abort_IT+0x3c4>)
 8105d46:	4293      	cmp	r3, r2
 8105d48:	d04f      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105d4a:	687b      	ldr	r3, [r7, #4]
 8105d4c:	681b      	ldr	r3, [r3, #0]
 8105d4e:	4a30      	ldr	r2, [pc, #192]	; (8105e10 <HAL_DMA_Abort_IT+0x3c8>)
 8105d50:	4293      	cmp	r3, r2
 8105d52:	d04a      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105d54:	687b      	ldr	r3, [r7, #4]
 8105d56:	681b      	ldr	r3, [r3, #0]
 8105d58:	4a2e      	ldr	r2, [pc, #184]	; (8105e14 <HAL_DMA_Abort_IT+0x3cc>)
 8105d5a:	4293      	cmp	r3, r2
 8105d5c:	d045      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105d5e:	687b      	ldr	r3, [r7, #4]
 8105d60:	681b      	ldr	r3, [r3, #0]
 8105d62:	4a2d      	ldr	r2, [pc, #180]	; (8105e18 <HAL_DMA_Abort_IT+0x3d0>)
 8105d64:	4293      	cmp	r3, r2
 8105d66:	d040      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105d68:	687b      	ldr	r3, [r7, #4]
 8105d6a:	681b      	ldr	r3, [r3, #0]
 8105d6c:	4a2b      	ldr	r2, [pc, #172]	; (8105e1c <HAL_DMA_Abort_IT+0x3d4>)
 8105d6e:	4293      	cmp	r3, r2
 8105d70:	d03b      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105d72:	687b      	ldr	r3, [r7, #4]
 8105d74:	681b      	ldr	r3, [r3, #0]
 8105d76:	4a2a      	ldr	r2, [pc, #168]	; (8105e20 <HAL_DMA_Abort_IT+0x3d8>)
 8105d78:	4293      	cmp	r3, r2
 8105d7a:	d036      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105d7c:	687b      	ldr	r3, [r7, #4]
 8105d7e:	681b      	ldr	r3, [r3, #0]
 8105d80:	4a28      	ldr	r2, [pc, #160]	; (8105e24 <HAL_DMA_Abort_IT+0x3dc>)
 8105d82:	4293      	cmp	r3, r2
 8105d84:	d031      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105d86:	687b      	ldr	r3, [r7, #4]
 8105d88:	681b      	ldr	r3, [r3, #0]
 8105d8a:	4a27      	ldr	r2, [pc, #156]	; (8105e28 <HAL_DMA_Abort_IT+0x3e0>)
 8105d8c:	4293      	cmp	r3, r2
 8105d8e:	d02c      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105d90:	687b      	ldr	r3, [r7, #4]
 8105d92:	681b      	ldr	r3, [r3, #0]
 8105d94:	4a25      	ldr	r2, [pc, #148]	; (8105e2c <HAL_DMA_Abort_IT+0x3e4>)
 8105d96:	4293      	cmp	r3, r2
 8105d98:	d027      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105d9a:	687b      	ldr	r3, [r7, #4]
 8105d9c:	681b      	ldr	r3, [r3, #0]
 8105d9e:	4a24      	ldr	r2, [pc, #144]	; (8105e30 <HAL_DMA_Abort_IT+0x3e8>)
 8105da0:	4293      	cmp	r3, r2
 8105da2:	d022      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105da4:	687b      	ldr	r3, [r7, #4]
 8105da6:	681b      	ldr	r3, [r3, #0]
 8105da8:	4a22      	ldr	r2, [pc, #136]	; (8105e34 <HAL_DMA_Abort_IT+0x3ec>)
 8105daa:	4293      	cmp	r3, r2
 8105dac:	d01d      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105dae:	687b      	ldr	r3, [r7, #4]
 8105db0:	681b      	ldr	r3, [r3, #0]
 8105db2:	4a21      	ldr	r2, [pc, #132]	; (8105e38 <HAL_DMA_Abort_IT+0x3f0>)
 8105db4:	4293      	cmp	r3, r2
 8105db6:	d018      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105db8:	687b      	ldr	r3, [r7, #4]
 8105dba:	681b      	ldr	r3, [r3, #0]
 8105dbc:	4a1f      	ldr	r2, [pc, #124]	; (8105e3c <HAL_DMA_Abort_IT+0x3f4>)
 8105dbe:	4293      	cmp	r3, r2
 8105dc0:	d013      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105dc2:	687b      	ldr	r3, [r7, #4]
 8105dc4:	681b      	ldr	r3, [r3, #0]
 8105dc6:	4a1e      	ldr	r2, [pc, #120]	; (8105e40 <HAL_DMA_Abort_IT+0x3f8>)
 8105dc8:	4293      	cmp	r3, r2
 8105dca:	d00e      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105dcc:	687b      	ldr	r3, [r7, #4]
 8105dce:	681b      	ldr	r3, [r3, #0]
 8105dd0:	4a1c      	ldr	r2, [pc, #112]	; (8105e44 <HAL_DMA_Abort_IT+0x3fc>)
 8105dd2:	4293      	cmp	r3, r2
 8105dd4:	d009      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105dd6:	687b      	ldr	r3, [r7, #4]
 8105dd8:	681b      	ldr	r3, [r3, #0]
 8105dda:	4a1b      	ldr	r2, [pc, #108]	; (8105e48 <HAL_DMA_Abort_IT+0x400>)
 8105ddc:	4293      	cmp	r3, r2
 8105dde:	d004      	beq.n	8105dea <HAL_DMA_Abort_IT+0x3a2>
 8105de0:	687b      	ldr	r3, [r7, #4]
 8105de2:	681b      	ldr	r3, [r3, #0]
 8105de4:	4a19      	ldr	r2, [pc, #100]	; (8105e4c <HAL_DMA_Abort_IT+0x404>)
 8105de6:	4293      	cmp	r3, r2
 8105de8:	d132      	bne.n	8105e50 <HAL_DMA_Abort_IT+0x408>
 8105dea:	2301      	movs	r3, #1
 8105dec:	e031      	b.n	8105e52 <HAL_DMA_Abort_IT+0x40a>
 8105dee:	bf00      	nop
 8105df0:	40020010 	.word	0x40020010
 8105df4:	40020028 	.word	0x40020028
 8105df8:	40020040 	.word	0x40020040
 8105dfc:	40020058 	.word	0x40020058
 8105e00:	40020070 	.word	0x40020070
 8105e04:	40020088 	.word	0x40020088
 8105e08:	400200a0 	.word	0x400200a0
 8105e0c:	400200b8 	.word	0x400200b8
 8105e10:	40020410 	.word	0x40020410
 8105e14:	40020428 	.word	0x40020428
 8105e18:	40020440 	.word	0x40020440
 8105e1c:	40020458 	.word	0x40020458
 8105e20:	40020470 	.word	0x40020470
 8105e24:	40020488 	.word	0x40020488
 8105e28:	400204a0 	.word	0x400204a0
 8105e2c:	400204b8 	.word	0x400204b8
 8105e30:	58025408 	.word	0x58025408
 8105e34:	5802541c 	.word	0x5802541c
 8105e38:	58025430 	.word	0x58025430
 8105e3c:	58025444 	.word	0x58025444
 8105e40:	58025458 	.word	0x58025458
 8105e44:	5802546c 	.word	0x5802546c
 8105e48:	58025480 	.word	0x58025480
 8105e4c:	58025494 	.word	0x58025494
 8105e50:	2300      	movs	r3, #0
 8105e52:	2b00      	cmp	r3, #0
 8105e54:	d028      	beq.n	8105ea8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8105e56:	687b      	ldr	r3, [r7, #4]
 8105e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105e5a:	681a      	ldr	r2, [r3, #0]
 8105e5c:	687b      	ldr	r3, [r7, #4]
 8105e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105e60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8105e64:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105e66:	687b      	ldr	r3, [r7, #4]
 8105e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105e6a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8105e6c:	687b      	ldr	r3, [r7, #4]
 8105e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105e70:	f003 031f 	and.w	r3, r3, #31
 8105e74:	2201      	movs	r2, #1
 8105e76:	409a      	lsls	r2, r3
 8105e78:	68fb      	ldr	r3, [r7, #12]
 8105e7a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8105e7c:	687b      	ldr	r3, [r7, #4]
 8105e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105e80:	687a      	ldr	r2, [r7, #4]
 8105e82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8105e84:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8105e86:	687b      	ldr	r3, [r7, #4]
 8105e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105e8a:	2b00      	cmp	r3, #0
 8105e8c:	d00c      	beq.n	8105ea8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8105e8e:	687b      	ldr	r3, [r7, #4]
 8105e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105e92:	681a      	ldr	r2, [r3, #0]
 8105e94:	687b      	ldr	r3, [r7, #4]
 8105e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105e98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8105e9c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8105e9e:	687b      	ldr	r3, [r7, #4]
 8105ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105ea2:	687a      	ldr	r2, [r7, #4]
 8105ea4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8105ea6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8105ea8:	687b      	ldr	r3, [r7, #4]
 8105eaa:	2201      	movs	r2, #1
 8105eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8105eb0:	687b      	ldr	r3, [r7, #4]
 8105eb2:	2200      	movs	r2, #0
 8105eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8105eb8:	687b      	ldr	r3, [r7, #4]
 8105eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105ebc:	2b00      	cmp	r3, #0
 8105ebe:	d003      	beq.n	8105ec8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8105ec0:	687b      	ldr	r3, [r7, #4]
 8105ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105ec4:	6878      	ldr	r0, [r7, #4]
 8105ec6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8105ec8:	2300      	movs	r3, #0
}
 8105eca:	4618      	mov	r0, r3
 8105ecc:	3710      	adds	r7, #16
 8105ece:	46bd      	mov	sp, r7
 8105ed0:	bd80      	pop	{r7, pc}
 8105ed2:	bf00      	nop

08105ed4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8105ed4:	b580      	push	{r7, lr}
 8105ed6:	b08a      	sub	sp, #40	; 0x28
 8105ed8:	af00      	add	r7, sp, #0
 8105eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8105edc:	2300      	movs	r3, #0
 8105ede:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8105ee0:	4b67      	ldr	r3, [pc, #412]	; (8106080 <HAL_DMA_IRQHandler+0x1ac>)
 8105ee2:	681b      	ldr	r3, [r3, #0]
 8105ee4:	4a67      	ldr	r2, [pc, #412]	; (8106084 <HAL_DMA_IRQHandler+0x1b0>)
 8105ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8105eea:	0a9b      	lsrs	r3, r3, #10
 8105eec:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8105eee:	687b      	ldr	r3, [r7, #4]
 8105ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105ef2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8105ef4:	687b      	ldr	r3, [r7, #4]
 8105ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105ef8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8105efa:	6a3b      	ldr	r3, [r7, #32]
 8105efc:	681b      	ldr	r3, [r3, #0]
 8105efe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8105f00:	69fb      	ldr	r3, [r7, #28]
 8105f02:	681b      	ldr	r3, [r3, #0]
 8105f04:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8105f06:	687b      	ldr	r3, [r7, #4]
 8105f08:	681b      	ldr	r3, [r3, #0]
 8105f0a:	4a5f      	ldr	r2, [pc, #380]	; (8106088 <HAL_DMA_IRQHandler+0x1b4>)
 8105f0c:	4293      	cmp	r3, r2
 8105f0e:	d04a      	beq.n	8105fa6 <HAL_DMA_IRQHandler+0xd2>
 8105f10:	687b      	ldr	r3, [r7, #4]
 8105f12:	681b      	ldr	r3, [r3, #0]
 8105f14:	4a5d      	ldr	r2, [pc, #372]	; (810608c <HAL_DMA_IRQHandler+0x1b8>)
 8105f16:	4293      	cmp	r3, r2
 8105f18:	d045      	beq.n	8105fa6 <HAL_DMA_IRQHandler+0xd2>
 8105f1a:	687b      	ldr	r3, [r7, #4]
 8105f1c:	681b      	ldr	r3, [r3, #0]
 8105f1e:	4a5c      	ldr	r2, [pc, #368]	; (8106090 <HAL_DMA_IRQHandler+0x1bc>)
 8105f20:	4293      	cmp	r3, r2
 8105f22:	d040      	beq.n	8105fa6 <HAL_DMA_IRQHandler+0xd2>
 8105f24:	687b      	ldr	r3, [r7, #4]
 8105f26:	681b      	ldr	r3, [r3, #0]
 8105f28:	4a5a      	ldr	r2, [pc, #360]	; (8106094 <HAL_DMA_IRQHandler+0x1c0>)
 8105f2a:	4293      	cmp	r3, r2
 8105f2c:	d03b      	beq.n	8105fa6 <HAL_DMA_IRQHandler+0xd2>
 8105f2e:	687b      	ldr	r3, [r7, #4]
 8105f30:	681b      	ldr	r3, [r3, #0]
 8105f32:	4a59      	ldr	r2, [pc, #356]	; (8106098 <HAL_DMA_IRQHandler+0x1c4>)
 8105f34:	4293      	cmp	r3, r2
 8105f36:	d036      	beq.n	8105fa6 <HAL_DMA_IRQHandler+0xd2>
 8105f38:	687b      	ldr	r3, [r7, #4]
 8105f3a:	681b      	ldr	r3, [r3, #0]
 8105f3c:	4a57      	ldr	r2, [pc, #348]	; (810609c <HAL_DMA_IRQHandler+0x1c8>)
 8105f3e:	4293      	cmp	r3, r2
 8105f40:	d031      	beq.n	8105fa6 <HAL_DMA_IRQHandler+0xd2>
 8105f42:	687b      	ldr	r3, [r7, #4]
 8105f44:	681b      	ldr	r3, [r3, #0]
 8105f46:	4a56      	ldr	r2, [pc, #344]	; (81060a0 <HAL_DMA_IRQHandler+0x1cc>)
 8105f48:	4293      	cmp	r3, r2
 8105f4a:	d02c      	beq.n	8105fa6 <HAL_DMA_IRQHandler+0xd2>
 8105f4c:	687b      	ldr	r3, [r7, #4]
 8105f4e:	681b      	ldr	r3, [r3, #0]
 8105f50:	4a54      	ldr	r2, [pc, #336]	; (81060a4 <HAL_DMA_IRQHandler+0x1d0>)
 8105f52:	4293      	cmp	r3, r2
 8105f54:	d027      	beq.n	8105fa6 <HAL_DMA_IRQHandler+0xd2>
 8105f56:	687b      	ldr	r3, [r7, #4]
 8105f58:	681b      	ldr	r3, [r3, #0]
 8105f5a:	4a53      	ldr	r2, [pc, #332]	; (81060a8 <HAL_DMA_IRQHandler+0x1d4>)
 8105f5c:	4293      	cmp	r3, r2
 8105f5e:	d022      	beq.n	8105fa6 <HAL_DMA_IRQHandler+0xd2>
 8105f60:	687b      	ldr	r3, [r7, #4]
 8105f62:	681b      	ldr	r3, [r3, #0]
 8105f64:	4a51      	ldr	r2, [pc, #324]	; (81060ac <HAL_DMA_IRQHandler+0x1d8>)
 8105f66:	4293      	cmp	r3, r2
 8105f68:	d01d      	beq.n	8105fa6 <HAL_DMA_IRQHandler+0xd2>
 8105f6a:	687b      	ldr	r3, [r7, #4]
 8105f6c:	681b      	ldr	r3, [r3, #0]
 8105f6e:	4a50      	ldr	r2, [pc, #320]	; (81060b0 <HAL_DMA_IRQHandler+0x1dc>)
 8105f70:	4293      	cmp	r3, r2
 8105f72:	d018      	beq.n	8105fa6 <HAL_DMA_IRQHandler+0xd2>
 8105f74:	687b      	ldr	r3, [r7, #4]
 8105f76:	681b      	ldr	r3, [r3, #0]
 8105f78:	4a4e      	ldr	r2, [pc, #312]	; (81060b4 <HAL_DMA_IRQHandler+0x1e0>)
 8105f7a:	4293      	cmp	r3, r2
 8105f7c:	d013      	beq.n	8105fa6 <HAL_DMA_IRQHandler+0xd2>
 8105f7e:	687b      	ldr	r3, [r7, #4]
 8105f80:	681b      	ldr	r3, [r3, #0]
 8105f82:	4a4d      	ldr	r2, [pc, #308]	; (81060b8 <HAL_DMA_IRQHandler+0x1e4>)
 8105f84:	4293      	cmp	r3, r2
 8105f86:	d00e      	beq.n	8105fa6 <HAL_DMA_IRQHandler+0xd2>
 8105f88:	687b      	ldr	r3, [r7, #4]
 8105f8a:	681b      	ldr	r3, [r3, #0]
 8105f8c:	4a4b      	ldr	r2, [pc, #300]	; (81060bc <HAL_DMA_IRQHandler+0x1e8>)
 8105f8e:	4293      	cmp	r3, r2
 8105f90:	d009      	beq.n	8105fa6 <HAL_DMA_IRQHandler+0xd2>
 8105f92:	687b      	ldr	r3, [r7, #4]
 8105f94:	681b      	ldr	r3, [r3, #0]
 8105f96:	4a4a      	ldr	r2, [pc, #296]	; (81060c0 <HAL_DMA_IRQHandler+0x1ec>)
 8105f98:	4293      	cmp	r3, r2
 8105f9a:	d004      	beq.n	8105fa6 <HAL_DMA_IRQHandler+0xd2>
 8105f9c:	687b      	ldr	r3, [r7, #4]
 8105f9e:	681b      	ldr	r3, [r3, #0]
 8105fa0:	4a48      	ldr	r2, [pc, #288]	; (81060c4 <HAL_DMA_IRQHandler+0x1f0>)
 8105fa2:	4293      	cmp	r3, r2
 8105fa4:	d101      	bne.n	8105faa <HAL_DMA_IRQHandler+0xd6>
 8105fa6:	2301      	movs	r3, #1
 8105fa8:	e000      	b.n	8105fac <HAL_DMA_IRQHandler+0xd8>
 8105faa:	2300      	movs	r3, #0
 8105fac:	2b00      	cmp	r3, #0
 8105fae:	f000 842b 	beq.w	8106808 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8105fb2:	687b      	ldr	r3, [r7, #4]
 8105fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105fb6:	f003 031f 	and.w	r3, r3, #31
 8105fba:	2208      	movs	r2, #8
 8105fbc:	409a      	lsls	r2, r3
 8105fbe:	69bb      	ldr	r3, [r7, #24]
 8105fc0:	4013      	ands	r3, r2
 8105fc2:	2b00      	cmp	r3, #0
 8105fc4:	f000 80a2 	beq.w	810610c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8105fc8:	687b      	ldr	r3, [r7, #4]
 8105fca:	681b      	ldr	r3, [r3, #0]
 8105fcc:	4a2e      	ldr	r2, [pc, #184]	; (8106088 <HAL_DMA_IRQHandler+0x1b4>)
 8105fce:	4293      	cmp	r3, r2
 8105fd0:	d04a      	beq.n	8106068 <HAL_DMA_IRQHandler+0x194>
 8105fd2:	687b      	ldr	r3, [r7, #4]
 8105fd4:	681b      	ldr	r3, [r3, #0]
 8105fd6:	4a2d      	ldr	r2, [pc, #180]	; (810608c <HAL_DMA_IRQHandler+0x1b8>)
 8105fd8:	4293      	cmp	r3, r2
 8105fda:	d045      	beq.n	8106068 <HAL_DMA_IRQHandler+0x194>
 8105fdc:	687b      	ldr	r3, [r7, #4]
 8105fde:	681b      	ldr	r3, [r3, #0]
 8105fe0:	4a2b      	ldr	r2, [pc, #172]	; (8106090 <HAL_DMA_IRQHandler+0x1bc>)
 8105fe2:	4293      	cmp	r3, r2
 8105fe4:	d040      	beq.n	8106068 <HAL_DMA_IRQHandler+0x194>
 8105fe6:	687b      	ldr	r3, [r7, #4]
 8105fe8:	681b      	ldr	r3, [r3, #0]
 8105fea:	4a2a      	ldr	r2, [pc, #168]	; (8106094 <HAL_DMA_IRQHandler+0x1c0>)
 8105fec:	4293      	cmp	r3, r2
 8105fee:	d03b      	beq.n	8106068 <HAL_DMA_IRQHandler+0x194>
 8105ff0:	687b      	ldr	r3, [r7, #4]
 8105ff2:	681b      	ldr	r3, [r3, #0]
 8105ff4:	4a28      	ldr	r2, [pc, #160]	; (8106098 <HAL_DMA_IRQHandler+0x1c4>)
 8105ff6:	4293      	cmp	r3, r2
 8105ff8:	d036      	beq.n	8106068 <HAL_DMA_IRQHandler+0x194>
 8105ffa:	687b      	ldr	r3, [r7, #4]
 8105ffc:	681b      	ldr	r3, [r3, #0]
 8105ffe:	4a27      	ldr	r2, [pc, #156]	; (810609c <HAL_DMA_IRQHandler+0x1c8>)
 8106000:	4293      	cmp	r3, r2
 8106002:	d031      	beq.n	8106068 <HAL_DMA_IRQHandler+0x194>
 8106004:	687b      	ldr	r3, [r7, #4]
 8106006:	681b      	ldr	r3, [r3, #0]
 8106008:	4a25      	ldr	r2, [pc, #148]	; (81060a0 <HAL_DMA_IRQHandler+0x1cc>)
 810600a:	4293      	cmp	r3, r2
 810600c:	d02c      	beq.n	8106068 <HAL_DMA_IRQHandler+0x194>
 810600e:	687b      	ldr	r3, [r7, #4]
 8106010:	681b      	ldr	r3, [r3, #0]
 8106012:	4a24      	ldr	r2, [pc, #144]	; (81060a4 <HAL_DMA_IRQHandler+0x1d0>)
 8106014:	4293      	cmp	r3, r2
 8106016:	d027      	beq.n	8106068 <HAL_DMA_IRQHandler+0x194>
 8106018:	687b      	ldr	r3, [r7, #4]
 810601a:	681b      	ldr	r3, [r3, #0]
 810601c:	4a22      	ldr	r2, [pc, #136]	; (81060a8 <HAL_DMA_IRQHandler+0x1d4>)
 810601e:	4293      	cmp	r3, r2
 8106020:	d022      	beq.n	8106068 <HAL_DMA_IRQHandler+0x194>
 8106022:	687b      	ldr	r3, [r7, #4]
 8106024:	681b      	ldr	r3, [r3, #0]
 8106026:	4a21      	ldr	r2, [pc, #132]	; (81060ac <HAL_DMA_IRQHandler+0x1d8>)
 8106028:	4293      	cmp	r3, r2
 810602a:	d01d      	beq.n	8106068 <HAL_DMA_IRQHandler+0x194>
 810602c:	687b      	ldr	r3, [r7, #4]
 810602e:	681b      	ldr	r3, [r3, #0]
 8106030:	4a1f      	ldr	r2, [pc, #124]	; (81060b0 <HAL_DMA_IRQHandler+0x1dc>)
 8106032:	4293      	cmp	r3, r2
 8106034:	d018      	beq.n	8106068 <HAL_DMA_IRQHandler+0x194>
 8106036:	687b      	ldr	r3, [r7, #4]
 8106038:	681b      	ldr	r3, [r3, #0]
 810603a:	4a1e      	ldr	r2, [pc, #120]	; (81060b4 <HAL_DMA_IRQHandler+0x1e0>)
 810603c:	4293      	cmp	r3, r2
 810603e:	d013      	beq.n	8106068 <HAL_DMA_IRQHandler+0x194>
 8106040:	687b      	ldr	r3, [r7, #4]
 8106042:	681b      	ldr	r3, [r3, #0]
 8106044:	4a1c      	ldr	r2, [pc, #112]	; (81060b8 <HAL_DMA_IRQHandler+0x1e4>)
 8106046:	4293      	cmp	r3, r2
 8106048:	d00e      	beq.n	8106068 <HAL_DMA_IRQHandler+0x194>
 810604a:	687b      	ldr	r3, [r7, #4]
 810604c:	681b      	ldr	r3, [r3, #0]
 810604e:	4a1b      	ldr	r2, [pc, #108]	; (81060bc <HAL_DMA_IRQHandler+0x1e8>)
 8106050:	4293      	cmp	r3, r2
 8106052:	d009      	beq.n	8106068 <HAL_DMA_IRQHandler+0x194>
 8106054:	687b      	ldr	r3, [r7, #4]
 8106056:	681b      	ldr	r3, [r3, #0]
 8106058:	4a19      	ldr	r2, [pc, #100]	; (81060c0 <HAL_DMA_IRQHandler+0x1ec>)
 810605a:	4293      	cmp	r3, r2
 810605c:	d004      	beq.n	8106068 <HAL_DMA_IRQHandler+0x194>
 810605e:	687b      	ldr	r3, [r7, #4]
 8106060:	681b      	ldr	r3, [r3, #0]
 8106062:	4a18      	ldr	r2, [pc, #96]	; (81060c4 <HAL_DMA_IRQHandler+0x1f0>)
 8106064:	4293      	cmp	r3, r2
 8106066:	d12f      	bne.n	81060c8 <HAL_DMA_IRQHandler+0x1f4>
 8106068:	687b      	ldr	r3, [r7, #4]
 810606a:	681b      	ldr	r3, [r3, #0]
 810606c:	681b      	ldr	r3, [r3, #0]
 810606e:	f003 0304 	and.w	r3, r3, #4
 8106072:	2b00      	cmp	r3, #0
 8106074:	bf14      	ite	ne
 8106076:	2301      	movne	r3, #1
 8106078:	2300      	moveq	r3, #0
 810607a:	b2db      	uxtb	r3, r3
 810607c:	e02e      	b.n	81060dc <HAL_DMA_IRQHandler+0x208>
 810607e:	bf00      	nop
 8106080:	10000000 	.word	0x10000000
 8106084:	1b4e81b5 	.word	0x1b4e81b5
 8106088:	40020010 	.word	0x40020010
 810608c:	40020028 	.word	0x40020028
 8106090:	40020040 	.word	0x40020040
 8106094:	40020058 	.word	0x40020058
 8106098:	40020070 	.word	0x40020070
 810609c:	40020088 	.word	0x40020088
 81060a0:	400200a0 	.word	0x400200a0
 81060a4:	400200b8 	.word	0x400200b8
 81060a8:	40020410 	.word	0x40020410
 81060ac:	40020428 	.word	0x40020428
 81060b0:	40020440 	.word	0x40020440
 81060b4:	40020458 	.word	0x40020458
 81060b8:	40020470 	.word	0x40020470
 81060bc:	40020488 	.word	0x40020488
 81060c0:	400204a0 	.word	0x400204a0
 81060c4:	400204b8 	.word	0x400204b8
 81060c8:	687b      	ldr	r3, [r7, #4]
 81060ca:	681b      	ldr	r3, [r3, #0]
 81060cc:	681b      	ldr	r3, [r3, #0]
 81060ce:	f003 0308 	and.w	r3, r3, #8
 81060d2:	2b00      	cmp	r3, #0
 81060d4:	bf14      	ite	ne
 81060d6:	2301      	movne	r3, #1
 81060d8:	2300      	moveq	r3, #0
 81060da:	b2db      	uxtb	r3, r3
 81060dc:	2b00      	cmp	r3, #0
 81060de:	d015      	beq.n	810610c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81060e0:	687b      	ldr	r3, [r7, #4]
 81060e2:	681b      	ldr	r3, [r3, #0]
 81060e4:	681a      	ldr	r2, [r3, #0]
 81060e6:	687b      	ldr	r3, [r7, #4]
 81060e8:	681b      	ldr	r3, [r3, #0]
 81060ea:	f022 0204 	bic.w	r2, r2, #4
 81060ee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81060f0:	687b      	ldr	r3, [r7, #4]
 81060f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81060f4:	f003 031f 	and.w	r3, r3, #31
 81060f8:	2208      	movs	r2, #8
 81060fa:	409a      	lsls	r2, r3
 81060fc:	6a3b      	ldr	r3, [r7, #32]
 81060fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8106100:	687b      	ldr	r3, [r7, #4]
 8106102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106104:	f043 0201 	orr.w	r2, r3, #1
 8106108:	687b      	ldr	r3, [r7, #4]
 810610a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810610c:	687b      	ldr	r3, [r7, #4]
 810610e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106110:	f003 031f 	and.w	r3, r3, #31
 8106114:	69ba      	ldr	r2, [r7, #24]
 8106116:	fa22 f303 	lsr.w	r3, r2, r3
 810611a:	f003 0301 	and.w	r3, r3, #1
 810611e:	2b00      	cmp	r3, #0
 8106120:	d06e      	beq.n	8106200 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8106122:	687b      	ldr	r3, [r7, #4]
 8106124:	681b      	ldr	r3, [r3, #0]
 8106126:	4a69      	ldr	r2, [pc, #420]	; (81062cc <HAL_DMA_IRQHandler+0x3f8>)
 8106128:	4293      	cmp	r3, r2
 810612a:	d04a      	beq.n	81061c2 <HAL_DMA_IRQHandler+0x2ee>
 810612c:	687b      	ldr	r3, [r7, #4]
 810612e:	681b      	ldr	r3, [r3, #0]
 8106130:	4a67      	ldr	r2, [pc, #412]	; (81062d0 <HAL_DMA_IRQHandler+0x3fc>)
 8106132:	4293      	cmp	r3, r2
 8106134:	d045      	beq.n	81061c2 <HAL_DMA_IRQHandler+0x2ee>
 8106136:	687b      	ldr	r3, [r7, #4]
 8106138:	681b      	ldr	r3, [r3, #0]
 810613a:	4a66      	ldr	r2, [pc, #408]	; (81062d4 <HAL_DMA_IRQHandler+0x400>)
 810613c:	4293      	cmp	r3, r2
 810613e:	d040      	beq.n	81061c2 <HAL_DMA_IRQHandler+0x2ee>
 8106140:	687b      	ldr	r3, [r7, #4]
 8106142:	681b      	ldr	r3, [r3, #0]
 8106144:	4a64      	ldr	r2, [pc, #400]	; (81062d8 <HAL_DMA_IRQHandler+0x404>)
 8106146:	4293      	cmp	r3, r2
 8106148:	d03b      	beq.n	81061c2 <HAL_DMA_IRQHandler+0x2ee>
 810614a:	687b      	ldr	r3, [r7, #4]
 810614c:	681b      	ldr	r3, [r3, #0]
 810614e:	4a63      	ldr	r2, [pc, #396]	; (81062dc <HAL_DMA_IRQHandler+0x408>)
 8106150:	4293      	cmp	r3, r2
 8106152:	d036      	beq.n	81061c2 <HAL_DMA_IRQHandler+0x2ee>
 8106154:	687b      	ldr	r3, [r7, #4]
 8106156:	681b      	ldr	r3, [r3, #0]
 8106158:	4a61      	ldr	r2, [pc, #388]	; (81062e0 <HAL_DMA_IRQHandler+0x40c>)
 810615a:	4293      	cmp	r3, r2
 810615c:	d031      	beq.n	81061c2 <HAL_DMA_IRQHandler+0x2ee>
 810615e:	687b      	ldr	r3, [r7, #4]
 8106160:	681b      	ldr	r3, [r3, #0]
 8106162:	4a60      	ldr	r2, [pc, #384]	; (81062e4 <HAL_DMA_IRQHandler+0x410>)
 8106164:	4293      	cmp	r3, r2
 8106166:	d02c      	beq.n	81061c2 <HAL_DMA_IRQHandler+0x2ee>
 8106168:	687b      	ldr	r3, [r7, #4]
 810616a:	681b      	ldr	r3, [r3, #0]
 810616c:	4a5e      	ldr	r2, [pc, #376]	; (81062e8 <HAL_DMA_IRQHandler+0x414>)
 810616e:	4293      	cmp	r3, r2
 8106170:	d027      	beq.n	81061c2 <HAL_DMA_IRQHandler+0x2ee>
 8106172:	687b      	ldr	r3, [r7, #4]
 8106174:	681b      	ldr	r3, [r3, #0]
 8106176:	4a5d      	ldr	r2, [pc, #372]	; (81062ec <HAL_DMA_IRQHandler+0x418>)
 8106178:	4293      	cmp	r3, r2
 810617a:	d022      	beq.n	81061c2 <HAL_DMA_IRQHandler+0x2ee>
 810617c:	687b      	ldr	r3, [r7, #4]
 810617e:	681b      	ldr	r3, [r3, #0]
 8106180:	4a5b      	ldr	r2, [pc, #364]	; (81062f0 <HAL_DMA_IRQHandler+0x41c>)
 8106182:	4293      	cmp	r3, r2
 8106184:	d01d      	beq.n	81061c2 <HAL_DMA_IRQHandler+0x2ee>
 8106186:	687b      	ldr	r3, [r7, #4]
 8106188:	681b      	ldr	r3, [r3, #0]
 810618a:	4a5a      	ldr	r2, [pc, #360]	; (81062f4 <HAL_DMA_IRQHandler+0x420>)
 810618c:	4293      	cmp	r3, r2
 810618e:	d018      	beq.n	81061c2 <HAL_DMA_IRQHandler+0x2ee>
 8106190:	687b      	ldr	r3, [r7, #4]
 8106192:	681b      	ldr	r3, [r3, #0]
 8106194:	4a58      	ldr	r2, [pc, #352]	; (81062f8 <HAL_DMA_IRQHandler+0x424>)
 8106196:	4293      	cmp	r3, r2
 8106198:	d013      	beq.n	81061c2 <HAL_DMA_IRQHandler+0x2ee>
 810619a:	687b      	ldr	r3, [r7, #4]
 810619c:	681b      	ldr	r3, [r3, #0]
 810619e:	4a57      	ldr	r2, [pc, #348]	; (81062fc <HAL_DMA_IRQHandler+0x428>)
 81061a0:	4293      	cmp	r3, r2
 81061a2:	d00e      	beq.n	81061c2 <HAL_DMA_IRQHandler+0x2ee>
 81061a4:	687b      	ldr	r3, [r7, #4]
 81061a6:	681b      	ldr	r3, [r3, #0]
 81061a8:	4a55      	ldr	r2, [pc, #340]	; (8106300 <HAL_DMA_IRQHandler+0x42c>)
 81061aa:	4293      	cmp	r3, r2
 81061ac:	d009      	beq.n	81061c2 <HAL_DMA_IRQHandler+0x2ee>
 81061ae:	687b      	ldr	r3, [r7, #4]
 81061b0:	681b      	ldr	r3, [r3, #0]
 81061b2:	4a54      	ldr	r2, [pc, #336]	; (8106304 <HAL_DMA_IRQHandler+0x430>)
 81061b4:	4293      	cmp	r3, r2
 81061b6:	d004      	beq.n	81061c2 <HAL_DMA_IRQHandler+0x2ee>
 81061b8:	687b      	ldr	r3, [r7, #4]
 81061ba:	681b      	ldr	r3, [r3, #0]
 81061bc:	4a52      	ldr	r2, [pc, #328]	; (8106308 <HAL_DMA_IRQHandler+0x434>)
 81061be:	4293      	cmp	r3, r2
 81061c0:	d10a      	bne.n	81061d8 <HAL_DMA_IRQHandler+0x304>
 81061c2:	687b      	ldr	r3, [r7, #4]
 81061c4:	681b      	ldr	r3, [r3, #0]
 81061c6:	695b      	ldr	r3, [r3, #20]
 81061c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81061cc:	2b00      	cmp	r3, #0
 81061ce:	bf14      	ite	ne
 81061d0:	2301      	movne	r3, #1
 81061d2:	2300      	moveq	r3, #0
 81061d4:	b2db      	uxtb	r3, r3
 81061d6:	e003      	b.n	81061e0 <HAL_DMA_IRQHandler+0x30c>
 81061d8:	687b      	ldr	r3, [r7, #4]
 81061da:	681b      	ldr	r3, [r3, #0]
 81061dc:	681b      	ldr	r3, [r3, #0]
 81061de:	2300      	movs	r3, #0
 81061e0:	2b00      	cmp	r3, #0
 81061e2:	d00d      	beq.n	8106200 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81061e4:	687b      	ldr	r3, [r7, #4]
 81061e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81061e8:	f003 031f 	and.w	r3, r3, #31
 81061ec:	2201      	movs	r2, #1
 81061ee:	409a      	lsls	r2, r3
 81061f0:	6a3b      	ldr	r3, [r7, #32]
 81061f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 81061f4:	687b      	ldr	r3, [r7, #4]
 81061f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81061f8:	f043 0202 	orr.w	r2, r3, #2
 81061fc:	687b      	ldr	r3, [r7, #4]
 81061fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8106200:	687b      	ldr	r3, [r7, #4]
 8106202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106204:	f003 031f 	and.w	r3, r3, #31
 8106208:	2204      	movs	r2, #4
 810620a:	409a      	lsls	r2, r3
 810620c:	69bb      	ldr	r3, [r7, #24]
 810620e:	4013      	ands	r3, r2
 8106210:	2b00      	cmp	r3, #0
 8106212:	f000 808f 	beq.w	8106334 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8106216:	687b      	ldr	r3, [r7, #4]
 8106218:	681b      	ldr	r3, [r3, #0]
 810621a:	4a2c      	ldr	r2, [pc, #176]	; (81062cc <HAL_DMA_IRQHandler+0x3f8>)
 810621c:	4293      	cmp	r3, r2
 810621e:	d04a      	beq.n	81062b6 <HAL_DMA_IRQHandler+0x3e2>
 8106220:	687b      	ldr	r3, [r7, #4]
 8106222:	681b      	ldr	r3, [r3, #0]
 8106224:	4a2a      	ldr	r2, [pc, #168]	; (81062d0 <HAL_DMA_IRQHandler+0x3fc>)
 8106226:	4293      	cmp	r3, r2
 8106228:	d045      	beq.n	81062b6 <HAL_DMA_IRQHandler+0x3e2>
 810622a:	687b      	ldr	r3, [r7, #4]
 810622c:	681b      	ldr	r3, [r3, #0]
 810622e:	4a29      	ldr	r2, [pc, #164]	; (81062d4 <HAL_DMA_IRQHandler+0x400>)
 8106230:	4293      	cmp	r3, r2
 8106232:	d040      	beq.n	81062b6 <HAL_DMA_IRQHandler+0x3e2>
 8106234:	687b      	ldr	r3, [r7, #4]
 8106236:	681b      	ldr	r3, [r3, #0]
 8106238:	4a27      	ldr	r2, [pc, #156]	; (81062d8 <HAL_DMA_IRQHandler+0x404>)
 810623a:	4293      	cmp	r3, r2
 810623c:	d03b      	beq.n	81062b6 <HAL_DMA_IRQHandler+0x3e2>
 810623e:	687b      	ldr	r3, [r7, #4]
 8106240:	681b      	ldr	r3, [r3, #0]
 8106242:	4a26      	ldr	r2, [pc, #152]	; (81062dc <HAL_DMA_IRQHandler+0x408>)
 8106244:	4293      	cmp	r3, r2
 8106246:	d036      	beq.n	81062b6 <HAL_DMA_IRQHandler+0x3e2>
 8106248:	687b      	ldr	r3, [r7, #4]
 810624a:	681b      	ldr	r3, [r3, #0]
 810624c:	4a24      	ldr	r2, [pc, #144]	; (81062e0 <HAL_DMA_IRQHandler+0x40c>)
 810624e:	4293      	cmp	r3, r2
 8106250:	d031      	beq.n	81062b6 <HAL_DMA_IRQHandler+0x3e2>
 8106252:	687b      	ldr	r3, [r7, #4]
 8106254:	681b      	ldr	r3, [r3, #0]
 8106256:	4a23      	ldr	r2, [pc, #140]	; (81062e4 <HAL_DMA_IRQHandler+0x410>)
 8106258:	4293      	cmp	r3, r2
 810625a:	d02c      	beq.n	81062b6 <HAL_DMA_IRQHandler+0x3e2>
 810625c:	687b      	ldr	r3, [r7, #4]
 810625e:	681b      	ldr	r3, [r3, #0]
 8106260:	4a21      	ldr	r2, [pc, #132]	; (81062e8 <HAL_DMA_IRQHandler+0x414>)
 8106262:	4293      	cmp	r3, r2
 8106264:	d027      	beq.n	81062b6 <HAL_DMA_IRQHandler+0x3e2>
 8106266:	687b      	ldr	r3, [r7, #4]
 8106268:	681b      	ldr	r3, [r3, #0]
 810626a:	4a20      	ldr	r2, [pc, #128]	; (81062ec <HAL_DMA_IRQHandler+0x418>)
 810626c:	4293      	cmp	r3, r2
 810626e:	d022      	beq.n	81062b6 <HAL_DMA_IRQHandler+0x3e2>
 8106270:	687b      	ldr	r3, [r7, #4]
 8106272:	681b      	ldr	r3, [r3, #0]
 8106274:	4a1e      	ldr	r2, [pc, #120]	; (81062f0 <HAL_DMA_IRQHandler+0x41c>)
 8106276:	4293      	cmp	r3, r2
 8106278:	d01d      	beq.n	81062b6 <HAL_DMA_IRQHandler+0x3e2>
 810627a:	687b      	ldr	r3, [r7, #4]
 810627c:	681b      	ldr	r3, [r3, #0]
 810627e:	4a1d      	ldr	r2, [pc, #116]	; (81062f4 <HAL_DMA_IRQHandler+0x420>)
 8106280:	4293      	cmp	r3, r2
 8106282:	d018      	beq.n	81062b6 <HAL_DMA_IRQHandler+0x3e2>
 8106284:	687b      	ldr	r3, [r7, #4]
 8106286:	681b      	ldr	r3, [r3, #0]
 8106288:	4a1b      	ldr	r2, [pc, #108]	; (81062f8 <HAL_DMA_IRQHandler+0x424>)
 810628a:	4293      	cmp	r3, r2
 810628c:	d013      	beq.n	81062b6 <HAL_DMA_IRQHandler+0x3e2>
 810628e:	687b      	ldr	r3, [r7, #4]
 8106290:	681b      	ldr	r3, [r3, #0]
 8106292:	4a1a      	ldr	r2, [pc, #104]	; (81062fc <HAL_DMA_IRQHandler+0x428>)
 8106294:	4293      	cmp	r3, r2
 8106296:	d00e      	beq.n	81062b6 <HAL_DMA_IRQHandler+0x3e2>
 8106298:	687b      	ldr	r3, [r7, #4]
 810629a:	681b      	ldr	r3, [r3, #0]
 810629c:	4a18      	ldr	r2, [pc, #96]	; (8106300 <HAL_DMA_IRQHandler+0x42c>)
 810629e:	4293      	cmp	r3, r2
 81062a0:	d009      	beq.n	81062b6 <HAL_DMA_IRQHandler+0x3e2>
 81062a2:	687b      	ldr	r3, [r7, #4]
 81062a4:	681b      	ldr	r3, [r3, #0]
 81062a6:	4a17      	ldr	r2, [pc, #92]	; (8106304 <HAL_DMA_IRQHandler+0x430>)
 81062a8:	4293      	cmp	r3, r2
 81062aa:	d004      	beq.n	81062b6 <HAL_DMA_IRQHandler+0x3e2>
 81062ac:	687b      	ldr	r3, [r7, #4]
 81062ae:	681b      	ldr	r3, [r3, #0]
 81062b0:	4a15      	ldr	r2, [pc, #84]	; (8106308 <HAL_DMA_IRQHandler+0x434>)
 81062b2:	4293      	cmp	r3, r2
 81062b4:	d12a      	bne.n	810630c <HAL_DMA_IRQHandler+0x438>
 81062b6:	687b      	ldr	r3, [r7, #4]
 81062b8:	681b      	ldr	r3, [r3, #0]
 81062ba:	681b      	ldr	r3, [r3, #0]
 81062bc:	f003 0302 	and.w	r3, r3, #2
 81062c0:	2b00      	cmp	r3, #0
 81062c2:	bf14      	ite	ne
 81062c4:	2301      	movne	r3, #1
 81062c6:	2300      	moveq	r3, #0
 81062c8:	b2db      	uxtb	r3, r3
 81062ca:	e023      	b.n	8106314 <HAL_DMA_IRQHandler+0x440>
 81062cc:	40020010 	.word	0x40020010
 81062d0:	40020028 	.word	0x40020028
 81062d4:	40020040 	.word	0x40020040
 81062d8:	40020058 	.word	0x40020058
 81062dc:	40020070 	.word	0x40020070
 81062e0:	40020088 	.word	0x40020088
 81062e4:	400200a0 	.word	0x400200a0
 81062e8:	400200b8 	.word	0x400200b8
 81062ec:	40020410 	.word	0x40020410
 81062f0:	40020428 	.word	0x40020428
 81062f4:	40020440 	.word	0x40020440
 81062f8:	40020458 	.word	0x40020458
 81062fc:	40020470 	.word	0x40020470
 8106300:	40020488 	.word	0x40020488
 8106304:	400204a0 	.word	0x400204a0
 8106308:	400204b8 	.word	0x400204b8
 810630c:	687b      	ldr	r3, [r7, #4]
 810630e:	681b      	ldr	r3, [r3, #0]
 8106310:	681b      	ldr	r3, [r3, #0]
 8106312:	2300      	movs	r3, #0
 8106314:	2b00      	cmp	r3, #0
 8106316:	d00d      	beq.n	8106334 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8106318:	687b      	ldr	r3, [r7, #4]
 810631a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810631c:	f003 031f 	and.w	r3, r3, #31
 8106320:	2204      	movs	r2, #4
 8106322:	409a      	lsls	r2, r3
 8106324:	6a3b      	ldr	r3, [r7, #32]
 8106326:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8106328:	687b      	ldr	r3, [r7, #4]
 810632a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810632c:	f043 0204 	orr.w	r2, r3, #4
 8106330:	687b      	ldr	r3, [r7, #4]
 8106332:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8106334:	687b      	ldr	r3, [r7, #4]
 8106336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106338:	f003 031f 	and.w	r3, r3, #31
 810633c:	2210      	movs	r2, #16
 810633e:	409a      	lsls	r2, r3
 8106340:	69bb      	ldr	r3, [r7, #24]
 8106342:	4013      	ands	r3, r2
 8106344:	2b00      	cmp	r3, #0
 8106346:	f000 80a6 	beq.w	8106496 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 810634a:	687b      	ldr	r3, [r7, #4]
 810634c:	681b      	ldr	r3, [r3, #0]
 810634e:	4a85      	ldr	r2, [pc, #532]	; (8106564 <HAL_DMA_IRQHandler+0x690>)
 8106350:	4293      	cmp	r3, r2
 8106352:	d04a      	beq.n	81063ea <HAL_DMA_IRQHandler+0x516>
 8106354:	687b      	ldr	r3, [r7, #4]
 8106356:	681b      	ldr	r3, [r3, #0]
 8106358:	4a83      	ldr	r2, [pc, #524]	; (8106568 <HAL_DMA_IRQHandler+0x694>)
 810635a:	4293      	cmp	r3, r2
 810635c:	d045      	beq.n	81063ea <HAL_DMA_IRQHandler+0x516>
 810635e:	687b      	ldr	r3, [r7, #4]
 8106360:	681b      	ldr	r3, [r3, #0]
 8106362:	4a82      	ldr	r2, [pc, #520]	; (810656c <HAL_DMA_IRQHandler+0x698>)
 8106364:	4293      	cmp	r3, r2
 8106366:	d040      	beq.n	81063ea <HAL_DMA_IRQHandler+0x516>
 8106368:	687b      	ldr	r3, [r7, #4]
 810636a:	681b      	ldr	r3, [r3, #0]
 810636c:	4a80      	ldr	r2, [pc, #512]	; (8106570 <HAL_DMA_IRQHandler+0x69c>)
 810636e:	4293      	cmp	r3, r2
 8106370:	d03b      	beq.n	81063ea <HAL_DMA_IRQHandler+0x516>
 8106372:	687b      	ldr	r3, [r7, #4]
 8106374:	681b      	ldr	r3, [r3, #0]
 8106376:	4a7f      	ldr	r2, [pc, #508]	; (8106574 <HAL_DMA_IRQHandler+0x6a0>)
 8106378:	4293      	cmp	r3, r2
 810637a:	d036      	beq.n	81063ea <HAL_DMA_IRQHandler+0x516>
 810637c:	687b      	ldr	r3, [r7, #4]
 810637e:	681b      	ldr	r3, [r3, #0]
 8106380:	4a7d      	ldr	r2, [pc, #500]	; (8106578 <HAL_DMA_IRQHandler+0x6a4>)
 8106382:	4293      	cmp	r3, r2
 8106384:	d031      	beq.n	81063ea <HAL_DMA_IRQHandler+0x516>
 8106386:	687b      	ldr	r3, [r7, #4]
 8106388:	681b      	ldr	r3, [r3, #0]
 810638a:	4a7c      	ldr	r2, [pc, #496]	; (810657c <HAL_DMA_IRQHandler+0x6a8>)
 810638c:	4293      	cmp	r3, r2
 810638e:	d02c      	beq.n	81063ea <HAL_DMA_IRQHandler+0x516>
 8106390:	687b      	ldr	r3, [r7, #4]
 8106392:	681b      	ldr	r3, [r3, #0]
 8106394:	4a7a      	ldr	r2, [pc, #488]	; (8106580 <HAL_DMA_IRQHandler+0x6ac>)
 8106396:	4293      	cmp	r3, r2
 8106398:	d027      	beq.n	81063ea <HAL_DMA_IRQHandler+0x516>
 810639a:	687b      	ldr	r3, [r7, #4]
 810639c:	681b      	ldr	r3, [r3, #0]
 810639e:	4a79      	ldr	r2, [pc, #484]	; (8106584 <HAL_DMA_IRQHandler+0x6b0>)
 81063a0:	4293      	cmp	r3, r2
 81063a2:	d022      	beq.n	81063ea <HAL_DMA_IRQHandler+0x516>
 81063a4:	687b      	ldr	r3, [r7, #4]
 81063a6:	681b      	ldr	r3, [r3, #0]
 81063a8:	4a77      	ldr	r2, [pc, #476]	; (8106588 <HAL_DMA_IRQHandler+0x6b4>)
 81063aa:	4293      	cmp	r3, r2
 81063ac:	d01d      	beq.n	81063ea <HAL_DMA_IRQHandler+0x516>
 81063ae:	687b      	ldr	r3, [r7, #4]
 81063b0:	681b      	ldr	r3, [r3, #0]
 81063b2:	4a76      	ldr	r2, [pc, #472]	; (810658c <HAL_DMA_IRQHandler+0x6b8>)
 81063b4:	4293      	cmp	r3, r2
 81063b6:	d018      	beq.n	81063ea <HAL_DMA_IRQHandler+0x516>
 81063b8:	687b      	ldr	r3, [r7, #4]
 81063ba:	681b      	ldr	r3, [r3, #0]
 81063bc:	4a74      	ldr	r2, [pc, #464]	; (8106590 <HAL_DMA_IRQHandler+0x6bc>)
 81063be:	4293      	cmp	r3, r2
 81063c0:	d013      	beq.n	81063ea <HAL_DMA_IRQHandler+0x516>
 81063c2:	687b      	ldr	r3, [r7, #4]
 81063c4:	681b      	ldr	r3, [r3, #0]
 81063c6:	4a73      	ldr	r2, [pc, #460]	; (8106594 <HAL_DMA_IRQHandler+0x6c0>)
 81063c8:	4293      	cmp	r3, r2
 81063ca:	d00e      	beq.n	81063ea <HAL_DMA_IRQHandler+0x516>
 81063cc:	687b      	ldr	r3, [r7, #4]
 81063ce:	681b      	ldr	r3, [r3, #0]
 81063d0:	4a71      	ldr	r2, [pc, #452]	; (8106598 <HAL_DMA_IRQHandler+0x6c4>)
 81063d2:	4293      	cmp	r3, r2
 81063d4:	d009      	beq.n	81063ea <HAL_DMA_IRQHandler+0x516>
 81063d6:	687b      	ldr	r3, [r7, #4]
 81063d8:	681b      	ldr	r3, [r3, #0]
 81063da:	4a70      	ldr	r2, [pc, #448]	; (810659c <HAL_DMA_IRQHandler+0x6c8>)
 81063dc:	4293      	cmp	r3, r2
 81063de:	d004      	beq.n	81063ea <HAL_DMA_IRQHandler+0x516>
 81063e0:	687b      	ldr	r3, [r7, #4]
 81063e2:	681b      	ldr	r3, [r3, #0]
 81063e4:	4a6e      	ldr	r2, [pc, #440]	; (81065a0 <HAL_DMA_IRQHandler+0x6cc>)
 81063e6:	4293      	cmp	r3, r2
 81063e8:	d10a      	bne.n	8106400 <HAL_DMA_IRQHandler+0x52c>
 81063ea:	687b      	ldr	r3, [r7, #4]
 81063ec:	681b      	ldr	r3, [r3, #0]
 81063ee:	681b      	ldr	r3, [r3, #0]
 81063f0:	f003 0308 	and.w	r3, r3, #8
 81063f4:	2b00      	cmp	r3, #0
 81063f6:	bf14      	ite	ne
 81063f8:	2301      	movne	r3, #1
 81063fa:	2300      	moveq	r3, #0
 81063fc:	b2db      	uxtb	r3, r3
 81063fe:	e009      	b.n	8106414 <HAL_DMA_IRQHandler+0x540>
 8106400:	687b      	ldr	r3, [r7, #4]
 8106402:	681b      	ldr	r3, [r3, #0]
 8106404:	681b      	ldr	r3, [r3, #0]
 8106406:	f003 0304 	and.w	r3, r3, #4
 810640a:	2b00      	cmp	r3, #0
 810640c:	bf14      	ite	ne
 810640e:	2301      	movne	r3, #1
 8106410:	2300      	moveq	r3, #0
 8106412:	b2db      	uxtb	r3, r3
 8106414:	2b00      	cmp	r3, #0
 8106416:	d03e      	beq.n	8106496 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8106418:	687b      	ldr	r3, [r7, #4]
 810641a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810641c:	f003 031f 	and.w	r3, r3, #31
 8106420:	2210      	movs	r2, #16
 8106422:	409a      	lsls	r2, r3
 8106424:	6a3b      	ldr	r3, [r7, #32]
 8106426:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8106428:	687b      	ldr	r3, [r7, #4]
 810642a:	681b      	ldr	r3, [r3, #0]
 810642c:	681b      	ldr	r3, [r3, #0]
 810642e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8106432:	2b00      	cmp	r3, #0
 8106434:	d018      	beq.n	8106468 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8106436:	687b      	ldr	r3, [r7, #4]
 8106438:	681b      	ldr	r3, [r3, #0]
 810643a:	681b      	ldr	r3, [r3, #0]
 810643c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8106440:	2b00      	cmp	r3, #0
 8106442:	d108      	bne.n	8106456 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8106444:	687b      	ldr	r3, [r7, #4]
 8106446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106448:	2b00      	cmp	r3, #0
 810644a:	d024      	beq.n	8106496 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 810644c:	687b      	ldr	r3, [r7, #4]
 810644e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106450:	6878      	ldr	r0, [r7, #4]
 8106452:	4798      	blx	r3
 8106454:	e01f      	b.n	8106496 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8106456:	687b      	ldr	r3, [r7, #4]
 8106458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810645a:	2b00      	cmp	r3, #0
 810645c:	d01b      	beq.n	8106496 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 810645e:	687b      	ldr	r3, [r7, #4]
 8106460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106462:	6878      	ldr	r0, [r7, #4]
 8106464:	4798      	blx	r3
 8106466:	e016      	b.n	8106496 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8106468:	687b      	ldr	r3, [r7, #4]
 810646a:	681b      	ldr	r3, [r3, #0]
 810646c:	681b      	ldr	r3, [r3, #0]
 810646e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106472:	2b00      	cmp	r3, #0
 8106474:	d107      	bne.n	8106486 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8106476:	687b      	ldr	r3, [r7, #4]
 8106478:	681b      	ldr	r3, [r3, #0]
 810647a:	681a      	ldr	r2, [r3, #0]
 810647c:	687b      	ldr	r3, [r7, #4]
 810647e:	681b      	ldr	r3, [r3, #0]
 8106480:	f022 0208 	bic.w	r2, r2, #8
 8106484:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8106486:	687b      	ldr	r3, [r7, #4]
 8106488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810648a:	2b00      	cmp	r3, #0
 810648c:	d003      	beq.n	8106496 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 810648e:	687b      	ldr	r3, [r7, #4]
 8106490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106492:	6878      	ldr	r0, [r7, #4]
 8106494:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8106496:	687b      	ldr	r3, [r7, #4]
 8106498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810649a:	f003 031f 	and.w	r3, r3, #31
 810649e:	2220      	movs	r2, #32
 81064a0:	409a      	lsls	r2, r3
 81064a2:	69bb      	ldr	r3, [r7, #24]
 81064a4:	4013      	ands	r3, r2
 81064a6:	2b00      	cmp	r3, #0
 81064a8:	f000 8110 	beq.w	81066cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	681b      	ldr	r3, [r3, #0]
 81064b0:	4a2c      	ldr	r2, [pc, #176]	; (8106564 <HAL_DMA_IRQHandler+0x690>)
 81064b2:	4293      	cmp	r3, r2
 81064b4:	d04a      	beq.n	810654c <HAL_DMA_IRQHandler+0x678>
 81064b6:	687b      	ldr	r3, [r7, #4]
 81064b8:	681b      	ldr	r3, [r3, #0]
 81064ba:	4a2b      	ldr	r2, [pc, #172]	; (8106568 <HAL_DMA_IRQHandler+0x694>)
 81064bc:	4293      	cmp	r3, r2
 81064be:	d045      	beq.n	810654c <HAL_DMA_IRQHandler+0x678>
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	681b      	ldr	r3, [r3, #0]
 81064c4:	4a29      	ldr	r2, [pc, #164]	; (810656c <HAL_DMA_IRQHandler+0x698>)
 81064c6:	4293      	cmp	r3, r2
 81064c8:	d040      	beq.n	810654c <HAL_DMA_IRQHandler+0x678>
 81064ca:	687b      	ldr	r3, [r7, #4]
 81064cc:	681b      	ldr	r3, [r3, #0]
 81064ce:	4a28      	ldr	r2, [pc, #160]	; (8106570 <HAL_DMA_IRQHandler+0x69c>)
 81064d0:	4293      	cmp	r3, r2
 81064d2:	d03b      	beq.n	810654c <HAL_DMA_IRQHandler+0x678>
 81064d4:	687b      	ldr	r3, [r7, #4]
 81064d6:	681b      	ldr	r3, [r3, #0]
 81064d8:	4a26      	ldr	r2, [pc, #152]	; (8106574 <HAL_DMA_IRQHandler+0x6a0>)
 81064da:	4293      	cmp	r3, r2
 81064dc:	d036      	beq.n	810654c <HAL_DMA_IRQHandler+0x678>
 81064de:	687b      	ldr	r3, [r7, #4]
 81064e0:	681b      	ldr	r3, [r3, #0]
 81064e2:	4a25      	ldr	r2, [pc, #148]	; (8106578 <HAL_DMA_IRQHandler+0x6a4>)
 81064e4:	4293      	cmp	r3, r2
 81064e6:	d031      	beq.n	810654c <HAL_DMA_IRQHandler+0x678>
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	681b      	ldr	r3, [r3, #0]
 81064ec:	4a23      	ldr	r2, [pc, #140]	; (810657c <HAL_DMA_IRQHandler+0x6a8>)
 81064ee:	4293      	cmp	r3, r2
 81064f0:	d02c      	beq.n	810654c <HAL_DMA_IRQHandler+0x678>
 81064f2:	687b      	ldr	r3, [r7, #4]
 81064f4:	681b      	ldr	r3, [r3, #0]
 81064f6:	4a22      	ldr	r2, [pc, #136]	; (8106580 <HAL_DMA_IRQHandler+0x6ac>)
 81064f8:	4293      	cmp	r3, r2
 81064fa:	d027      	beq.n	810654c <HAL_DMA_IRQHandler+0x678>
 81064fc:	687b      	ldr	r3, [r7, #4]
 81064fe:	681b      	ldr	r3, [r3, #0]
 8106500:	4a20      	ldr	r2, [pc, #128]	; (8106584 <HAL_DMA_IRQHandler+0x6b0>)
 8106502:	4293      	cmp	r3, r2
 8106504:	d022      	beq.n	810654c <HAL_DMA_IRQHandler+0x678>
 8106506:	687b      	ldr	r3, [r7, #4]
 8106508:	681b      	ldr	r3, [r3, #0]
 810650a:	4a1f      	ldr	r2, [pc, #124]	; (8106588 <HAL_DMA_IRQHandler+0x6b4>)
 810650c:	4293      	cmp	r3, r2
 810650e:	d01d      	beq.n	810654c <HAL_DMA_IRQHandler+0x678>
 8106510:	687b      	ldr	r3, [r7, #4]
 8106512:	681b      	ldr	r3, [r3, #0]
 8106514:	4a1d      	ldr	r2, [pc, #116]	; (810658c <HAL_DMA_IRQHandler+0x6b8>)
 8106516:	4293      	cmp	r3, r2
 8106518:	d018      	beq.n	810654c <HAL_DMA_IRQHandler+0x678>
 810651a:	687b      	ldr	r3, [r7, #4]
 810651c:	681b      	ldr	r3, [r3, #0]
 810651e:	4a1c      	ldr	r2, [pc, #112]	; (8106590 <HAL_DMA_IRQHandler+0x6bc>)
 8106520:	4293      	cmp	r3, r2
 8106522:	d013      	beq.n	810654c <HAL_DMA_IRQHandler+0x678>
 8106524:	687b      	ldr	r3, [r7, #4]
 8106526:	681b      	ldr	r3, [r3, #0]
 8106528:	4a1a      	ldr	r2, [pc, #104]	; (8106594 <HAL_DMA_IRQHandler+0x6c0>)
 810652a:	4293      	cmp	r3, r2
 810652c:	d00e      	beq.n	810654c <HAL_DMA_IRQHandler+0x678>
 810652e:	687b      	ldr	r3, [r7, #4]
 8106530:	681b      	ldr	r3, [r3, #0]
 8106532:	4a19      	ldr	r2, [pc, #100]	; (8106598 <HAL_DMA_IRQHandler+0x6c4>)
 8106534:	4293      	cmp	r3, r2
 8106536:	d009      	beq.n	810654c <HAL_DMA_IRQHandler+0x678>
 8106538:	687b      	ldr	r3, [r7, #4]
 810653a:	681b      	ldr	r3, [r3, #0]
 810653c:	4a17      	ldr	r2, [pc, #92]	; (810659c <HAL_DMA_IRQHandler+0x6c8>)
 810653e:	4293      	cmp	r3, r2
 8106540:	d004      	beq.n	810654c <HAL_DMA_IRQHandler+0x678>
 8106542:	687b      	ldr	r3, [r7, #4]
 8106544:	681b      	ldr	r3, [r3, #0]
 8106546:	4a16      	ldr	r2, [pc, #88]	; (81065a0 <HAL_DMA_IRQHandler+0x6cc>)
 8106548:	4293      	cmp	r3, r2
 810654a:	d12b      	bne.n	81065a4 <HAL_DMA_IRQHandler+0x6d0>
 810654c:	687b      	ldr	r3, [r7, #4]
 810654e:	681b      	ldr	r3, [r3, #0]
 8106550:	681b      	ldr	r3, [r3, #0]
 8106552:	f003 0310 	and.w	r3, r3, #16
 8106556:	2b00      	cmp	r3, #0
 8106558:	bf14      	ite	ne
 810655a:	2301      	movne	r3, #1
 810655c:	2300      	moveq	r3, #0
 810655e:	b2db      	uxtb	r3, r3
 8106560:	e02a      	b.n	81065b8 <HAL_DMA_IRQHandler+0x6e4>
 8106562:	bf00      	nop
 8106564:	40020010 	.word	0x40020010
 8106568:	40020028 	.word	0x40020028
 810656c:	40020040 	.word	0x40020040
 8106570:	40020058 	.word	0x40020058
 8106574:	40020070 	.word	0x40020070
 8106578:	40020088 	.word	0x40020088
 810657c:	400200a0 	.word	0x400200a0
 8106580:	400200b8 	.word	0x400200b8
 8106584:	40020410 	.word	0x40020410
 8106588:	40020428 	.word	0x40020428
 810658c:	40020440 	.word	0x40020440
 8106590:	40020458 	.word	0x40020458
 8106594:	40020470 	.word	0x40020470
 8106598:	40020488 	.word	0x40020488
 810659c:	400204a0 	.word	0x400204a0
 81065a0:	400204b8 	.word	0x400204b8
 81065a4:	687b      	ldr	r3, [r7, #4]
 81065a6:	681b      	ldr	r3, [r3, #0]
 81065a8:	681b      	ldr	r3, [r3, #0]
 81065aa:	f003 0302 	and.w	r3, r3, #2
 81065ae:	2b00      	cmp	r3, #0
 81065b0:	bf14      	ite	ne
 81065b2:	2301      	movne	r3, #1
 81065b4:	2300      	moveq	r3, #0
 81065b6:	b2db      	uxtb	r3, r3
 81065b8:	2b00      	cmp	r3, #0
 81065ba:	f000 8087 	beq.w	81066cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 81065be:	687b      	ldr	r3, [r7, #4]
 81065c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81065c2:	f003 031f 	and.w	r3, r3, #31
 81065c6:	2220      	movs	r2, #32
 81065c8:	409a      	lsls	r2, r3
 81065ca:	6a3b      	ldr	r3, [r7, #32]
 81065cc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 81065ce:	687b      	ldr	r3, [r7, #4]
 81065d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81065d4:	b2db      	uxtb	r3, r3
 81065d6:	2b04      	cmp	r3, #4
 81065d8:	d139      	bne.n	810664e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 81065da:	687b      	ldr	r3, [r7, #4]
 81065dc:	681b      	ldr	r3, [r3, #0]
 81065de:	681a      	ldr	r2, [r3, #0]
 81065e0:	687b      	ldr	r3, [r7, #4]
 81065e2:	681b      	ldr	r3, [r3, #0]
 81065e4:	f022 0216 	bic.w	r2, r2, #22
 81065e8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81065ea:	687b      	ldr	r3, [r7, #4]
 81065ec:	681b      	ldr	r3, [r3, #0]
 81065ee:	695a      	ldr	r2, [r3, #20]
 81065f0:	687b      	ldr	r3, [r7, #4]
 81065f2:	681b      	ldr	r3, [r3, #0]
 81065f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81065f8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 81065fa:	687b      	ldr	r3, [r7, #4]
 81065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81065fe:	2b00      	cmp	r3, #0
 8106600:	d103      	bne.n	810660a <HAL_DMA_IRQHandler+0x736>
 8106602:	687b      	ldr	r3, [r7, #4]
 8106604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106606:	2b00      	cmp	r3, #0
 8106608:	d007      	beq.n	810661a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810660a:	687b      	ldr	r3, [r7, #4]
 810660c:	681b      	ldr	r3, [r3, #0]
 810660e:	681a      	ldr	r2, [r3, #0]
 8106610:	687b      	ldr	r3, [r7, #4]
 8106612:	681b      	ldr	r3, [r3, #0]
 8106614:	f022 0208 	bic.w	r2, r2, #8
 8106618:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810661a:	687b      	ldr	r3, [r7, #4]
 810661c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810661e:	f003 031f 	and.w	r3, r3, #31
 8106622:	223f      	movs	r2, #63	; 0x3f
 8106624:	409a      	lsls	r2, r3
 8106626:	6a3b      	ldr	r3, [r7, #32]
 8106628:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810662a:	687b      	ldr	r3, [r7, #4]
 810662c:	2201      	movs	r2, #1
 810662e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8106632:	687b      	ldr	r3, [r7, #4]
 8106634:	2200      	movs	r2, #0
 8106636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 810663a:	687b      	ldr	r3, [r7, #4]
 810663c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810663e:	2b00      	cmp	r3, #0
 8106640:	f000 834a 	beq.w	8106cd8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8106644:	687b      	ldr	r3, [r7, #4]
 8106646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106648:	6878      	ldr	r0, [r7, #4]
 810664a:	4798      	blx	r3
          }
          return;
 810664c:	e344      	b.n	8106cd8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 810664e:	687b      	ldr	r3, [r7, #4]
 8106650:	681b      	ldr	r3, [r3, #0]
 8106652:	681b      	ldr	r3, [r3, #0]
 8106654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8106658:	2b00      	cmp	r3, #0
 810665a:	d018      	beq.n	810668e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 810665c:	687b      	ldr	r3, [r7, #4]
 810665e:	681b      	ldr	r3, [r3, #0]
 8106660:	681b      	ldr	r3, [r3, #0]
 8106662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8106666:	2b00      	cmp	r3, #0
 8106668:	d108      	bne.n	810667c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 810666a:	687b      	ldr	r3, [r7, #4]
 810666c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810666e:	2b00      	cmp	r3, #0
 8106670:	d02c      	beq.n	81066cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8106672:	687b      	ldr	r3, [r7, #4]
 8106674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106676:	6878      	ldr	r0, [r7, #4]
 8106678:	4798      	blx	r3
 810667a:	e027      	b.n	81066cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 810667c:	687b      	ldr	r3, [r7, #4]
 810667e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106680:	2b00      	cmp	r3, #0
 8106682:	d023      	beq.n	81066cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8106684:	687b      	ldr	r3, [r7, #4]
 8106686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106688:	6878      	ldr	r0, [r7, #4]
 810668a:	4798      	blx	r3
 810668c:	e01e      	b.n	81066cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 810668e:	687b      	ldr	r3, [r7, #4]
 8106690:	681b      	ldr	r3, [r3, #0]
 8106692:	681b      	ldr	r3, [r3, #0]
 8106694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106698:	2b00      	cmp	r3, #0
 810669a:	d10f      	bne.n	81066bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 810669c:	687b      	ldr	r3, [r7, #4]
 810669e:	681b      	ldr	r3, [r3, #0]
 81066a0:	681a      	ldr	r2, [r3, #0]
 81066a2:	687b      	ldr	r3, [r7, #4]
 81066a4:	681b      	ldr	r3, [r3, #0]
 81066a6:	f022 0210 	bic.w	r2, r2, #16
 81066aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 81066ac:	687b      	ldr	r3, [r7, #4]
 81066ae:	2201      	movs	r2, #1
 81066b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 81066b4:	687b      	ldr	r3, [r7, #4]
 81066b6:	2200      	movs	r2, #0
 81066b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 81066bc:	687b      	ldr	r3, [r7, #4]
 81066be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81066c0:	2b00      	cmp	r3, #0
 81066c2:	d003      	beq.n	81066cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81066c8:	6878      	ldr	r0, [r7, #4]
 81066ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 81066cc:	687b      	ldr	r3, [r7, #4]
 81066ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81066d0:	2b00      	cmp	r3, #0
 81066d2:	f000 8306 	beq.w	8106ce2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 81066d6:	687b      	ldr	r3, [r7, #4]
 81066d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81066da:	f003 0301 	and.w	r3, r3, #1
 81066de:	2b00      	cmp	r3, #0
 81066e0:	f000 8088 	beq.w	81067f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 81066e4:	687b      	ldr	r3, [r7, #4]
 81066e6:	2204      	movs	r2, #4
 81066e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 81066ec:	687b      	ldr	r3, [r7, #4]
 81066ee:	681b      	ldr	r3, [r3, #0]
 81066f0:	4a7a      	ldr	r2, [pc, #488]	; (81068dc <HAL_DMA_IRQHandler+0xa08>)
 81066f2:	4293      	cmp	r3, r2
 81066f4:	d04a      	beq.n	810678c <HAL_DMA_IRQHandler+0x8b8>
 81066f6:	687b      	ldr	r3, [r7, #4]
 81066f8:	681b      	ldr	r3, [r3, #0]
 81066fa:	4a79      	ldr	r2, [pc, #484]	; (81068e0 <HAL_DMA_IRQHandler+0xa0c>)
 81066fc:	4293      	cmp	r3, r2
 81066fe:	d045      	beq.n	810678c <HAL_DMA_IRQHandler+0x8b8>
 8106700:	687b      	ldr	r3, [r7, #4]
 8106702:	681b      	ldr	r3, [r3, #0]
 8106704:	4a77      	ldr	r2, [pc, #476]	; (81068e4 <HAL_DMA_IRQHandler+0xa10>)
 8106706:	4293      	cmp	r3, r2
 8106708:	d040      	beq.n	810678c <HAL_DMA_IRQHandler+0x8b8>
 810670a:	687b      	ldr	r3, [r7, #4]
 810670c:	681b      	ldr	r3, [r3, #0]
 810670e:	4a76      	ldr	r2, [pc, #472]	; (81068e8 <HAL_DMA_IRQHandler+0xa14>)
 8106710:	4293      	cmp	r3, r2
 8106712:	d03b      	beq.n	810678c <HAL_DMA_IRQHandler+0x8b8>
 8106714:	687b      	ldr	r3, [r7, #4]
 8106716:	681b      	ldr	r3, [r3, #0]
 8106718:	4a74      	ldr	r2, [pc, #464]	; (81068ec <HAL_DMA_IRQHandler+0xa18>)
 810671a:	4293      	cmp	r3, r2
 810671c:	d036      	beq.n	810678c <HAL_DMA_IRQHandler+0x8b8>
 810671e:	687b      	ldr	r3, [r7, #4]
 8106720:	681b      	ldr	r3, [r3, #0]
 8106722:	4a73      	ldr	r2, [pc, #460]	; (81068f0 <HAL_DMA_IRQHandler+0xa1c>)
 8106724:	4293      	cmp	r3, r2
 8106726:	d031      	beq.n	810678c <HAL_DMA_IRQHandler+0x8b8>
 8106728:	687b      	ldr	r3, [r7, #4]
 810672a:	681b      	ldr	r3, [r3, #0]
 810672c:	4a71      	ldr	r2, [pc, #452]	; (81068f4 <HAL_DMA_IRQHandler+0xa20>)
 810672e:	4293      	cmp	r3, r2
 8106730:	d02c      	beq.n	810678c <HAL_DMA_IRQHandler+0x8b8>
 8106732:	687b      	ldr	r3, [r7, #4]
 8106734:	681b      	ldr	r3, [r3, #0]
 8106736:	4a70      	ldr	r2, [pc, #448]	; (81068f8 <HAL_DMA_IRQHandler+0xa24>)
 8106738:	4293      	cmp	r3, r2
 810673a:	d027      	beq.n	810678c <HAL_DMA_IRQHandler+0x8b8>
 810673c:	687b      	ldr	r3, [r7, #4]
 810673e:	681b      	ldr	r3, [r3, #0]
 8106740:	4a6e      	ldr	r2, [pc, #440]	; (81068fc <HAL_DMA_IRQHandler+0xa28>)
 8106742:	4293      	cmp	r3, r2
 8106744:	d022      	beq.n	810678c <HAL_DMA_IRQHandler+0x8b8>
 8106746:	687b      	ldr	r3, [r7, #4]
 8106748:	681b      	ldr	r3, [r3, #0]
 810674a:	4a6d      	ldr	r2, [pc, #436]	; (8106900 <HAL_DMA_IRQHandler+0xa2c>)
 810674c:	4293      	cmp	r3, r2
 810674e:	d01d      	beq.n	810678c <HAL_DMA_IRQHandler+0x8b8>
 8106750:	687b      	ldr	r3, [r7, #4]
 8106752:	681b      	ldr	r3, [r3, #0]
 8106754:	4a6b      	ldr	r2, [pc, #428]	; (8106904 <HAL_DMA_IRQHandler+0xa30>)
 8106756:	4293      	cmp	r3, r2
 8106758:	d018      	beq.n	810678c <HAL_DMA_IRQHandler+0x8b8>
 810675a:	687b      	ldr	r3, [r7, #4]
 810675c:	681b      	ldr	r3, [r3, #0]
 810675e:	4a6a      	ldr	r2, [pc, #424]	; (8106908 <HAL_DMA_IRQHandler+0xa34>)
 8106760:	4293      	cmp	r3, r2
 8106762:	d013      	beq.n	810678c <HAL_DMA_IRQHandler+0x8b8>
 8106764:	687b      	ldr	r3, [r7, #4]
 8106766:	681b      	ldr	r3, [r3, #0]
 8106768:	4a68      	ldr	r2, [pc, #416]	; (810690c <HAL_DMA_IRQHandler+0xa38>)
 810676a:	4293      	cmp	r3, r2
 810676c:	d00e      	beq.n	810678c <HAL_DMA_IRQHandler+0x8b8>
 810676e:	687b      	ldr	r3, [r7, #4]
 8106770:	681b      	ldr	r3, [r3, #0]
 8106772:	4a67      	ldr	r2, [pc, #412]	; (8106910 <HAL_DMA_IRQHandler+0xa3c>)
 8106774:	4293      	cmp	r3, r2
 8106776:	d009      	beq.n	810678c <HAL_DMA_IRQHandler+0x8b8>
 8106778:	687b      	ldr	r3, [r7, #4]
 810677a:	681b      	ldr	r3, [r3, #0]
 810677c:	4a65      	ldr	r2, [pc, #404]	; (8106914 <HAL_DMA_IRQHandler+0xa40>)
 810677e:	4293      	cmp	r3, r2
 8106780:	d004      	beq.n	810678c <HAL_DMA_IRQHandler+0x8b8>
 8106782:	687b      	ldr	r3, [r7, #4]
 8106784:	681b      	ldr	r3, [r3, #0]
 8106786:	4a64      	ldr	r2, [pc, #400]	; (8106918 <HAL_DMA_IRQHandler+0xa44>)
 8106788:	4293      	cmp	r3, r2
 810678a:	d108      	bne.n	810679e <HAL_DMA_IRQHandler+0x8ca>
 810678c:	687b      	ldr	r3, [r7, #4]
 810678e:	681b      	ldr	r3, [r3, #0]
 8106790:	681a      	ldr	r2, [r3, #0]
 8106792:	687b      	ldr	r3, [r7, #4]
 8106794:	681b      	ldr	r3, [r3, #0]
 8106796:	f022 0201 	bic.w	r2, r2, #1
 810679a:	601a      	str	r2, [r3, #0]
 810679c:	e007      	b.n	81067ae <HAL_DMA_IRQHandler+0x8da>
 810679e:	687b      	ldr	r3, [r7, #4]
 81067a0:	681b      	ldr	r3, [r3, #0]
 81067a2:	681a      	ldr	r2, [r3, #0]
 81067a4:	687b      	ldr	r3, [r7, #4]
 81067a6:	681b      	ldr	r3, [r3, #0]
 81067a8:	f022 0201 	bic.w	r2, r2, #1
 81067ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 81067ae:	68fb      	ldr	r3, [r7, #12]
 81067b0:	3301      	adds	r3, #1
 81067b2:	60fb      	str	r3, [r7, #12]
 81067b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81067b6:	429a      	cmp	r2, r3
 81067b8:	d307      	bcc.n	81067ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 81067ba:	687b      	ldr	r3, [r7, #4]
 81067bc:	681b      	ldr	r3, [r3, #0]
 81067be:	681b      	ldr	r3, [r3, #0]
 81067c0:	f003 0301 	and.w	r3, r3, #1
 81067c4:	2b00      	cmp	r3, #0
 81067c6:	d1f2      	bne.n	81067ae <HAL_DMA_IRQHandler+0x8da>
 81067c8:	e000      	b.n	81067cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 81067ca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81067cc:	687b      	ldr	r3, [r7, #4]
 81067ce:	681b      	ldr	r3, [r3, #0]
 81067d0:	681b      	ldr	r3, [r3, #0]
 81067d2:	f003 0301 	and.w	r3, r3, #1
 81067d6:	2b00      	cmp	r3, #0
 81067d8:	d004      	beq.n	81067e4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 81067da:	687b      	ldr	r3, [r7, #4]
 81067dc:	2203      	movs	r2, #3
 81067de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 81067e2:	e003      	b.n	81067ec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 81067e4:	687b      	ldr	r3, [r7, #4]
 81067e6:	2201      	movs	r2, #1
 81067e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81067ec:	687b      	ldr	r3, [r7, #4]
 81067ee:	2200      	movs	r2, #0
 81067f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 81067f4:	687b      	ldr	r3, [r7, #4]
 81067f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81067f8:	2b00      	cmp	r3, #0
 81067fa:	f000 8272 	beq.w	8106ce2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81067fe:	687b      	ldr	r3, [r7, #4]
 8106800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106802:	6878      	ldr	r0, [r7, #4]
 8106804:	4798      	blx	r3
 8106806:	e26c      	b.n	8106ce2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8106808:	687b      	ldr	r3, [r7, #4]
 810680a:	681b      	ldr	r3, [r3, #0]
 810680c:	4a43      	ldr	r2, [pc, #268]	; (810691c <HAL_DMA_IRQHandler+0xa48>)
 810680e:	4293      	cmp	r3, r2
 8106810:	d022      	beq.n	8106858 <HAL_DMA_IRQHandler+0x984>
 8106812:	687b      	ldr	r3, [r7, #4]
 8106814:	681b      	ldr	r3, [r3, #0]
 8106816:	4a42      	ldr	r2, [pc, #264]	; (8106920 <HAL_DMA_IRQHandler+0xa4c>)
 8106818:	4293      	cmp	r3, r2
 810681a:	d01d      	beq.n	8106858 <HAL_DMA_IRQHandler+0x984>
 810681c:	687b      	ldr	r3, [r7, #4]
 810681e:	681b      	ldr	r3, [r3, #0]
 8106820:	4a40      	ldr	r2, [pc, #256]	; (8106924 <HAL_DMA_IRQHandler+0xa50>)
 8106822:	4293      	cmp	r3, r2
 8106824:	d018      	beq.n	8106858 <HAL_DMA_IRQHandler+0x984>
 8106826:	687b      	ldr	r3, [r7, #4]
 8106828:	681b      	ldr	r3, [r3, #0]
 810682a:	4a3f      	ldr	r2, [pc, #252]	; (8106928 <HAL_DMA_IRQHandler+0xa54>)
 810682c:	4293      	cmp	r3, r2
 810682e:	d013      	beq.n	8106858 <HAL_DMA_IRQHandler+0x984>
 8106830:	687b      	ldr	r3, [r7, #4]
 8106832:	681b      	ldr	r3, [r3, #0]
 8106834:	4a3d      	ldr	r2, [pc, #244]	; (810692c <HAL_DMA_IRQHandler+0xa58>)
 8106836:	4293      	cmp	r3, r2
 8106838:	d00e      	beq.n	8106858 <HAL_DMA_IRQHandler+0x984>
 810683a:	687b      	ldr	r3, [r7, #4]
 810683c:	681b      	ldr	r3, [r3, #0]
 810683e:	4a3c      	ldr	r2, [pc, #240]	; (8106930 <HAL_DMA_IRQHandler+0xa5c>)
 8106840:	4293      	cmp	r3, r2
 8106842:	d009      	beq.n	8106858 <HAL_DMA_IRQHandler+0x984>
 8106844:	687b      	ldr	r3, [r7, #4]
 8106846:	681b      	ldr	r3, [r3, #0]
 8106848:	4a3a      	ldr	r2, [pc, #232]	; (8106934 <HAL_DMA_IRQHandler+0xa60>)
 810684a:	4293      	cmp	r3, r2
 810684c:	d004      	beq.n	8106858 <HAL_DMA_IRQHandler+0x984>
 810684e:	687b      	ldr	r3, [r7, #4]
 8106850:	681b      	ldr	r3, [r3, #0]
 8106852:	4a39      	ldr	r2, [pc, #228]	; (8106938 <HAL_DMA_IRQHandler+0xa64>)
 8106854:	4293      	cmp	r3, r2
 8106856:	d101      	bne.n	810685c <HAL_DMA_IRQHandler+0x988>
 8106858:	2301      	movs	r3, #1
 810685a:	e000      	b.n	810685e <HAL_DMA_IRQHandler+0x98a>
 810685c:	2300      	movs	r3, #0
 810685e:	2b00      	cmp	r3, #0
 8106860:	f000 823f 	beq.w	8106ce2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8106864:	687b      	ldr	r3, [r7, #4]
 8106866:	681b      	ldr	r3, [r3, #0]
 8106868:	681b      	ldr	r3, [r3, #0]
 810686a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 810686c:	687b      	ldr	r3, [r7, #4]
 810686e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106870:	f003 031f 	and.w	r3, r3, #31
 8106874:	2204      	movs	r2, #4
 8106876:	409a      	lsls	r2, r3
 8106878:	697b      	ldr	r3, [r7, #20]
 810687a:	4013      	ands	r3, r2
 810687c:	2b00      	cmp	r3, #0
 810687e:	f000 80cd 	beq.w	8106a1c <HAL_DMA_IRQHandler+0xb48>
 8106882:	693b      	ldr	r3, [r7, #16]
 8106884:	f003 0304 	and.w	r3, r3, #4
 8106888:	2b00      	cmp	r3, #0
 810688a:	f000 80c7 	beq.w	8106a1c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 810688e:	687b      	ldr	r3, [r7, #4]
 8106890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106892:	f003 031f 	and.w	r3, r3, #31
 8106896:	2204      	movs	r2, #4
 8106898:	409a      	lsls	r2, r3
 810689a:	69fb      	ldr	r3, [r7, #28]
 810689c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810689e:	693b      	ldr	r3, [r7, #16]
 81068a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81068a4:	2b00      	cmp	r3, #0
 81068a6:	d049      	beq.n	810693c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81068a8:	693b      	ldr	r3, [r7, #16]
 81068aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81068ae:	2b00      	cmp	r3, #0
 81068b0:	d109      	bne.n	81068c6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 81068b2:	687b      	ldr	r3, [r7, #4]
 81068b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81068b6:	2b00      	cmp	r3, #0
 81068b8:	f000 8210 	beq.w	8106cdc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 81068bc:	687b      	ldr	r3, [r7, #4]
 81068be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81068c0:	6878      	ldr	r0, [r7, #4]
 81068c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81068c4:	e20a      	b.n	8106cdc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 81068c6:	687b      	ldr	r3, [r7, #4]
 81068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81068ca:	2b00      	cmp	r3, #0
 81068cc:	f000 8206 	beq.w	8106cdc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 81068d0:	687b      	ldr	r3, [r7, #4]
 81068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81068d4:	6878      	ldr	r0, [r7, #4]
 81068d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81068d8:	e200      	b.n	8106cdc <HAL_DMA_IRQHandler+0xe08>
 81068da:	bf00      	nop
 81068dc:	40020010 	.word	0x40020010
 81068e0:	40020028 	.word	0x40020028
 81068e4:	40020040 	.word	0x40020040
 81068e8:	40020058 	.word	0x40020058
 81068ec:	40020070 	.word	0x40020070
 81068f0:	40020088 	.word	0x40020088
 81068f4:	400200a0 	.word	0x400200a0
 81068f8:	400200b8 	.word	0x400200b8
 81068fc:	40020410 	.word	0x40020410
 8106900:	40020428 	.word	0x40020428
 8106904:	40020440 	.word	0x40020440
 8106908:	40020458 	.word	0x40020458
 810690c:	40020470 	.word	0x40020470
 8106910:	40020488 	.word	0x40020488
 8106914:	400204a0 	.word	0x400204a0
 8106918:	400204b8 	.word	0x400204b8
 810691c:	58025408 	.word	0x58025408
 8106920:	5802541c 	.word	0x5802541c
 8106924:	58025430 	.word	0x58025430
 8106928:	58025444 	.word	0x58025444
 810692c:	58025458 	.word	0x58025458
 8106930:	5802546c 	.word	0x5802546c
 8106934:	58025480 	.word	0x58025480
 8106938:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810693c:	693b      	ldr	r3, [r7, #16]
 810693e:	f003 0320 	and.w	r3, r3, #32
 8106942:	2b00      	cmp	r3, #0
 8106944:	d160      	bne.n	8106a08 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8106946:	687b      	ldr	r3, [r7, #4]
 8106948:	681b      	ldr	r3, [r3, #0]
 810694a:	4a7f      	ldr	r2, [pc, #508]	; (8106b48 <HAL_DMA_IRQHandler+0xc74>)
 810694c:	4293      	cmp	r3, r2
 810694e:	d04a      	beq.n	81069e6 <HAL_DMA_IRQHandler+0xb12>
 8106950:	687b      	ldr	r3, [r7, #4]
 8106952:	681b      	ldr	r3, [r3, #0]
 8106954:	4a7d      	ldr	r2, [pc, #500]	; (8106b4c <HAL_DMA_IRQHandler+0xc78>)
 8106956:	4293      	cmp	r3, r2
 8106958:	d045      	beq.n	81069e6 <HAL_DMA_IRQHandler+0xb12>
 810695a:	687b      	ldr	r3, [r7, #4]
 810695c:	681b      	ldr	r3, [r3, #0]
 810695e:	4a7c      	ldr	r2, [pc, #496]	; (8106b50 <HAL_DMA_IRQHandler+0xc7c>)
 8106960:	4293      	cmp	r3, r2
 8106962:	d040      	beq.n	81069e6 <HAL_DMA_IRQHandler+0xb12>
 8106964:	687b      	ldr	r3, [r7, #4]
 8106966:	681b      	ldr	r3, [r3, #0]
 8106968:	4a7a      	ldr	r2, [pc, #488]	; (8106b54 <HAL_DMA_IRQHandler+0xc80>)
 810696a:	4293      	cmp	r3, r2
 810696c:	d03b      	beq.n	81069e6 <HAL_DMA_IRQHandler+0xb12>
 810696e:	687b      	ldr	r3, [r7, #4]
 8106970:	681b      	ldr	r3, [r3, #0]
 8106972:	4a79      	ldr	r2, [pc, #484]	; (8106b58 <HAL_DMA_IRQHandler+0xc84>)
 8106974:	4293      	cmp	r3, r2
 8106976:	d036      	beq.n	81069e6 <HAL_DMA_IRQHandler+0xb12>
 8106978:	687b      	ldr	r3, [r7, #4]
 810697a:	681b      	ldr	r3, [r3, #0]
 810697c:	4a77      	ldr	r2, [pc, #476]	; (8106b5c <HAL_DMA_IRQHandler+0xc88>)
 810697e:	4293      	cmp	r3, r2
 8106980:	d031      	beq.n	81069e6 <HAL_DMA_IRQHandler+0xb12>
 8106982:	687b      	ldr	r3, [r7, #4]
 8106984:	681b      	ldr	r3, [r3, #0]
 8106986:	4a76      	ldr	r2, [pc, #472]	; (8106b60 <HAL_DMA_IRQHandler+0xc8c>)
 8106988:	4293      	cmp	r3, r2
 810698a:	d02c      	beq.n	81069e6 <HAL_DMA_IRQHandler+0xb12>
 810698c:	687b      	ldr	r3, [r7, #4]
 810698e:	681b      	ldr	r3, [r3, #0]
 8106990:	4a74      	ldr	r2, [pc, #464]	; (8106b64 <HAL_DMA_IRQHandler+0xc90>)
 8106992:	4293      	cmp	r3, r2
 8106994:	d027      	beq.n	81069e6 <HAL_DMA_IRQHandler+0xb12>
 8106996:	687b      	ldr	r3, [r7, #4]
 8106998:	681b      	ldr	r3, [r3, #0]
 810699a:	4a73      	ldr	r2, [pc, #460]	; (8106b68 <HAL_DMA_IRQHandler+0xc94>)
 810699c:	4293      	cmp	r3, r2
 810699e:	d022      	beq.n	81069e6 <HAL_DMA_IRQHandler+0xb12>
 81069a0:	687b      	ldr	r3, [r7, #4]
 81069a2:	681b      	ldr	r3, [r3, #0]
 81069a4:	4a71      	ldr	r2, [pc, #452]	; (8106b6c <HAL_DMA_IRQHandler+0xc98>)
 81069a6:	4293      	cmp	r3, r2
 81069a8:	d01d      	beq.n	81069e6 <HAL_DMA_IRQHandler+0xb12>
 81069aa:	687b      	ldr	r3, [r7, #4]
 81069ac:	681b      	ldr	r3, [r3, #0]
 81069ae:	4a70      	ldr	r2, [pc, #448]	; (8106b70 <HAL_DMA_IRQHandler+0xc9c>)
 81069b0:	4293      	cmp	r3, r2
 81069b2:	d018      	beq.n	81069e6 <HAL_DMA_IRQHandler+0xb12>
 81069b4:	687b      	ldr	r3, [r7, #4]
 81069b6:	681b      	ldr	r3, [r3, #0]
 81069b8:	4a6e      	ldr	r2, [pc, #440]	; (8106b74 <HAL_DMA_IRQHandler+0xca0>)
 81069ba:	4293      	cmp	r3, r2
 81069bc:	d013      	beq.n	81069e6 <HAL_DMA_IRQHandler+0xb12>
 81069be:	687b      	ldr	r3, [r7, #4]
 81069c0:	681b      	ldr	r3, [r3, #0]
 81069c2:	4a6d      	ldr	r2, [pc, #436]	; (8106b78 <HAL_DMA_IRQHandler+0xca4>)
 81069c4:	4293      	cmp	r3, r2
 81069c6:	d00e      	beq.n	81069e6 <HAL_DMA_IRQHandler+0xb12>
 81069c8:	687b      	ldr	r3, [r7, #4]
 81069ca:	681b      	ldr	r3, [r3, #0]
 81069cc:	4a6b      	ldr	r2, [pc, #428]	; (8106b7c <HAL_DMA_IRQHandler+0xca8>)
 81069ce:	4293      	cmp	r3, r2
 81069d0:	d009      	beq.n	81069e6 <HAL_DMA_IRQHandler+0xb12>
 81069d2:	687b      	ldr	r3, [r7, #4]
 81069d4:	681b      	ldr	r3, [r3, #0]
 81069d6:	4a6a      	ldr	r2, [pc, #424]	; (8106b80 <HAL_DMA_IRQHandler+0xcac>)
 81069d8:	4293      	cmp	r3, r2
 81069da:	d004      	beq.n	81069e6 <HAL_DMA_IRQHandler+0xb12>
 81069dc:	687b      	ldr	r3, [r7, #4]
 81069de:	681b      	ldr	r3, [r3, #0]
 81069e0:	4a68      	ldr	r2, [pc, #416]	; (8106b84 <HAL_DMA_IRQHandler+0xcb0>)
 81069e2:	4293      	cmp	r3, r2
 81069e4:	d108      	bne.n	81069f8 <HAL_DMA_IRQHandler+0xb24>
 81069e6:	687b      	ldr	r3, [r7, #4]
 81069e8:	681b      	ldr	r3, [r3, #0]
 81069ea:	681a      	ldr	r2, [r3, #0]
 81069ec:	687b      	ldr	r3, [r7, #4]
 81069ee:	681b      	ldr	r3, [r3, #0]
 81069f0:	f022 0208 	bic.w	r2, r2, #8
 81069f4:	601a      	str	r2, [r3, #0]
 81069f6:	e007      	b.n	8106a08 <HAL_DMA_IRQHandler+0xb34>
 81069f8:	687b      	ldr	r3, [r7, #4]
 81069fa:	681b      	ldr	r3, [r3, #0]
 81069fc:	681a      	ldr	r2, [r3, #0]
 81069fe:	687b      	ldr	r3, [r7, #4]
 8106a00:	681b      	ldr	r3, [r3, #0]
 8106a02:	f022 0204 	bic.w	r2, r2, #4
 8106a06:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8106a08:	687b      	ldr	r3, [r7, #4]
 8106a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106a0c:	2b00      	cmp	r3, #0
 8106a0e:	f000 8165 	beq.w	8106cdc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8106a12:	687b      	ldr	r3, [r7, #4]
 8106a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106a16:	6878      	ldr	r0, [r7, #4]
 8106a18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106a1a:	e15f      	b.n	8106cdc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8106a1c:	687b      	ldr	r3, [r7, #4]
 8106a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106a20:	f003 031f 	and.w	r3, r3, #31
 8106a24:	2202      	movs	r2, #2
 8106a26:	409a      	lsls	r2, r3
 8106a28:	697b      	ldr	r3, [r7, #20]
 8106a2a:	4013      	ands	r3, r2
 8106a2c:	2b00      	cmp	r3, #0
 8106a2e:	f000 80c5 	beq.w	8106bbc <HAL_DMA_IRQHandler+0xce8>
 8106a32:	693b      	ldr	r3, [r7, #16]
 8106a34:	f003 0302 	and.w	r3, r3, #2
 8106a38:	2b00      	cmp	r3, #0
 8106a3a:	f000 80bf 	beq.w	8106bbc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8106a3e:	687b      	ldr	r3, [r7, #4]
 8106a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106a42:	f003 031f 	and.w	r3, r3, #31
 8106a46:	2202      	movs	r2, #2
 8106a48:	409a      	lsls	r2, r3
 8106a4a:	69fb      	ldr	r3, [r7, #28]
 8106a4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106a4e:	693b      	ldr	r3, [r7, #16]
 8106a50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8106a54:	2b00      	cmp	r3, #0
 8106a56:	d018      	beq.n	8106a8a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8106a58:	693b      	ldr	r3, [r7, #16]
 8106a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106a5e:	2b00      	cmp	r3, #0
 8106a60:	d109      	bne.n	8106a76 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8106a62:	687b      	ldr	r3, [r7, #4]
 8106a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106a66:	2b00      	cmp	r3, #0
 8106a68:	f000 813a 	beq.w	8106ce0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8106a6c:	687b      	ldr	r3, [r7, #4]
 8106a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106a70:	6878      	ldr	r0, [r7, #4]
 8106a72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106a74:	e134      	b.n	8106ce0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8106a76:	687b      	ldr	r3, [r7, #4]
 8106a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106a7a:	2b00      	cmp	r3, #0
 8106a7c:	f000 8130 	beq.w	8106ce0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8106a80:	687b      	ldr	r3, [r7, #4]
 8106a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106a84:	6878      	ldr	r0, [r7, #4]
 8106a86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106a88:	e12a      	b.n	8106ce0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8106a8a:	693b      	ldr	r3, [r7, #16]
 8106a8c:	f003 0320 	and.w	r3, r3, #32
 8106a90:	2b00      	cmp	r3, #0
 8106a92:	f040 8089 	bne.w	8106ba8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8106a96:	687b      	ldr	r3, [r7, #4]
 8106a98:	681b      	ldr	r3, [r3, #0]
 8106a9a:	4a2b      	ldr	r2, [pc, #172]	; (8106b48 <HAL_DMA_IRQHandler+0xc74>)
 8106a9c:	4293      	cmp	r3, r2
 8106a9e:	d04a      	beq.n	8106b36 <HAL_DMA_IRQHandler+0xc62>
 8106aa0:	687b      	ldr	r3, [r7, #4]
 8106aa2:	681b      	ldr	r3, [r3, #0]
 8106aa4:	4a29      	ldr	r2, [pc, #164]	; (8106b4c <HAL_DMA_IRQHandler+0xc78>)
 8106aa6:	4293      	cmp	r3, r2
 8106aa8:	d045      	beq.n	8106b36 <HAL_DMA_IRQHandler+0xc62>
 8106aaa:	687b      	ldr	r3, [r7, #4]
 8106aac:	681b      	ldr	r3, [r3, #0]
 8106aae:	4a28      	ldr	r2, [pc, #160]	; (8106b50 <HAL_DMA_IRQHandler+0xc7c>)
 8106ab0:	4293      	cmp	r3, r2
 8106ab2:	d040      	beq.n	8106b36 <HAL_DMA_IRQHandler+0xc62>
 8106ab4:	687b      	ldr	r3, [r7, #4]
 8106ab6:	681b      	ldr	r3, [r3, #0]
 8106ab8:	4a26      	ldr	r2, [pc, #152]	; (8106b54 <HAL_DMA_IRQHandler+0xc80>)
 8106aba:	4293      	cmp	r3, r2
 8106abc:	d03b      	beq.n	8106b36 <HAL_DMA_IRQHandler+0xc62>
 8106abe:	687b      	ldr	r3, [r7, #4]
 8106ac0:	681b      	ldr	r3, [r3, #0]
 8106ac2:	4a25      	ldr	r2, [pc, #148]	; (8106b58 <HAL_DMA_IRQHandler+0xc84>)
 8106ac4:	4293      	cmp	r3, r2
 8106ac6:	d036      	beq.n	8106b36 <HAL_DMA_IRQHandler+0xc62>
 8106ac8:	687b      	ldr	r3, [r7, #4]
 8106aca:	681b      	ldr	r3, [r3, #0]
 8106acc:	4a23      	ldr	r2, [pc, #140]	; (8106b5c <HAL_DMA_IRQHandler+0xc88>)
 8106ace:	4293      	cmp	r3, r2
 8106ad0:	d031      	beq.n	8106b36 <HAL_DMA_IRQHandler+0xc62>
 8106ad2:	687b      	ldr	r3, [r7, #4]
 8106ad4:	681b      	ldr	r3, [r3, #0]
 8106ad6:	4a22      	ldr	r2, [pc, #136]	; (8106b60 <HAL_DMA_IRQHandler+0xc8c>)
 8106ad8:	4293      	cmp	r3, r2
 8106ada:	d02c      	beq.n	8106b36 <HAL_DMA_IRQHandler+0xc62>
 8106adc:	687b      	ldr	r3, [r7, #4]
 8106ade:	681b      	ldr	r3, [r3, #0]
 8106ae0:	4a20      	ldr	r2, [pc, #128]	; (8106b64 <HAL_DMA_IRQHandler+0xc90>)
 8106ae2:	4293      	cmp	r3, r2
 8106ae4:	d027      	beq.n	8106b36 <HAL_DMA_IRQHandler+0xc62>
 8106ae6:	687b      	ldr	r3, [r7, #4]
 8106ae8:	681b      	ldr	r3, [r3, #0]
 8106aea:	4a1f      	ldr	r2, [pc, #124]	; (8106b68 <HAL_DMA_IRQHandler+0xc94>)
 8106aec:	4293      	cmp	r3, r2
 8106aee:	d022      	beq.n	8106b36 <HAL_DMA_IRQHandler+0xc62>
 8106af0:	687b      	ldr	r3, [r7, #4]
 8106af2:	681b      	ldr	r3, [r3, #0]
 8106af4:	4a1d      	ldr	r2, [pc, #116]	; (8106b6c <HAL_DMA_IRQHandler+0xc98>)
 8106af6:	4293      	cmp	r3, r2
 8106af8:	d01d      	beq.n	8106b36 <HAL_DMA_IRQHandler+0xc62>
 8106afa:	687b      	ldr	r3, [r7, #4]
 8106afc:	681b      	ldr	r3, [r3, #0]
 8106afe:	4a1c      	ldr	r2, [pc, #112]	; (8106b70 <HAL_DMA_IRQHandler+0xc9c>)
 8106b00:	4293      	cmp	r3, r2
 8106b02:	d018      	beq.n	8106b36 <HAL_DMA_IRQHandler+0xc62>
 8106b04:	687b      	ldr	r3, [r7, #4]
 8106b06:	681b      	ldr	r3, [r3, #0]
 8106b08:	4a1a      	ldr	r2, [pc, #104]	; (8106b74 <HAL_DMA_IRQHandler+0xca0>)
 8106b0a:	4293      	cmp	r3, r2
 8106b0c:	d013      	beq.n	8106b36 <HAL_DMA_IRQHandler+0xc62>
 8106b0e:	687b      	ldr	r3, [r7, #4]
 8106b10:	681b      	ldr	r3, [r3, #0]
 8106b12:	4a19      	ldr	r2, [pc, #100]	; (8106b78 <HAL_DMA_IRQHandler+0xca4>)
 8106b14:	4293      	cmp	r3, r2
 8106b16:	d00e      	beq.n	8106b36 <HAL_DMA_IRQHandler+0xc62>
 8106b18:	687b      	ldr	r3, [r7, #4]
 8106b1a:	681b      	ldr	r3, [r3, #0]
 8106b1c:	4a17      	ldr	r2, [pc, #92]	; (8106b7c <HAL_DMA_IRQHandler+0xca8>)
 8106b1e:	4293      	cmp	r3, r2
 8106b20:	d009      	beq.n	8106b36 <HAL_DMA_IRQHandler+0xc62>
 8106b22:	687b      	ldr	r3, [r7, #4]
 8106b24:	681b      	ldr	r3, [r3, #0]
 8106b26:	4a16      	ldr	r2, [pc, #88]	; (8106b80 <HAL_DMA_IRQHandler+0xcac>)
 8106b28:	4293      	cmp	r3, r2
 8106b2a:	d004      	beq.n	8106b36 <HAL_DMA_IRQHandler+0xc62>
 8106b2c:	687b      	ldr	r3, [r7, #4]
 8106b2e:	681b      	ldr	r3, [r3, #0]
 8106b30:	4a14      	ldr	r2, [pc, #80]	; (8106b84 <HAL_DMA_IRQHandler+0xcb0>)
 8106b32:	4293      	cmp	r3, r2
 8106b34:	d128      	bne.n	8106b88 <HAL_DMA_IRQHandler+0xcb4>
 8106b36:	687b      	ldr	r3, [r7, #4]
 8106b38:	681b      	ldr	r3, [r3, #0]
 8106b3a:	681a      	ldr	r2, [r3, #0]
 8106b3c:	687b      	ldr	r3, [r7, #4]
 8106b3e:	681b      	ldr	r3, [r3, #0]
 8106b40:	f022 0214 	bic.w	r2, r2, #20
 8106b44:	601a      	str	r2, [r3, #0]
 8106b46:	e027      	b.n	8106b98 <HAL_DMA_IRQHandler+0xcc4>
 8106b48:	40020010 	.word	0x40020010
 8106b4c:	40020028 	.word	0x40020028
 8106b50:	40020040 	.word	0x40020040
 8106b54:	40020058 	.word	0x40020058
 8106b58:	40020070 	.word	0x40020070
 8106b5c:	40020088 	.word	0x40020088
 8106b60:	400200a0 	.word	0x400200a0
 8106b64:	400200b8 	.word	0x400200b8
 8106b68:	40020410 	.word	0x40020410
 8106b6c:	40020428 	.word	0x40020428
 8106b70:	40020440 	.word	0x40020440
 8106b74:	40020458 	.word	0x40020458
 8106b78:	40020470 	.word	0x40020470
 8106b7c:	40020488 	.word	0x40020488
 8106b80:	400204a0 	.word	0x400204a0
 8106b84:	400204b8 	.word	0x400204b8
 8106b88:	687b      	ldr	r3, [r7, #4]
 8106b8a:	681b      	ldr	r3, [r3, #0]
 8106b8c:	681a      	ldr	r2, [r3, #0]
 8106b8e:	687b      	ldr	r3, [r7, #4]
 8106b90:	681b      	ldr	r3, [r3, #0]
 8106b92:	f022 020a 	bic.w	r2, r2, #10
 8106b96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8106b98:	687b      	ldr	r3, [r7, #4]
 8106b9a:	2201      	movs	r2, #1
 8106b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8106ba0:	687b      	ldr	r3, [r7, #4]
 8106ba2:	2200      	movs	r2, #0
 8106ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8106ba8:	687b      	ldr	r3, [r7, #4]
 8106baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106bac:	2b00      	cmp	r3, #0
 8106bae:	f000 8097 	beq.w	8106ce0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8106bb2:	687b      	ldr	r3, [r7, #4]
 8106bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106bb6:	6878      	ldr	r0, [r7, #4]
 8106bb8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106bba:	e091      	b.n	8106ce0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8106bbc:	687b      	ldr	r3, [r7, #4]
 8106bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106bc0:	f003 031f 	and.w	r3, r3, #31
 8106bc4:	2208      	movs	r2, #8
 8106bc6:	409a      	lsls	r2, r3
 8106bc8:	697b      	ldr	r3, [r7, #20]
 8106bca:	4013      	ands	r3, r2
 8106bcc:	2b00      	cmp	r3, #0
 8106bce:	f000 8088 	beq.w	8106ce2 <HAL_DMA_IRQHandler+0xe0e>
 8106bd2:	693b      	ldr	r3, [r7, #16]
 8106bd4:	f003 0308 	and.w	r3, r3, #8
 8106bd8:	2b00      	cmp	r3, #0
 8106bda:	f000 8082 	beq.w	8106ce2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8106bde:	687b      	ldr	r3, [r7, #4]
 8106be0:	681b      	ldr	r3, [r3, #0]
 8106be2:	4a41      	ldr	r2, [pc, #260]	; (8106ce8 <HAL_DMA_IRQHandler+0xe14>)
 8106be4:	4293      	cmp	r3, r2
 8106be6:	d04a      	beq.n	8106c7e <HAL_DMA_IRQHandler+0xdaa>
 8106be8:	687b      	ldr	r3, [r7, #4]
 8106bea:	681b      	ldr	r3, [r3, #0]
 8106bec:	4a3f      	ldr	r2, [pc, #252]	; (8106cec <HAL_DMA_IRQHandler+0xe18>)
 8106bee:	4293      	cmp	r3, r2
 8106bf0:	d045      	beq.n	8106c7e <HAL_DMA_IRQHandler+0xdaa>
 8106bf2:	687b      	ldr	r3, [r7, #4]
 8106bf4:	681b      	ldr	r3, [r3, #0]
 8106bf6:	4a3e      	ldr	r2, [pc, #248]	; (8106cf0 <HAL_DMA_IRQHandler+0xe1c>)
 8106bf8:	4293      	cmp	r3, r2
 8106bfa:	d040      	beq.n	8106c7e <HAL_DMA_IRQHandler+0xdaa>
 8106bfc:	687b      	ldr	r3, [r7, #4]
 8106bfe:	681b      	ldr	r3, [r3, #0]
 8106c00:	4a3c      	ldr	r2, [pc, #240]	; (8106cf4 <HAL_DMA_IRQHandler+0xe20>)
 8106c02:	4293      	cmp	r3, r2
 8106c04:	d03b      	beq.n	8106c7e <HAL_DMA_IRQHandler+0xdaa>
 8106c06:	687b      	ldr	r3, [r7, #4]
 8106c08:	681b      	ldr	r3, [r3, #0]
 8106c0a:	4a3b      	ldr	r2, [pc, #236]	; (8106cf8 <HAL_DMA_IRQHandler+0xe24>)
 8106c0c:	4293      	cmp	r3, r2
 8106c0e:	d036      	beq.n	8106c7e <HAL_DMA_IRQHandler+0xdaa>
 8106c10:	687b      	ldr	r3, [r7, #4]
 8106c12:	681b      	ldr	r3, [r3, #0]
 8106c14:	4a39      	ldr	r2, [pc, #228]	; (8106cfc <HAL_DMA_IRQHandler+0xe28>)
 8106c16:	4293      	cmp	r3, r2
 8106c18:	d031      	beq.n	8106c7e <HAL_DMA_IRQHandler+0xdaa>
 8106c1a:	687b      	ldr	r3, [r7, #4]
 8106c1c:	681b      	ldr	r3, [r3, #0]
 8106c1e:	4a38      	ldr	r2, [pc, #224]	; (8106d00 <HAL_DMA_IRQHandler+0xe2c>)
 8106c20:	4293      	cmp	r3, r2
 8106c22:	d02c      	beq.n	8106c7e <HAL_DMA_IRQHandler+0xdaa>
 8106c24:	687b      	ldr	r3, [r7, #4]
 8106c26:	681b      	ldr	r3, [r3, #0]
 8106c28:	4a36      	ldr	r2, [pc, #216]	; (8106d04 <HAL_DMA_IRQHandler+0xe30>)
 8106c2a:	4293      	cmp	r3, r2
 8106c2c:	d027      	beq.n	8106c7e <HAL_DMA_IRQHandler+0xdaa>
 8106c2e:	687b      	ldr	r3, [r7, #4]
 8106c30:	681b      	ldr	r3, [r3, #0]
 8106c32:	4a35      	ldr	r2, [pc, #212]	; (8106d08 <HAL_DMA_IRQHandler+0xe34>)
 8106c34:	4293      	cmp	r3, r2
 8106c36:	d022      	beq.n	8106c7e <HAL_DMA_IRQHandler+0xdaa>
 8106c38:	687b      	ldr	r3, [r7, #4]
 8106c3a:	681b      	ldr	r3, [r3, #0]
 8106c3c:	4a33      	ldr	r2, [pc, #204]	; (8106d0c <HAL_DMA_IRQHandler+0xe38>)
 8106c3e:	4293      	cmp	r3, r2
 8106c40:	d01d      	beq.n	8106c7e <HAL_DMA_IRQHandler+0xdaa>
 8106c42:	687b      	ldr	r3, [r7, #4]
 8106c44:	681b      	ldr	r3, [r3, #0]
 8106c46:	4a32      	ldr	r2, [pc, #200]	; (8106d10 <HAL_DMA_IRQHandler+0xe3c>)
 8106c48:	4293      	cmp	r3, r2
 8106c4a:	d018      	beq.n	8106c7e <HAL_DMA_IRQHandler+0xdaa>
 8106c4c:	687b      	ldr	r3, [r7, #4]
 8106c4e:	681b      	ldr	r3, [r3, #0]
 8106c50:	4a30      	ldr	r2, [pc, #192]	; (8106d14 <HAL_DMA_IRQHandler+0xe40>)
 8106c52:	4293      	cmp	r3, r2
 8106c54:	d013      	beq.n	8106c7e <HAL_DMA_IRQHandler+0xdaa>
 8106c56:	687b      	ldr	r3, [r7, #4]
 8106c58:	681b      	ldr	r3, [r3, #0]
 8106c5a:	4a2f      	ldr	r2, [pc, #188]	; (8106d18 <HAL_DMA_IRQHandler+0xe44>)
 8106c5c:	4293      	cmp	r3, r2
 8106c5e:	d00e      	beq.n	8106c7e <HAL_DMA_IRQHandler+0xdaa>
 8106c60:	687b      	ldr	r3, [r7, #4]
 8106c62:	681b      	ldr	r3, [r3, #0]
 8106c64:	4a2d      	ldr	r2, [pc, #180]	; (8106d1c <HAL_DMA_IRQHandler+0xe48>)
 8106c66:	4293      	cmp	r3, r2
 8106c68:	d009      	beq.n	8106c7e <HAL_DMA_IRQHandler+0xdaa>
 8106c6a:	687b      	ldr	r3, [r7, #4]
 8106c6c:	681b      	ldr	r3, [r3, #0]
 8106c6e:	4a2c      	ldr	r2, [pc, #176]	; (8106d20 <HAL_DMA_IRQHandler+0xe4c>)
 8106c70:	4293      	cmp	r3, r2
 8106c72:	d004      	beq.n	8106c7e <HAL_DMA_IRQHandler+0xdaa>
 8106c74:	687b      	ldr	r3, [r7, #4]
 8106c76:	681b      	ldr	r3, [r3, #0]
 8106c78:	4a2a      	ldr	r2, [pc, #168]	; (8106d24 <HAL_DMA_IRQHandler+0xe50>)
 8106c7a:	4293      	cmp	r3, r2
 8106c7c:	d108      	bne.n	8106c90 <HAL_DMA_IRQHandler+0xdbc>
 8106c7e:	687b      	ldr	r3, [r7, #4]
 8106c80:	681b      	ldr	r3, [r3, #0]
 8106c82:	681a      	ldr	r2, [r3, #0]
 8106c84:	687b      	ldr	r3, [r7, #4]
 8106c86:	681b      	ldr	r3, [r3, #0]
 8106c88:	f022 021c 	bic.w	r2, r2, #28
 8106c8c:	601a      	str	r2, [r3, #0]
 8106c8e:	e007      	b.n	8106ca0 <HAL_DMA_IRQHandler+0xdcc>
 8106c90:	687b      	ldr	r3, [r7, #4]
 8106c92:	681b      	ldr	r3, [r3, #0]
 8106c94:	681a      	ldr	r2, [r3, #0]
 8106c96:	687b      	ldr	r3, [r7, #4]
 8106c98:	681b      	ldr	r3, [r3, #0]
 8106c9a:	f022 020e 	bic.w	r2, r2, #14
 8106c9e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8106ca0:	687b      	ldr	r3, [r7, #4]
 8106ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106ca4:	f003 031f 	and.w	r3, r3, #31
 8106ca8:	2201      	movs	r2, #1
 8106caa:	409a      	lsls	r2, r3
 8106cac:	69fb      	ldr	r3, [r7, #28]
 8106cae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8106cb0:	687b      	ldr	r3, [r7, #4]
 8106cb2:	2201      	movs	r2, #1
 8106cb4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8106cb6:	687b      	ldr	r3, [r7, #4]
 8106cb8:	2201      	movs	r2, #1
 8106cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8106cbe:	687b      	ldr	r3, [r7, #4]
 8106cc0:	2200      	movs	r2, #0
 8106cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8106cc6:	687b      	ldr	r3, [r7, #4]
 8106cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106cca:	2b00      	cmp	r3, #0
 8106ccc:	d009      	beq.n	8106ce2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8106cce:	687b      	ldr	r3, [r7, #4]
 8106cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106cd2:	6878      	ldr	r0, [r7, #4]
 8106cd4:	4798      	blx	r3
 8106cd6:	e004      	b.n	8106ce2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8106cd8:	bf00      	nop
 8106cda:	e002      	b.n	8106ce2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106cdc:	bf00      	nop
 8106cde:	e000      	b.n	8106ce2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8106ce0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8106ce2:	3728      	adds	r7, #40	; 0x28
 8106ce4:	46bd      	mov	sp, r7
 8106ce6:	bd80      	pop	{r7, pc}
 8106ce8:	40020010 	.word	0x40020010
 8106cec:	40020028 	.word	0x40020028
 8106cf0:	40020040 	.word	0x40020040
 8106cf4:	40020058 	.word	0x40020058
 8106cf8:	40020070 	.word	0x40020070
 8106cfc:	40020088 	.word	0x40020088
 8106d00:	400200a0 	.word	0x400200a0
 8106d04:	400200b8 	.word	0x400200b8
 8106d08:	40020410 	.word	0x40020410
 8106d0c:	40020428 	.word	0x40020428
 8106d10:	40020440 	.word	0x40020440
 8106d14:	40020458 	.word	0x40020458
 8106d18:	40020470 	.word	0x40020470
 8106d1c:	40020488 	.word	0x40020488
 8106d20:	400204a0 	.word	0x400204a0
 8106d24:	400204b8 	.word	0x400204b8

08106d28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8106d28:	b480      	push	{r7}
 8106d2a:	b085      	sub	sp, #20
 8106d2c:	af00      	add	r7, sp, #0
 8106d2e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8106d30:	687b      	ldr	r3, [r7, #4]
 8106d32:	681b      	ldr	r3, [r3, #0]
 8106d34:	4a43      	ldr	r2, [pc, #268]	; (8106e44 <DMA_CalcBaseAndBitshift+0x11c>)
 8106d36:	4293      	cmp	r3, r2
 8106d38:	d04a      	beq.n	8106dd0 <DMA_CalcBaseAndBitshift+0xa8>
 8106d3a:	687b      	ldr	r3, [r7, #4]
 8106d3c:	681b      	ldr	r3, [r3, #0]
 8106d3e:	4a42      	ldr	r2, [pc, #264]	; (8106e48 <DMA_CalcBaseAndBitshift+0x120>)
 8106d40:	4293      	cmp	r3, r2
 8106d42:	d045      	beq.n	8106dd0 <DMA_CalcBaseAndBitshift+0xa8>
 8106d44:	687b      	ldr	r3, [r7, #4]
 8106d46:	681b      	ldr	r3, [r3, #0]
 8106d48:	4a40      	ldr	r2, [pc, #256]	; (8106e4c <DMA_CalcBaseAndBitshift+0x124>)
 8106d4a:	4293      	cmp	r3, r2
 8106d4c:	d040      	beq.n	8106dd0 <DMA_CalcBaseAndBitshift+0xa8>
 8106d4e:	687b      	ldr	r3, [r7, #4]
 8106d50:	681b      	ldr	r3, [r3, #0]
 8106d52:	4a3f      	ldr	r2, [pc, #252]	; (8106e50 <DMA_CalcBaseAndBitshift+0x128>)
 8106d54:	4293      	cmp	r3, r2
 8106d56:	d03b      	beq.n	8106dd0 <DMA_CalcBaseAndBitshift+0xa8>
 8106d58:	687b      	ldr	r3, [r7, #4]
 8106d5a:	681b      	ldr	r3, [r3, #0]
 8106d5c:	4a3d      	ldr	r2, [pc, #244]	; (8106e54 <DMA_CalcBaseAndBitshift+0x12c>)
 8106d5e:	4293      	cmp	r3, r2
 8106d60:	d036      	beq.n	8106dd0 <DMA_CalcBaseAndBitshift+0xa8>
 8106d62:	687b      	ldr	r3, [r7, #4]
 8106d64:	681b      	ldr	r3, [r3, #0]
 8106d66:	4a3c      	ldr	r2, [pc, #240]	; (8106e58 <DMA_CalcBaseAndBitshift+0x130>)
 8106d68:	4293      	cmp	r3, r2
 8106d6a:	d031      	beq.n	8106dd0 <DMA_CalcBaseAndBitshift+0xa8>
 8106d6c:	687b      	ldr	r3, [r7, #4]
 8106d6e:	681b      	ldr	r3, [r3, #0]
 8106d70:	4a3a      	ldr	r2, [pc, #232]	; (8106e5c <DMA_CalcBaseAndBitshift+0x134>)
 8106d72:	4293      	cmp	r3, r2
 8106d74:	d02c      	beq.n	8106dd0 <DMA_CalcBaseAndBitshift+0xa8>
 8106d76:	687b      	ldr	r3, [r7, #4]
 8106d78:	681b      	ldr	r3, [r3, #0]
 8106d7a:	4a39      	ldr	r2, [pc, #228]	; (8106e60 <DMA_CalcBaseAndBitshift+0x138>)
 8106d7c:	4293      	cmp	r3, r2
 8106d7e:	d027      	beq.n	8106dd0 <DMA_CalcBaseAndBitshift+0xa8>
 8106d80:	687b      	ldr	r3, [r7, #4]
 8106d82:	681b      	ldr	r3, [r3, #0]
 8106d84:	4a37      	ldr	r2, [pc, #220]	; (8106e64 <DMA_CalcBaseAndBitshift+0x13c>)
 8106d86:	4293      	cmp	r3, r2
 8106d88:	d022      	beq.n	8106dd0 <DMA_CalcBaseAndBitshift+0xa8>
 8106d8a:	687b      	ldr	r3, [r7, #4]
 8106d8c:	681b      	ldr	r3, [r3, #0]
 8106d8e:	4a36      	ldr	r2, [pc, #216]	; (8106e68 <DMA_CalcBaseAndBitshift+0x140>)
 8106d90:	4293      	cmp	r3, r2
 8106d92:	d01d      	beq.n	8106dd0 <DMA_CalcBaseAndBitshift+0xa8>
 8106d94:	687b      	ldr	r3, [r7, #4]
 8106d96:	681b      	ldr	r3, [r3, #0]
 8106d98:	4a34      	ldr	r2, [pc, #208]	; (8106e6c <DMA_CalcBaseAndBitshift+0x144>)
 8106d9a:	4293      	cmp	r3, r2
 8106d9c:	d018      	beq.n	8106dd0 <DMA_CalcBaseAndBitshift+0xa8>
 8106d9e:	687b      	ldr	r3, [r7, #4]
 8106da0:	681b      	ldr	r3, [r3, #0]
 8106da2:	4a33      	ldr	r2, [pc, #204]	; (8106e70 <DMA_CalcBaseAndBitshift+0x148>)
 8106da4:	4293      	cmp	r3, r2
 8106da6:	d013      	beq.n	8106dd0 <DMA_CalcBaseAndBitshift+0xa8>
 8106da8:	687b      	ldr	r3, [r7, #4]
 8106daa:	681b      	ldr	r3, [r3, #0]
 8106dac:	4a31      	ldr	r2, [pc, #196]	; (8106e74 <DMA_CalcBaseAndBitshift+0x14c>)
 8106dae:	4293      	cmp	r3, r2
 8106db0:	d00e      	beq.n	8106dd0 <DMA_CalcBaseAndBitshift+0xa8>
 8106db2:	687b      	ldr	r3, [r7, #4]
 8106db4:	681b      	ldr	r3, [r3, #0]
 8106db6:	4a30      	ldr	r2, [pc, #192]	; (8106e78 <DMA_CalcBaseAndBitshift+0x150>)
 8106db8:	4293      	cmp	r3, r2
 8106dba:	d009      	beq.n	8106dd0 <DMA_CalcBaseAndBitshift+0xa8>
 8106dbc:	687b      	ldr	r3, [r7, #4]
 8106dbe:	681b      	ldr	r3, [r3, #0]
 8106dc0:	4a2e      	ldr	r2, [pc, #184]	; (8106e7c <DMA_CalcBaseAndBitshift+0x154>)
 8106dc2:	4293      	cmp	r3, r2
 8106dc4:	d004      	beq.n	8106dd0 <DMA_CalcBaseAndBitshift+0xa8>
 8106dc6:	687b      	ldr	r3, [r7, #4]
 8106dc8:	681b      	ldr	r3, [r3, #0]
 8106dca:	4a2d      	ldr	r2, [pc, #180]	; (8106e80 <DMA_CalcBaseAndBitshift+0x158>)
 8106dcc:	4293      	cmp	r3, r2
 8106dce:	d101      	bne.n	8106dd4 <DMA_CalcBaseAndBitshift+0xac>
 8106dd0:	2301      	movs	r3, #1
 8106dd2:	e000      	b.n	8106dd6 <DMA_CalcBaseAndBitshift+0xae>
 8106dd4:	2300      	movs	r3, #0
 8106dd6:	2b00      	cmp	r3, #0
 8106dd8:	d026      	beq.n	8106e28 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8106dda:	687b      	ldr	r3, [r7, #4]
 8106ddc:	681b      	ldr	r3, [r3, #0]
 8106dde:	b2db      	uxtb	r3, r3
 8106de0:	3b10      	subs	r3, #16
 8106de2:	4a28      	ldr	r2, [pc, #160]	; (8106e84 <DMA_CalcBaseAndBitshift+0x15c>)
 8106de4:	fba2 2303 	umull	r2, r3, r2, r3
 8106de8:	091b      	lsrs	r3, r3, #4
 8106dea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8106dec:	68fb      	ldr	r3, [r7, #12]
 8106dee:	f003 0307 	and.w	r3, r3, #7
 8106df2:	4a25      	ldr	r2, [pc, #148]	; (8106e88 <DMA_CalcBaseAndBitshift+0x160>)
 8106df4:	5cd3      	ldrb	r3, [r2, r3]
 8106df6:	461a      	mov	r2, r3
 8106df8:	687b      	ldr	r3, [r7, #4]
 8106dfa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8106dfc:	68fb      	ldr	r3, [r7, #12]
 8106dfe:	2b03      	cmp	r3, #3
 8106e00:	d909      	bls.n	8106e16 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8106e02:	687b      	ldr	r3, [r7, #4]
 8106e04:	681b      	ldr	r3, [r3, #0]
 8106e06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8106e0a:	f023 0303 	bic.w	r3, r3, #3
 8106e0e:	1d1a      	adds	r2, r3, #4
 8106e10:	687b      	ldr	r3, [r7, #4]
 8106e12:	659a      	str	r2, [r3, #88]	; 0x58
 8106e14:	e00e      	b.n	8106e34 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8106e16:	687b      	ldr	r3, [r7, #4]
 8106e18:	681b      	ldr	r3, [r3, #0]
 8106e1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8106e1e:	f023 0303 	bic.w	r3, r3, #3
 8106e22:	687a      	ldr	r2, [r7, #4]
 8106e24:	6593      	str	r3, [r2, #88]	; 0x58
 8106e26:	e005      	b.n	8106e34 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8106e28:	687b      	ldr	r3, [r7, #4]
 8106e2a:	681b      	ldr	r3, [r3, #0]
 8106e2c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8106e30:	687b      	ldr	r3, [r7, #4]
 8106e32:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8106e34:	687b      	ldr	r3, [r7, #4]
 8106e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8106e38:	4618      	mov	r0, r3
 8106e3a:	3714      	adds	r7, #20
 8106e3c:	46bd      	mov	sp, r7
 8106e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e42:	4770      	bx	lr
 8106e44:	40020010 	.word	0x40020010
 8106e48:	40020028 	.word	0x40020028
 8106e4c:	40020040 	.word	0x40020040
 8106e50:	40020058 	.word	0x40020058
 8106e54:	40020070 	.word	0x40020070
 8106e58:	40020088 	.word	0x40020088
 8106e5c:	400200a0 	.word	0x400200a0
 8106e60:	400200b8 	.word	0x400200b8
 8106e64:	40020410 	.word	0x40020410
 8106e68:	40020428 	.word	0x40020428
 8106e6c:	40020440 	.word	0x40020440
 8106e70:	40020458 	.word	0x40020458
 8106e74:	40020470 	.word	0x40020470
 8106e78:	40020488 	.word	0x40020488
 8106e7c:	400204a0 	.word	0x400204a0
 8106e80:	400204b8 	.word	0x400204b8
 8106e84:	aaaaaaab 	.word	0xaaaaaaab
 8106e88:	0810c224 	.word	0x0810c224

08106e8c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8106e8c:	b480      	push	{r7}
 8106e8e:	b085      	sub	sp, #20
 8106e90:	af00      	add	r7, sp, #0
 8106e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106e94:	2300      	movs	r3, #0
 8106e96:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8106e98:	687b      	ldr	r3, [r7, #4]
 8106e9a:	699b      	ldr	r3, [r3, #24]
 8106e9c:	2b00      	cmp	r3, #0
 8106e9e:	d120      	bne.n	8106ee2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8106ea0:	687b      	ldr	r3, [r7, #4]
 8106ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106ea4:	2b03      	cmp	r3, #3
 8106ea6:	d858      	bhi.n	8106f5a <DMA_CheckFifoParam+0xce>
 8106ea8:	a201      	add	r2, pc, #4	; (adr r2, 8106eb0 <DMA_CheckFifoParam+0x24>)
 8106eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106eae:	bf00      	nop
 8106eb0:	08106ec1 	.word	0x08106ec1
 8106eb4:	08106ed3 	.word	0x08106ed3
 8106eb8:	08106ec1 	.word	0x08106ec1
 8106ebc:	08106f5b 	.word	0x08106f5b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106ec0:	687b      	ldr	r3, [r7, #4]
 8106ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106ec8:	2b00      	cmp	r3, #0
 8106eca:	d048      	beq.n	8106f5e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8106ecc:	2301      	movs	r3, #1
 8106ece:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106ed0:	e045      	b.n	8106f5e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106ed2:	687b      	ldr	r3, [r7, #4]
 8106ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106ed6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8106eda:	d142      	bne.n	8106f62 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8106edc:	2301      	movs	r3, #1
 8106ede:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106ee0:	e03f      	b.n	8106f62 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8106ee2:	687b      	ldr	r3, [r7, #4]
 8106ee4:	699b      	ldr	r3, [r3, #24]
 8106ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106eea:	d123      	bne.n	8106f34 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8106eec:	687b      	ldr	r3, [r7, #4]
 8106eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106ef0:	2b03      	cmp	r3, #3
 8106ef2:	d838      	bhi.n	8106f66 <DMA_CheckFifoParam+0xda>
 8106ef4:	a201      	add	r2, pc, #4	; (adr r2, 8106efc <DMA_CheckFifoParam+0x70>)
 8106ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106efa:	bf00      	nop
 8106efc:	08106f0d 	.word	0x08106f0d
 8106f00:	08106f13 	.word	0x08106f13
 8106f04:	08106f0d 	.word	0x08106f0d
 8106f08:	08106f25 	.word	0x08106f25
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8106f0c:	2301      	movs	r3, #1
 8106f0e:	73fb      	strb	r3, [r7, #15]
        break;
 8106f10:	e030      	b.n	8106f74 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106f12:	687b      	ldr	r3, [r7, #4]
 8106f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106f16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106f1a:	2b00      	cmp	r3, #0
 8106f1c:	d025      	beq.n	8106f6a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8106f1e:	2301      	movs	r3, #1
 8106f20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106f22:	e022      	b.n	8106f6a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8106f24:	687b      	ldr	r3, [r7, #4]
 8106f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106f28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8106f2c:	d11f      	bne.n	8106f6e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8106f2e:	2301      	movs	r3, #1
 8106f30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8106f32:	e01c      	b.n	8106f6e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8106f34:	687b      	ldr	r3, [r7, #4]
 8106f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106f38:	2b02      	cmp	r3, #2
 8106f3a:	d902      	bls.n	8106f42 <DMA_CheckFifoParam+0xb6>
 8106f3c:	2b03      	cmp	r3, #3
 8106f3e:	d003      	beq.n	8106f48 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8106f40:	e018      	b.n	8106f74 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8106f42:	2301      	movs	r3, #1
 8106f44:	73fb      	strb	r3, [r7, #15]
        break;
 8106f46:	e015      	b.n	8106f74 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8106f48:	687b      	ldr	r3, [r7, #4]
 8106f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106f50:	2b00      	cmp	r3, #0
 8106f52:	d00e      	beq.n	8106f72 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8106f54:	2301      	movs	r3, #1
 8106f56:	73fb      	strb	r3, [r7, #15]
    break;
 8106f58:	e00b      	b.n	8106f72 <DMA_CheckFifoParam+0xe6>
        break;
 8106f5a:	bf00      	nop
 8106f5c:	e00a      	b.n	8106f74 <DMA_CheckFifoParam+0xe8>
        break;
 8106f5e:	bf00      	nop
 8106f60:	e008      	b.n	8106f74 <DMA_CheckFifoParam+0xe8>
        break;
 8106f62:	bf00      	nop
 8106f64:	e006      	b.n	8106f74 <DMA_CheckFifoParam+0xe8>
        break;
 8106f66:	bf00      	nop
 8106f68:	e004      	b.n	8106f74 <DMA_CheckFifoParam+0xe8>
        break;
 8106f6a:	bf00      	nop
 8106f6c:	e002      	b.n	8106f74 <DMA_CheckFifoParam+0xe8>
        break;
 8106f6e:	bf00      	nop
 8106f70:	e000      	b.n	8106f74 <DMA_CheckFifoParam+0xe8>
    break;
 8106f72:	bf00      	nop
    }
  }

  return status;
 8106f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8106f76:	4618      	mov	r0, r3
 8106f78:	3714      	adds	r7, #20
 8106f7a:	46bd      	mov	sp, r7
 8106f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f80:	4770      	bx	lr
 8106f82:	bf00      	nop

08106f84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8106f84:	b480      	push	{r7}
 8106f86:	b085      	sub	sp, #20
 8106f88:	af00      	add	r7, sp, #0
 8106f8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8106f8c:	687b      	ldr	r3, [r7, #4]
 8106f8e:	681b      	ldr	r3, [r3, #0]
 8106f90:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8106f92:	687b      	ldr	r3, [r7, #4]
 8106f94:	681b      	ldr	r3, [r3, #0]
 8106f96:	4a3a      	ldr	r2, [pc, #232]	; (8107080 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8106f98:	4293      	cmp	r3, r2
 8106f9a:	d022      	beq.n	8106fe2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106f9c:	687b      	ldr	r3, [r7, #4]
 8106f9e:	681b      	ldr	r3, [r3, #0]
 8106fa0:	4a38      	ldr	r2, [pc, #224]	; (8107084 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8106fa2:	4293      	cmp	r3, r2
 8106fa4:	d01d      	beq.n	8106fe2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106fa6:	687b      	ldr	r3, [r7, #4]
 8106fa8:	681b      	ldr	r3, [r3, #0]
 8106faa:	4a37      	ldr	r2, [pc, #220]	; (8107088 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8106fac:	4293      	cmp	r3, r2
 8106fae:	d018      	beq.n	8106fe2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106fb0:	687b      	ldr	r3, [r7, #4]
 8106fb2:	681b      	ldr	r3, [r3, #0]
 8106fb4:	4a35      	ldr	r2, [pc, #212]	; (810708c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8106fb6:	4293      	cmp	r3, r2
 8106fb8:	d013      	beq.n	8106fe2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106fba:	687b      	ldr	r3, [r7, #4]
 8106fbc:	681b      	ldr	r3, [r3, #0]
 8106fbe:	4a34      	ldr	r2, [pc, #208]	; (8107090 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8106fc0:	4293      	cmp	r3, r2
 8106fc2:	d00e      	beq.n	8106fe2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106fc4:	687b      	ldr	r3, [r7, #4]
 8106fc6:	681b      	ldr	r3, [r3, #0]
 8106fc8:	4a32      	ldr	r2, [pc, #200]	; (8107094 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8106fca:	4293      	cmp	r3, r2
 8106fcc:	d009      	beq.n	8106fe2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106fce:	687b      	ldr	r3, [r7, #4]
 8106fd0:	681b      	ldr	r3, [r3, #0]
 8106fd2:	4a31      	ldr	r2, [pc, #196]	; (8107098 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8106fd4:	4293      	cmp	r3, r2
 8106fd6:	d004      	beq.n	8106fe2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8106fd8:	687b      	ldr	r3, [r7, #4]
 8106fda:	681b      	ldr	r3, [r3, #0]
 8106fdc:	4a2f      	ldr	r2, [pc, #188]	; (810709c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8106fde:	4293      	cmp	r3, r2
 8106fe0:	d101      	bne.n	8106fe6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8106fe2:	2301      	movs	r3, #1
 8106fe4:	e000      	b.n	8106fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8106fe6:	2300      	movs	r3, #0
 8106fe8:	2b00      	cmp	r3, #0
 8106fea:	d01c      	beq.n	8107026 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8106fec:	687b      	ldr	r3, [r7, #4]
 8106fee:	681b      	ldr	r3, [r3, #0]
 8106ff0:	b2db      	uxtb	r3, r3
 8106ff2:	3b08      	subs	r3, #8
 8106ff4:	4a2a      	ldr	r2, [pc, #168]	; (81070a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8106ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8106ffa:	091b      	lsrs	r3, r3, #4
 8106ffc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8106ffe:	68fb      	ldr	r3, [r7, #12]
 8107000:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8107004:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8107008:	009b      	lsls	r3, r3, #2
 810700a:	461a      	mov	r2, r3
 810700c:	687b      	ldr	r3, [r7, #4]
 810700e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8107010:	687b      	ldr	r3, [r7, #4]
 8107012:	4a24      	ldr	r2, [pc, #144]	; (81070a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8107014:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8107016:	68fb      	ldr	r3, [r7, #12]
 8107018:	f003 031f 	and.w	r3, r3, #31
 810701c:	2201      	movs	r2, #1
 810701e:	409a      	lsls	r2, r3
 8107020:	687b      	ldr	r3, [r7, #4]
 8107022:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8107024:	e026      	b.n	8107074 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8107026:	687b      	ldr	r3, [r7, #4]
 8107028:	681b      	ldr	r3, [r3, #0]
 810702a:	b2db      	uxtb	r3, r3
 810702c:	3b10      	subs	r3, #16
 810702e:	4a1e      	ldr	r2, [pc, #120]	; (81070a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8107030:	fba2 2303 	umull	r2, r3, r2, r3
 8107034:	091b      	lsrs	r3, r3, #4
 8107036:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8107038:	68bb      	ldr	r3, [r7, #8]
 810703a:	4a1c      	ldr	r2, [pc, #112]	; (81070ac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 810703c:	4293      	cmp	r3, r2
 810703e:	d806      	bhi.n	810704e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8107040:	68bb      	ldr	r3, [r7, #8]
 8107042:	4a1b      	ldr	r2, [pc, #108]	; (81070b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8107044:	4293      	cmp	r3, r2
 8107046:	d902      	bls.n	810704e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8107048:	68fb      	ldr	r3, [r7, #12]
 810704a:	3308      	adds	r3, #8
 810704c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 810704e:	68fb      	ldr	r3, [r7, #12]
 8107050:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8107054:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8107058:	009b      	lsls	r3, r3, #2
 810705a:	461a      	mov	r2, r3
 810705c:	687b      	ldr	r3, [r7, #4]
 810705e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8107060:	687b      	ldr	r3, [r7, #4]
 8107062:	4a14      	ldr	r2, [pc, #80]	; (81070b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8107064:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8107066:	68fb      	ldr	r3, [r7, #12]
 8107068:	f003 031f 	and.w	r3, r3, #31
 810706c:	2201      	movs	r2, #1
 810706e:	409a      	lsls	r2, r3
 8107070:	687b      	ldr	r3, [r7, #4]
 8107072:	669a      	str	r2, [r3, #104]	; 0x68
}
 8107074:	bf00      	nop
 8107076:	3714      	adds	r7, #20
 8107078:	46bd      	mov	sp, r7
 810707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810707e:	4770      	bx	lr
 8107080:	58025408 	.word	0x58025408
 8107084:	5802541c 	.word	0x5802541c
 8107088:	58025430 	.word	0x58025430
 810708c:	58025444 	.word	0x58025444
 8107090:	58025458 	.word	0x58025458
 8107094:	5802546c 	.word	0x5802546c
 8107098:	58025480 	.word	0x58025480
 810709c:	58025494 	.word	0x58025494
 81070a0:	cccccccd 	.word	0xcccccccd
 81070a4:	58025880 	.word	0x58025880
 81070a8:	aaaaaaab 	.word	0xaaaaaaab
 81070ac:	400204b8 	.word	0x400204b8
 81070b0:	4002040f 	.word	0x4002040f
 81070b4:	40020880 	.word	0x40020880

081070b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81070b8:	b480      	push	{r7}
 81070ba:	b085      	sub	sp, #20
 81070bc:	af00      	add	r7, sp, #0
 81070be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 81070c0:	687b      	ldr	r3, [r7, #4]
 81070c2:	685b      	ldr	r3, [r3, #4]
 81070c4:	b2db      	uxtb	r3, r3
 81070c6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 81070c8:	68fb      	ldr	r3, [r7, #12]
 81070ca:	2b00      	cmp	r3, #0
 81070cc:	d04a      	beq.n	8107164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 81070ce:	68fb      	ldr	r3, [r7, #12]
 81070d0:	2b08      	cmp	r3, #8
 81070d2:	d847      	bhi.n	8107164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81070d4:	687b      	ldr	r3, [r7, #4]
 81070d6:	681b      	ldr	r3, [r3, #0]
 81070d8:	4a25      	ldr	r2, [pc, #148]	; (8107170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 81070da:	4293      	cmp	r3, r2
 81070dc:	d022      	beq.n	8107124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81070de:	687b      	ldr	r3, [r7, #4]
 81070e0:	681b      	ldr	r3, [r3, #0]
 81070e2:	4a24      	ldr	r2, [pc, #144]	; (8107174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 81070e4:	4293      	cmp	r3, r2
 81070e6:	d01d      	beq.n	8107124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81070e8:	687b      	ldr	r3, [r7, #4]
 81070ea:	681b      	ldr	r3, [r3, #0]
 81070ec:	4a22      	ldr	r2, [pc, #136]	; (8107178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 81070ee:	4293      	cmp	r3, r2
 81070f0:	d018      	beq.n	8107124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81070f2:	687b      	ldr	r3, [r7, #4]
 81070f4:	681b      	ldr	r3, [r3, #0]
 81070f6:	4a21      	ldr	r2, [pc, #132]	; (810717c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 81070f8:	4293      	cmp	r3, r2
 81070fa:	d013      	beq.n	8107124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81070fc:	687b      	ldr	r3, [r7, #4]
 81070fe:	681b      	ldr	r3, [r3, #0]
 8107100:	4a1f      	ldr	r2, [pc, #124]	; (8107180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8107102:	4293      	cmp	r3, r2
 8107104:	d00e      	beq.n	8107124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8107106:	687b      	ldr	r3, [r7, #4]
 8107108:	681b      	ldr	r3, [r3, #0]
 810710a:	4a1e      	ldr	r2, [pc, #120]	; (8107184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 810710c:	4293      	cmp	r3, r2
 810710e:	d009      	beq.n	8107124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8107110:	687b      	ldr	r3, [r7, #4]
 8107112:	681b      	ldr	r3, [r3, #0]
 8107114:	4a1c      	ldr	r2, [pc, #112]	; (8107188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8107116:	4293      	cmp	r3, r2
 8107118:	d004      	beq.n	8107124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810711a:	687b      	ldr	r3, [r7, #4]
 810711c:	681b      	ldr	r3, [r3, #0]
 810711e:	4a1b      	ldr	r2, [pc, #108]	; (810718c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8107120:	4293      	cmp	r3, r2
 8107122:	d101      	bne.n	8107128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8107124:	2301      	movs	r3, #1
 8107126:	e000      	b.n	810712a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8107128:	2300      	movs	r3, #0
 810712a:	2b00      	cmp	r3, #0
 810712c:	d00a      	beq.n	8107144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 810712e:	68fa      	ldr	r2, [r7, #12]
 8107130:	4b17      	ldr	r3, [pc, #92]	; (8107190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8107132:	4413      	add	r3, r2
 8107134:	009b      	lsls	r3, r3, #2
 8107136:	461a      	mov	r2, r3
 8107138:	687b      	ldr	r3, [r7, #4]
 810713a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 810713c:	687b      	ldr	r3, [r7, #4]
 810713e:	4a15      	ldr	r2, [pc, #84]	; (8107194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8107140:	671a      	str	r2, [r3, #112]	; 0x70
 8107142:	e009      	b.n	8107158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8107144:	68fa      	ldr	r2, [r7, #12]
 8107146:	4b14      	ldr	r3, [pc, #80]	; (8107198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8107148:	4413      	add	r3, r2
 810714a:	009b      	lsls	r3, r3, #2
 810714c:	461a      	mov	r2, r3
 810714e:	687b      	ldr	r3, [r7, #4]
 8107150:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8107152:	687b      	ldr	r3, [r7, #4]
 8107154:	4a11      	ldr	r2, [pc, #68]	; (810719c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8107156:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8107158:	68fb      	ldr	r3, [r7, #12]
 810715a:	3b01      	subs	r3, #1
 810715c:	2201      	movs	r2, #1
 810715e:	409a      	lsls	r2, r3
 8107160:	687b      	ldr	r3, [r7, #4]
 8107162:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8107164:	bf00      	nop
 8107166:	3714      	adds	r7, #20
 8107168:	46bd      	mov	sp, r7
 810716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810716e:	4770      	bx	lr
 8107170:	58025408 	.word	0x58025408
 8107174:	5802541c 	.word	0x5802541c
 8107178:	58025430 	.word	0x58025430
 810717c:	58025444 	.word	0x58025444
 8107180:	58025458 	.word	0x58025458
 8107184:	5802546c 	.word	0x5802546c
 8107188:	58025480 	.word	0x58025480
 810718c:	58025494 	.word	0x58025494
 8107190:	1600963f 	.word	0x1600963f
 8107194:	58025940 	.word	0x58025940
 8107198:	1000823f 	.word	0x1000823f
 810719c:	40020940 	.word	0x40020940

081071a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81071a0:	b480      	push	{r7}
 81071a2:	b089      	sub	sp, #36	; 0x24
 81071a4:	af00      	add	r7, sp, #0
 81071a6:	6078      	str	r0, [r7, #4]
 81071a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81071aa:	2300      	movs	r3, #0
 81071ac:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81071ae:	4b89      	ldr	r3, [pc, #548]	; (81073d4 <HAL_GPIO_Init+0x234>)
 81071b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81071b2:	e194      	b.n	81074de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81071b4:	683b      	ldr	r3, [r7, #0]
 81071b6:	681a      	ldr	r2, [r3, #0]
 81071b8:	2101      	movs	r1, #1
 81071ba:	69fb      	ldr	r3, [r7, #28]
 81071bc:	fa01 f303 	lsl.w	r3, r1, r3
 81071c0:	4013      	ands	r3, r2
 81071c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81071c4:	693b      	ldr	r3, [r7, #16]
 81071c6:	2b00      	cmp	r3, #0
 81071c8:	f000 8186 	beq.w	81074d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81071cc:	683b      	ldr	r3, [r7, #0]
 81071ce:	685b      	ldr	r3, [r3, #4]
 81071d0:	f003 0303 	and.w	r3, r3, #3
 81071d4:	2b01      	cmp	r3, #1
 81071d6:	d005      	beq.n	81071e4 <HAL_GPIO_Init+0x44>
 81071d8:	683b      	ldr	r3, [r7, #0]
 81071da:	685b      	ldr	r3, [r3, #4]
 81071dc:	f003 0303 	and.w	r3, r3, #3
 81071e0:	2b02      	cmp	r3, #2
 81071e2:	d130      	bne.n	8107246 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81071e4:	687b      	ldr	r3, [r7, #4]
 81071e6:	689b      	ldr	r3, [r3, #8]
 81071e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81071ea:	69fb      	ldr	r3, [r7, #28]
 81071ec:	005b      	lsls	r3, r3, #1
 81071ee:	2203      	movs	r2, #3
 81071f0:	fa02 f303 	lsl.w	r3, r2, r3
 81071f4:	43db      	mvns	r3, r3
 81071f6:	69ba      	ldr	r2, [r7, #24]
 81071f8:	4013      	ands	r3, r2
 81071fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81071fc:	683b      	ldr	r3, [r7, #0]
 81071fe:	68da      	ldr	r2, [r3, #12]
 8107200:	69fb      	ldr	r3, [r7, #28]
 8107202:	005b      	lsls	r3, r3, #1
 8107204:	fa02 f303 	lsl.w	r3, r2, r3
 8107208:	69ba      	ldr	r2, [r7, #24]
 810720a:	4313      	orrs	r3, r2
 810720c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810720e:	687b      	ldr	r3, [r7, #4]
 8107210:	69ba      	ldr	r2, [r7, #24]
 8107212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8107214:	687b      	ldr	r3, [r7, #4]
 8107216:	685b      	ldr	r3, [r3, #4]
 8107218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810721a:	2201      	movs	r2, #1
 810721c:	69fb      	ldr	r3, [r7, #28]
 810721e:	fa02 f303 	lsl.w	r3, r2, r3
 8107222:	43db      	mvns	r3, r3
 8107224:	69ba      	ldr	r2, [r7, #24]
 8107226:	4013      	ands	r3, r2
 8107228:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810722a:	683b      	ldr	r3, [r7, #0]
 810722c:	685b      	ldr	r3, [r3, #4]
 810722e:	091b      	lsrs	r3, r3, #4
 8107230:	f003 0201 	and.w	r2, r3, #1
 8107234:	69fb      	ldr	r3, [r7, #28]
 8107236:	fa02 f303 	lsl.w	r3, r2, r3
 810723a:	69ba      	ldr	r2, [r7, #24]
 810723c:	4313      	orrs	r3, r2
 810723e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8107240:	687b      	ldr	r3, [r7, #4]
 8107242:	69ba      	ldr	r2, [r7, #24]
 8107244:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8107246:	683b      	ldr	r3, [r7, #0]
 8107248:	685b      	ldr	r3, [r3, #4]
 810724a:	f003 0303 	and.w	r3, r3, #3
 810724e:	2b03      	cmp	r3, #3
 8107250:	d017      	beq.n	8107282 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8107252:	687b      	ldr	r3, [r7, #4]
 8107254:	68db      	ldr	r3, [r3, #12]
 8107256:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8107258:	69fb      	ldr	r3, [r7, #28]
 810725a:	005b      	lsls	r3, r3, #1
 810725c:	2203      	movs	r2, #3
 810725e:	fa02 f303 	lsl.w	r3, r2, r3
 8107262:	43db      	mvns	r3, r3
 8107264:	69ba      	ldr	r2, [r7, #24]
 8107266:	4013      	ands	r3, r2
 8107268:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810726a:	683b      	ldr	r3, [r7, #0]
 810726c:	689a      	ldr	r2, [r3, #8]
 810726e:	69fb      	ldr	r3, [r7, #28]
 8107270:	005b      	lsls	r3, r3, #1
 8107272:	fa02 f303 	lsl.w	r3, r2, r3
 8107276:	69ba      	ldr	r2, [r7, #24]
 8107278:	4313      	orrs	r3, r2
 810727a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810727c:	687b      	ldr	r3, [r7, #4]
 810727e:	69ba      	ldr	r2, [r7, #24]
 8107280:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8107282:	683b      	ldr	r3, [r7, #0]
 8107284:	685b      	ldr	r3, [r3, #4]
 8107286:	f003 0303 	and.w	r3, r3, #3
 810728a:	2b02      	cmp	r3, #2
 810728c:	d123      	bne.n	81072d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810728e:	69fb      	ldr	r3, [r7, #28]
 8107290:	08da      	lsrs	r2, r3, #3
 8107292:	687b      	ldr	r3, [r7, #4]
 8107294:	3208      	adds	r2, #8
 8107296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810729a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810729c:	69fb      	ldr	r3, [r7, #28]
 810729e:	f003 0307 	and.w	r3, r3, #7
 81072a2:	009b      	lsls	r3, r3, #2
 81072a4:	220f      	movs	r2, #15
 81072a6:	fa02 f303 	lsl.w	r3, r2, r3
 81072aa:	43db      	mvns	r3, r3
 81072ac:	69ba      	ldr	r2, [r7, #24]
 81072ae:	4013      	ands	r3, r2
 81072b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81072b2:	683b      	ldr	r3, [r7, #0]
 81072b4:	691a      	ldr	r2, [r3, #16]
 81072b6:	69fb      	ldr	r3, [r7, #28]
 81072b8:	f003 0307 	and.w	r3, r3, #7
 81072bc:	009b      	lsls	r3, r3, #2
 81072be:	fa02 f303 	lsl.w	r3, r2, r3
 81072c2:	69ba      	ldr	r2, [r7, #24]
 81072c4:	4313      	orrs	r3, r2
 81072c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81072c8:	69fb      	ldr	r3, [r7, #28]
 81072ca:	08da      	lsrs	r2, r3, #3
 81072cc:	687b      	ldr	r3, [r7, #4]
 81072ce:	3208      	adds	r2, #8
 81072d0:	69b9      	ldr	r1, [r7, #24]
 81072d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81072d6:	687b      	ldr	r3, [r7, #4]
 81072d8:	681b      	ldr	r3, [r3, #0]
 81072da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81072dc:	69fb      	ldr	r3, [r7, #28]
 81072de:	005b      	lsls	r3, r3, #1
 81072e0:	2203      	movs	r2, #3
 81072e2:	fa02 f303 	lsl.w	r3, r2, r3
 81072e6:	43db      	mvns	r3, r3
 81072e8:	69ba      	ldr	r2, [r7, #24]
 81072ea:	4013      	ands	r3, r2
 81072ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81072ee:	683b      	ldr	r3, [r7, #0]
 81072f0:	685b      	ldr	r3, [r3, #4]
 81072f2:	f003 0203 	and.w	r2, r3, #3
 81072f6:	69fb      	ldr	r3, [r7, #28]
 81072f8:	005b      	lsls	r3, r3, #1
 81072fa:	fa02 f303 	lsl.w	r3, r2, r3
 81072fe:	69ba      	ldr	r2, [r7, #24]
 8107300:	4313      	orrs	r3, r2
 8107302:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8107304:	687b      	ldr	r3, [r7, #4]
 8107306:	69ba      	ldr	r2, [r7, #24]
 8107308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810730a:	683b      	ldr	r3, [r7, #0]
 810730c:	685b      	ldr	r3, [r3, #4]
 810730e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8107312:	2b00      	cmp	r3, #0
 8107314:	f000 80e0 	beq.w	81074d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8107318:	4b2f      	ldr	r3, [pc, #188]	; (81073d8 <HAL_GPIO_Init+0x238>)
 810731a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810731e:	4a2e      	ldr	r2, [pc, #184]	; (81073d8 <HAL_GPIO_Init+0x238>)
 8107320:	f043 0302 	orr.w	r3, r3, #2
 8107324:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8107328:	4b2b      	ldr	r3, [pc, #172]	; (81073d8 <HAL_GPIO_Init+0x238>)
 810732a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810732e:	f003 0302 	and.w	r3, r3, #2
 8107332:	60fb      	str	r3, [r7, #12]
 8107334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8107336:	4a29      	ldr	r2, [pc, #164]	; (81073dc <HAL_GPIO_Init+0x23c>)
 8107338:	69fb      	ldr	r3, [r7, #28]
 810733a:	089b      	lsrs	r3, r3, #2
 810733c:	3302      	adds	r3, #2
 810733e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8107342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8107344:	69fb      	ldr	r3, [r7, #28]
 8107346:	f003 0303 	and.w	r3, r3, #3
 810734a:	009b      	lsls	r3, r3, #2
 810734c:	220f      	movs	r2, #15
 810734e:	fa02 f303 	lsl.w	r3, r2, r3
 8107352:	43db      	mvns	r3, r3
 8107354:	69ba      	ldr	r2, [r7, #24]
 8107356:	4013      	ands	r3, r2
 8107358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810735a:	687b      	ldr	r3, [r7, #4]
 810735c:	4a20      	ldr	r2, [pc, #128]	; (81073e0 <HAL_GPIO_Init+0x240>)
 810735e:	4293      	cmp	r3, r2
 8107360:	d052      	beq.n	8107408 <HAL_GPIO_Init+0x268>
 8107362:	687b      	ldr	r3, [r7, #4]
 8107364:	4a1f      	ldr	r2, [pc, #124]	; (81073e4 <HAL_GPIO_Init+0x244>)
 8107366:	4293      	cmp	r3, r2
 8107368:	d031      	beq.n	81073ce <HAL_GPIO_Init+0x22e>
 810736a:	687b      	ldr	r3, [r7, #4]
 810736c:	4a1e      	ldr	r2, [pc, #120]	; (81073e8 <HAL_GPIO_Init+0x248>)
 810736e:	4293      	cmp	r3, r2
 8107370:	d02b      	beq.n	81073ca <HAL_GPIO_Init+0x22a>
 8107372:	687b      	ldr	r3, [r7, #4]
 8107374:	4a1d      	ldr	r2, [pc, #116]	; (81073ec <HAL_GPIO_Init+0x24c>)
 8107376:	4293      	cmp	r3, r2
 8107378:	d025      	beq.n	81073c6 <HAL_GPIO_Init+0x226>
 810737a:	687b      	ldr	r3, [r7, #4]
 810737c:	4a1c      	ldr	r2, [pc, #112]	; (81073f0 <HAL_GPIO_Init+0x250>)
 810737e:	4293      	cmp	r3, r2
 8107380:	d01f      	beq.n	81073c2 <HAL_GPIO_Init+0x222>
 8107382:	687b      	ldr	r3, [r7, #4]
 8107384:	4a1b      	ldr	r2, [pc, #108]	; (81073f4 <HAL_GPIO_Init+0x254>)
 8107386:	4293      	cmp	r3, r2
 8107388:	d019      	beq.n	81073be <HAL_GPIO_Init+0x21e>
 810738a:	687b      	ldr	r3, [r7, #4]
 810738c:	4a1a      	ldr	r2, [pc, #104]	; (81073f8 <HAL_GPIO_Init+0x258>)
 810738e:	4293      	cmp	r3, r2
 8107390:	d013      	beq.n	81073ba <HAL_GPIO_Init+0x21a>
 8107392:	687b      	ldr	r3, [r7, #4]
 8107394:	4a19      	ldr	r2, [pc, #100]	; (81073fc <HAL_GPIO_Init+0x25c>)
 8107396:	4293      	cmp	r3, r2
 8107398:	d00d      	beq.n	81073b6 <HAL_GPIO_Init+0x216>
 810739a:	687b      	ldr	r3, [r7, #4]
 810739c:	4a18      	ldr	r2, [pc, #96]	; (8107400 <HAL_GPIO_Init+0x260>)
 810739e:	4293      	cmp	r3, r2
 81073a0:	d007      	beq.n	81073b2 <HAL_GPIO_Init+0x212>
 81073a2:	687b      	ldr	r3, [r7, #4]
 81073a4:	4a17      	ldr	r2, [pc, #92]	; (8107404 <HAL_GPIO_Init+0x264>)
 81073a6:	4293      	cmp	r3, r2
 81073a8:	d101      	bne.n	81073ae <HAL_GPIO_Init+0x20e>
 81073aa:	2309      	movs	r3, #9
 81073ac:	e02d      	b.n	810740a <HAL_GPIO_Init+0x26a>
 81073ae:	230a      	movs	r3, #10
 81073b0:	e02b      	b.n	810740a <HAL_GPIO_Init+0x26a>
 81073b2:	2308      	movs	r3, #8
 81073b4:	e029      	b.n	810740a <HAL_GPIO_Init+0x26a>
 81073b6:	2307      	movs	r3, #7
 81073b8:	e027      	b.n	810740a <HAL_GPIO_Init+0x26a>
 81073ba:	2306      	movs	r3, #6
 81073bc:	e025      	b.n	810740a <HAL_GPIO_Init+0x26a>
 81073be:	2305      	movs	r3, #5
 81073c0:	e023      	b.n	810740a <HAL_GPIO_Init+0x26a>
 81073c2:	2304      	movs	r3, #4
 81073c4:	e021      	b.n	810740a <HAL_GPIO_Init+0x26a>
 81073c6:	2303      	movs	r3, #3
 81073c8:	e01f      	b.n	810740a <HAL_GPIO_Init+0x26a>
 81073ca:	2302      	movs	r3, #2
 81073cc:	e01d      	b.n	810740a <HAL_GPIO_Init+0x26a>
 81073ce:	2301      	movs	r3, #1
 81073d0:	e01b      	b.n	810740a <HAL_GPIO_Init+0x26a>
 81073d2:	bf00      	nop
 81073d4:	580000c0 	.word	0x580000c0
 81073d8:	58024400 	.word	0x58024400
 81073dc:	58000400 	.word	0x58000400
 81073e0:	58020000 	.word	0x58020000
 81073e4:	58020400 	.word	0x58020400
 81073e8:	58020800 	.word	0x58020800
 81073ec:	58020c00 	.word	0x58020c00
 81073f0:	58021000 	.word	0x58021000
 81073f4:	58021400 	.word	0x58021400
 81073f8:	58021800 	.word	0x58021800
 81073fc:	58021c00 	.word	0x58021c00
 8107400:	58022000 	.word	0x58022000
 8107404:	58022400 	.word	0x58022400
 8107408:	2300      	movs	r3, #0
 810740a:	69fa      	ldr	r2, [r7, #28]
 810740c:	f002 0203 	and.w	r2, r2, #3
 8107410:	0092      	lsls	r2, r2, #2
 8107412:	4093      	lsls	r3, r2
 8107414:	69ba      	ldr	r2, [r7, #24]
 8107416:	4313      	orrs	r3, r2
 8107418:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810741a:	4938      	ldr	r1, [pc, #224]	; (81074fc <HAL_GPIO_Init+0x35c>)
 810741c:	69fb      	ldr	r3, [r7, #28]
 810741e:	089b      	lsrs	r3, r3, #2
 8107420:	3302      	adds	r3, #2
 8107422:	69ba      	ldr	r2, [r7, #24]
 8107424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8107428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810742c:	681b      	ldr	r3, [r3, #0]
 810742e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8107430:	693b      	ldr	r3, [r7, #16]
 8107432:	43db      	mvns	r3, r3
 8107434:	69ba      	ldr	r2, [r7, #24]
 8107436:	4013      	ands	r3, r2
 8107438:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810743a:	683b      	ldr	r3, [r7, #0]
 810743c:	685b      	ldr	r3, [r3, #4]
 810743e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8107442:	2b00      	cmp	r3, #0
 8107444:	d003      	beq.n	810744e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8107446:	69ba      	ldr	r2, [r7, #24]
 8107448:	693b      	ldr	r3, [r7, #16]
 810744a:	4313      	orrs	r3, r2
 810744c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810744e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8107452:	69bb      	ldr	r3, [r7, #24]
 8107454:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8107456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810745a:	685b      	ldr	r3, [r3, #4]
 810745c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810745e:	693b      	ldr	r3, [r7, #16]
 8107460:	43db      	mvns	r3, r3
 8107462:	69ba      	ldr	r2, [r7, #24]
 8107464:	4013      	ands	r3, r2
 8107466:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8107468:	683b      	ldr	r3, [r7, #0]
 810746a:	685b      	ldr	r3, [r3, #4]
 810746c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8107470:	2b00      	cmp	r3, #0
 8107472:	d003      	beq.n	810747c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8107474:	69ba      	ldr	r2, [r7, #24]
 8107476:	693b      	ldr	r3, [r7, #16]
 8107478:	4313      	orrs	r3, r2
 810747a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810747c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8107480:	69bb      	ldr	r3, [r7, #24]
 8107482:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8107484:	697b      	ldr	r3, [r7, #20]
 8107486:	685b      	ldr	r3, [r3, #4]
 8107488:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810748a:	693b      	ldr	r3, [r7, #16]
 810748c:	43db      	mvns	r3, r3
 810748e:	69ba      	ldr	r2, [r7, #24]
 8107490:	4013      	ands	r3, r2
 8107492:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8107494:	683b      	ldr	r3, [r7, #0]
 8107496:	685b      	ldr	r3, [r3, #4]
 8107498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810749c:	2b00      	cmp	r3, #0
 810749e:	d003      	beq.n	81074a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81074a0:	69ba      	ldr	r2, [r7, #24]
 81074a2:	693b      	ldr	r3, [r7, #16]
 81074a4:	4313      	orrs	r3, r2
 81074a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81074a8:	697b      	ldr	r3, [r7, #20]
 81074aa:	69ba      	ldr	r2, [r7, #24]
 81074ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81074ae:	697b      	ldr	r3, [r7, #20]
 81074b0:	681b      	ldr	r3, [r3, #0]
 81074b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81074b4:	693b      	ldr	r3, [r7, #16]
 81074b6:	43db      	mvns	r3, r3
 81074b8:	69ba      	ldr	r2, [r7, #24]
 81074ba:	4013      	ands	r3, r2
 81074bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81074be:	683b      	ldr	r3, [r7, #0]
 81074c0:	685b      	ldr	r3, [r3, #4]
 81074c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81074c6:	2b00      	cmp	r3, #0
 81074c8:	d003      	beq.n	81074d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81074ca:	69ba      	ldr	r2, [r7, #24]
 81074cc:	693b      	ldr	r3, [r7, #16]
 81074ce:	4313      	orrs	r3, r2
 81074d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81074d2:	697b      	ldr	r3, [r7, #20]
 81074d4:	69ba      	ldr	r2, [r7, #24]
 81074d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81074d8:	69fb      	ldr	r3, [r7, #28]
 81074da:	3301      	adds	r3, #1
 81074dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81074de:	683b      	ldr	r3, [r7, #0]
 81074e0:	681a      	ldr	r2, [r3, #0]
 81074e2:	69fb      	ldr	r3, [r7, #28]
 81074e4:	fa22 f303 	lsr.w	r3, r2, r3
 81074e8:	2b00      	cmp	r3, #0
 81074ea:	f47f ae63 	bne.w	81071b4 <HAL_GPIO_Init+0x14>
  }
}
 81074ee:	bf00      	nop
 81074f0:	bf00      	nop
 81074f2:	3724      	adds	r7, #36	; 0x24
 81074f4:	46bd      	mov	sp, r7
 81074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074fa:	4770      	bx	lr
 81074fc:	58000400 	.word	0x58000400

08107500 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8107500:	b480      	push	{r7}
 8107502:	b085      	sub	sp, #20
 8107504:	af00      	add	r7, sp, #0
 8107506:	6078      	str	r0, [r7, #4]
 8107508:	460b      	mov	r3, r1
 810750a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 810750c:	687b      	ldr	r3, [r7, #4]
 810750e:	695b      	ldr	r3, [r3, #20]
 8107510:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8107512:	887a      	ldrh	r2, [r7, #2]
 8107514:	68fb      	ldr	r3, [r7, #12]
 8107516:	4013      	ands	r3, r2
 8107518:	041a      	lsls	r2, r3, #16
 810751a:	68fb      	ldr	r3, [r7, #12]
 810751c:	43d9      	mvns	r1, r3
 810751e:	887b      	ldrh	r3, [r7, #2]
 8107520:	400b      	ands	r3, r1
 8107522:	431a      	orrs	r2, r3
 8107524:	687b      	ldr	r3, [r7, #4]
 8107526:	619a      	str	r2, [r3, #24]
}
 8107528:	bf00      	nop
 810752a:	3714      	adds	r7, #20
 810752c:	46bd      	mov	sp, r7
 810752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107532:	4770      	bx	lr

08107534 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8107534:	b480      	push	{r7}
 8107536:	b083      	sub	sp, #12
 8107538:	af00      	add	r7, sp, #0
 810753a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810753c:	4b05      	ldr	r3, [pc, #20]	; (8107554 <HAL_HSEM_ActivateNotification+0x20>)
 810753e:	681a      	ldr	r2, [r3, #0]
 8107540:	4904      	ldr	r1, [pc, #16]	; (8107554 <HAL_HSEM_ActivateNotification+0x20>)
 8107542:	687b      	ldr	r3, [r7, #4]
 8107544:	4313      	orrs	r3, r2
 8107546:	600b      	str	r3, [r1, #0]
#endif
}
 8107548:	bf00      	nop
 810754a:	370c      	adds	r7, #12
 810754c:	46bd      	mov	sp, r7
 810754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107552:	4770      	bx	lr
 8107554:	58026510 	.word	0x58026510

08107558 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8107558:	b580      	push	{r7, lr}
 810755a:	b084      	sub	sp, #16
 810755c:	af00      	add	r7, sp, #0
 810755e:	60f8      	str	r0, [r7, #12]
 8107560:	460b      	mov	r3, r1
 8107562:	607a      	str	r2, [r7, #4]
 8107564:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8107566:	4b37      	ldr	r3, [pc, #220]	; (8107644 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107568:	681b      	ldr	r3, [r3, #0]
 810756a:	f023 0201 	bic.w	r2, r3, #1
 810756e:	4935      	ldr	r1, [pc, #212]	; (8107644 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107570:	68fb      	ldr	r3, [r7, #12]
 8107572:	4313      	orrs	r3, r2
 8107574:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8107576:	687b      	ldr	r3, [r7, #4]
 8107578:	2b00      	cmp	r3, #0
 810757a:	d123      	bne.n	81075c4 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810757c:	f7fd fbd8 	bl	8104d30 <HAL_GetCurrentCPUID>
 8107580:	4603      	mov	r3, r0
 8107582:	2b03      	cmp	r3, #3
 8107584:	d158      	bne.n	8107638 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8107586:	4b2f      	ldr	r3, [pc, #188]	; (8107644 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107588:	691b      	ldr	r3, [r3, #16]
 810758a:	4a2e      	ldr	r2, [pc, #184]	; (8107644 <HAL_PWREx_EnterSTOPMode+0xec>)
 810758c:	f023 0301 	bic.w	r3, r3, #1
 8107590:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107592:	4b2d      	ldr	r3, [pc, #180]	; (8107648 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107594:	691b      	ldr	r3, [r3, #16]
 8107596:	4a2c      	ldr	r2, [pc, #176]	; (8107648 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107598:	f043 0304 	orr.w	r3, r3, #4
 810759c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810759e:	f3bf 8f4f 	dsb	sy
}
 81075a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81075a4:	f3bf 8f6f 	isb	sy
}
 81075a8:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81075aa:	7afb      	ldrb	r3, [r7, #11]
 81075ac:	2b01      	cmp	r3, #1
 81075ae:	d101      	bne.n	81075b4 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81075b0:	bf30      	wfi
 81075b2:	e000      	b.n	81075b6 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81075b4:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81075b6:	4b24      	ldr	r3, [pc, #144]	; (8107648 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81075b8:	691b      	ldr	r3, [r3, #16]
 81075ba:	4a23      	ldr	r2, [pc, #140]	; (8107648 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81075bc:	f023 0304 	bic.w	r3, r3, #4
 81075c0:	6113      	str	r3, [r2, #16]
 81075c2:	e03c      	b.n	810763e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81075c4:	687b      	ldr	r3, [r7, #4]
 81075c6:	2b01      	cmp	r3, #1
 81075c8:	d123      	bne.n	8107612 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81075ca:	f7fd fbb1 	bl	8104d30 <HAL_GetCurrentCPUID>
 81075ce:	4603      	mov	r3, r0
 81075d0:	2b01      	cmp	r3, #1
 81075d2:	d133      	bne.n	810763c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81075d4:	4b1b      	ldr	r3, [pc, #108]	; (8107644 <HAL_PWREx_EnterSTOPMode+0xec>)
 81075d6:	695b      	ldr	r3, [r3, #20]
 81075d8:	4a1a      	ldr	r2, [pc, #104]	; (8107644 <HAL_PWREx_EnterSTOPMode+0xec>)
 81075da:	f023 0302 	bic.w	r3, r3, #2
 81075de:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81075e0:	4b19      	ldr	r3, [pc, #100]	; (8107648 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81075e2:	691b      	ldr	r3, [r3, #16]
 81075e4:	4a18      	ldr	r2, [pc, #96]	; (8107648 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81075e6:	f043 0304 	orr.w	r3, r3, #4
 81075ea:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81075ec:	f3bf 8f4f 	dsb	sy
}
 81075f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81075f2:	f3bf 8f6f 	isb	sy
}
 81075f6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81075f8:	7afb      	ldrb	r3, [r7, #11]
 81075fa:	2b01      	cmp	r3, #1
 81075fc:	d101      	bne.n	8107602 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81075fe:	bf30      	wfi
 8107600:	e000      	b.n	8107604 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8107602:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8107604:	4b10      	ldr	r3, [pc, #64]	; (8107648 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8107606:	691b      	ldr	r3, [r3, #16]
 8107608:	4a0f      	ldr	r2, [pc, #60]	; (8107648 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810760a:	f023 0304 	bic.w	r3, r3, #4
 810760e:	6113      	str	r3, [r2, #16]
 8107610:	e015      	b.n	810763e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8107612:	f7fd fb8d 	bl	8104d30 <HAL_GetCurrentCPUID>
 8107616:	4603      	mov	r3, r0
 8107618:	2b03      	cmp	r3, #3
 810761a:	d106      	bne.n	810762a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810761c:	4b09      	ldr	r3, [pc, #36]	; (8107644 <HAL_PWREx_EnterSTOPMode+0xec>)
 810761e:	691b      	ldr	r3, [r3, #16]
 8107620:	4a08      	ldr	r2, [pc, #32]	; (8107644 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107622:	f023 0304 	bic.w	r3, r3, #4
 8107626:	6113      	str	r3, [r2, #16]
 8107628:	e009      	b.n	810763e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810762a:	4b06      	ldr	r3, [pc, #24]	; (8107644 <HAL_PWREx_EnterSTOPMode+0xec>)
 810762c:	695b      	ldr	r3, [r3, #20]
 810762e:	4a05      	ldr	r2, [pc, #20]	; (8107644 <HAL_PWREx_EnterSTOPMode+0xec>)
 8107630:	f023 0304 	bic.w	r3, r3, #4
 8107634:	6153      	str	r3, [r2, #20]
 8107636:	e002      	b.n	810763e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8107638:	bf00      	nop
 810763a:	e000      	b.n	810763e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810763c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810763e:	3710      	adds	r7, #16
 8107640:	46bd      	mov	sp, r7
 8107642:	bd80      	pop	{r7, pc}
 8107644:	58024800 	.word	0x58024800
 8107648:	e000ed00 	.word	0xe000ed00

0810764c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810764c:	b580      	push	{r7, lr}
 810764e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8107650:	f7fd fb6e 	bl	8104d30 <HAL_GetCurrentCPUID>
 8107654:	4603      	mov	r3, r0
 8107656:	2b03      	cmp	r3, #3
 8107658:	d101      	bne.n	810765e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810765a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810765c:	e001      	b.n	8107662 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810765e:	bf40      	sev
    __WFE ();
 8107660:	bf20      	wfe
}
 8107662:	bf00      	nop
 8107664:	bd80      	pop	{r7, pc}
	...

08107668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8107668:	b480      	push	{r7}
 810766a:	b089      	sub	sp, #36	; 0x24
 810766c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810766e:	4bb3      	ldr	r3, [pc, #716]	; (810793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107670:	691b      	ldr	r3, [r3, #16]
 8107672:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107676:	2b18      	cmp	r3, #24
 8107678:	f200 8155 	bhi.w	8107926 <HAL_RCC_GetSysClockFreq+0x2be>
 810767c:	a201      	add	r2, pc, #4	; (adr r2, 8107684 <HAL_RCC_GetSysClockFreq+0x1c>)
 810767e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107682:	bf00      	nop
 8107684:	081076e9 	.word	0x081076e9
 8107688:	08107927 	.word	0x08107927
 810768c:	08107927 	.word	0x08107927
 8107690:	08107927 	.word	0x08107927
 8107694:	08107927 	.word	0x08107927
 8107698:	08107927 	.word	0x08107927
 810769c:	08107927 	.word	0x08107927
 81076a0:	08107927 	.word	0x08107927
 81076a4:	0810770f 	.word	0x0810770f
 81076a8:	08107927 	.word	0x08107927
 81076ac:	08107927 	.word	0x08107927
 81076b0:	08107927 	.word	0x08107927
 81076b4:	08107927 	.word	0x08107927
 81076b8:	08107927 	.word	0x08107927
 81076bc:	08107927 	.word	0x08107927
 81076c0:	08107927 	.word	0x08107927
 81076c4:	08107715 	.word	0x08107715
 81076c8:	08107927 	.word	0x08107927
 81076cc:	08107927 	.word	0x08107927
 81076d0:	08107927 	.word	0x08107927
 81076d4:	08107927 	.word	0x08107927
 81076d8:	08107927 	.word	0x08107927
 81076dc:	08107927 	.word	0x08107927
 81076e0:	08107927 	.word	0x08107927
 81076e4:	0810771b 	.word	0x0810771b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81076e8:	4b94      	ldr	r3, [pc, #592]	; (810793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81076ea:	681b      	ldr	r3, [r3, #0]
 81076ec:	f003 0320 	and.w	r3, r3, #32
 81076f0:	2b00      	cmp	r3, #0
 81076f2:	d009      	beq.n	8107708 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81076f4:	4b91      	ldr	r3, [pc, #580]	; (810793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81076f6:	681b      	ldr	r3, [r3, #0]
 81076f8:	08db      	lsrs	r3, r3, #3
 81076fa:	f003 0303 	and.w	r3, r3, #3
 81076fe:	4a90      	ldr	r2, [pc, #576]	; (8107940 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8107700:	fa22 f303 	lsr.w	r3, r2, r3
 8107704:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8107706:	e111      	b.n	810792c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8107708:	4b8d      	ldr	r3, [pc, #564]	; (8107940 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810770a:	61bb      	str	r3, [r7, #24]
      break;
 810770c:	e10e      	b.n	810792c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810770e:	4b8d      	ldr	r3, [pc, #564]	; (8107944 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8107710:	61bb      	str	r3, [r7, #24]
      break;
 8107712:	e10b      	b.n	810792c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8107714:	4b8c      	ldr	r3, [pc, #560]	; (8107948 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8107716:	61bb      	str	r3, [r7, #24]
      break;
 8107718:	e108      	b.n	810792c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810771a:	4b88      	ldr	r3, [pc, #544]	; (810793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810771c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810771e:	f003 0303 	and.w	r3, r3, #3
 8107722:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8107724:	4b85      	ldr	r3, [pc, #532]	; (810793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107728:	091b      	lsrs	r3, r3, #4
 810772a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810772e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8107730:	4b82      	ldr	r3, [pc, #520]	; (810793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107734:	f003 0301 	and.w	r3, r3, #1
 8107738:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810773a:	4b80      	ldr	r3, [pc, #512]	; (810793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810773c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810773e:	08db      	lsrs	r3, r3, #3
 8107740:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107744:	68fa      	ldr	r2, [r7, #12]
 8107746:	fb02 f303 	mul.w	r3, r2, r3
 810774a:	ee07 3a90 	vmov	s15, r3
 810774e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107752:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8107756:	693b      	ldr	r3, [r7, #16]
 8107758:	2b00      	cmp	r3, #0
 810775a:	f000 80e1 	beq.w	8107920 <HAL_RCC_GetSysClockFreq+0x2b8>
 810775e:	697b      	ldr	r3, [r7, #20]
 8107760:	2b02      	cmp	r3, #2
 8107762:	f000 8083 	beq.w	810786c <HAL_RCC_GetSysClockFreq+0x204>
 8107766:	697b      	ldr	r3, [r7, #20]
 8107768:	2b02      	cmp	r3, #2
 810776a:	f200 80a1 	bhi.w	81078b0 <HAL_RCC_GetSysClockFreq+0x248>
 810776e:	697b      	ldr	r3, [r7, #20]
 8107770:	2b00      	cmp	r3, #0
 8107772:	d003      	beq.n	810777c <HAL_RCC_GetSysClockFreq+0x114>
 8107774:	697b      	ldr	r3, [r7, #20]
 8107776:	2b01      	cmp	r3, #1
 8107778:	d056      	beq.n	8107828 <HAL_RCC_GetSysClockFreq+0x1c0>
 810777a:	e099      	b.n	81078b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810777c:	4b6f      	ldr	r3, [pc, #444]	; (810793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810777e:	681b      	ldr	r3, [r3, #0]
 8107780:	f003 0320 	and.w	r3, r3, #32
 8107784:	2b00      	cmp	r3, #0
 8107786:	d02d      	beq.n	81077e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107788:	4b6c      	ldr	r3, [pc, #432]	; (810793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810778a:	681b      	ldr	r3, [r3, #0]
 810778c:	08db      	lsrs	r3, r3, #3
 810778e:	f003 0303 	and.w	r3, r3, #3
 8107792:	4a6b      	ldr	r2, [pc, #428]	; (8107940 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8107794:	fa22 f303 	lsr.w	r3, r2, r3
 8107798:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810779a:	687b      	ldr	r3, [r7, #4]
 810779c:	ee07 3a90 	vmov	s15, r3
 81077a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81077a4:	693b      	ldr	r3, [r7, #16]
 81077a6:	ee07 3a90 	vmov	s15, r3
 81077aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81077b2:	4b62      	ldr	r3, [pc, #392]	; (810793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81077b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81077b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81077ba:	ee07 3a90 	vmov	s15, r3
 81077be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81077c2:	ed97 6a02 	vldr	s12, [r7, #8]
 81077c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 810794c <HAL_RCC_GetSysClockFreq+0x2e4>
 81077ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81077ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81077d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81077d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81077da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81077de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81077e2:	e087      	b.n	81078f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81077e4:	693b      	ldr	r3, [r7, #16]
 81077e6:	ee07 3a90 	vmov	s15, r3
 81077ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8107950 <HAL_RCC_GetSysClockFreq+0x2e8>
 81077f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81077f6:	4b51      	ldr	r3, [pc, #324]	; (810793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81077f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81077fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81077fe:	ee07 3a90 	vmov	s15, r3
 8107802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107806:	ed97 6a02 	vldr	s12, [r7, #8]
 810780a:	eddf 5a50 	vldr	s11, [pc, #320]	; 810794c <HAL_RCC_GetSysClockFreq+0x2e4>
 810780e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810781a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810781e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107822:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8107826:	e065      	b.n	81078f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107828:	693b      	ldr	r3, [r7, #16]
 810782a:	ee07 3a90 	vmov	s15, r3
 810782e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107832:	eddf 6a48 	vldr	s13, [pc, #288]	; 8107954 <HAL_RCC_GetSysClockFreq+0x2ec>
 8107836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810783a:	4b40      	ldr	r3, [pc, #256]	; (810793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810783c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810783e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107842:	ee07 3a90 	vmov	s15, r3
 8107846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810784a:	ed97 6a02 	vldr	s12, [r7, #8]
 810784e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810794c <HAL_RCC_GetSysClockFreq+0x2e4>
 8107852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810785a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810785e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107866:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810786a:	e043      	b.n	81078f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810786c:	693b      	ldr	r3, [r7, #16]
 810786e:	ee07 3a90 	vmov	s15, r3
 8107872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107876:	eddf 6a38 	vldr	s13, [pc, #224]	; 8107958 <HAL_RCC_GetSysClockFreq+0x2f0>
 810787a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810787e:	4b2f      	ldr	r3, [pc, #188]	; (810793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8107880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107886:	ee07 3a90 	vmov	s15, r3
 810788a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810788e:	ed97 6a02 	vldr	s12, [r7, #8]
 8107892:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810794c <HAL_RCC_GetSysClockFreq+0x2e4>
 8107896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810789a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810789e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81078a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81078a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81078aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81078ae:	e021      	b.n	81078f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81078b0:	693b      	ldr	r3, [r7, #16]
 81078b2:	ee07 3a90 	vmov	s15, r3
 81078b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81078ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8107954 <HAL_RCC_GetSysClockFreq+0x2ec>
 81078be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81078c2:	4b1e      	ldr	r3, [pc, #120]	; (810793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81078c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81078c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81078ca:	ee07 3a90 	vmov	s15, r3
 81078ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81078d2:	ed97 6a02 	vldr	s12, [r7, #8]
 81078d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 810794c <HAL_RCC_GetSysClockFreq+0x2e4>
 81078da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81078de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81078e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81078e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81078ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 81078ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81078f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81078f4:	4b11      	ldr	r3, [pc, #68]	; (810793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81078f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81078f8:	0a5b      	lsrs	r3, r3, #9
 81078fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81078fe:	3301      	adds	r3, #1
 8107900:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8107902:	683b      	ldr	r3, [r7, #0]
 8107904:	ee07 3a90 	vmov	s15, r3
 8107908:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810790c:	edd7 6a07 	vldr	s13, [r7, #28]
 8107910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107918:	ee17 3a90 	vmov	r3, s15
 810791c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810791e:	e005      	b.n	810792c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8107920:	2300      	movs	r3, #0
 8107922:	61bb      	str	r3, [r7, #24]
      break;
 8107924:	e002      	b.n	810792c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8107926:	4b07      	ldr	r3, [pc, #28]	; (8107944 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8107928:	61bb      	str	r3, [r7, #24]
      break;
 810792a:	bf00      	nop
  }

  return sysclockfreq;
 810792c:	69bb      	ldr	r3, [r7, #24]
}
 810792e:	4618      	mov	r0, r3
 8107930:	3724      	adds	r7, #36	; 0x24
 8107932:	46bd      	mov	sp, r7
 8107934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107938:	4770      	bx	lr
 810793a:	bf00      	nop
 810793c:	58024400 	.word	0x58024400
 8107940:	03d09000 	.word	0x03d09000
 8107944:	003d0900 	.word	0x003d0900
 8107948:	017d7840 	.word	0x017d7840
 810794c:	46000000 	.word	0x46000000
 8107950:	4c742400 	.word	0x4c742400
 8107954:	4a742400 	.word	0x4a742400
 8107958:	4bbebc20 	.word	0x4bbebc20

0810795c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810795c:	b580      	push	{r7, lr}
 810795e:	b082      	sub	sp, #8
 8107960:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8107962:	f7ff fe81 	bl	8107668 <HAL_RCC_GetSysClockFreq>
 8107966:	4602      	mov	r2, r0
 8107968:	4b11      	ldr	r3, [pc, #68]	; (81079b0 <HAL_RCC_GetHCLKFreq+0x54>)
 810796a:	699b      	ldr	r3, [r3, #24]
 810796c:	0a1b      	lsrs	r3, r3, #8
 810796e:	f003 030f 	and.w	r3, r3, #15
 8107972:	4910      	ldr	r1, [pc, #64]	; (81079b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8107974:	5ccb      	ldrb	r3, [r1, r3]
 8107976:	f003 031f 	and.w	r3, r3, #31
 810797a:	fa22 f303 	lsr.w	r3, r2, r3
 810797e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8107980:	4b0b      	ldr	r3, [pc, #44]	; (81079b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8107982:	699b      	ldr	r3, [r3, #24]
 8107984:	f003 030f 	and.w	r3, r3, #15
 8107988:	4a0a      	ldr	r2, [pc, #40]	; (81079b4 <HAL_RCC_GetHCLKFreq+0x58>)
 810798a:	5cd3      	ldrb	r3, [r2, r3]
 810798c:	f003 031f 	and.w	r3, r3, #31
 8107990:	687a      	ldr	r2, [r7, #4]
 8107992:	fa22 f303 	lsr.w	r3, r2, r3
 8107996:	4a08      	ldr	r2, [pc, #32]	; (81079b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8107998:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810799a:	4b07      	ldr	r3, [pc, #28]	; (81079b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 810799c:	681b      	ldr	r3, [r3, #0]
 810799e:	4a07      	ldr	r2, [pc, #28]	; (81079bc <HAL_RCC_GetHCLKFreq+0x60>)
 81079a0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81079a2:	4b05      	ldr	r3, [pc, #20]	; (81079b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 81079a4:	681b      	ldr	r3, [r3, #0]
}
 81079a6:	4618      	mov	r0, r3
 81079a8:	3708      	adds	r7, #8
 81079aa:	46bd      	mov	sp, r7
 81079ac:	bd80      	pop	{r7, pc}
 81079ae:	bf00      	nop
 81079b0:	58024400 	.word	0x58024400
 81079b4:	0810bff0 	.word	0x0810bff0
 81079b8:	10000004 	.word	0x10000004
 81079bc:	10000000 	.word	0x10000000

081079c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81079c0:	b580      	push	{r7, lr}
 81079c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81079c4:	f7ff ffca 	bl	810795c <HAL_RCC_GetHCLKFreq>
 81079c8:	4602      	mov	r2, r0
 81079ca:	4b06      	ldr	r3, [pc, #24]	; (81079e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 81079cc:	69db      	ldr	r3, [r3, #28]
 81079ce:	091b      	lsrs	r3, r3, #4
 81079d0:	f003 0307 	and.w	r3, r3, #7
 81079d4:	4904      	ldr	r1, [pc, #16]	; (81079e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 81079d6:	5ccb      	ldrb	r3, [r1, r3]
 81079d8:	f003 031f 	and.w	r3, r3, #31
 81079dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81079e0:	4618      	mov	r0, r3
 81079e2:	bd80      	pop	{r7, pc}
 81079e4:	58024400 	.word	0x58024400
 81079e8:	0810bff0 	.word	0x0810bff0

081079ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81079ec:	b580      	push	{r7, lr}
 81079ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81079f0:	f7ff ffb4 	bl	810795c <HAL_RCC_GetHCLKFreq>
 81079f4:	4602      	mov	r2, r0
 81079f6:	4b06      	ldr	r3, [pc, #24]	; (8107a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 81079f8:	69db      	ldr	r3, [r3, #28]
 81079fa:	0a1b      	lsrs	r3, r3, #8
 81079fc:	f003 0307 	and.w	r3, r3, #7
 8107a00:	4904      	ldr	r1, [pc, #16]	; (8107a14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8107a02:	5ccb      	ldrb	r3, [r1, r3]
 8107a04:	f003 031f 	and.w	r3, r3, #31
 8107a08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8107a0c:	4618      	mov	r0, r3
 8107a0e:	bd80      	pop	{r7, pc}
 8107a10:	58024400 	.word	0x58024400
 8107a14:	0810bff0 	.word	0x0810bff0

08107a18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8107a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8107a1c:	b0ca      	sub	sp, #296	; 0x128
 8107a1e:	af00      	add	r7, sp, #0
 8107a20:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8107a24:	2300      	movs	r3, #0
 8107a26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8107a2a:	2300      	movs	r3, #0
 8107a2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8107a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107a38:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8107a3c:	2500      	movs	r5, #0
 8107a3e:	ea54 0305 	orrs.w	r3, r4, r5
 8107a42:	d049      	beq.n	8107ad8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8107a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107a48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8107a4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8107a4e:	d02f      	beq.n	8107ab0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8107a50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8107a54:	d828      	bhi.n	8107aa8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8107a56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8107a5a:	d01a      	beq.n	8107a92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8107a5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8107a60:	d822      	bhi.n	8107aa8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8107a62:	2b00      	cmp	r3, #0
 8107a64:	d003      	beq.n	8107a6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8107a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107a6a:	d007      	beq.n	8107a7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8107a6c:	e01c      	b.n	8107aa8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107a6e:	4bb8      	ldr	r3, [pc, #736]	; (8107d50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107a72:	4ab7      	ldr	r2, [pc, #732]	; (8107d50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107a78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8107a7a:	e01a      	b.n	8107ab2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107a80:	3308      	adds	r3, #8
 8107a82:	2102      	movs	r1, #2
 8107a84:	4618      	mov	r0, r3
 8107a86:	f001 fc8f 	bl	81093a8 <RCCEx_PLL2_Config>
 8107a8a:	4603      	mov	r3, r0
 8107a8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8107a90:	e00f      	b.n	8107ab2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107a96:	3328      	adds	r3, #40	; 0x28
 8107a98:	2102      	movs	r1, #2
 8107a9a:	4618      	mov	r0, r3
 8107a9c:	f001 fd36 	bl	810950c <RCCEx_PLL3_Config>
 8107aa0:	4603      	mov	r3, r0
 8107aa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8107aa6:	e004      	b.n	8107ab2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107aa8:	2301      	movs	r3, #1
 8107aaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8107aae:	e000      	b.n	8107ab2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8107ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107ab6:	2b00      	cmp	r3, #0
 8107ab8:	d10a      	bne.n	8107ad0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8107aba:	4ba5      	ldr	r3, [pc, #660]	; (8107d50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107abe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8107ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8107ac8:	4aa1      	ldr	r2, [pc, #644]	; (8107d50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107aca:	430b      	orrs	r3, r1
 8107acc:	6513      	str	r3, [r2, #80]	; 0x50
 8107ace:	e003      	b.n	8107ad8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107ad4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8107ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107ae0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8107ae4:	f04f 0900 	mov.w	r9, #0
 8107ae8:	ea58 0309 	orrs.w	r3, r8, r9
 8107aec:	d047      	beq.n	8107b7e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8107aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107af4:	2b04      	cmp	r3, #4
 8107af6:	d82a      	bhi.n	8107b4e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8107af8:	a201      	add	r2, pc, #4	; (adr r2, 8107b00 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8107afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107afe:	bf00      	nop
 8107b00:	08107b15 	.word	0x08107b15
 8107b04:	08107b23 	.word	0x08107b23
 8107b08:	08107b39 	.word	0x08107b39
 8107b0c:	08107b57 	.word	0x08107b57
 8107b10:	08107b57 	.word	0x08107b57
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107b14:	4b8e      	ldr	r3, [pc, #568]	; (8107d50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b18:	4a8d      	ldr	r2, [pc, #564]	; (8107d50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107b20:	e01a      	b.n	8107b58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107b26:	3308      	adds	r3, #8
 8107b28:	2100      	movs	r1, #0
 8107b2a:	4618      	mov	r0, r3
 8107b2c:	f001 fc3c 	bl	81093a8 <RCCEx_PLL2_Config>
 8107b30:	4603      	mov	r3, r0
 8107b32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107b36:	e00f      	b.n	8107b58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107b3c:	3328      	adds	r3, #40	; 0x28
 8107b3e:	2100      	movs	r1, #0
 8107b40:	4618      	mov	r0, r3
 8107b42:	f001 fce3 	bl	810950c <RCCEx_PLL3_Config>
 8107b46:	4603      	mov	r3, r0
 8107b48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107b4c:	e004      	b.n	8107b58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107b4e:	2301      	movs	r3, #1
 8107b50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8107b54:	e000      	b.n	8107b58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8107b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107b58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107b5c:	2b00      	cmp	r3, #0
 8107b5e:	d10a      	bne.n	8107b76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8107b60:	4b7b      	ldr	r3, [pc, #492]	; (8107d50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107b64:	f023 0107 	bic.w	r1, r3, #7
 8107b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107b6e:	4a78      	ldr	r2, [pc, #480]	; (8107d50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107b70:	430b      	orrs	r3, r1
 8107b72:	6513      	str	r3, [r2, #80]	; 0x50
 8107b74:	e003      	b.n	8107b7e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107b76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107b7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8107b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107b86:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8107b8a:	f04f 0b00 	mov.w	fp, #0
 8107b8e:	ea5a 030b 	orrs.w	r3, sl, fp
 8107b92:	d04c      	beq.n	8107c2e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8107b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107b9e:	d030      	beq.n	8107c02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8107ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107ba4:	d829      	bhi.n	8107bfa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8107ba6:	2bc0      	cmp	r3, #192	; 0xc0
 8107ba8:	d02d      	beq.n	8107c06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8107baa:	2bc0      	cmp	r3, #192	; 0xc0
 8107bac:	d825      	bhi.n	8107bfa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8107bae:	2b80      	cmp	r3, #128	; 0x80
 8107bb0:	d018      	beq.n	8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8107bb2:	2b80      	cmp	r3, #128	; 0x80
 8107bb4:	d821      	bhi.n	8107bfa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8107bb6:	2b00      	cmp	r3, #0
 8107bb8:	d002      	beq.n	8107bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8107bba:	2b40      	cmp	r3, #64	; 0x40
 8107bbc:	d007      	beq.n	8107bce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8107bbe:	e01c      	b.n	8107bfa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107bc0:	4b63      	ldr	r3, [pc, #396]	; (8107d50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107bc4:	4a62      	ldr	r2, [pc, #392]	; (8107d50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107bca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8107bcc:	e01c      	b.n	8107c08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107bd2:	3308      	adds	r3, #8
 8107bd4:	2100      	movs	r1, #0
 8107bd6:	4618      	mov	r0, r3
 8107bd8:	f001 fbe6 	bl	81093a8 <RCCEx_PLL2_Config>
 8107bdc:	4603      	mov	r3, r0
 8107bde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8107be2:	e011      	b.n	8107c08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107be8:	3328      	adds	r3, #40	; 0x28
 8107bea:	2100      	movs	r1, #0
 8107bec:	4618      	mov	r0, r3
 8107bee:	f001 fc8d 	bl	810950c <RCCEx_PLL3_Config>
 8107bf2:	4603      	mov	r3, r0
 8107bf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8107bf8:	e006      	b.n	8107c08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107bfa:	2301      	movs	r3, #1
 8107bfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8107c00:	e002      	b.n	8107c08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8107c02:	bf00      	nop
 8107c04:	e000      	b.n	8107c08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8107c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107c08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107c0c:	2b00      	cmp	r3, #0
 8107c0e:	d10a      	bne.n	8107c26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8107c10:	4b4f      	ldr	r3, [pc, #316]	; (8107d50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107c14:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8107c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8107c1e:	4a4c      	ldr	r2, [pc, #304]	; (8107d50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107c20:	430b      	orrs	r3, r1
 8107c22:	6513      	str	r3, [r2, #80]	; 0x50
 8107c24:	e003      	b.n	8107c2e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107c26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107c2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8107c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107c36:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8107c3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8107c3e:	2300      	movs	r3, #0
 8107c40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8107c44:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8107c48:	460b      	mov	r3, r1
 8107c4a:	4313      	orrs	r3, r2
 8107c4c:	d053      	beq.n	8107cf6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8107c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107c52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8107c56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8107c5a:	d035      	beq.n	8107cc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8107c5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8107c60:	d82e      	bhi.n	8107cc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8107c62:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8107c66:	d031      	beq.n	8107ccc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8107c68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8107c6c:	d828      	bhi.n	8107cc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8107c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8107c72:	d01a      	beq.n	8107caa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8107c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8107c78:	d822      	bhi.n	8107cc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8107c7a:	2b00      	cmp	r3, #0
 8107c7c:	d003      	beq.n	8107c86 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8107c7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8107c82:	d007      	beq.n	8107c94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8107c84:	e01c      	b.n	8107cc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107c86:	4b32      	ldr	r3, [pc, #200]	; (8107d50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c8a:	4a31      	ldr	r2, [pc, #196]	; (8107d50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107c90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107c92:	e01c      	b.n	8107cce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107c98:	3308      	adds	r3, #8
 8107c9a:	2100      	movs	r1, #0
 8107c9c:	4618      	mov	r0, r3
 8107c9e:	f001 fb83 	bl	81093a8 <RCCEx_PLL2_Config>
 8107ca2:	4603      	mov	r3, r0
 8107ca4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8107ca8:	e011      	b.n	8107cce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107cae:	3328      	adds	r3, #40	; 0x28
 8107cb0:	2100      	movs	r1, #0
 8107cb2:	4618      	mov	r0, r3
 8107cb4:	f001 fc2a 	bl	810950c <RCCEx_PLL3_Config>
 8107cb8:	4603      	mov	r3, r0
 8107cba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107cbe:	e006      	b.n	8107cce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8107cc0:	2301      	movs	r3, #1
 8107cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8107cc6:	e002      	b.n	8107cce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8107cc8:	bf00      	nop
 8107cca:	e000      	b.n	8107cce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8107ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107cd2:	2b00      	cmp	r3, #0
 8107cd4:	d10b      	bne.n	8107cee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8107cd6:	4b1e      	ldr	r3, [pc, #120]	; (8107d50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107cda:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8107cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107ce2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8107ce6:	4a1a      	ldr	r2, [pc, #104]	; (8107d50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8107ce8:	430b      	orrs	r3, r1
 8107cea:	6593      	str	r3, [r2, #88]	; 0x58
 8107cec:	e003      	b.n	8107cf6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107cee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107cf2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8107cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107cfe:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8107d02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8107d06:	2300      	movs	r3, #0
 8107d08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8107d0c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8107d10:	460b      	mov	r3, r1
 8107d12:	4313      	orrs	r3, r2
 8107d14:	d056      	beq.n	8107dc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8107d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107d1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8107d1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107d22:	d038      	beq.n	8107d96 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8107d24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107d28:	d831      	bhi.n	8107d8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8107d2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8107d2e:	d034      	beq.n	8107d9a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8107d30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8107d34:	d82b      	bhi.n	8107d8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8107d36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107d3a:	d01d      	beq.n	8107d78 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8107d3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107d40:	d825      	bhi.n	8107d8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8107d42:	2b00      	cmp	r3, #0
 8107d44:	d006      	beq.n	8107d54 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8107d46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8107d4a:	d00a      	beq.n	8107d62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8107d4c:	e01f      	b.n	8107d8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8107d4e:	bf00      	nop
 8107d50:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107d54:	4ba2      	ldr	r3, [pc, #648]	; (8107fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107d58:	4aa1      	ldr	r2, [pc, #644]	; (8107fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107d60:	e01c      	b.n	8107d9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107d66:	3308      	adds	r3, #8
 8107d68:	2100      	movs	r1, #0
 8107d6a:	4618      	mov	r0, r3
 8107d6c:	f001 fb1c 	bl	81093a8 <RCCEx_PLL2_Config>
 8107d70:	4603      	mov	r3, r0
 8107d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8107d76:	e011      	b.n	8107d9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107d7c:	3328      	adds	r3, #40	; 0x28
 8107d7e:	2100      	movs	r1, #0
 8107d80:	4618      	mov	r0, r3
 8107d82:	f001 fbc3 	bl	810950c <RCCEx_PLL3_Config>
 8107d86:	4603      	mov	r3, r0
 8107d88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8107d8c:	e006      	b.n	8107d9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8107d8e:	2301      	movs	r3, #1
 8107d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8107d94:	e002      	b.n	8107d9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8107d96:	bf00      	nop
 8107d98:	e000      	b.n	8107d9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8107d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107da0:	2b00      	cmp	r3, #0
 8107da2:	d10b      	bne.n	8107dbc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8107da4:	4b8e      	ldr	r3, [pc, #568]	; (8107fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107da8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8107dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107db0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8107db4:	4a8a      	ldr	r2, [pc, #552]	; (8107fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107db6:	430b      	orrs	r3, r1
 8107db8:	6593      	str	r3, [r2, #88]	; 0x58
 8107dba:	e003      	b.n	8107dc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107dc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8107dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107dcc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8107dd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8107dd4:	2300      	movs	r3, #0
 8107dd6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8107dda:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8107dde:	460b      	mov	r3, r1
 8107de0:	4313      	orrs	r3, r2
 8107de2:	d03a      	beq.n	8107e5a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8107de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107dea:	2b30      	cmp	r3, #48	; 0x30
 8107dec:	d01f      	beq.n	8107e2e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8107dee:	2b30      	cmp	r3, #48	; 0x30
 8107df0:	d819      	bhi.n	8107e26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8107df2:	2b20      	cmp	r3, #32
 8107df4:	d00c      	beq.n	8107e10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8107df6:	2b20      	cmp	r3, #32
 8107df8:	d815      	bhi.n	8107e26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8107dfa:	2b00      	cmp	r3, #0
 8107dfc:	d019      	beq.n	8107e32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8107dfe:	2b10      	cmp	r3, #16
 8107e00:	d111      	bne.n	8107e26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107e02:	4b77      	ldr	r3, [pc, #476]	; (8107fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107e06:	4a76      	ldr	r2, [pc, #472]	; (8107fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8107e0e:	e011      	b.n	8107e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107e14:	3308      	adds	r3, #8
 8107e16:	2102      	movs	r1, #2
 8107e18:	4618      	mov	r0, r3
 8107e1a:	f001 fac5 	bl	81093a8 <RCCEx_PLL2_Config>
 8107e1e:	4603      	mov	r3, r0
 8107e20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8107e24:	e006      	b.n	8107e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8107e26:	2301      	movs	r3, #1
 8107e28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8107e2c:	e002      	b.n	8107e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8107e2e:	bf00      	nop
 8107e30:	e000      	b.n	8107e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8107e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107e34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107e38:	2b00      	cmp	r3, #0
 8107e3a:	d10a      	bne.n	8107e52 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8107e3c:	4b68      	ldr	r3, [pc, #416]	; (8107fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107e40:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8107e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107e4a:	4a65      	ldr	r2, [pc, #404]	; (8107fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107e4c:	430b      	orrs	r3, r1
 8107e4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8107e50:	e003      	b.n	8107e5a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107e52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107e56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8107e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107e62:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8107e66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8107e6a:	2300      	movs	r3, #0
 8107e6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8107e70:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8107e74:	460b      	mov	r3, r1
 8107e76:	4313      	orrs	r3, r2
 8107e78:	d051      	beq.n	8107f1e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8107e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8107e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107e84:	d035      	beq.n	8107ef2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8107e86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107e8a:	d82e      	bhi.n	8107eea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8107e8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8107e90:	d031      	beq.n	8107ef6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8107e92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8107e96:	d828      	bhi.n	8107eea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8107e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107e9c:	d01a      	beq.n	8107ed4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8107e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107ea2:	d822      	bhi.n	8107eea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8107ea4:	2b00      	cmp	r3, #0
 8107ea6:	d003      	beq.n	8107eb0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8107ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107eac:	d007      	beq.n	8107ebe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8107eae:	e01c      	b.n	8107eea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107eb0:	4b4b      	ldr	r3, [pc, #300]	; (8107fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107eb4:	4a4a      	ldr	r2, [pc, #296]	; (8107fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107eba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8107ebc:	e01c      	b.n	8107ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107ec2:	3308      	adds	r3, #8
 8107ec4:	2100      	movs	r1, #0
 8107ec6:	4618      	mov	r0, r3
 8107ec8:	f001 fa6e 	bl	81093a8 <RCCEx_PLL2_Config>
 8107ecc:	4603      	mov	r3, r0
 8107ece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8107ed2:	e011      	b.n	8107ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107ed8:	3328      	adds	r3, #40	; 0x28
 8107eda:	2100      	movs	r1, #0
 8107edc:	4618      	mov	r0, r3
 8107ede:	f001 fb15 	bl	810950c <RCCEx_PLL3_Config>
 8107ee2:	4603      	mov	r3, r0
 8107ee4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8107ee8:	e006      	b.n	8107ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107eea:	2301      	movs	r3, #1
 8107eec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8107ef0:	e002      	b.n	8107ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8107ef2:	bf00      	nop
 8107ef4:	e000      	b.n	8107ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8107ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107efc:	2b00      	cmp	r3, #0
 8107efe:	d10a      	bne.n	8107f16 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8107f00:	4b37      	ldr	r3, [pc, #220]	; (8107fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107f04:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8107f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8107f0e:	4a34      	ldr	r2, [pc, #208]	; (8107fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107f10:	430b      	orrs	r3, r1
 8107f12:	6513      	str	r3, [r2, #80]	; 0x50
 8107f14:	e003      	b.n	8107f1e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107f16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107f1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8107f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107f26:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8107f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8107f2e:	2300      	movs	r3, #0
 8107f30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8107f34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8107f38:	460b      	mov	r3, r1
 8107f3a:	4313      	orrs	r3, r2
 8107f3c:	d056      	beq.n	8107fec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8107f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8107f48:	d033      	beq.n	8107fb2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8107f4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8107f4e:	d82c      	bhi.n	8107faa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8107f50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8107f54:	d02f      	beq.n	8107fb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8107f56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8107f5a:	d826      	bhi.n	8107faa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8107f5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8107f60:	d02b      	beq.n	8107fba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8107f62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8107f66:	d820      	bhi.n	8107faa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8107f68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107f6c:	d012      	beq.n	8107f94 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8107f6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107f72:	d81a      	bhi.n	8107faa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8107f74:	2b00      	cmp	r3, #0
 8107f76:	d022      	beq.n	8107fbe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8107f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107f7c:	d115      	bne.n	8107faa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107f82:	3308      	adds	r3, #8
 8107f84:	2101      	movs	r1, #1
 8107f86:	4618      	mov	r0, r3
 8107f88:	f001 fa0e 	bl	81093a8 <RCCEx_PLL2_Config>
 8107f8c:	4603      	mov	r3, r0
 8107f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8107f92:	e015      	b.n	8107fc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107f98:	3328      	adds	r3, #40	; 0x28
 8107f9a:	2101      	movs	r1, #1
 8107f9c:	4618      	mov	r0, r3
 8107f9e:	f001 fab5 	bl	810950c <RCCEx_PLL3_Config>
 8107fa2:	4603      	mov	r3, r0
 8107fa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8107fa8:	e00a      	b.n	8107fc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107faa:	2301      	movs	r3, #1
 8107fac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8107fb0:	e006      	b.n	8107fc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8107fb2:	bf00      	nop
 8107fb4:	e004      	b.n	8107fc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8107fb6:	bf00      	nop
 8107fb8:	e002      	b.n	8107fc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8107fba:	bf00      	nop
 8107fbc:	e000      	b.n	8107fc0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8107fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107fc4:	2b00      	cmp	r3, #0
 8107fc6:	d10d      	bne.n	8107fe4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8107fc8:	4b05      	ldr	r3, [pc, #20]	; (8107fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107fcc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8107fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107fd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107fd6:	4a02      	ldr	r2, [pc, #8]	; (8107fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8107fd8:	430b      	orrs	r3, r1
 8107fda:	6513      	str	r3, [r2, #80]	; 0x50
 8107fdc:	e006      	b.n	8107fec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8107fde:	bf00      	nop
 8107fe0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107fe8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8107fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107ff4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8107ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8107ffc:	2300      	movs	r3, #0
 8107ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8108002:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8108006:	460b      	mov	r3, r1
 8108008:	4313      	orrs	r3, r2
 810800a:	d055      	beq.n	81080b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 810800c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108010:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8108014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8108018:	d033      	beq.n	8108082 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810801a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810801e:	d82c      	bhi.n	810807a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8108020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108024:	d02f      	beq.n	8108086 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8108026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810802a:	d826      	bhi.n	810807a <HAL_RCCEx_PeriphCLKConfig+0x662>
 810802c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108030:	d02b      	beq.n	810808a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8108032:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108036:	d820      	bhi.n	810807a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8108038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810803c:	d012      	beq.n	8108064 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810803e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108042:	d81a      	bhi.n	810807a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8108044:	2b00      	cmp	r3, #0
 8108046:	d022      	beq.n	810808e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8108048:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810804c:	d115      	bne.n	810807a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810804e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108052:	3308      	adds	r3, #8
 8108054:	2101      	movs	r1, #1
 8108056:	4618      	mov	r0, r3
 8108058:	f001 f9a6 	bl	81093a8 <RCCEx_PLL2_Config>
 810805c:	4603      	mov	r3, r0
 810805e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8108062:	e015      	b.n	8108090 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108068:	3328      	adds	r3, #40	; 0x28
 810806a:	2101      	movs	r1, #1
 810806c:	4618      	mov	r0, r3
 810806e:	f001 fa4d 	bl	810950c <RCCEx_PLL3_Config>
 8108072:	4603      	mov	r3, r0
 8108074:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8108078:	e00a      	b.n	8108090 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810807a:	2301      	movs	r3, #1
 810807c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8108080:	e006      	b.n	8108090 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8108082:	bf00      	nop
 8108084:	e004      	b.n	8108090 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8108086:	bf00      	nop
 8108088:	e002      	b.n	8108090 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810808a:	bf00      	nop
 810808c:	e000      	b.n	8108090 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810808e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108090:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108094:	2b00      	cmp	r3, #0
 8108096:	d10b      	bne.n	81080b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8108098:	4ba4      	ldr	r3, [pc, #656]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810809a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810809c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 81080a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81080a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81080a8:	4aa0      	ldr	r2, [pc, #640]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81080aa:	430b      	orrs	r3, r1
 81080ac:	6593      	str	r3, [r2, #88]	; 0x58
 81080ae:	e003      	b.n	81080b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81080b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81080b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81080b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81080bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81080c0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 81080c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 81080c8:	2300      	movs	r3, #0
 81080ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 81080ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 81080d2:	460b      	mov	r3, r1
 81080d4:	4313      	orrs	r3, r2
 81080d6:	d037      	beq.n	8108148 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81080d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81080dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81080de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81080e2:	d00e      	beq.n	8108102 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81080e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81080e8:	d816      	bhi.n	8108118 <HAL_RCCEx_PeriphCLKConfig+0x700>
 81080ea:	2b00      	cmp	r3, #0
 81080ec:	d018      	beq.n	8108120 <HAL_RCCEx_PeriphCLKConfig+0x708>
 81080ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81080f2:	d111      	bne.n	8108118 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81080f4:	4b8d      	ldr	r3, [pc, #564]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81080f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81080f8:	4a8c      	ldr	r2, [pc, #560]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81080fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81080fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8108100:	e00f      	b.n	8108122 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8108102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108106:	3308      	adds	r3, #8
 8108108:	2101      	movs	r1, #1
 810810a:	4618      	mov	r0, r3
 810810c:	f001 f94c 	bl	81093a8 <RCCEx_PLL2_Config>
 8108110:	4603      	mov	r3, r0
 8108112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8108116:	e004      	b.n	8108122 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108118:	2301      	movs	r3, #1
 810811a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810811e:	e000      	b.n	8108122 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8108120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108122:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108126:	2b00      	cmp	r3, #0
 8108128:	d10a      	bne.n	8108140 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810812a:	4b80      	ldr	r3, [pc, #512]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810812c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810812e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8108132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108138:	4a7c      	ldr	r2, [pc, #496]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810813a:	430b      	orrs	r3, r1
 810813c:	6513      	str	r3, [r2, #80]	; 0x50
 810813e:	e003      	b.n	8108148 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108140:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108144:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8108148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108150:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8108154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8108158:	2300      	movs	r3, #0
 810815a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 810815e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8108162:	460b      	mov	r3, r1
 8108164:	4313      	orrs	r3, r2
 8108166:	d039      	beq.n	81081dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8108168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810816c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810816e:	2b03      	cmp	r3, #3
 8108170:	d81c      	bhi.n	81081ac <HAL_RCCEx_PeriphCLKConfig+0x794>
 8108172:	a201      	add	r2, pc, #4	; (adr r2, 8108178 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8108174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108178:	081081b5 	.word	0x081081b5
 810817c:	08108189 	.word	0x08108189
 8108180:	08108197 	.word	0x08108197
 8108184:	081081b5 	.word	0x081081b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108188:	4b68      	ldr	r3, [pc, #416]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810818a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810818c:	4a67      	ldr	r2, [pc, #412]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810818e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108192:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8108194:	e00f      	b.n	81081b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8108196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810819a:	3308      	adds	r3, #8
 810819c:	2102      	movs	r1, #2
 810819e:	4618      	mov	r0, r3
 81081a0:	f001 f902 	bl	81093a8 <RCCEx_PLL2_Config>
 81081a4:	4603      	mov	r3, r0
 81081a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81081aa:	e004      	b.n	81081b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81081ac:	2301      	movs	r3, #1
 81081ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81081b2:	e000      	b.n	81081b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 81081b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81081b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81081ba:	2b00      	cmp	r3, #0
 81081bc:	d10a      	bne.n	81081d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81081be:	4b5b      	ldr	r3, [pc, #364]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81081c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81081c2:	f023 0103 	bic.w	r1, r3, #3
 81081c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81081ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81081cc:	4a57      	ldr	r2, [pc, #348]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81081ce:	430b      	orrs	r3, r1
 81081d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 81081d2:	e003      	b.n	81081dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81081d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81081d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81081dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81081e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81081e4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 81081e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 81081ec:	2300      	movs	r3, #0
 81081ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 81081f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 81081f6:	460b      	mov	r3, r1
 81081f8:	4313      	orrs	r3, r2
 81081fa:	f000 809f 	beq.w	810833c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81081fe:	4b4c      	ldr	r3, [pc, #304]	; (8108330 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8108200:	681b      	ldr	r3, [r3, #0]
 8108202:	4a4b      	ldr	r2, [pc, #300]	; (8108330 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8108204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8108208:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810820a:	f7fc fc75 	bl	8104af8 <HAL_GetTick>
 810820e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8108212:	e00b      	b.n	810822c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8108214:	f7fc fc70 	bl	8104af8 <HAL_GetTick>
 8108218:	4602      	mov	r2, r0
 810821a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 810821e:	1ad3      	subs	r3, r2, r3
 8108220:	2b64      	cmp	r3, #100	; 0x64
 8108222:	d903      	bls.n	810822c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8108224:	2303      	movs	r3, #3
 8108226:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810822a:	e005      	b.n	8108238 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810822c:	4b40      	ldr	r3, [pc, #256]	; (8108330 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810822e:	681b      	ldr	r3, [r3, #0]
 8108230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108234:	2b00      	cmp	r3, #0
 8108236:	d0ed      	beq.n	8108214 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8108238:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810823c:	2b00      	cmp	r3, #0
 810823e:	d179      	bne.n	8108334 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8108240:	4b3a      	ldr	r3, [pc, #232]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108242:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8108244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108248:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810824c:	4053      	eors	r3, r2
 810824e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8108252:	2b00      	cmp	r3, #0
 8108254:	d015      	beq.n	8108282 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8108256:	4b35      	ldr	r3, [pc, #212]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810825a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810825e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8108262:	4b32      	ldr	r3, [pc, #200]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108266:	4a31      	ldr	r2, [pc, #196]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810826c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810826e:	4b2f      	ldr	r3, [pc, #188]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108272:	4a2e      	ldr	r2, [pc, #184]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8108278:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810827a:	4a2c      	ldr	r2, [pc, #176]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810827c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8108280:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8108282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108286:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810828a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810828e:	d118      	bne.n	81082c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8108290:	f7fc fc32 	bl	8104af8 <HAL_GetTick>
 8108294:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8108298:	e00d      	b.n	81082b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810829a:	f7fc fc2d 	bl	8104af8 <HAL_GetTick>
 810829e:	4602      	mov	r2, r0
 81082a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 81082a4:	1ad2      	subs	r2, r2, r3
 81082a6:	f241 3388 	movw	r3, #5000	; 0x1388
 81082aa:	429a      	cmp	r2, r3
 81082ac:	d903      	bls.n	81082b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81082ae:	2303      	movs	r3, #3
 81082b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 81082b4:	e005      	b.n	81082c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81082b6:	4b1d      	ldr	r3, [pc, #116]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81082b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81082ba:	f003 0302 	and.w	r3, r3, #2
 81082be:	2b00      	cmp	r3, #0
 81082c0:	d0eb      	beq.n	810829a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 81082c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81082c6:	2b00      	cmp	r3, #0
 81082c8:	d12b      	bne.n	8108322 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81082ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81082ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81082d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81082d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81082da:	d110      	bne.n	81082fe <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81082dc:	4b13      	ldr	r3, [pc, #76]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81082de:	691b      	ldr	r3, [r3, #16]
 81082e0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 81082e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81082e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81082ec:	091b      	lsrs	r3, r3, #4
 81082ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81082f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81082f6:	4a0d      	ldr	r2, [pc, #52]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81082f8:	430b      	orrs	r3, r1
 81082fa:	6113      	str	r3, [r2, #16]
 81082fc:	e005      	b.n	810830a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 81082fe:	4b0b      	ldr	r3, [pc, #44]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108300:	691b      	ldr	r3, [r3, #16]
 8108302:	4a0a      	ldr	r2, [pc, #40]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8108304:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8108308:	6113      	str	r3, [r2, #16]
 810830a:	4b08      	ldr	r3, [pc, #32]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810830c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 810830e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108312:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8108316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810831a:	4a04      	ldr	r2, [pc, #16]	; (810832c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810831c:	430b      	orrs	r3, r1
 810831e:	6713      	str	r3, [r2, #112]	; 0x70
 8108320:	e00c      	b.n	810833c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8108322:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108326:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 810832a:	e007      	b.n	810833c <HAL_RCCEx_PeriphCLKConfig+0x924>
 810832c:	58024400 	.word	0x58024400
 8108330:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108334:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108338:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810833c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108344:	f002 0301 	and.w	r3, r2, #1
 8108348:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 810834c:	2300      	movs	r3, #0
 810834e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8108352:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8108356:	460b      	mov	r3, r1
 8108358:	4313      	orrs	r3, r2
 810835a:	f000 8089 	beq.w	8108470 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810835e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8108364:	2b28      	cmp	r3, #40	; 0x28
 8108366:	d86b      	bhi.n	8108440 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8108368:	a201      	add	r2, pc, #4	; (adr r2, 8108370 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 810836a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810836e:	bf00      	nop
 8108370:	08108449 	.word	0x08108449
 8108374:	08108441 	.word	0x08108441
 8108378:	08108441 	.word	0x08108441
 810837c:	08108441 	.word	0x08108441
 8108380:	08108441 	.word	0x08108441
 8108384:	08108441 	.word	0x08108441
 8108388:	08108441 	.word	0x08108441
 810838c:	08108441 	.word	0x08108441
 8108390:	08108415 	.word	0x08108415
 8108394:	08108441 	.word	0x08108441
 8108398:	08108441 	.word	0x08108441
 810839c:	08108441 	.word	0x08108441
 81083a0:	08108441 	.word	0x08108441
 81083a4:	08108441 	.word	0x08108441
 81083a8:	08108441 	.word	0x08108441
 81083ac:	08108441 	.word	0x08108441
 81083b0:	0810842b 	.word	0x0810842b
 81083b4:	08108441 	.word	0x08108441
 81083b8:	08108441 	.word	0x08108441
 81083bc:	08108441 	.word	0x08108441
 81083c0:	08108441 	.word	0x08108441
 81083c4:	08108441 	.word	0x08108441
 81083c8:	08108441 	.word	0x08108441
 81083cc:	08108441 	.word	0x08108441
 81083d0:	08108449 	.word	0x08108449
 81083d4:	08108441 	.word	0x08108441
 81083d8:	08108441 	.word	0x08108441
 81083dc:	08108441 	.word	0x08108441
 81083e0:	08108441 	.word	0x08108441
 81083e4:	08108441 	.word	0x08108441
 81083e8:	08108441 	.word	0x08108441
 81083ec:	08108441 	.word	0x08108441
 81083f0:	08108449 	.word	0x08108449
 81083f4:	08108441 	.word	0x08108441
 81083f8:	08108441 	.word	0x08108441
 81083fc:	08108441 	.word	0x08108441
 8108400:	08108441 	.word	0x08108441
 8108404:	08108441 	.word	0x08108441
 8108408:	08108441 	.word	0x08108441
 810840c:	08108441 	.word	0x08108441
 8108410:	08108449 	.word	0x08108449
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8108414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108418:	3308      	adds	r3, #8
 810841a:	2101      	movs	r1, #1
 810841c:	4618      	mov	r0, r3
 810841e:	f000 ffc3 	bl	81093a8 <RCCEx_PLL2_Config>
 8108422:	4603      	mov	r3, r0
 8108424:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8108428:	e00f      	b.n	810844a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810842a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810842e:	3328      	adds	r3, #40	; 0x28
 8108430:	2101      	movs	r1, #1
 8108432:	4618      	mov	r0, r3
 8108434:	f001 f86a 	bl	810950c <RCCEx_PLL3_Config>
 8108438:	4603      	mov	r3, r0
 810843a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810843e:	e004      	b.n	810844a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108440:	2301      	movs	r3, #1
 8108442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8108446:	e000      	b.n	810844a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8108448:	bf00      	nop
    }

    if (ret == HAL_OK)
 810844a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810844e:	2b00      	cmp	r3, #0
 8108450:	d10a      	bne.n	8108468 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8108452:	4bbf      	ldr	r3, [pc, #764]	; (8108750 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108456:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 810845a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810845e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8108460:	4abb      	ldr	r2, [pc, #748]	; (8108750 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108462:	430b      	orrs	r3, r1
 8108464:	6553      	str	r3, [r2, #84]	; 0x54
 8108466:	e003      	b.n	8108470 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108468:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810846c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8108470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108478:	f002 0302 	and.w	r3, r2, #2
 810847c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8108480:	2300      	movs	r3, #0
 8108482:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8108486:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 810848a:	460b      	mov	r3, r1
 810848c:	4313      	orrs	r3, r2
 810848e:	d041      	beq.n	8108514 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8108490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8108496:	2b05      	cmp	r3, #5
 8108498:	d824      	bhi.n	81084e4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 810849a:	a201      	add	r2, pc, #4	; (adr r2, 81084a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 810849c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81084a0:	081084ed 	.word	0x081084ed
 81084a4:	081084b9 	.word	0x081084b9
 81084a8:	081084cf 	.word	0x081084cf
 81084ac:	081084ed 	.word	0x081084ed
 81084b0:	081084ed 	.word	0x081084ed
 81084b4:	081084ed 	.word	0x081084ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81084b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81084bc:	3308      	adds	r3, #8
 81084be:	2101      	movs	r1, #1
 81084c0:	4618      	mov	r0, r3
 81084c2:	f000 ff71 	bl	81093a8 <RCCEx_PLL2_Config>
 81084c6:	4603      	mov	r3, r0
 81084c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81084cc:	e00f      	b.n	81084ee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81084ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81084d2:	3328      	adds	r3, #40	; 0x28
 81084d4:	2101      	movs	r1, #1
 81084d6:	4618      	mov	r0, r3
 81084d8:	f001 f818 	bl	810950c <RCCEx_PLL3_Config>
 81084dc:	4603      	mov	r3, r0
 81084de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81084e2:	e004      	b.n	81084ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81084e4:	2301      	movs	r3, #1
 81084e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81084ea:	e000      	b.n	81084ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 81084ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 81084ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81084f2:	2b00      	cmp	r3, #0
 81084f4:	d10a      	bne.n	810850c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81084f6:	4b96      	ldr	r3, [pc, #600]	; (8108750 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81084f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81084fa:	f023 0107 	bic.w	r1, r3, #7
 81084fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8108504:	4a92      	ldr	r2, [pc, #584]	; (8108750 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108506:	430b      	orrs	r3, r1
 8108508:	6553      	str	r3, [r2, #84]	; 0x54
 810850a:	e003      	b.n	8108514 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810850c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108510:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8108514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108518:	e9d3 2300 	ldrd	r2, r3, [r3]
 810851c:	f002 0304 	and.w	r3, r2, #4
 8108520:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8108524:	2300      	movs	r3, #0
 8108526:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 810852a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 810852e:	460b      	mov	r3, r1
 8108530:	4313      	orrs	r3, r2
 8108532:	d044      	beq.n	81085be <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8108534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810853c:	2b05      	cmp	r3, #5
 810853e:	d825      	bhi.n	810858c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8108540:	a201      	add	r2, pc, #4	; (adr r2, 8108548 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8108542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108546:	bf00      	nop
 8108548:	08108595 	.word	0x08108595
 810854c:	08108561 	.word	0x08108561
 8108550:	08108577 	.word	0x08108577
 8108554:	08108595 	.word	0x08108595
 8108558:	08108595 	.word	0x08108595
 810855c:	08108595 	.word	0x08108595
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8108560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108564:	3308      	adds	r3, #8
 8108566:	2101      	movs	r1, #1
 8108568:	4618      	mov	r0, r3
 810856a:	f000 ff1d 	bl	81093a8 <RCCEx_PLL2_Config>
 810856e:	4603      	mov	r3, r0
 8108570:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8108574:	e00f      	b.n	8108596 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810857a:	3328      	adds	r3, #40	; 0x28
 810857c:	2101      	movs	r1, #1
 810857e:	4618      	mov	r0, r3
 8108580:	f000 ffc4 	bl	810950c <RCCEx_PLL3_Config>
 8108584:	4603      	mov	r3, r0
 8108586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810858a:	e004      	b.n	8108596 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810858c:	2301      	movs	r3, #1
 810858e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8108592:	e000      	b.n	8108596 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8108594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108596:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810859a:	2b00      	cmp	r3, #0
 810859c:	d10b      	bne.n	81085b6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810859e:	4b6c      	ldr	r3, [pc, #432]	; (8108750 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81085a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81085a2:	f023 0107 	bic.w	r1, r3, #7
 81085a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81085aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81085ae:	4a68      	ldr	r2, [pc, #416]	; (8108750 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81085b0:	430b      	orrs	r3, r1
 81085b2:	6593      	str	r3, [r2, #88]	; 0x58
 81085b4:	e003      	b.n	81085be <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81085b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81085ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81085be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81085c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81085c6:	f002 0320 	and.w	r3, r2, #32
 81085ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 81085ce:	2300      	movs	r3, #0
 81085d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 81085d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 81085d8:	460b      	mov	r3, r1
 81085da:	4313      	orrs	r3, r2
 81085dc:	d055      	beq.n	810868a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81085de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81085e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81085e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81085ea:	d033      	beq.n	8108654 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 81085ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81085f0:	d82c      	bhi.n	810864c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81085f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81085f6:	d02f      	beq.n	8108658 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 81085f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81085fc:	d826      	bhi.n	810864c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81085fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108602:	d02b      	beq.n	810865c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8108604:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108608:	d820      	bhi.n	810864c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810860a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810860e:	d012      	beq.n	8108636 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8108610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108614:	d81a      	bhi.n	810864c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8108616:	2b00      	cmp	r3, #0
 8108618:	d022      	beq.n	8108660 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 810861a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810861e:	d115      	bne.n	810864c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108624:	3308      	adds	r3, #8
 8108626:	2100      	movs	r1, #0
 8108628:	4618      	mov	r0, r3
 810862a:	f000 febd 	bl	81093a8 <RCCEx_PLL2_Config>
 810862e:	4603      	mov	r3, r0
 8108630:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8108634:	e015      	b.n	8108662 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8108636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810863a:	3328      	adds	r3, #40	; 0x28
 810863c:	2102      	movs	r1, #2
 810863e:	4618      	mov	r0, r3
 8108640:	f000 ff64 	bl	810950c <RCCEx_PLL3_Config>
 8108644:	4603      	mov	r3, r0
 8108646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810864a:	e00a      	b.n	8108662 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810864c:	2301      	movs	r3, #1
 810864e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8108652:	e006      	b.n	8108662 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108654:	bf00      	nop
 8108656:	e004      	b.n	8108662 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108658:	bf00      	nop
 810865a:	e002      	b.n	8108662 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810865c:	bf00      	nop
 810865e:	e000      	b.n	8108662 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8108660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108662:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108666:	2b00      	cmp	r3, #0
 8108668:	d10b      	bne.n	8108682 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810866a:	4b39      	ldr	r3, [pc, #228]	; (8108750 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810866c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810866e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8108672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810867a:	4a35      	ldr	r2, [pc, #212]	; (8108750 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810867c:	430b      	orrs	r3, r1
 810867e:	6553      	str	r3, [r2, #84]	; 0x54
 8108680:	e003      	b.n	810868a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108686:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810868a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810868e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108692:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8108696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 810869a:	2300      	movs	r3, #0
 810869c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 81086a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 81086a4:	460b      	mov	r3, r1
 81086a6:	4313      	orrs	r3, r2
 81086a8:	d058      	beq.n	810875c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81086aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81086ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81086b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81086b6:	d033      	beq.n	8108720 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 81086b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81086bc:	d82c      	bhi.n	8108718 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81086be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81086c2:	d02f      	beq.n	8108724 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 81086c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81086c8:	d826      	bhi.n	8108718 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81086ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81086ce:	d02b      	beq.n	8108728 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 81086d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81086d4:	d820      	bhi.n	8108718 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81086d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81086da:	d012      	beq.n	8108702 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 81086dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81086e0:	d81a      	bhi.n	8108718 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81086e2:	2b00      	cmp	r3, #0
 81086e4:	d022      	beq.n	810872c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 81086e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81086ea:	d115      	bne.n	8108718 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81086ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81086f0:	3308      	adds	r3, #8
 81086f2:	2100      	movs	r1, #0
 81086f4:	4618      	mov	r0, r3
 81086f6:	f000 fe57 	bl	81093a8 <RCCEx_PLL2_Config>
 81086fa:	4603      	mov	r3, r0
 81086fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8108700:	e015      	b.n	810872e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8108702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108706:	3328      	adds	r3, #40	; 0x28
 8108708:	2102      	movs	r1, #2
 810870a:	4618      	mov	r0, r3
 810870c:	f000 fefe 	bl	810950c <RCCEx_PLL3_Config>
 8108710:	4603      	mov	r3, r0
 8108712:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8108716:	e00a      	b.n	810872e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108718:	2301      	movs	r3, #1
 810871a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810871e:	e006      	b.n	810872e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8108720:	bf00      	nop
 8108722:	e004      	b.n	810872e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8108724:	bf00      	nop
 8108726:	e002      	b.n	810872e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8108728:	bf00      	nop
 810872a:	e000      	b.n	810872e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810872c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810872e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108732:	2b00      	cmp	r3, #0
 8108734:	d10e      	bne.n	8108754 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8108736:	4b06      	ldr	r3, [pc, #24]	; (8108750 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810873a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 810873e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108742:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8108746:	4a02      	ldr	r2, [pc, #8]	; (8108750 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8108748:	430b      	orrs	r3, r1
 810874a:	6593      	str	r3, [r2, #88]	; 0x58
 810874c:	e006      	b.n	810875c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 810874e:	bf00      	nop
 8108750:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108754:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108758:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810875c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108764:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8108768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 810876c:	2300      	movs	r3, #0
 810876e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8108772:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8108776:	460b      	mov	r3, r1
 8108778:	4313      	orrs	r3, r2
 810877a:	d055      	beq.n	8108828 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810877c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108780:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8108784:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8108788:	d033      	beq.n	81087f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 810878a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810878e:	d82c      	bhi.n	81087ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8108790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108794:	d02f      	beq.n	81087f6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8108796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810879a:	d826      	bhi.n	81087ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810879c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81087a0:	d02b      	beq.n	81087fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 81087a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81087a6:	d820      	bhi.n	81087ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81087a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81087ac:	d012      	beq.n	81087d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 81087ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81087b2:	d81a      	bhi.n	81087ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81087b4:	2b00      	cmp	r3, #0
 81087b6:	d022      	beq.n	81087fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 81087b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81087bc:	d115      	bne.n	81087ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81087be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81087c2:	3308      	adds	r3, #8
 81087c4:	2100      	movs	r1, #0
 81087c6:	4618      	mov	r0, r3
 81087c8:	f000 fdee 	bl	81093a8 <RCCEx_PLL2_Config>
 81087cc:	4603      	mov	r3, r0
 81087ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81087d2:	e015      	b.n	8108800 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81087d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81087d8:	3328      	adds	r3, #40	; 0x28
 81087da:	2102      	movs	r1, #2
 81087dc:	4618      	mov	r0, r3
 81087de:	f000 fe95 	bl	810950c <RCCEx_PLL3_Config>
 81087e2:	4603      	mov	r3, r0
 81087e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81087e8:	e00a      	b.n	8108800 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81087ea:	2301      	movs	r3, #1
 81087ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81087f0:	e006      	b.n	8108800 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81087f2:	bf00      	nop
 81087f4:	e004      	b.n	8108800 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81087f6:	bf00      	nop
 81087f8:	e002      	b.n	8108800 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81087fa:	bf00      	nop
 81087fc:	e000      	b.n	8108800 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81087fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108800:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108804:	2b00      	cmp	r3, #0
 8108806:	d10b      	bne.n	8108820 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8108808:	4ba1      	ldr	r3, [pc, #644]	; (8108a90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810880a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810880c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8108810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108814:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8108818:	4a9d      	ldr	r2, [pc, #628]	; (8108a90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810881a:	430b      	orrs	r3, r1
 810881c:	6593      	str	r3, [r2, #88]	; 0x58
 810881e:	e003      	b.n	8108828 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108820:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108824:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8108828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810882c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108830:	f002 0308 	and.w	r3, r2, #8
 8108834:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8108838:	2300      	movs	r3, #0
 810883a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 810883e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8108842:	460b      	mov	r3, r1
 8108844:	4313      	orrs	r3, r2
 8108846:	d01e      	beq.n	8108886 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8108848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810884c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108854:	d10c      	bne.n	8108870 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8108856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810885a:	3328      	adds	r3, #40	; 0x28
 810885c:	2102      	movs	r1, #2
 810885e:	4618      	mov	r0, r3
 8108860:	f000 fe54 	bl	810950c <RCCEx_PLL3_Config>
 8108864:	4603      	mov	r3, r0
 8108866:	2b00      	cmp	r3, #0
 8108868:	d002      	beq.n	8108870 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 810886a:	2301      	movs	r3, #1
 810886c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8108870:	4b87      	ldr	r3, [pc, #540]	; (8108a90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108874:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8108878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810887c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108880:	4a83      	ldr	r2, [pc, #524]	; (8108a90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108882:	430b      	orrs	r3, r1
 8108884:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8108886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810888e:	f002 0310 	and.w	r3, r2, #16
 8108892:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8108896:	2300      	movs	r3, #0
 8108898:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 810889c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 81088a0:	460b      	mov	r3, r1
 81088a2:	4313      	orrs	r3, r2
 81088a4:	d01e      	beq.n	81088e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81088a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81088aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81088ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81088b2:	d10c      	bne.n	81088ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81088b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81088b8:	3328      	adds	r3, #40	; 0x28
 81088ba:	2102      	movs	r1, #2
 81088bc:	4618      	mov	r0, r3
 81088be:	f000 fe25 	bl	810950c <RCCEx_PLL3_Config>
 81088c2:	4603      	mov	r3, r0
 81088c4:	2b00      	cmp	r3, #0
 81088c6:	d002      	beq.n	81088ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 81088c8:	2301      	movs	r3, #1
 81088ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81088ce:	4b70      	ldr	r3, [pc, #448]	; (8108a90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81088d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81088d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 81088d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81088da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81088de:	4a6c      	ldr	r2, [pc, #432]	; (8108a90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81088e0:	430b      	orrs	r3, r1
 81088e2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81088e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81088e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81088ec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 81088f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 81088f4:	2300      	movs	r3, #0
 81088f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 81088fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 81088fe:	460b      	mov	r3, r1
 8108900:	4313      	orrs	r3, r2
 8108902:	d03e      	beq.n	8108982 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8108904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108908:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810890c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108910:	d022      	beq.n	8108958 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8108912:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108916:	d81b      	bhi.n	8108950 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8108918:	2b00      	cmp	r3, #0
 810891a:	d003      	beq.n	8108924 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 810891c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108920:	d00b      	beq.n	810893a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8108922:	e015      	b.n	8108950 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108928:	3308      	adds	r3, #8
 810892a:	2100      	movs	r1, #0
 810892c:	4618      	mov	r0, r3
 810892e:	f000 fd3b 	bl	81093a8 <RCCEx_PLL2_Config>
 8108932:	4603      	mov	r3, r0
 8108934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8108938:	e00f      	b.n	810895a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810893a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810893e:	3328      	adds	r3, #40	; 0x28
 8108940:	2102      	movs	r1, #2
 8108942:	4618      	mov	r0, r3
 8108944:	f000 fde2 	bl	810950c <RCCEx_PLL3_Config>
 8108948:	4603      	mov	r3, r0
 810894a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810894e:	e004      	b.n	810895a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108950:	2301      	movs	r3, #1
 8108952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8108956:	e000      	b.n	810895a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8108958:	bf00      	nop
    }

    if (ret == HAL_OK)
 810895a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810895e:	2b00      	cmp	r3, #0
 8108960:	d10b      	bne.n	810897a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8108962:	4b4b      	ldr	r3, [pc, #300]	; (8108a90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108966:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 810896a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810896e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8108972:	4a47      	ldr	r2, [pc, #284]	; (8108a90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108974:	430b      	orrs	r3, r1
 8108976:	6593      	str	r3, [r2, #88]	; 0x58
 8108978:	e003      	b.n	8108982 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810897a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810897e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8108982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108986:	e9d3 2300 	ldrd	r2, r3, [r3]
 810898a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 810898e:	67bb      	str	r3, [r7, #120]	; 0x78
 8108990:	2300      	movs	r3, #0
 8108992:	67fb      	str	r3, [r7, #124]	; 0x7c
 8108994:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8108998:	460b      	mov	r3, r1
 810899a:	4313      	orrs	r3, r2
 810899c:	d03b      	beq.n	8108a16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810899e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81089a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81089a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81089aa:	d01f      	beq.n	81089ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 81089ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81089b0:	d818      	bhi.n	81089e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 81089b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81089b6:	d003      	beq.n	81089c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 81089b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81089bc:	d007      	beq.n	81089ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81089be:	e011      	b.n	81089e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81089c0:	4b33      	ldr	r3, [pc, #204]	; (8108a90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81089c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81089c4:	4a32      	ldr	r2, [pc, #200]	; (8108a90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81089c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81089ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 81089cc:	e00f      	b.n	81089ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81089ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81089d2:	3328      	adds	r3, #40	; 0x28
 81089d4:	2101      	movs	r1, #1
 81089d6:	4618      	mov	r0, r3
 81089d8:	f000 fd98 	bl	810950c <RCCEx_PLL3_Config>
 81089dc:	4603      	mov	r3, r0
 81089de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 81089e2:	e004      	b.n	81089ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81089e4:	2301      	movs	r3, #1
 81089e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81089ea:	e000      	b.n	81089ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 81089ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 81089ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81089f2:	2b00      	cmp	r3, #0
 81089f4:	d10b      	bne.n	8108a0e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81089f6:	4b26      	ldr	r3, [pc, #152]	; (8108a90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81089f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81089fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 81089fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108a06:	4a22      	ldr	r2, [pc, #136]	; (8108a90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108a08:	430b      	orrs	r3, r1
 8108a0a:	6553      	str	r3, [r2, #84]	; 0x54
 8108a0c:	e003      	b.n	8108a16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108a12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8108a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108a1e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8108a22:	673b      	str	r3, [r7, #112]	; 0x70
 8108a24:	2300      	movs	r3, #0
 8108a26:	677b      	str	r3, [r7, #116]	; 0x74
 8108a28:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8108a2c:	460b      	mov	r3, r1
 8108a2e:	4313      	orrs	r3, r2
 8108a30:	d034      	beq.n	8108a9c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8108a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108a38:	2b00      	cmp	r3, #0
 8108a3a:	d003      	beq.n	8108a44 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8108a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108a40:	d007      	beq.n	8108a52 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8108a42:	e011      	b.n	8108a68 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108a44:	4b12      	ldr	r3, [pc, #72]	; (8108a90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108a48:	4a11      	ldr	r2, [pc, #68]	; (8108a90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8108a50:	e00e      	b.n	8108a70 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8108a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108a56:	3308      	adds	r3, #8
 8108a58:	2102      	movs	r1, #2
 8108a5a:	4618      	mov	r0, r3
 8108a5c:	f000 fca4 	bl	81093a8 <RCCEx_PLL2_Config>
 8108a60:	4603      	mov	r3, r0
 8108a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8108a66:	e003      	b.n	8108a70 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8108a68:	2301      	movs	r3, #1
 8108a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8108a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108a70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108a74:	2b00      	cmp	r3, #0
 8108a76:	d10d      	bne.n	8108a94 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8108a78:	4b05      	ldr	r3, [pc, #20]	; (8108a90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108a7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8108a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108a86:	4a02      	ldr	r2, [pc, #8]	; (8108a90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8108a88:	430b      	orrs	r3, r1
 8108a8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8108a8c:	e006      	b.n	8108a9c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8108a8e:	bf00      	nop
 8108a90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108a94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108a98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8108a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108aa4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8108aa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8108aaa:	2300      	movs	r3, #0
 8108aac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8108aae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8108ab2:	460b      	mov	r3, r1
 8108ab4:	4313      	orrs	r3, r2
 8108ab6:	d00c      	beq.n	8108ad2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8108ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108abc:	3328      	adds	r3, #40	; 0x28
 8108abe:	2102      	movs	r1, #2
 8108ac0:	4618      	mov	r0, r3
 8108ac2:	f000 fd23 	bl	810950c <RCCEx_PLL3_Config>
 8108ac6:	4603      	mov	r3, r0
 8108ac8:	2b00      	cmp	r3, #0
 8108aca:	d002      	beq.n	8108ad2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8108acc:	2301      	movs	r3, #1
 8108ace:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8108ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108ada:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8108ade:	663b      	str	r3, [r7, #96]	; 0x60
 8108ae0:	2300      	movs	r3, #0
 8108ae2:	667b      	str	r3, [r7, #100]	; 0x64
 8108ae4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8108ae8:	460b      	mov	r3, r1
 8108aea:	4313      	orrs	r3, r2
 8108aec:	d038      	beq.n	8108b60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8108aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8108af6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8108afa:	d018      	beq.n	8108b2e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8108afc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8108b00:	d811      	bhi.n	8108b26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8108b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8108b06:	d014      	beq.n	8108b32 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8108b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8108b0c:	d80b      	bhi.n	8108b26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8108b0e:	2b00      	cmp	r3, #0
 8108b10:	d011      	beq.n	8108b36 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8108b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108b16:	d106      	bne.n	8108b26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8108b18:	4bc3      	ldr	r3, [pc, #780]	; (8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108b1c:	4ac2      	ldr	r2, [pc, #776]	; (8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108b22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8108b24:	e008      	b.n	8108b38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8108b26:	2301      	movs	r3, #1
 8108b28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8108b2c:	e004      	b.n	8108b38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8108b2e:	bf00      	nop
 8108b30:	e002      	b.n	8108b38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8108b32:	bf00      	nop
 8108b34:	e000      	b.n	8108b38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8108b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8108b38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108b3c:	2b00      	cmp	r3, #0
 8108b3e:	d10b      	bne.n	8108b58 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8108b40:	4bb9      	ldr	r3, [pc, #740]	; (8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108b44:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8108b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8108b50:	4ab5      	ldr	r2, [pc, #724]	; (8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108b52:	430b      	orrs	r3, r1
 8108b54:	6553      	str	r3, [r2, #84]	; 0x54
 8108b56:	e003      	b.n	8108b60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108b58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108b5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8108b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108b68:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8108b6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8108b6e:	2300      	movs	r3, #0
 8108b70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8108b72:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8108b76:	460b      	mov	r3, r1
 8108b78:	4313      	orrs	r3, r2
 8108b7a:	d009      	beq.n	8108b90 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8108b7c:	4baa      	ldr	r3, [pc, #680]	; (8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108b80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8108b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108b8a:	4aa7      	ldr	r2, [pc, #668]	; (8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108b8c:	430b      	orrs	r3, r1
 8108b8e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8108b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108b98:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8108b9c:	653b      	str	r3, [r7, #80]	; 0x50
 8108b9e:	2300      	movs	r3, #0
 8108ba0:	657b      	str	r3, [r7, #84]	; 0x54
 8108ba2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8108ba6:	460b      	mov	r3, r1
 8108ba8:	4313      	orrs	r3, r2
 8108baa:	d00a      	beq.n	8108bc2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8108bac:	4b9e      	ldr	r3, [pc, #632]	; (8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108bae:	691b      	ldr	r3, [r3, #16]
 8108bb0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8108bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108bb8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8108bbc:	4a9a      	ldr	r2, [pc, #616]	; (8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108bbe:	430b      	orrs	r3, r1
 8108bc0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8108bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108bca:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8108bce:	64bb      	str	r3, [r7, #72]	; 0x48
 8108bd0:	2300      	movs	r3, #0
 8108bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8108bd4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8108bd8:	460b      	mov	r3, r1
 8108bda:	4313      	orrs	r3, r2
 8108bdc:	d009      	beq.n	8108bf2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8108bde:	4b92      	ldr	r3, [pc, #584]	; (8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108be2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8108be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108bec:	4a8e      	ldr	r2, [pc, #568]	; (8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108bee:	430b      	orrs	r3, r1
 8108bf0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8108bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108bfa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8108bfe:	643b      	str	r3, [r7, #64]	; 0x40
 8108c00:	2300      	movs	r3, #0
 8108c02:	647b      	str	r3, [r7, #68]	; 0x44
 8108c04:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8108c08:	460b      	mov	r3, r1
 8108c0a:	4313      	orrs	r3, r2
 8108c0c:	d00e      	beq.n	8108c2c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8108c0e:	4b86      	ldr	r3, [pc, #536]	; (8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108c10:	691b      	ldr	r3, [r3, #16]
 8108c12:	4a85      	ldr	r2, [pc, #532]	; (8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108c14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8108c18:	6113      	str	r3, [r2, #16]
 8108c1a:	4b83      	ldr	r3, [pc, #524]	; (8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108c1c:	6919      	ldr	r1, [r3, #16]
 8108c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108c22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8108c26:	4a80      	ldr	r2, [pc, #512]	; (8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108c28:	430b      	orrs	r3, r1
 8108c2a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8108c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108c34:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8108c38:	63bb      	str	r3, [r7, #56]	; 0x38
 8108c3a:	2300      	movs	r3, #0
 8108c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108c3e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8108c42:	460b      	mov	r3, r1
 8108c44:	4313      	orrs	r3, r2
 8108c46:	d009      	beq.n	8108c5c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8108c48:	4b77      	ldr	r3, [pc, #476]	; (8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108c4c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8108c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108c56:	4a74      	ldr	r2, [pc, #464]	; (8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108c58:	430b      	orrs	r3, r1
 8108c5a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8108c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108c64:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8108c68:	633b      	str	r3, [r7, #48]	; 0x30
 8108c6a:	2300      	movs	r3, #0
 8108c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8108c6e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8108c72:	460b      	mov	r3, r1
 8108c74:	4313      	orrs	r3, r2
 8108c76:	d00a      	beq.n	8108c8e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8108c78:	4b6b      	ldr	r3, [pc, #428]	; (8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108c7c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8108c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8108c88:	4a67      	ldr	r2, [pc, #412]	; (8108e28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8108c8a:	430b      	orrs	r3, r1
 8108c8c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8108c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108c96:	2100      	movs	r1, #0
 8108c98:	62b9      	str	r1, [r7, #40]	; 0x28
 8108c9a:	f003 0301 	and.w	r3, r3, #1
 8108c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8108ca0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8108ca4:	460b      	mov	r3, r1
 8108ca6:	4313      	orrs	r3, r2
 8108ca8:	d011      	beq.n	8108cce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8108caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108cae:	3308      	adds	r3, #8
 8108cb0:	2100      	movs	r1, #0
 8108cb2:	4618      	mov	r0, r3
 8108cb4:	f000 fb78 	bl	81093a8 <RCCEx_PLL2_Config>
 8108cb8:	4603      	mov	r3, r0
 8108cba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8108cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108cc2:	2b00      	cmp	r3, #0
 8108cc4:	d003      	beq.n	8108cce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108cca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8108cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108cd6:	2100      	movs	r1, #0
 8108cd8:	6239      	str	r1, [r7, #32]
 8108cda:	f003 0302 	and.w	r3, r3, #2
 8108cde:	627b      	str	r3, [r7, #36]	; 0x24
 8108ce0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8108ce4:	460b      	mov	r3, r1
 8108ce6:	4313      	orrs	r3, r2
 8108ce8:	d011      	beq.n	8108d0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8108cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108cee:	3308      	adds	r3, #8
 8108cf0:	2101      	movs	r1, #1
 8108cf2:	4618      	mov	r0, r3
 8108cf4:	f000 fb58 	bl	81093a8 <RCCEx_PLL2_Config>
 8108cf8:	4603      	mov	r3, r0
 8108cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8108cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108d02:	2b00      	cmp	r3, #0
 8108d04:	d003      	beq.n	8108d0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108d06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108d0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8108d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108d16:	2100      	movs	r1, #0
 8108d18:	61b9      	str	r1, [r7, #24]
 8108d1a:	f003 0304 	and.w	r3, r3, #4
 8108d1e:	61fb      	str	r3, [r7, #28]
 8108d20:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8108d24:	460b      	mov	r3, r1
 8108d26:	4313      	orrs	r3, r2
 8108d28:	d011      	beq.n	8108d4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8108d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108d2e:	3308      	adds	r3, #8
 8108d30:	2102      	movs	r1, #2
 8108d32:	4618      	mov	r0, r3
 8108d34:	f000 fb38 	bl	81093a8 <RCCEx_PLL2_Config>
 8108d38:	4603      	mov	r3, r0
 8108d3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8108d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108d42:	2b00      	cmp	r3, #0
 8108d44:	d003      	beq.n	8108d4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108d46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108d4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8108d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108d56:	2100      	movs	r1, #0
 8108d58:	6139      	str	r1, [r7, #16]
 8108d5a:	f003 0308 	and.w	r3, r3, #8
 8108d5e:	617b      	str	r3, [r7, #20]
 8108d60:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8108d64:	460b      	mov	r3, r1
 8108d66:	4313      	orrs	r3, r2
 8108d68:	d011      	beq.n	8108d8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8108d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108d6e:	3328      	adds	r3, #40	; 0x28
 8108d70:	2100      	movs	r1, #0
 8108d72:	4618      	mov	r0, r3
 8108d74:	f000 fbca 	bl	810950c <RCCEx_PLL3_Config>
 8108d78:	4603      	mov	r3, r0
 8108d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8108d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108d82:	2b00      	cmp	r3, #0
 8108d84:	d003      	beq.n	8108d8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108d86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108d8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8108d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108d96:	2100      	movs	r1, #0
 8108d98:	60b9      	str	r1, [r7, #8]
 8108d9a:	f003 0310 	and.w	r3, r3, #16
 8108d9e:	60fb      	str	r3, [r7, #12]
 8108da0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8108da4:	460b      	mov	r3, r1
 8108da6:	4313      	orrs	r3, r2
 8108da8:	d011      	beq.n	8108dce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8108daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108dae:	3328      	adds	r3, #40	; 0x28
 8108db0:	2101      	movs	r1, #1
 8108db2:	4618      	mov	r0, r3
 8108db4:	f000 fbaa 	bl	810950c <RCCEx_PLL3_Config>
 8108db8:	4603      	mov	r3, r0
 8108dba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8108dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108dc2:	2b00      	cmp	r3, #0
 8108dc4:	d003      	beq.n	8108dce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108dca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8108dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108dd6:	2100      	movs	r1, #0
 8108dd8:	6039      	str	r1, [r7, #0]
 8108dda:	f003 0320 	and.w	r3, r3, #32
 8108dde:	607b      	str	r3, [r7, #4]
 8108de0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8108de4:	460b      	mov	r3, r1
 8108de6:	4313      	orrs	r3, r2
 8108de8:	d011      	beq.n	8108e0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8108dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8108dee:	3328      	adds	r3, #40	; 0x28
 8108df0:	2102      	movs	r1, #2
 8108df2:	4618      	mov	r0, r3
 8108df4:	f000 fb8a 	bl	810950c <RCCEx_PLL3_Config>
 8108df8:	4603      	mov	r3, r0
 8108dfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8108dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108e02:	2b00      	cmp	r3, #0
 8108e04:	d003      	beq.n	8108e0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8108e06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8108e0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8108e0e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8108e12:	2b00      	cmp	r3, #0
 8108e14:	d101      	bne.n	8108e1a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8108e16:	2300      	movs	r3, #0
 8108e18:	e000      	b.n	8108e1c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8108e1a:	2301      	movs	r3, #1
}
 8108e1c:	4618      	mov	r0, r3
 8108e1e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8108e22:	46bd      	mov	sp, r7
 8108e24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8108e28:	58024400 	.word	0x58024400

08108e2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8108e2c:	b580      	push	{r7, lr}
 8108e2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8108e30:	f7fe fd94 	bl	810795c <HAL_RCC_GetHCLKFreq>
 8108e34:	4602      	mov	r2, r0
 8108e36:	4b06      	ldr	r3, [pc, #24]	; (8108e50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8108e38:	6a1b      	ldr	r3, [r3, #32]
 8108e3a:	091b      	lsrs	r3, r3, #4
 8108e3c:	f003 0307 	and.w	r3, r3, #7
 8108e40:	4904      	ldr	r1, [pc, #16]	; (8108e54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8108e42:	5ccb      	ldrb	r3, [r1, r3]
 8108e44:	f003 031f 	and.w	r3, r3, #31
 8108e48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8108e4c:	4618      	mov	r0, r3
 8108e4e:	bd80      	pop	{r7, pc}
 8108e50:	58024400 	.word	0x58024400
 8108e54:	0810bff0 	.word	0x0810bff0

08108e58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8108e58:	b480      	push	{r7}
 8108e5a:	b089      	sub	sp, #36	; 0x24
 8108e5c:	af00      	add	r7, sp, #0
 8108e5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108e60:	4ba1      	ldr	r3, [pc, #644]	; (81090e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108e64:	f003 0303 	and.w	r3, r3, #3
 8108e68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8108e6a:	4b9f      	ldr	r3, [pc, #636]	; (81090e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108e6e:	0b1b      	lsrs	r3, r3, #12
 8108e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8108e74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8108e76:	4b9c      	ldr	r3, [pc, #624]	; (81090e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108e7a:	091b      	lsrs	r3, r3, #4
 8108e7c:	f003 0301 	and.w	r3, r3, #1
 8108e80:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8108e82:	4b99      	ldr	r3, [pc, #612]	; (81090e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108e86:	08db      	lsrs	r3, r3, #3
 8108e88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108e8c:	693a      	ldr	r2, [r7, #16]
 8108e8e:	fb02 f303 	mul.w	r3, r2, r3
 8108e92:	ee07 3a90 	vmov	s15, r3
 8108e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108e9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8108e9e:	697b      	ldr	r3, [r7, #20]
 8108ea0:	2b00      	cmp	r3, #0
 8108ea2:	f000 8111 	beq.w	81090c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8108ea6:	69bb      	ldr	r3, [r7, #24]
 8108ea8:	2b02      	cmp	r3, #2
 8108eaa:	f000 8083 	beq.w	8108fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8108eae:	69bb      	ldr	r3, [r7, #24]
 8108eb0:	2b02      	cmp	r3, #2
 8108eb2:	f200 80a1 	bhi.w	8108ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8108eb6:	69bb      	ldr	r3, [r7, #24]
 8108eb8:	2b00      	cmp	r3, #0
 8108eba:	d003      	beq.n	8108ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8108ebc:	69bb      	ldr	r3, [r7, #24]
 8108ebe:	2b01      	cmp	r3, #1
 8108ec0:	d056      	beq.n	8108f70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8108ec2:	e099      	b.n	8108ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108ec4:	4b88      	ldr	r3, [pc, #544]	; (81090e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108ec6:	681b      	ldr	r3, [r3, #0]
 8108ec8:	f003 0320 	and.w	r3, r3, #32
 8108ecc:	2b00      	cmp	r3, #0
 8108ece:	d02d      	beq.n	8108f2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108ed0:	4b85      	ldr	r3, [pc, #532]	; (81090e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108ed2:	681b      	ldr	r3, [r3, #0]
 8108ed4:	08db      	lsrs	r3, r3, #3
 8108ed6:	f003 0303 	and.w	r3, r3, #3
 8108eda:	4a84      	ldr	r2, [pc, #528]	; (81090ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8108edc:	fa22 f303 	lsr.w	r3, r2, r3
 8108ee0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108ee2:	68bb      	ldr	r3, [r7, #8]
 8108ee4:	ee07 3a90 	vmov	s15, r3
 8108ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108eec:	697b      	ldr	r3, [r7, #20]
 8108eee:	ee07 3a90 	vmov	s15, r3
 8108ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108efa:	4b7b      	ldr	r3, [pc, #492]	; (81090e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108f02:	ee07 3a90 	vmov	s15, r3
 8108f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8108f0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 81090f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108f26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8108f2a:	e087      	b.n	810903c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108f2c:	697b      	ldr	r3, [r7, #20]
 8108f2e:	ee07 3a90 	vmov	s15, r3
 8108f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108f36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8108f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108f3e:	4b6a      	ldr	r3, [pc, #424]	; (81090e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108f46:	ee07 3a90 	vmov	s15, r3
 8108f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108f52:	eddf 5a67 	vldr	s11, [pc, #412]	; 81090f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108f6e:	e065      	b.n	810903c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108f70:	697b      	ldr	r3, [r7, #20]
 8108f72:	ee07 3a90 	vmov	s15, r3
 8108f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108f7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81090f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8108f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108f82:	4b59      	ldr	r3, [pc, #356]	; (81090e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108f8a:	ee07 3a90 	vmov	s15, r3
 8108f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8108f96:	eddf 5a56 	vldr	s11, [pc, #344]	; 81090f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108fb2:	e043      	b.n	810903c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108fb4:	697b      	ldr	r3, [r7, #20]
 8108fb6:	ee07 3a90 	vmov	s15, r3
 8108fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108fbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81090fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8108fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108fc6:	4b48      	ldr	r3, [pc, #288]	; (81090e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108fce:	ee07 3a90 	vmov	s15, r3
 8108fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8108fda:	eddf 5a45 	vldr	s11, [pc, #276]	; 81090f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108ff6:	e021      	b.n	810903c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108ff8:	697b      	ldr	r3, [r7, #20]
 8108ffa:	ee07 3a90 	vmov	s15, r3
 8108ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109002:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81090f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8109006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810900a:	4b37      	ldr	r3, [pc, #220]	; (81090e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810900c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810900e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109012:	ee07 3a90 	vmov	s15, r3
 8109016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810901a:	ed97 6a03 	vldr	s12, [r7, #12]
 810901e:	eddf 5a34 	vldr	s11, [pc, #208]	; 81090f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8109022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810902a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810902e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810903a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 810903c:	4b2a      	ldr	r3, [pc, #168]	; (81090e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810903e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109040:	0a5b      	lsrs	r3, r3, #9
 8109042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109046:	ee07 3a90 	vmov	s15, r3
 810904a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810904e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109052:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109056:	edd7 6a07 	vldr	s13, [r7, #28]
 810905a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810905e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109062:	ee17 2a90 	vmov	r2, s15
 8109066:	687b      	ldr	r3, [r7, #4]
 8109068:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810906a:	4b1f      	ldr	r3, [pc, #124]	; (81090e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810906c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810906e:	0c1b      	lsrs	r3, r3, #16
 8109070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109074:	ee07 3a90 	vmov	s15, r3
 8109078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810907c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109080:	ee37 7a87 	vadd.f32	s14, s15, s14
 8109084:	edd7 6a07 	vldr	s13, [r7, #28]
 8109088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810908c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109090:	ee17 2a90 	vmov	r2, s15
 8109094:	687b      	ldr	r3, [r7, #4]
 8109096:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8109098:	4b13      	ldr	r3, [pc, #76]	; (81090e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810909a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810909c:	0e1b      	lsrs	r3, r3, #24
 810909e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81090a2:	ee07 3a90 	vmov	s15, r3
 81090a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81090aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81090ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 81090b2:	edd7 6a07 	vldr	s13, [r7, #28]
 81090b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81090ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81090be:	ee17 2a90 	vmov	r2, s15
 81090c2:	687b      	ldr	r3, [r7, #4]
 81090c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81090c6:	e008      	b.n	81090da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81090c8:	687b      	ldr	r3, [r7, #4]
 81090ca:	2200      	movs	r2, #0
 81090cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81090ce:	687b      	ldr	r3, [r7, #4]
 81090d0:	2200      	movs	r2, #0
 81090d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81090d4:	687b      	ldr	r3, [r7, #4]
 81090d6:	2200      	movs	r2, #0
 81090d8:	609a      	str	r2, [r3, #8]
}
 81090da:	bf00      	nop
 81090dc:	3724      	adds	r7, #36	; 0x24
 81090de:	46bd      	mov	sp, r7
 81090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090e4:	4770      	bx	lr
 81090e6:	bf00      	nop
 81090e8:	58024400 	.word	0x58024400
 81090ec:	03d09000 	.word	0x03d09000
 81090f0:	46000000 	.word	0x46000000
 81090f4:	4c742400 	.word	0x4c742400
 81090f8:	4a742400 	.word	0x4a742400
 81090fc:	4bbebc20 	.word	0x4bbebc20

08109100 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8109100:	b480      	push	{r7}
 8109102:	b089      	sub	sp, #36	; 0x24
 8109104:	af00      	add	r7, sp, #0
 8109106:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109108:	4ba1      	ldr	r3, [pc, #644]	; (8109390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810910a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810910c:	f003 0303 	and.w	r3, r3, #3
 8109110:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8109112:	4b9f      	ldr	r3, [pc, #636]	; (8109390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109116:	0d1b      	lsrs	r3, r3, #20
 8109118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810911c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810911e:	4b9c      	ldr	r3, [pc, #624]	; (8109390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109122:	0a1b      	lsrs	r3, r3, #8
 8109124:	f003 0301 	and.w	r3, r3, #1
 8109128:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810912a:	4b99      	ldr	r3, [pc, #612]	; (8109390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810912c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810912e:	08db      	lsrs	r3, r3, #3
 8109130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109134:	693a      	ldr	r2, [r7, #16]
 8109136:	fb02 f303 	mul.w	r3, r2, r3
 810913a:	ee07 3a90 	vmov	s15, r3
 810913e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109142:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8109146:	697b      	ldr	r3, [r7, #20]
 8109148:	2b00      	cmp	r3, #0
 810914a:	f000 8111 	beq.w	8109370 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810914e:	69bb      	ldr	r3, [r7, #24]
 8109150:	2b02      	cmp	r3, #2
 8109152:	f000 8083 	beq.w	810925c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8109156:	69bb      	ldr	r3, [r7, #24]
 8109158:	2b02      	cmp	r3, #2
 810915a:	f200 80a1 	bhi.w	81092a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810915e:	69bb      	ldr	r3, [r7, #24]
 8109160:	2b00      	cmp	r3, #0
 8109162:	d003      	beq.n	810916c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8109164:	69bb      	ldr	r3, [r7, #24]
 8109166:	2b01      	cmp	r3, #1
 8109168:	d056      	beq.n	8109218 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810916a:	e099      	b.n	81092a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810916c:	4b88      	ldr	r3, [pc, #544]	; (8109390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810916e:	681b      	ldr	r3, [r3, #0]
 8109170:	f003 0320 	and.w	r3, r3, #32
 8109174:	2b00      	cmp	r3, #0
 8109176:	d02d      	beq.n	81091d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109178:	4b85      	ldr	r3, [pc, #532]	; (8109390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810917a:	681b      	ldr	r3, [r3, #0]
 810917c:	08db      	lsrs	r3, r3, #3
 810917e:	f003 0303 	and.w	r3, r3, #3
 8109182:	4a84      	ldr	r2, [pc, #528]	; (8109394 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8109184:	fa22 f303 	lsr.w	r3, r2, r3
 8109188:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810918a:	68bb      	ldr	r3, [r7, #8]
 810918c:	ee07 3a90 	vmov	s15, r3
 8109190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109194:	697b      	ldr	r3, [r7, #20]
 8109196:	ee07 3a90 	vmov	s15, r3
 810919a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810919e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81091a2:	4b7b      	ldr	r3, [pc, #492]	; (8109390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81091a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81091a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81091aa:	ee07 3a90 	vmov	s15, r3
 81091ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81091b2:	ed97 6a03 	vldr	s12, [r7, #12]
 81091b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8109398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81091ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81091be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81091c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81091c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81091ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81091ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81091d2:	e087      	b.n	81092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81091d4:	697b      	ldr	r3, [r7, #20]
 81091d6:	ee07 3a90 	vmov	s15, r3
 81091da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81091de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810939c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81091e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81091e6:	4b6a      	ldr	r3, [pc, #424]	; (8109390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81091e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81091ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81091ee:	ee07 3a90 	vmov	s15, r3
 81091f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81091f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81091fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8109398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81091fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810920a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810920e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8109216:	e065      	b.n	81092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8109218:	697b      	ldr	r3, [r7, #20]
 810921a:	ee07 3a90 	vmov	s15, r3
 810921e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109222:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81093a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8109226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810922a:	4b59      	ldr	r3, [pc, #356]	; (8109390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810922c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810922e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109232:	ee07 3a90 	vmov	s15, r3
 8109236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810923a:	ed97 6a03 	vldr	s12, [r7, #12]
 810923e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8109398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810924a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810924e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810925a:	e043      	b.n	81092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810925c:	697b      	ldr	r3, [r7, #20]
 810925e:	ee07 3a90 	vmov	s15, r3
 8109262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109266:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81093a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810926a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810926e:	4b48      	ldr	r3, [pc, #288]	; (8109390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109276:	ee07 3a90 	vmov	s15, r3
 810927a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810927e:	ed97 6a03 	vldr	s12, [r7, #12]
 8109282:	eddf 5a45 	vldr	s11, [pc, #276]	; 8109398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8109286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810928a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810928e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109296:	ee67 7a27 	vmul.f32	s15, s14, s15
 810929a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810929e:	e021      	b.n	81092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81092a0:	697b      	ldr	r3, [r7, #20]
 81092a2:	ee07 3a90 	vmov	s15, r3
 81092a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81092aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81093a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81092ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81092b2:	4b37      	ldr	r3, [pc, #220]	; (8109390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81092b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81092b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81092ba:	ee07 3a90 	vmov	s15, r3
 81092be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81092c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81092c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8109398 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81092ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81092ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81092d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81092d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81092da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81092de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81092e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81092e4:	4b2a      	ldr	r3, [pc, #168]	; (8109390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81092e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81092e8:	0a5b      	lsrs	r3, r3, #9
 81092ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81092ee:	ee07 3a90 	vmov	s15, r3
 81092f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81092f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81092fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 81092fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8109302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810930a:	ee17 2a90 	vmov	r2, s15
 810930e:	687b      	ldr	r3, [r7, #4]
 8109310:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8109312:	4b1f      	ldr	r3, [pc, #124]	; (8109390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109316:	0c1b      	lsrs	r3, r3, #16
 8109318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810931c:	ee07 3a90 	vmov	s15, r3
 8109320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109328:	ee37 7a87 	vadd.f32	s14, s15, s14
 810932c:	edd7 6a07 	vldr	s13, [r7, #28]
 8109330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109338:	ee17 2a90 	vmov	r2, s15
 810933c:	687b      	ldr	r3, [r7, #4]
 810933e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8109340:	4b13      	ldr	r3, [pc, #76]	; (8109390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8109342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109344:	0e1b      	lsrs	r3, r3, #24
 8109346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810934a:	ee07 3a90 	vmov	s15, r3
 810934e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109352:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8109356:	ee37 7a87 	vadd.f32	s14, s15, s14
 810935a:	edd7 6a07 	vldr	s13, [r7, #28]
 810935e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109366:	ee17 2a90 	vmov	r2, s15
 810936a:	687b      	ldr	r3, [r7, #4]
 810936c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810936e:	e008      	b.n	8109382 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8109370:	687b      	ldr	r3, [r7, #4]
 8109372:	2200      	movs	r2, #0
 8109374:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8109376:	687b      	ldr	r3, [r7, #4]
 8109378:	2200      	movs	r2, #0
 810937a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810937c:	687b      	ldr	r3, [r7, #4]
 810937e:	2200      	movs	r2, #0
 8109380:	609a      	str	r2, [r3, #8]
}
 8109382:	bf00      	nop
 8109384:	3724      	adds	r7, #36	; 0x24
 8109386:	46bd      	mov	sp, r7
 8109388:	f85d 7b04 	ldr.w	r7, [sp], #4
 810938c:	4770      	bx	lr
 810938e:	bf00      	nop
 8109390:	58024400 	.word	0x58024400
 8109394:	03d09000 	.word	0x03d09000
 8109398:	46000000 	.word	0x46000000
 810939c:	4c742400 	.word	0x4c742400
 81093a0:	4a742400 	.word	0x4a742400
 81093a4:	4bbebc20 	.word	0x4bbebc20

081093a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81093a8:	b580      	push	{r7, lr}
 81093aa:	b084      	sub	sp, #16
 81093ac:	af00      	add	r7, sp, #0
 81093ae:	6078      	str	r0, [r7, #4]
 81093b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81093b2:	2300      	movs	r3, #0
 81093b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81093b6:	4b54      	ldr	r3, [pc, #336]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 81093b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81093ba:	f003 0303 	and.w	r3, r3, #3
 81093be:	2b03      	cmp	r3, #3
 81093c0:	d101      	bne.n	81093c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81093c2:	2301      	movs	r3, #1
 81093c4:	e09b      	b.n	81094fe <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81093c6:	4b50      	ldr	r3, [pc, #320]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 81093c8:	681b      	ldr	r3, [r3, #0]
 81093ca:	4a4f      	ldr	r2, [pc, #316]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 81093cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81093d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81093d2:	f7fb fb91 	bl	8104af8 <HAL_GetTick>
 81093d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81093d8:	e008      	b.n	81093ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81093da:	f7fb fb8d 	bl	8104af8 <HAL_GetTick>
 81093de:	4602      	mov	r2, r0
 81093e0:	68bb      	ldr	r3, [r7, #8]
 81093e2:	1ad3      	subs	r3, r2, r3
 81093e4:	2b02      	cmp	r3, #2
 81093e6:	d901      	bls.n	81093ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81093e8:	2303      	movs	r3, #3
 81093ea:	e088      	b.n	81094fe <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81093ec:	4b46      	ldr	r3, [pc, #280]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 81093ee:	681b      	ldr	r3, [r3, #0]
 81093f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81093f4:	2b00      	cmp	r3, #0
 81093f6:	d1f0      	bne.n	81093da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81093f8:	4b43      	ldr	r3, [pc, #268]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 81093fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81093fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8109400:	687b      	ldr	r3, [r7, #4]
 8109402:	681b      	ldr	r3, [r3, #0]
 8109404:	031b      	lsls	r3, r3, #12
 8109406:	4940      	ldr	r1, [pc, #256]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 8109408:	4313      	orrs	r3, r2
 810940a:	628b      	str	r3, [r1, #40]	; 0x28
 810940c:	687b      	ldr	r3, [r7, #4]
 810940e:	685b      	ldr	r3, [r3, #4]
 8109410:	3b01      	subs	r3, #1
 8109412:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8109416:	687b      	ldr	r3, [r7, #4]
 8109418:	689b      	ldr	r3, [r3, #8]
 810941a:	3b01      	subs	r3, #1
 810941c:	025b      	lsls	r3, r3, #9
 810941e:	b29b      	uxth	r3, r3
 8109420:	431a      	orrs	r2, r3
 8109422:	687b      	ldr	r3, [r7, #4]
 8109424:	68db      	ldr	r3, [r3, #12]
 8109426:	3b01      	subs	r3, #1
 8109428:	041b      	lsls	r3, r3, #16
 810942a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810942e:	431a      	orrs	r2, r3
 8109430:	687b      	ldr	r3, [r7, #4]
 8109432:	691b      	ldr	r3, [r3, #16]
 8109434:	3b01      	subs	r3, #1
 8109436:	061b      	lsls	r3, r3, #24
 8109438:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810943c:	4932      	ldr	r1, [pc, #200]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 810943e:	4313      	orrs	r3, r2
 8109440:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8109442:	4b31      	ldr	r3, [pc, #196]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 8109444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109446:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810944a:	687b      	ldr	r3, [r7, #4]
 810944c:	695b      	ldr	r3, [r3, #20]
 810944e:	492e      	ldr	r1, [pc, #184]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 8109450:	4313      	orrs	r3, r2
 8109452:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8109454:	4b2c      	ldr	r3, [pc, #176]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 8109456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109458:	f023 0220 	bic.w	r2, r3, #32
 810945c:	687b      	ldr	r3, [r7, #4]
 810945e:	699b      	ldr	r3, [r3, #24]
 8109460:	4929      	ldr	r1, [pc, #164]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 8109462:	4313      	orrs	r3, r2
 8109464:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8109466:	4b28      	ldr	r3, [pc, #160]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 8109468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810946a:	4a27      	ldr	r2, [pc, #156]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 810946c:	f023 0310 	bic.w	r3, r3, #16
 8109470:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8109472:	4b25      	ldr	r3, [pc, #148]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 8109474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810947a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810947e:	687a      	ldr	r2, [r7, #4]
 8109480:	69d2      	ldr	r2, [r2, #28]
 8109482:	00d2      	lsls	r2, r2, #3
 8109484:	4920      	ldr	r1, [pc, #128]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 8109486:	4313      	orrs	r3, r2
 8109488:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810948a:	4b1f      	ldr	r3, [pc, #124]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 810948c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810948e:	4a1e      	ldr	r2, [pc, #120]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 8109490:	f043 0310 	orr.w	r3, r3, #16
 8109494:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8109496:	683b      	ldr	r3, [r7, #0]
 8109498:	2b00      	cmp	r3, #0
 810949a:	d106      	bne.n	81094aa <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810949c:	4b1a      	ldr	r3, [pc, #104]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 810949e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81094a0:	4a19      	ldr	r2, [pc, #100]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 81094a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81094a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81094a8:	e00f      	b.n	81094ca <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81094aa:	683b      	ldr	r3, [r7, #0]
 81094ac:	2b01      	cmp	r3, #1
 81094ae:	d106      	bne.n	81094be <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81094b0:	4b15      	ldr	r3, [pc, #84]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 81094b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81094b4:	4a14      	ldr	r2, [pc, #80]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 81094b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81094ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 81094bc:	e005      	b.n	81094ca <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81094be:	4b12      	ldr	r3, [pc, #72]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 81094c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81094c2:	4a11      	ldr	r2, [pc, #68]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 81094c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81094c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81094ca:	4b0f      	ldr	r3, [pc, #60]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 81094cc:	681b      	ldr	r3, [r3, #0]
 81094ce:	4a0e      	ldr	r2, [pc, #56]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 81094d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81094d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81094d6:	f7fb fb0f 	bl	8104af8 <HAL_GetTick>
 81094da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81094dc:	e008      	b.n	81094f0 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81094de:	f7fb fb0b 	bl	8104af8 <HAL_GetTick>
 81094e2:	4602      	mov	r2, r0
 81094e4:	68bb      	ldr	r3, [r7, #8]
 81094e6:	1ad3      	subs	r3, r2, r3
 81094e8:	2b02      	cmp	r3, #2
 81094ea:	d901      	bls.n	81094f0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81094ec:	2303      	movs	r3, #3
 81094ee:	e006      	b.n	81094fe <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81094f0:	4b05      	ldr	r3, [pc, #20]	; (8109508 <RCCEx_PLL2_Config+0x160>)
 81094f2:	681b      	ldr	r3, [r3, #0]
 81094f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81094f8:	2b00      	cmp	r3, #0
 81094fa:	d0f0      	beq.n	81094de <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81094fc:	7bfb      	ldrb	r3, [r7, #15]
}
 81094fe:	4618      	mov	r0, r3
 8109500:	3710      	adds	r7, #16
 8109502:	46bd      	mov	sp, r7
 8109504:	bd80      	pop	{r7, pc}
 8109506:	bf00      	nop
 8109508:	58024400 	.word	0x58024400

0810950c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810950c:	b580      	push	{r7, lr}
 810950e:	b084      	sub	sp, #16
 8109510:	af00      	add	r7, sp, #0
 8109512:	6078      	str	r0, [r7, #4]
 8109514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8109516:	2300      	movs	r3, #0
 8109518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810951a:	4b54      	ldr	r3, [pc, #336]	; (810966c <RCCEx_PLL3_Config+0x160>)
 810951c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810951e:	f003 0303 	and.w	r3, r3, #3
 8109522:	2b03      	cmp	r3, #3
 8109524:	d101      	bne.n	810952a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8109526:	2301      	movs	r3, #1
 8109528:	e09b      	b.n	8109662 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810952a:	4b50      	ldr	r3, [pc, #320]	; (810966c <RCCEx_PLL3_Config+0x160>)
 810952c:	681b      	ldr	r3, [r3, #0]
 810952e:	4a4f      	ldr	r2, [pc, #316]	; (810966c <RCCEx_PLL3_Config+0x160>)
 8109530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8109534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109536:	f7fb fadf 	bl	8104af8 <HAL_GetTick>
 810953a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810953c:	e008      	b.n	8109550 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810953e:	f7fb fadb 	bl	8104af8 <HAL_GetTick>
 8109542:	4602      	mov	r2, r0
 8109544:	68bb      	ldr	r3, [r7, #8]
 8109546:	1ad3      	subs	r3, r2, r3
 8109548:	2b02      	cmp	r3, #2
 810954a:	d901      	bls.n	8109550 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810954c:	2303      	movs	r3, #3
 810954e:	e088      	b.n	8109662 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8109550:	4b46      	ldr	r3, [pc, #280]	; (810966c <RCCEx_PLL3_Config+0x160>)
 8109552:	681b      	ldr	r3, [r3, #0]
 8109554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8109558:	2b00      	cmp	r3, #0
 810955a:	d1f0      	bne.n	810953e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810955c:	4b43      	ldr	r3, [pc, #268]	; (810966c <RCCEx_PLL3_Config+0x160>)
 810955e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109560:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8109564:	687b      	ldr	r3, [r7, #4]
 8109566:	681b      	ldr	r3, [r3, #0]
 8109568:	051b      	lsls	r3, r3, #20
 810956a:	4940      	ldr	r1, [pc, #256]	; (810966c <RCCEx_PLL3_Config+0x160>)
 810956c:	4313      	orrs	r3, r2
 810956e:	628b      	str	r3, [r1, #40]	; 0x28
 8109570:	687b      	ldr	r3, [r7, #4]
 8109572:	685b      	ldr	r3, [r3, #4]
 8109574:	3b01      	subs	r3, #1
 8109576:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810957a:	687b      	ldr	r3, [r7, #4]
 810957c:	689b      	ldr	r3, [r3, #8]
 810957e:	3b01      	subs	r3, #1
 8109580:	025b      	lsls	r3, r3, #9
 8109582:	b29b      	uxth	r3, r3
 8109584:	431a      	orrs	r2, r3
 8109586:	687b      	ldr	r3, [r7, #4]
 8109588:	68db      	ldr	r3, [r3, #12]
 810958a:	3b01      	subs	r3, #1
 810958c:	041b      	lsls	r3, r3, #16
 810958e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8109592:	431a      	orrs	r2, r3
 8109594:	687b      	ldr	r3, [r7, #4]
 8109596:	691b      	ldr	r3, [r3, #16]
 8109598:	3b01      	subs	r3, #1
 810959a:	061b      	lsls	r3, r3, #24
 810959c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81095a0:	4932      	ldr	r1, [pc, #200]	; (810966c <RCCEx_PLL3_Config+0x160>)
 81095a2:	4313      	orrs	r3, r2
 81095a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81095a6:	4b31      	ldr	r3, [pc, #196]	; (810966c <RCCEx_PLL3_Config+0x160>)
 81095a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81095aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81095ae:	687b      	ldr	r3, [r7, #4]
 81095b0:	695b      	ldr	r3, [r3, #20]
 81095b2:	492e      	ldr	r1, [pc, #184]	; (810966c <RCCEx_PLL3_Config+0x160>)
 81095b4:	4313      	orrs	r3, r2
 81095b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81095b8:	4b2c      	ldr	r3, [pc, #176]	; (810966c <RCCEx_PLL3_Config+0x160>)
 81095ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81095bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81095c0:	687b      	ldr	r3, [r7, #4]
 81095c2:	699b      	ldr	r3, [r3, #24]
 81095c4:	4929      	ldr	r1, [pc, #164]	; (810966c <RCCEx_PLL3_Config+0x160>)
 81095c6:	4313      	orrs	r3, r2
 81095c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81095ca:	4b28      	ldr	r3, [pc, #160]	; (810966c <RCCEx_PLL3_Config+0x160>)
 81095cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81095ce:	4a27      	ldr	r2, [pc, #156]	; (810966c <RCCEx_PLL3_Config+0x160>)
 81095d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81095d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81095d6:	4b25      	ldr	r3, [pc, #148]	; (810966c <RCCEx_PLL3_Config+0x160>)
 81095d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81095da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81095de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81095e2:	687a      	ldr	r2, [r7, #4]
 81095e4:	69d2      	ldr	r2, [r2, #28]
 81095e6:	00d2      	lsls	r2, r2, #3
 81095e8:	4920      	ldr	r1, [pc, #128]	; (810966c <RCCEx_PLL3_Config+0x160>)
 81095ea:	4313      	orrs	r3, r2
 81095ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81095ee:	4b1f      	ldr	r3, [pc, #124]	; (810966c <RCCEx_PLL3_Config+0x160>)
 81095f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81095f2:	4a1e      	ldr	r2, [pc, #120]	; (810966c <RCCEx_PLL3_Config+0x160>)
 81095f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81095f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81095fa:	683b      	ldr	r3, [r7, #0]
 81095fc:	2b00      	cmp	r3, #0
 81095fe:	d106      	bne.n	810960e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8109600:	4b1a      	ldr	r3, [pc, #104]	; (810966c <RCCEx_PLL3_Config+0x160>)
 8109602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109604:	4a19      	ldr	r2, [pc, #100]	; (810966c <RCCEx_PLL3_Config+0x160>)
 8109606:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810960a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810960c:	e00f      	b.n	810962e <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810960e:	683b      	ldr	r3, [r7, #0]
 8109610:	2b01      	cmp	r3, #1
 8109612:	d106      	bne.n	8109622 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8109614:	4b15      	ldr	r3, [pc, #84]	; (810966c <RCCEx_PLL3_Config+0x160>)
 8109616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109618:	4a14      	ldr	r2, [pc, #80]	; (810966c <RCCEx_PLL3_Config+0x160>)
 810961a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810961e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109620:	e005      	b.n	810962e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8109622:	4b12      	ldr	r3, [pc, #72]	; (810966c <RCCEx_PLL3_Config+0x160>)
 8109624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109626:	4a11      	ldr	r2, [pc, #68]	; (810966c <RCCEx_PLL3_Config+0x160>)
 8109628:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810962c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810962e:	4b0f      	ldr	r3, [pc, #60]	; (810966c <RCCEx_PLL3_Config+0x160>)
 8109630:	681b      	ldr	r3, [r3, #0]
 8109632:	4a0e      	ldr	r2, [pc, #56]	; (810966c <RCCEx_PLL3_Config+0x160>)
 8109634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8109638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810963a:	f7fb fa5d 	bl	8104af8 <HAL_GetTick>
 810963e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109640:	e008      	b.n	8109654 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8109642:	f7fb fa59 	bl	8104af8 <HAL_GetTick>
 8109646:	4602      	mov	r2, r0
 8109648:	68bb      	ldr	r3, [r7, #8]
 810964a:	1ad3      	subs	r3, r2, r3
 810964c:	2b02      	cmp	r3, #2
 810964e:	d901      	bls.n	8109654 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8109650:	2303      	movs	r3, #3
 8109652:	e006      	b.n	8109662 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8109654:	4b05      	ldr	r3, [pc, #20]	; (810966c <RCCEx_PLL3_Config+0x160>)
 8109656:	681b      	ldr	r3, [r3, #0]
 8109658:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810965c:	2b00      	cmp	r3, #0
 810965e:	d0f0      	beq.n	8109642 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8109660:	7bfb      	ldrb	r3, [r7, #15]
}
 8109662:	4618      	mov	r0, r3
 8109664:	3710      	adds	r7, #16
 8109666:	46bd      	mov	sp, r7
 8109668:	bd80      	pop	{r7, pc}
 810966a:	bf00      	nop
 810966c:	58024400 	.word	0x58024400

08109670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8109670:	b580      	push	{r7, lr}
 8109672:	b082      	sub	sp, #8
 8109674:	af00      	add	r7, sp, #0
 8109676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8109678:	687b      	ldr	r3, [r7, #4]
 810967a:	2b00      	cmp	r3, #0
 810967c:	d101      	bne.n	8109682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810967e:	2301      	movs	r3, #1
 8109680:	e049      	b.n	8109716 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8109682:	687b      	ldr	r3, [r7, #4]
 8109684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8109688:	b2db      	uxtb	r3, r3
 810968a:	2b00      	cmp	r3, #0
 810968c:	d106      	bne.n	810969c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810968e:	687b      	ldr	r3, [r7, #4]
 8109690:	2200      	movs	r2, #0
 8109692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8109696:	6878      	ldr	r0, [r7, #4]
 8109698:	f7fa ffb0 	bl	81045fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810969c:	687b      	ldr	r3, [r7, #4]
 810969e:	2202      	movs	r2, #2
 81096a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81096a4:	687b      	ldr	r3, [r7, #4]
 81096a6:	681a      	ldr	r2, [r3, #0]
 81096a8:	687b      	ldr	r3, [r7, #4]
 81096aa:	3304      	adds	r3, #4
 81096ac:	4619      	mov	r1, r3
 81096ae:	4610      	mov	r0, r2
 81096b0:	f000 f9f6 	bl	8109aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81096b4:	687b      	ldr	r3, [r7, #4]
 81096b6:	2201      	movs	r2, #1
 81096b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81096bc:	687b      	ldr	r3, [r7, #4]
 81096be:	2201      	movs	r2, #1
 81096c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81096c4:	687b      	ldr	r3, [r7, #4]
 81096c6:	2201      	movs	r2, #1
 81096c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81096cc:	687b      	ldr	r3, [r7, #4]
 81096ce:	2201      	movs	r2, #1
 81096d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81096d4:	687b      	ldr	r3, [r7, #4]
 81096d6:	2201      	movs	r2, #1
 81096d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81096dc:	687b      	ldr	r3, [r7, #4]
 81096de:	2201      	movs	r2, #1
 81096e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81096e4:	687b      	ldr	r3, [r7, #4]
 81096e6:	2201      	movs	r2, #1
 81096e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81096ec:	687b      	ldr	r3, [r7, #4]
 81096ee:	2201      	movs	r2, #1
 81096f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81096f4:	687b      	ldr	r3, [r7, #4]
 81096f6:	2201      	movs	r2, #1
 81096f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81096fc:	687b      	ldr	r3, [r7, #4]
 81096fe:	2201      	movs	r2, #1
 8109700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8109704:	687b      	ldr	r3, [r7, #4]
 8109706:	2201      	movs	r2, #1
 8109708:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810970c:	687b      	ldr	r3, [r7, #4]
 810970e:	2201      	movs	r2, #1
 8109710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8109714:	2300      	movs	r3, #0
}
 8109716:	4618      	mov	r0, r3
 8109718:	3708      	adds	r7, #8
 810971a:	46bd      	mov	sp, r7
 810971c:	bd80      	pop	{r7, pc}
	...

08109720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8109720:	b480      	push	{r7}
 8109722:	b085      	sub	sp, #20
 8109724:	af00      	add	r7, sp, #0
 8109726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8109728:	687b      	ldr	r3, [r7, #4]
 810972a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810972e:	b2db      	uxtb	r3, r3
 8109730:	2b01      	cmp	r3, #1
 8109732:	d001      	beq.n	8109738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8109734:	2301      	movs	r3, #1
 8109736:	e054      	b.n	81097e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8109738:	687b      	ldr	r3, [r7, #4]
 810973a:	2202      	movs	r2, #2
 810973c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8109740:	687b      	ldr	r3, [r7, #4]
 8109742:	681b      	ldr	r3, [r3, #0]
 8109744:	68da      	ldr	r2, [r3, #12]
 8109746:	687b      	ldr	r3, [r7, #4]
 8109748:	681b      	ldr	r3, [r3, #0]
 810974a:	f042 0201 	orr.w	r2, r2, #1
 810974e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8109750:	687b      	ldr	r3, [r7, #4]
 8109752:	681b      	ldr	r3, [r3, #0]
 8109754:	4a26      	ldr	r2, [pc, #152]	; (81097f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8109756:	4293      	cmp	r3, r2
 8109758:	d022      	beq.n	81097a0 <HAL_TIM_Base_Start_IT+0x80>
 810975a:	687b      	ldr	r3, [r7, #4]
 810975c:	681b      	ldr	r3, [r3, #0]
 810975e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109762:	d01d      	beq.n	81097a0 <HAL_TIM_Base_Start_IT+0x80>
 8109764:	687b      	ldr	r3, [r7, #4]
 8109766:	681b      	ldr	r3, [r3, #0]
 8109768:	4a22      	ldr	r2, [pc, #136]	; (81097f4 <HAL_TIM_Base_Start_IT+0xd4>)
 810976a:	4293      	cmp	r3, r2
 810976c:	d018      	beq.n	81097a0 <HAL_TIM_Base_Start_IT+0x80>
 810976e:	687b      	ldr	r3, [r7, #4]
 8109770:	681b      	ldr	r3, [r3, #0]
 8109772:	4a21      	ldr	r2, [pc, #132]	; (81097f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8109774:	4293      	cmp	r3, r2
 8109776:	d013      	beq.n	81097a0 <HAL_TIM_Base_Start_IT+0x80>
 8109778:	687b      	ldr	r3, [r7, #4]
 810977a:	681b      	ldr	r3, [r3, #0]
 810977c:	4a1f      	ldr	r2, [pc, #124]	; (81097fc <HAL_TIM_Base_Start_IT+0xdc>)
 810977e:	4293      	cmp	r3, r2
 8109780:	d00e      	beq.n	81097a0 <HAL_TIM_Base_Start_IT+0x80>
 8109782:	687b      	ldr	r3, [r7, #4]
 8109784:	681b      	ldr	r3, [r3, #0]
 8109786:	4a1e      	ldr	r2, [pc, #120]	; (8109800 <HAL_TIM_Base_Start_IT+0xe0>)
 8109788:	4293      	cmp	r3, r2
 810978a:	d009      	beq.n	81097a0 <HAL_TIM_Base_Start_IT+0x80>
 810978c:	687b      	ldr	r3, [r7, #4]
 810978e:	681b      	ldr	r3, [r3, #0]
 8109790:	4a1c      	ldr	r2, [pc, #112]	; (8109804 <HAL_TIM_Base_Start_IT+0xe4>)
 8109792:	4293      	cmp	r3, r2
 8109794:	d004      	beq.n	81097a0 <HAL_TIM_Base_Start_IT+0x80>
 8109796:	687b      	ldr	r3, [r7, #4]
 8109798:	681b      	ldr	r3, [r3, #0]
 810979a:	4a1b      	ldr	r2, [pc, #108]	; (8109808 <HAL_TIM_Base_Start_IT+0xe8>)
 810979c:	4293      	cmp	r3, r2
 810979e:	d115      	bne.n	81097cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81097a0:	687b      	ldr	r3, [r7, #4]
 81097a2:	681b      	ldr	r3, [r3, #0]
 81097a4:	689a      	ldr	r2, [r3, #8]
 81097a6:	4b19      	ldr	r3, [pc, #100]	; (810980c <HAL_TIM_Base_Start_IT+0xec>)
 81097a8:	4013      	ands	r3, r2
 81097aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81097ac:	68fb      	ldr	r3, [r7, #12]
 81097ae:	2b06      	cmp	r3, #6
 81097b0:	d015      	beq.n	81097de <HAL_TIM_Base_Start_IT+0xbe>
 81097b2:	68fb      	ldr	r3, [r7, #12]
 81097b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81097b8:	d011      	beq.n	81097de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 81097ba:	687b      	ldr	r3, [r7, #4]
 81097bc:	681b      	ldr	r3, [r3, #0]
 81097be:	681a      	ldr	r2, [r3, #0]
 81097c0:	687b      	ldr	r3, [r7, #4]
 81097c2:	681b      	ldr	r3, [r3, #0]
 81097c4:	f042 0201 	orr.w	r2, r2, #1
 81097c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81097ca:	e008      	b.n	81097de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81097cc:	687b      	ldr	r3, [r7, #4]
 81097ce:	681b      	ldr	r3, [r3, #0]
 81097d0:	681a      	ldr	r2, [r3, #0]
 81097d2:	687b      	ldr	r3, [r7, #4]
 81097d4:	681b      	ldr	r3, [r3, #0]
 81097d6:	f042 0201 	orr.w	r2, r2, #1
 81097da:	601a      	str	r2, [r3, #0]
 81097dc:	e000      	b.n	81097e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81097de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81097e0:	2300      	movs	r3, #0
}
 81097e2:	4618      	mov	r0, r3
 81097e4:	3714      	adds	r7, #20
 81097e6:	46bd      	mov	sp, r7
 81097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81097ec:	4770      	bx	lr
 81097ee:	bf00      	nop
 81097f0:	40010000 	.word	0x40010000
 81097f4:	40000400 	.word	0x40000400
 81097f8:	40000800 	.word	0x40000800
 81097fc:	40000c00 	.word	0x40000c00
 8109800:	40010400 	.word	0x40010400
 8109804:	40001800 	.word	0x40001800
 8109808:	40014000 	.word	0x40014000
 810980c:	00010007 	.word	0x00010007

08109810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8109810:	b580      	push	{r7, lr}
 8109812:	b082      	sub	sp, #8
 8109814:	af00      	add	r7, sp, #0
 8109816:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8109818:	687b      	ldr	r3, [r7, #4]
 810981a:	681b      	ldr	r3, [r3, #0]
 810981c:	691b      	ldr	r3, [r3, #16]
 810981e:	f003 0302 	and.w	r3, r3, #2
 8109822:	2b02      	cmp	r3, #2
 8109824:	d122      	bne.n	810986c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8109826:	687b      	ldr	r3, [r7, #4]
 8109828:	681b      	ldr	r3, [r3, #0]
 810982a:	68db      	ldr	r3, [r3, #12]
 810982c:	f003 0302 	and.w	r3, r3, #2
 8109830:	2b02      	cmp	r3, #2
 8109832:	d11b      	bne.n	810986c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8109834:	687b      	ldr	r3, [r7, #4]
 8109836:	681b      	ldr	r3, [r3, #0]
 8109838:	f06f 0202 	mvn.w	r2, #2
 810983c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810983e:	687b      	ldr	r3, [r7, #4]
 8109840:	2201      	movs	r2, #1
 8109842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8109844:	687b      	ldr	r3, [r7, #4]
 8109846:	681b      	ldr	r3, [r3, #0]
 8109848:	699b      	ldr	r3, [r3, #24]
 810984a:	f003 0303 	and.w	r3, r3, #3
 810984e:	2b00      	cmp	r3, #0
 8109850:	d003      	beq.n	810985a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8109852:	6878      	ldr	r0, [r7, #4]
 8109854:	f000 f905 	bl	8109a62 <HAL_TIM_IC_CaptureCallback>
 8109858:	e005      	b.n	8109866 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810985a:	6878      	ldr	r0, [r7, #4]
 810985c:	f000 f8f7 	bl	8109a4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109860:	6878      	ldr	r0, [r7, #4]
 8109862:	f000 f908 	bl	8109a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109866:	687b      	ldr	r3, [r7, #4]
 8109868:	2200      	movs	r2, #0
 810986a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810986c:	687b      	ldr	r3, [r7, #4]
 810986e:	681b      	ldr	r3, [r3, #0]
 8109870:	691b      	ldr	r3, [r3, #16]
 8109872:	f003 0304 	and.w	r3, r3, #4
 8109876:	2b04      	cmp	r3, #4
 8109878:	d122      	bne.n	81098c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810987a:	687b      	ldr	r3, [r7, #4]
 810987c:	681b      	ldr	r3, [r3, #0]
 810987e:	68db      	ldr	r3, [r3, #12]
 8109880:	f003 0304 	and.w	r3, r3, #4
 8109884:	2b04      	cmp	r3, #4
 8109886:	d11b      	bne.n	81098c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8109888:	687b      	ldr	r3, [r7, #4]
 810988a:	681b      	ldr	r3, [r3, #0]
 810988c:	f06f 0204 	mvn.w	r2, #4
 8109890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8109892:	687b      	ldr	r3, [r7, #4]
 8109894:	2202      	movs	r2, #2
 8109896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8109898:	687b      	ldr	r3, [r7, #4]
 810989a:	681b      	ldr	r3, [r3, #0]
 810989c:	699b      	ldr	r3, [r3, #24]
 810989e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81098a2:	2b00      	cmp	r3, #0
 81098a4:	d003      	beq.n	81098ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81098a6:	6878      	ldr	r0, [r7, #4]
 81098a8:	f000 f8db 	bl	8109a62 <HAL_TIM_IC_CaptureCallback>
 81098ac:	e005      	b.n	81098ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81098ae:	6878      	ldr	r0, [r7, #4]
 81098b0:	f000 f8cd 	bl	8109a4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81098b4:	6878      	ldr	r0, [r7, #4]
 81098b6:	f000 f8de 	bl	8109a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81098ba:	687b      	ldr	r3, [r7, #4]
 81098bc:	2200      	movs	r2, #0
 81098be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81098c0:	687b      	ldr	r3, [r7, #4]
 81098c2:	681b      	ldr	r3, [r3, #0]
 81098c4:	691b      	ldr	r3, [r3, #16]
 81098c6:	f003 0308 	and.w	r3, r3, #8
 81098ca:	2b08      	cmp	r3, #8
 81098cc:	d122      	bne.n	8109914 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81098ce:	687b      	ldr	r3, [r7, #4]
 81098d0:	681b      	ldr	r3, [r3, #0]
 81098d2:	68db      	ldr	r3, [r3, #12]
 81098d4:	f003 0308 	and.w	r3, r3, #8
 81098d8:	2b08      	cmp	r3, #8
 81098da:	d11b      	bne.n	8109914 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 81098dc:	687b      	ldr	r3, [r7, #4]
 81098de:	681b      	ldr	r3, [r3, #0]
 81098e0:	f06f 0208 	mvn.w	r2, #8
 81098e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81098e6:	687b      	ldr	r3, [r7, #4]
 81098e8:	2204      	movs	r2, #4
 81098ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81098ec:	687b      	ldr	r3, [r7, #4]
 81098ee:	681b      	ldr	r3, [r3, #0]
 81098f0:	69db      	ldr	r3, [r3, #28]
 81098f2:	f003 0303 	and.w	r3, r3, #3
 81098f6:	2b00      	cmp	r3, #0
 81098f8:	d003      	beq.n	8109902 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81098fa:	6878      	ldr	r0, [r7, #4]
 81098fc:	f000 f8b1 	bl	8109a62 <HAL_TIM_IC_CaptureCallback>
 8109900:	e005      	b.n	810990e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109902:	6878      	ldr	r0, [r7, #4]
 8109904:	f000 f8a3 	bl	8109a4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8109908:	6878      	ldr	r0, [r7, #4]
 810990a:	f000 f8b4 	bl	8109a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810990e:	687b      	ldr	r3, [r7, #4]
 8109910:	2200      	movs	r2, #0
 8109912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8109914:	687b      	ldr	r3, [r7, #4]
 8109916:	681b      	ldr	r3, [r3, #0]
 8109918:	691b      	ldr	r3, [r3, #16]
 810991a:	f003 0310 	and.w	r3, r3, #16
 810991e:	2b10      	cmp	r3, #16
 8109920:	d122      	bne.n	8109968 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8109922:	687b      	ldr	r3, [r7, #4]
 8109924:	681b      	ldr	r3, [r3, #0]
 8109926:	68db      	ldr	r3, [r3, #12]
 8109928:	f003 0310 	and.w	r3, r3, #16
 810992c:	2b10      	cmp	r3, #16
 810992e:	d11b      	bne.n	8109968 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8109930:	687b      	ldr	r3, [r7, #4]
 8109932:	681b      	ldr	r3, [r3, #0]
 8109934:	f06f 0210 	mvn.w	r2, #16
 8109938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810993a:	687b      	ldr	r3, [r7, #4]
 810993c:	2208      	movs	r2, #8
 810993e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8109940:	687b      	ldr	r3, [r7, #4]
 8109942:	681b      	ldr	r3, [r3, #0]
 8109944:	69db      	ldr	r3, [r3, #28]
 8109946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810994a:	2b00      	cmp	r3, #0
 810994c:	d003      	beq.n	8109956 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810994e:	6878      	ldr	r0, [r7, #4]
 8109950:	f000 f887 	bl	8109a62 <HAL_TIM_IC_CaptureCallback>
 8109954:	e005      	b.n	8109962 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8109956:	6878      	ldr	r0, [r7, #4]
 8109958:	f000 f879 	bl	8109a4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810995c:	6878      	ldr	r0, [r7, #4]
 810995e:	f000 f88a 	bl	8109a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8109962:	687b      	ldr	r3, [r7, #4]
 8109964:	2200      	movs	r2, #0
 8109966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8109968:	687b      	ldr	r3, [r7, #4]
 810996a:	681b      	ldr	r3, [r3, #0]
 810996c:	691b      	ldr	r3, [r3, #16]
 810996e:	f003 0301 	and.w	r3, r3, #1
 8109972:	2b01      	cmp	r3, #1
 8109974:	d10e      	bne.n	8109994 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8109976:	687b      	ldr	r3, [r7, #4]
 8109978:	681b      	ldr	r3, [r3, #0]
 810997a:	68db      	ldr	r3, [r3, #12]
 810997c:	f003 0301 	and.w	r3, r3, #1
 8109980:	2b01      	cmp	r3, #1
 8109982:	d107      	bne.n	8109994 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8109984:	687b      	ldr	r3, [r7, #4]
 8109986:	681b      	ldr	r3, [r3, #0]
 8109988:	f06f 0201 	mvn.w	r2, #1
 810998c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810998e:	6878      	ldr	r0, [r7, #4]
 8109990:	f7fa f93c 	bl	8103c0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8109994:	687b      	ldr	r3, [r7, #4]
 8109996:	681b      	ldr	r3, [r3, #0]
 8109998:	691b      	ldr	r3, [r3, #16]
 810999a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810999e:	2b80      	cmp	r3, #128	; 0x80
 81099a0:	d10e      	bne.n	81099c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81099a2:	687b      	ldr	r3, [r7, #4]
 81099a4:	681b      	ldr	r3, [r3, #0]
 81099a6:	68db      	ldr	r3, [r3, #12]
 81099a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81099ac:	2b80      	cmp	r3, #128	; 0x80
 81099ae:	d107      	bne.n	81099c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81099b0:	687b      	ldr	r3, [r7, #4]
 81099b2:	681b      	ldr	r3, [r3, #0]
 81099b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81099b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81099ba:	6878      	ldr	r0, [r7, #4]
 81099bc:	f000 f914 	bl	8109be8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81099c0:	687b      	ldr	r3, [r7, #4]
 81099c2:	681b      	ldr	r3, [r3, #0]
 81099c4:	691b      	ldr	r3, [r3, #16]
 81099c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81099ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81099ce:	d10e      	bne.n	81099ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81099d0:	687b      	ldr	r3, [r7, #4]
 81099d2:	681b      	ldr	r3, [r3, #0]
 81099d4:	68db      	ldr	r3, [r3, #12]
 81099d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81099da:	2b80      	cmp	r3, #128	; 0x80
 81099dc:	d107      	bne.n	81099ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81099de:	687b      	ldr	r3, [r7, #4]
 81099e0:	681b      	ldr	r3, [r3, #0]
 81099e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 81099e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81099e8:	6878      	ldr	r0, [r7, #4]
 81099ea:	f000 f907 	bl	8109bfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 81099ee:	687b      	ldr	r3, [r7, #4]
 81099f0:	681b      	ldr	r3, [r3, #0]
 81099f2:	691b      	ldr	r3, [r3, #16]
 81099f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81099f8:	2b40      	cmp	r3, #64	; 0x40
 81099fa:	d10e      	bne.n	8109a1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 81099fc:	687b      	ldr	r3, [r7, #4]
 81099fe:	681b      	ldr	r3, [r3, #0]
 8109a00:	68db      	ldr	r3, [r3, #12]
 8109a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8109a06:	2b40      	cmp	r3, #64	; 0x40
 8109a08:	d107      	bne.n	8109a1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8109a0a:	687b      	ldr	r3, [r7, #4]
 8109a0c:	681b      	ldr	r3, [r3, #0]
 8109a0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8109a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8109a14:	6878      	ldr	r0, [r7, #4]
 8109a16:	f000 f838 	bl	8109a8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8109a1a:	687b      	ldr	r3, [r7, #4]
 8109a1c:	681b      	ldr	r3, [r3, #0]
 8109a1e:	691b      	ldr	r3, [r3, #16]
 8109a20:	f003 0320 	and.w	r3, r3, #32
 8109a24:	2b20      	cmp	r3, #32
 8109a26:	d10e      	bne.n	8109a46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8109a28:	687b      	ldr	r3, [r7, #4]
 8109a2a:	681b      	ldr	r3, [r3, #0]
 8109a2c:	68db      	ldr	r3, [r3, #12]
 8109a2e:	f003 0320 	and.w	r3, r3, #32
 8109a32:	2b20      	cmp	r3, #32
 8109a34:	d107      	bne.n	8109a46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8109a36:	687b      	ldr	r3, [r7, #4]
 8109a38:	681b      	ldr	r3, [r3, #0]
 8109a3a:	f06f 0220 	mvn.w	r2, #32
 8109a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8109a40:	6878      	ldr	r0, [r7, #4]
 8109a42:	f000 f8c7 	bl	8109bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8109a46:	bf00      	nop
 8109a48:	3708      	adds	r7, #8
 8109a4a:	46bd      	mov	sp, r7
 8109a4c:	bd80      	pop	{r7, pc}

08109a4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8109a4e:	b480      	push	{r7}
 8109a50:	b083      	sub	sp, #12
 8109a52:	af00      	add	r7, sp, #0
 8109a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8109a56:	bf00      	nop
 8109a58:	370c      	adds	r7, #12
 8109a5a:	46bd      	mov	sp, r7
 8109a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a60:	4770      	bx	lr

08109a62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8109a62:	b480      	push	{r7}
 8109a64:	b083      	sub	sp, #12
 8109a66:	af00      	add	r7, sp, #0
 8109a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8109a6a:	bf00      	nop
 8109a6c:	370c      	adds	r7, #12
 8109a6e:	46bd      	mov	sp, r7
 8109a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a74:	4770      	bx	lr

08109a76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8109a76:	b480      	push	{r7}
 8109a78:	b083      	sub	sp, #12
 8109a7a:	af00      	add	r7, sp, #0
 8109a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8109a7e:	bf00      	nop
 8109a80:	370c      	adds	r7, #12
 8109a82:	46bd      	mov	sp, r7
 8109a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a88:	4770      	bx	lr

08109a8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8109a8a:	b480      	push	{r7}
 8109a8c:	b083      	sub	sp, #12
 8109a8e:	af00      	add	r7, sp, #0
 8109a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8109a92:	bf00      	nop
 8109a94:	370c      	adds	r7, #12
 8109a96:	46bd      	mov	sp, r7
 8109a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a9c:	4770      	bx	lr
	...

08109aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8109aa0:	b480      	push	{r7}
 8109aa2:	b085      	sub	sp, #20
 8109aa4:	af00      	add	r7, sp, #0
 8109aa6:	6078      	str	r0, [r7, #4]
 8109aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8109aaa:	687b      	ldr	r3, [r7, #4]
 8109aac:	681b      	ldr	r3, [r3, #0]
 8109aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8109ab0:	687b      	ldr	r3, [r7, #4]
 8109ab2:	4a40      	ldr	r2, [pc, #256]	; (8109bb4 <TIM_Base_SetConfig+0x114>)
 8109ab4:	4293      	cmp	r3, r2
 8109ab6:	d013      	beq.n	8109ae0 <TIM_Base_SetConfig+0x40>
 8109ab8:	687b      	ldr	r3, [r7, #4]
 8109aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109abe:	d00f      	beq.n	8109ae0 <TIM_Base_SetConfig+0x40>
 8109ac0:	687b      	ldr	r3, [r7, #4]
 8109ac2:	4a3d      	ldr	r2, [pc, #244]	; (8109bb8 <TIM_Base_SetConfig+0x118>)
 8109ac4:	4293      	cmp	r3, r2
 8109ac6:	d00b      	beq.n	8109ae0 <TIM_Base_SetConfig+0x40>
 8109ac8:	687b      	ldr	r3, [r7, #4]
 8109aca:	4a3c      	ldr	r2, [pc, #240]	; (8109bbc <TIM_Base_SetConfig+0x11c>)
 8109acc:	4293      	cmp	r3, r2
 8109ace:	d007      	beq.n	8109ae0 <TIM_Base_SetConfig+0x40>
 8109ad0:	687b      	ldr	r3, [r7, #4]
 8109ad2:	4a3b      	ldr	r2, [pc, #236]	; (8109bc0 <TIM_Base_SetConfig+0x120>)
 8109ad4:	4293      	cmp	r3, r2
 8109ad6:	d003      	beq.n	8109ae0 <TIM_Base_SetConfig+0x40>
 8109ad8:	687b      	ldr	r3, [r7, #4]
 8109ada:	4a3a      	ldr	r2, [pc, #232]	; (8109bc4 <TIM_Base_SetConfig+0x124>)
 8109adc:	4293      	cmp	r3, r2
 8109ade:	d108      	bne.n	8109af2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8109ae0:	68fb      	ldr	r3, [r7, #12]
 8109ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8109ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8109ae8:	683b      	ldr	r3, [r7, #0]
 8109aea:	685b      	ldr	r3, [r3, #4]
 8109aec:	68fa      	ldr	r2, [r7, #12]
 8109aee:	4313      	orrs	r3, r2
 8109af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8109af2:	687b      	ldr	r3, [r7, #4]
 8109af4:	4a2f      	ldr	r2, [pc, #188]	; (8109bb4 <TIM_Base_SetConfig+0x114>)
 8109af6:	4293      	cmp	r3, r2
 8109af8:	d01f      	beq.n	8109b3a <TIM_Base_SetConfig+0x9a>
 8109afa:	687b      	ldr	r3, [r7, #4]
 8109afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109b00:	d01b      	beq.n	8109b3a <TIM_Base_SetConfig+0x9a>
 8109b02:	687b      	ldr	r3, [r7, #4]
 8109b04:	4a2c      	ldr	r2, [pc, #176]	; (8109bb8 <TIM_Base_SetConfig+0x118>)
 8109b06:	4293      	cmp	r3, r2
 8109b08:	d017      	beq.n	8109b3a <TIM_Base_SetConfig+0x9a>
 8109b0a:	687b      	ldr	r3, [r7, #4]
 8109b0c:	4a2b      	ldr	r2, [pc, #172]	; (8109bbc <TIM_Base_SetConfig+0x11c>)
 8109b0e:	4293      	cmp	r3, r2
 8109b10:	d013      	beq.n	8109b3a <TIM_Base_SetConfig+0x9a>
 8109b12:	687b      	ldr	r3, [r7, #4]
 8109b14:	4a2a      	ldr	r2, [pc, #168]	; (8109bc0 <TIM_Base_SetConfig+0x120>)
 8109b16:	4293      	cmp	r3, r2
 8109b18:	d00f      	beq.n	8109b3a <TIM_Base_SetConfig+0x9a>
 8109b1a:	687b      	ldr	r3, [r7, #4]
 8109b1c:	4a29      	ldr	r2, [pc, #164]	; (8109bc4 <TIM_Base_SetConfig+0x124>)
 8109b1e:	4293      	cmp	r3, r2
 8109b20:	d00b      	beq.n	8109b3a <TIM_Base_SetConfig+0x9a>
 8109b22:	687b      	ldr	r3, [r7, #4]
 8109b24:	4a28      	ldr	r2, [pc, #160]	; (8109bc8 <TIM_Base_SetConfig+0x128>)
 8109b26:	4293      	cmp	r3, r2
 8109b28:	d007      	beq.n	8109b3a <TIM_Base_SetConfig+0x9a>
 8109b2a:	687b      	ldr	r3, [r7, #4]
 8109b2c:	4a27      	ldr	r2, [pc, #156]	; (8109bcc <TIM_Base_SetConfig+0x12c>)
 8109b2e:	4293      	cmp	r3, r2
 8109b30:	d003      	beq.n	8109b3a <TIM_Base_SetConfig+0x9a>
 8109b32:	687b      	ldr	r3, [r7, #4]
 8109b34:	4a26      	ldr	r2, [pc, #152]	; (8109bd0 <TIM_Base_SetConfig+0x130>)
 8109b36:	4293      	cmp	r3, r2
 8109b38:	d108      	bne.n	8109b4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8109b3a:	68fb      	ldr	r3, [r7, #12]
 8109b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8109b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8109b42:	683b      	ldr	r3, [r7, #0]
 8109b44:	68db      	ldr	r3, [r3, #12]
 8109b46:	68fa      	ldr	r2, [r7, #12]
 8109b48:	4313      	orrs	r3, r2
 8109b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8109b4c:	68fb      	ldr	r3, [r7, #12]
 8109b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8109b52:	683b      	ldr	r3, [r7, #0]
 8109b54:	695b      	ldr	r3, [r3, #20]
 8109b56:	4313      	orrs	r3, r2
 8109b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8109b5a:	687b      	ldr	r3, [r7, #4]
 8109b5c:	68fa      	ldr	r2, [r7, #12]
 8109b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8109b60:	683b      	ldr	r3, [r7, #0]
 8109b62:	689a      	ldr	r2, [r3, #8]
 8109b64:	687b      	ldr	r3, [r7, #4]
 8109b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8109b68:	683b      	ldr	r3, [r7, #0]
 8109b6a:	681a      	ldr	r2, [r3, #0]
 8109b6c:	687b      	ldr	r3, [r7, #4]
 8109b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8109b70:	687b      	ldr	r3, [r7, #4]
 8109b72:	4a10      	ldr	r2, [pc, #64]	; (8109bb4 <TIM_Base_SetConfig+0x114>)
 8109b74:	4293      	cmp	r3, r2
 8109b76:	d00f      	beq.n	8109b98 <TIM_Base_SetConfig+0xf8>
 8109b78:	687b      	ldr	r3, [r7, #4]
 8109b7a:	4a12      	ldr	r2, [pc, #72]	; (8109bc4 <TIM_Base_SetConfig+0x124>)
 8109b7c:	4293      	cmp	r3, r2
 8109b7e:	d00b      	beq.n	8109b98 <TIM_Base_SetConfig+0xf8>
 8109b80:	687b      	ldr	r3, [r7, #4]
 8109b82:	4a11      	ldr	r2, [pc, #68]	; (8109bc8 <TIM_Base_SetConfig+0x128>)
 8109b84:	4293      	cmp	r3, r2
 8109b86:	d007      	beq.n	8109b98 <TIM_Base_SetConfig+0xf8>
 8109b88:	687b      	ldr	r3, [r7, #4]
 8109b8a:	4a10      	ldr	r2, [pc, #64]	; (8109bcc <TIM_Base_SetConfig+0x12c>)
 8109b8c:	4293      	cmp	r3, r2
 8109b8e:	d003      	beq.n	8109b98 <TIM_Base_SetConfig+0xf8>
 8109b90:	687b      	ldr	r3, [r7, #4]
 8109b92:	4a0f      	ldr	r2, [pc, #60]	; (8109bd0 <TIM_Base_SetConfig+0x130>)
 8109b94:	4293      	cmp	r3, r2
 8109b96:	d103      	bne.n	8109ba0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8109b98:	683b      	ldr	r3, [r7, #0]
 8109b9a:	691a      	ldr	r2, [r3, #16]
 8109b9c:	687b      	ldr	r3, [r7, #4]
 8109b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8109ba0:	687b      	ldr	r3, [r7, #4]
 8109ba2:	2201      	movs	r2, #1
 8109ba4:	615a      	str	r2, [r3, #20]
}
 8109ba6:	bf00      	nop
 8109ba8:	3714      	adds	r7, #20
 8109baa:	46bd      	mov	sp, r7
 8109bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109bb0:	4770      	bx	lr
 8109bb2:	bf00      	nop
 8109bb4:	40010000 	.word	0x40010000
 8109bb8:	40000400 	.word	0x40000400
 8109bbc:	40000800 	.word	0x40000800
 8109bc0:	40000c00 	.word	0x40000c00
 8109bc4:	40010400 	.word	0x40010400
 8109bc8:	40014000 	.word	0x40014000
 8109bcc:	40014400 	.word	0x40014400
 8109bd0:	40014800 	.word	0x40014800

08109bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8109bd4:	b480      	push	{r7}
 8109bd6:	b083      	sub	sp, #12
 8109bd8:	af00      	add	r7, sp, #0
 8109bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8109bdc:	bf00      	nop
 8109bde:	370c      	adds	r7, #12
 8109be0:	46bd      	mov	sp, r7
 8109be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109be6:	4770      	bx	lr

08109be8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8109be8:	b480      	push	{r7}
 8109bea:	b083      	sub	sp, #12
 8109bec:	af00      	add	r7, sp, #0
 8109bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8109bf0:	bf00      	nop
 8109bf2:	370c      	adds	r7, #12
 8109bf4:	46bd      	mov	sp, r7
 8109bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109bfa:	4770      	bx	lr

08109bfc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8109bfc:	b480      	push	{r7}
 8109bfe:	b083      	sub	sp, #12
 8109c00:	af00      	add	r7, sp, #0
 8109c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8109c04:	bf00      	nop
 8109c06:	370c      	adds	r7, #12
 8109c08:	46bd      	mov	sp, r7
 8109c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c0e:	4770      	bx	lr

08109c10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8109c10:	b580      	push	{r7, lr}
 8109c12:	b082      	sub	sp, #8
 8109c14:	af00      	add	r7, sp, #0
 8109c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8109c18:	687b      	ldr	r3, [r7, #4]
 8109c1a:	2b00      	cmp	r3, #0
 8109c1c:	d101      	bne.n	8109c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8109c1e:	2301      	movs	r3, #1
 8109c20:	e042      	b.n	8109ca8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8109c22:	687b      	ldr	r3, [r7, #4]
 8109c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8109c28:	2b00      	cmp	r3, #0
 8109c2a:	d106      	bne.n	8109c3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8109c2c:	687b      	ldr	r3, [r7, #4]
 8109c2e:	2200      	movs	r2, #0
 8109c30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8109c34:	6878      	ldr	r0, [r7, #4]
 8109c36:	f7fa fd09 	bl	810464c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8109c3a:	687b      	ldr	r3, [r7, #4]
 8109c3c:	2224      	movs	r2, #36	; 0x24
 8109c3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8109c42:	687b      	ldr	r3, [r7, #4]
 8109c44:	681b      	ldr	r3, [r3, #0]
 8109c46:	681a      	ldr	r2, [r3, #0]
 8109c48:	687b      	ldr	r3, [r7, #4]
 8109c4a:	681b      	ldr	r3, [r3, #0]
 8109c4c:	f022 0201 	bic.w	r2, r2, #1
 8109c50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8109c52:	6878      	ldr	r0, [r7, #4]
 8109c54:	f000 fc94 	bl	810a580 <UART_SetConfig>
 8109c58:	4603      	mov	r3, r0
 8109c5a:	2b01      	cmp	r3, #1
 8109c5c:	d101      	bne.n	8109c62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8109c5e:	2301      	movs	r3, #1
 8109c60:	e022      	b.n	8109ca8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8109c62:	687b      	ldr	r3, [r7, #4]
 8109c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109c66:	2b00      	cmp	r3, #0
 8109c68:	d002      	beq.n	8109c70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8109c6a:	6878      	ldr	r0, [r7, #4]
 8109c6c:	f001 f9f0 	bl	810b050 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8109c70:	687b      	ldr	r3, [r7, #4]
 8109c72:	681b      	ldr	r3, [r3, #0]
 8109c74:	685a      	ldr	r2, [r3, #4]
 8109c76:	687b      	ldr	r3, [r7, #4]
 8109c78:	681b      	ldr	r3, [r3, #0]
 8109c7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8109c7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8109c80:	687b      	ldr	r3, [r7, #4]
 8109c82:	681b      	ldr	r3, [r3, #0]
 8109c84:	689a      	ldr	r2, [r3, #8]
 8109c86:	687b      	ldr	r3, [r7, #4]
 8109c88:	681b      	ldr	r3, [r3, #0]
 8109c8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8109c8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8109c90:	687b      	ldr	r3, [r7, #4]
 8109c92:	681b      	ldr	r3, [r3, #0]
 8109c94:	681a      	ldr	r2, [r3, #0]
 8109c96:	687b      	ldr	r3, [r7, #4]
 8109c98:	681b      	ldr	r3, [r3, #0]
 8109c9a:	f042 0201 	orr.w	r2, r2, #1
 8109c9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8109ca0:	6878      	ldr	r0, [r7, #4]
 8109ca2:	f001 fa77 	bl	810b194 <UART_CheckIdleState>
 8109ca6:	4603      	mov	r3, r0
}
 8109ca8:	4618      	mov	r0, r3
 8109caa:	3708      	adds	r7, #8
 8109cac:	46bd      	mov	sp, r7
 8109cae:	bd80      	pop	{r7, pc}

08109cb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8109cb0:	b580      	push	{r7, lr}
 8109cb2:	b08a      	sub	sp, #40	; 0x28
 8109cb4:	af02      	add	r7, sp, #8
 8109cb6:	60f8      	str	r0, [r7, #12]
 8109cb8:	60b9      	str	r1, [r7, #8]
 8109cba:	603b      	str	r3, [r7, #0]
 8109cbc:	4613      	mov	r3, r2
 8109cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8109cc0:	68fb      	ldr	r3, [r7, #12]
 8109cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8109cc6:	2b20      	cmp	r3, #32
 8109cc8:	d17b      	bne.n	8109dc2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8109cca:	68bb      	ldr	r3, [r7, #8]
 8109ccc:	2b00      	cmp	r3, #0
 8109cce:	d002      	beq.n	8109cd6 <HAL_UART_Transmit+0x26>
 8109cd0:	88fb      	ldrh	r3, [r7, #6]
 8109cd2:	2b00      	cmp	r3, #0
 8109cd4:	d101      	bne.n	8109cda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8109cd6:	2301      	movs	r3, #1
 8109cd8:	e074      	b.n	8109dc4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109cda:	68fb      	ldr	r3, [r7, #12]
 8109cdc:	2200      	movs	r2, #0
 8109cde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8109ce2:	68fb      	ldr	r3, [r7, #12]
 8109ce4:	2221      	movs	r2, #33	; 0x21
 8109ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8109cea:	f7fa ff05 	bl	8104af8 <HAL_GetTick>
 8109cee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8109cf0:	68fb      	ldr	r3, [r7, #12]
 8109cf2:	88fa      	ldrh	r2, [r7, #6]
 8109cf4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8109cf8:	68fb      	ldr	r3, [r7, #12]
 8109cfa:	88fa      	ldrh	r2, [r7, #6]
 8109cfc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8109d00:	68fb      	ldr	r3, [r7, #12]
 8109d02:	689b      	ldr	r3, [r3, #8]
 8109d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8109d08:	d108      	bne.n	8109d1c <HAL_UART_Transmit+0x6c>
 8109d0a:	68fb      	ldr	r3, [r7, #12]
 8109d0c:	691b      	ldr	r3, [r3, #16]
 8109d0e:	2b00      	cmp	r3, #0
 8109d10:	d104      	bne.n	8109d1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8109d12:	2300      	movs	r3, #0
 8109d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8109d16:	68bb      	ldr	r3, [r7, #8]
 8109d18:	61bb      	str	r3, [r7, #24]
 8109d1a:	e003      	b.n	8109d24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8109d1c:	68bb      	ldr	r3, [r7, #8]
 8109d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8109d20:	2300      	movs	r3, #0
 8109d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8109d24:	e030      	b.n	8109d88 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8109d26:	683b      	ldr	r3, [r7, #0]
 8109d28:	9300      	str	r3, [sp, #0]
 8109d2a:	697b      	ldr	r3, [r7, #20]
 8109d2c:	2200      	movs	r2, #0
 8109d2e:	2180      	movs	r1, #128	; 0x80
 8109d30:	68f8      	ldr	r0, [r7, #12]
 8109d32:	f001 fad9 	bl	810b2e8 <UART_WaitOnFlagUntilTimeout>
 8109d36:	4603      	mov	r3, r0
 8109d38:	2b00      	cmp	r3, #0
 8109d3a:	d005      	beq.n	8109d48 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8109d3c:	68fb      	ldr	r3, [r7, #12]
 8109d3e:	2220      	movs	r2, #32
 8109d40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8109d44:	2303      	movs	r3, #3
 8109d46:	e03d      	b.n	8109dc4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8109d48:	69fb      	ldr	r3, [r7, #28]
 8109d4a:	2b00      	cmp	r3, #0
 8109d4c:	d10b      	bne.n	8109d66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8109d4e:	69bb      	ldr	r3, [r7, #24]
 8109d50:	881b      	ldrh	r3, [r3, #0]
 8109d52:	461a      	mov	r2, r3
 8109d54:	68fb      	ldr	r3, [r7, #12]
 8109d56:	681b      	ldr	r3, [r3, #0]
 8109d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8109d5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8109d5e:	69bb      	ldr	r3, [r7, #24]
 8109d60:	3302      	adds	r3, #2
 8109d62:	61bb      	str	r3, [r7, #24]
 8109d64:	e007      	b.n	8109d76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8109d66:	69fb      	ldr	r3, [r7, #28]
 8109d68:	781a      	ldrb	r2, [r3, #0]
 8109d6a:	68fb      	ldr	r3, [r7, #12]
 8109d6c:	681b      	ldr	r3, [r3, #0]
 8109d6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8109d70:	69fb      	ldr	r3, [r7, #28]
 8109d72:	3301      	adds	r3, #1
 8109d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8109d76:	68fb      	ldr	r3, [r7, #12]
 8109d78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8109d7c:	b29b      	uxth	r3, r3
 8109d7e:	3b01      	subs	r3, #1
 8109d80:	b29a      	uxth	r2, r3
 8109d82:	68fb      	ldr	r3, [r7, #12]
 8109d84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8109d88:	68fb      	ldr	r3, [r7, #12]
 8109d8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8109d8e:	b29b      	uxth	r3, r3
 8109d90:	2b00      	cmp	r3, #0
 8109d92:	d1c8      	bne.n	8109d26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8109d94:	683b      	ldr	r3, [r7, #0]
 8109d96:	9300      	str	r3, [sp, #0]
 8109d98:	697b      	ldr	r3, [r7, #20]
 8109d9a:	2200      	movs	r2, #0
 8109d9c:	2140      	movs	r1, #64	; 0x40
 8109d9e:	68f8      	ldr	r0, [r7, #12]
 8109da0:	f001 faa2 	bl	810b2e8 <UART_WaitOnFlagUntilTimeout>
 8109da4:	4603      	mov	r3, r0
 8109da6:	2b00      	cmp	r3, #0
 8109da8:	d005      	beq.n	8109db6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8109daa:	68fb      	ldr	r3, [r7, #12]
 8109dac:	2220      	movs	r2, #32
 8109dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8109db2:	2303      	movs	r3, #3
 8109db4:	e006      	b.n	8109dc4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8109db6:	68fb      	ldr	r3, [r7, #12]
 8109db8:	2220      	movs	r2, #32
 8109dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8109dbe:	2300      	movs	r3, #0
 8109dc0:	e000      	b.n	8109dc4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8109dc2:	2302      	movs	r3, #2
  }
}
 8109dc4:	4618      	mov	r0, r3
 8109dc6:	3720      	adds	r7, #32
 8109dc8:	46bd      	mov	sp, r7
 8109dca:	bd80      	pop	{r7, pc}

08109dcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8109dcc:	b580      	push	{r7, lr}
 8109dce:	b0ba      	sub	sp, #232	; 0xe8
 8109dd0:	af00      	add	r7, sp, #0
 8109dd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8109dd4:	687b      	ldr	r3, [r7, #4]
 8109dd6:	681b      	ldr	r3, [r3, #0]
 8109dd8:	69db      	ldr	r3, [r3, #28]
 8109dda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8109dde:	687b      	ldr	r3, [r7, #4]
 8109de0:	681b      	ldr	r3, [r3, #0]
 8109de2:	681b      	ldr	r3, [r3, #0]
 8109de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8109de8:	687b      	ldr	r3, [r7, #4]
 8109dea:	681b      	ldr	r3, [r3, #0]
 8109dec:	689b      	ldr	r3, [r3, #8]
 8109dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8109df2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8109df6:	f640 030f 	movw	r3, #2063	; 0x80f
 8109dfa:	4013      	ands	r3, r2
 8109dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8109e00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8109e04:	2b00      	cmp	r3, #0
 8109e06:	d11b      	bne.n	8109e40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8109e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8109e0c:	f003 0320 	and.w	r3, r3, #32
 8109e10:	2b00      	cmp	r3, #0
 8109e12:	d015      	beq.n	8109e40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8109e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8109e18:	f003 0320 	and.w	r3, r3, #32
 8109e1c:	2b00      	cmp	r3, #0
 8109e1e:	d105      	bne.n	8109e2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8109e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8109e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8109e28:	2b00      	cmp	r3, #0
 8109e2a:	d009      	beq.n	8109e40 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8109e2c:	687b      	ldr	r3, [r7, #4]
 8109e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8109e30:	2b00      	cmp	r3, #0
 8109e32:	f000 8379 	beq.w	810a528 <HAL_UART_IRQHandler+0x75c>
      {
        huart->RxISR(huart);
 8109e36:	687b      	ldr	r3, [r7, #4]
 8109e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8109e3a:	6878      	ldr	r0, [r7, #4]
 8109e3c:	4798      	blx	r3
      }
      return;
 8109e3e:	e373      	b.n	810a528 <HAL_UART_IRQHandler+0x75c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8109e40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8109e44:	2b00      	cmp	r3, #0
 8109e46:	f000 8123 	beq.w	810a090 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8109e4a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8109e4e:	4b8d      	ldr	r3, [pc, #564]	; (810a084 <HAL_UART_IRQHandler+0x2b8>)
 8109e50:	4013      	ands	r3, r2
 8109e52:	2b00      	cmp	r3, #0
 8109e54:	d106      	bne.n	8109e64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8109e56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8109e5a:	4b8b      	ldr	r3, [pc, #556]	; (810a088 <HAL_UART_IRQHandler+0x2bc>)
 8109e5c:	4013      	ands	r3, r2
 8109e5e:	2b00      	cmp	r3, #0
 8109e60:	f000 8116 	beq.w	810a090 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8109e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8109e68:	f003 0301 	and.w	r3, r3, #1
 8109e6c:	2b00      	cmp	r3, #0
 8109e6e:	d011      	beq.n	8109e94 <HAL_UART_IRQHandler+0xc8>
 8109e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8109e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8109e78:	2b00      	cmp	r3, #0
 8109e7a:	d00b      	beq.n	8109e94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8109e7c:	687b      	ldr	r3, [r7, #4]
 8109e7e:	681b      	ldr	r3, [r3, #0]
 8109e80:	2201      	movs	r2, #1
 8109e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8109e84:	687b      	ldr	r3, [r7, #4]
 8109e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8109e8a:	f043 0201 	orr.w	r2, r3, #1
 8109e8e:	687b      	ldr	r3, [r7, #4]
 8109e90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8109e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8109e98:	f003 0302 	and.w	r3, r3, #2
 8109e9c:	2b00      	cmp	r3, #0
 8109e9e:	d011      	beq.n	8109ec4 <HAL_UART_IRQHandler+0xf8>
 8109ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8109ea4:	f003 0301 	and.w	r3, r3, #1
 8109ea8:	2b00      	cmp	r3, #0
 8109eaa:	d00b      	beq.n	8109ec4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8109eac:	687b      	ldr	r3, [r7, #4]
 8109eae:	681b      	ldr	r3, [r3, #0]
 8109eb0:	2202      	movs	r2, #2
 8109eb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8109eb4:	687b      	ldr	r3, [r7, #4]
 8109eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8109eba:	f043 0204 	orr.w	r2, r3, #4
 8109ebe:	687b      	ldr	r3, [r7, #4]
 8109ec0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8109ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8109ec8:	f003 0304 	and.w	r3, r3, #4
 8109ecc:	2b00      	cmp	r3, #0
 8109ece:	d011      	beq.n	8109ef4 <HAL_UART_IRQHandler+0x128>
 8109ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8109ed4:	f003 0301 	and.w	r3, r3, #1
 8109ed8:	2b00      	cmp	r3, #0
 8109eda:	d00b      	beq.n	8109ef4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8109edc:	687b      	ldr	r3, [r7, #4]
 8109ede:	681b      	ldr	r3, [r3, #0]
 8109ee0:	2204      	movs	r2, #4
 8109ee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8109ee4:	687b      	ldr	r3, [r7, #4]
 8109ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8109eea:	f043 0202 	orr.w	r2, r3, #2
 8109eee:	687b      	ldr	r3, [r7, #4]
 8109ef0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8109ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8109ef8:	f003 0308 	and.w	r3, r3, #8
 8109efc:	2b00      	cmp	r3, #0
 8109efe:	d017      	beq.n	8109f30 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8109f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8109f04:	f003 0320 	and.w	r3, r3, #32
 8109f08:	2b00      	cmp	r3, #0
 8109f0a:	d105      	bne.n	8109f18 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8109f0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8109f10:	4b5c      	ldr	r3, [pc, #368]	; (810a084 <HAL_UART_IRQHandler+0x2b8>)
 8109f12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8109f14:	2b00      	cmp	r3, #0
 8109f16:	d00b      	beq.n	8109f30 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8109f18:	687b      	ldr	r3, [r7, #4]
 8109f1a:	681b      	ldr	r3, [r3, #0]
 8109f1c:	2208      	movs	r2, #8
 8109f1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8109f20:	687b      	ldr	r3, [r7, #4]
 8109f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8109f26:	f043 0208 	orr.w	r2, r3, #8
 8109f2a:	687b      	ldr	r3, [r7, #4]
 8109f2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8109f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8109f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8109f38:	2b00      	cmp	r3, #0
 8109f3a:	d012      	beq.n	8109f62 <HAL_UART_IRQHandler+0x196>
 8109f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8109f40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8109f44:	2b00      	cmp	r3, #0
 8109f46:	d00c      	beq.n	8109f62 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8109f48:	687b      	ldr	r3, [r7, #4]
 8109f4a:	681b      	ldr	r3, [r3, #0]
 8109f4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8109f50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8109f52:	687b      	ldr	r3, [r7, #4]
 8109f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8109f58:	f043 0220 	orr.w	r2, r3, #32
 8109f5c:	687b      	ldr	r3, [r7, #4]
 8109f5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8109f62:	687b      	ldr	r3, [r7, #4]
 8109f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8109f68:	2b00      	cmp	r3, #0
 8109f6a:	f000 82df 	beq.w	810a52c <HAL_UART_IRQHandler+0x760>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8109f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8109f72:	f003 0320 	and.w	r3, r3, #32
 8109f76:	2b00      	cmp	r3, #0
 8109f78:	d013      	beq.n	8109fa2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8109f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8109f7e:	f003 0320 	and.w	r3, r3, #32
 8109f82:	2b00      	cmp	r3, #0
 8109f84:	d105      	bne.n	8109f92 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8109f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8109f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8109f8e:	2b00      	cmp	r3, #0
 8109f90:	d007      	beq.n	8109fa2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8109f92:	687b      	ldr	r3, [r7, #4]
 8109f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8109f96:	2b00      	cmp	r3, #0
 8109f98:	d003      	beq.n	8109fa2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8109f9a:	687b      	ldr	r3, [r7, #4]
 8109f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8109f9e:	6878      	ldr	r0, [r7, #4]
 8109fa0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8109fa2:	687b      	ldr	r3, [r7, #4]
 8109fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8109fa8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8109fac:	687b      	ldr	r3, [r7, #4]
 8109fae:	681b      	ldr	r3, [r3, #0]
 8109fb0:	689b      	ldr	r3, [r3, #8]
 8109fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8109fb6:	2b40      	cmp	r3, #64	; 0x40
 8109fb8:	d005      	beq.n	8109fc6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8109fba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8109fbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8109fc2:	2b00      	cmp	r3, #0
 8109fc4:	d054      	beq.n	810a070 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8109fc6:	6878      	ldr	r0, [r7, #4]
 8109fc8:	f001 f9f5 	bl	810b3b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109fcc:	687b      	ldr	r3, [r7, #4]
 8109fce:	681b      	ldr	r3, [r3, #0]
 8109fd0:	689b      	ldr	r3, [r3, #8]
 8109fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8109fd6:	2b40      	cmp	r3, #64	; 0x40
 8109fd8:	d146      	bne.n	810a068 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8109fda:	687b      	ldr	r3, [r7, #4]
 8109fdc:	681b      	ldr	r3, [r3, #0]
 8109fde:	3308      	adds	r3, #8
 8109fe0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109fe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8109fe8:	e853 3f00 	ldrex	r3, [r3]
 8109fec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8109ff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8109ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8109ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8109ffc:	687b      	ldr	r3, [r7, #4]
 8109ffe:	681b      	ldr	r3, [r3, #0]
 810a000:	3308      	adds	r3, #8
 810a002:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 810a006:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 810a00a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a00e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 810a012:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 810a016:	e841 2300 	strex	r3, r2, [r1]
 810a01a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 810a01e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 810a022:	2b00      	cmp	r3, #0
 810a024:	d1d9      	bne.n	8109fda <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810a026:	687b      	ldr	r3, [r7, #4]
 810a028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a02c:	2b00      	cmp	r3, #0
 810a02e:	d017      	beq.n	810a060 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 810a030:	687b      	ldr	r3, [r7, #4]
 810a032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a036:	4a15      	ldr	r2, [pc, #84]	; (810a08c <HAL_UART_IRQHandler+0x2c0>)
 810a038:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810a03a:	687b      	ldr	r3, [r7, #4]
 810a03c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a040:	4618      	mov	r0, r3
 810a042:	f7fb fd01 	bl	8105a48 <HAL_DMA_Abort_IT>
 810a046:	4603      	mov	r3, r0
 810a048:	2b00      	cmp	r3, #0
 810a04a:	d019      	beq.n	810a080 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 810a04c:	687b      	ldr	r3, [r7, #4]
 810a04e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a054:	687a      	ldr	r2, [r7, #4]
 810a056:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 810a05a:	4610      	mov	r0, r2
 810a05c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810a05e:	e00f      	b.n	810a080 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 810a060:	6878      	ldr	r0, [r7, #4]
 810a062:	f000 fa77 	bl	810a554 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810a066:	e00b      	b.n	810a080 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810a068:	6878      	ldr	r0, [r7, #4]
 810a06a:	f000 fa73 	bl	810a554 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810a06e:	e007      	b.n	810a080 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 810a070:	6878      	ldr	r0, [r7, #4]
 810a072:	f000 fa6f 	bl	810a554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a076:	687b      	ldr	r3, [r7, #4]
 810a078:	2200      	movs	r2, #0
 810a07a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 810a07e:	e255      	b.n	810a52c <HAL_UART_IRQHandler+0x760>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810a080:	bf00      	nop
    return;
 810a082:	e253      	b.n	810a52c <HAL_UART_IRQHandler+0x760>
 810a084:	10000001 	.word	0x10000001
 810a088:	04000120 	.word	0x04000120
 810a08c:	0810b483 	.word	0x0810b483

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810a090:	687b      	ldr	r3, [r7, #4]
 810a092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810a094:	2b01      	cmp	r3, #1
 810a096:	f040 81e9 	bne.w	810a46c <HAL_UART_IRQHandler+0x6a0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810a09a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 810a09e:	f003 0310 	and.w	r3, r3, #16
 810a0a2:	2b00      	cmp	r3, #0
 810a0a4:	f000 81e2 	beq.w	810a46c <HAL_UART_IRQHandler+0x6a0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 810a0a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810a0ac:	f003 0310 	and.w	r3, r3, #16
 810a0b0:	2b00      	cmp	r3, #0
 810a0b2:	f000 81db 	beq.w	810a46c <HAL_UART_IRQHandler+0x6a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810a0b6:	687b      	ldr	r3, [r7, #4]
 810a0b8:	681b      	ldr	r3, [r3, #0]
 810a0ba:	2210      	movs	r2, #16
 810a0bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810a0be:	687b      	ldr	r3, [r7, #4]
 810a0c0:	681b      	ldr	r3, [r3, #0]
 810a0c2:	689b      	ldr	r3, [r3, #8]
 810a0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a0c8:	2b40      	cmp	r3, #64	; 0x40
 810a0ca:	f040 8151 	bne.w	810a370 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810a0ce:	687b      	ldr	r3, [r7, #4]
 810a0d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a0d4:	681b      	ldr	r3, [r3, #0]
 810a0d6:	4a96      	ldr	r2, [pc, #600]	; (810a330 <HAL_UART_IRQHandler+0x564>)
 810a0d8:	4293      	cmp	r3, r2
 810a0da:	d068      	beq.n	810a1ae <HAL_UART_IRQHandler+0x3e2>
 810a0dc:	687b      	ldr	r3, [r7, #4]
 810a0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a0e2:	681b      	ldr	r3, [r3, #0]
 810a0e4:	4a93      	ldr	r2, [pc, #588]	; (810a334 <HAL_UART_IRQHandler+0x568>)
 810a0e6:	4293      	cmp	r3, r2
 810a0e8:	d061      	beq.n	810a1ae <HAL_UART_IRQHandler+0x3e2>
 810a0ea:	687b      	ldr	r3, [r7, #4]
 810a0ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a0f0:	681b      	ldr	r3, [r3, #0]
 810a0f2:	4a91      	ldr	r2, [pc, #580]	; (810a338 <HAL_UART_IRQHandler+0x56c>)
 810a0f4:	4293      	cmp	r3, r2
 810a0f6:	d05a      	beq.n	810a1ae <HAL_UART_IRQHandler+0x3e2>
 810a0f8:	687b      	ldr	r3, [r7, #4]
 810a0fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a0fe:	681b      	ldr	r3, [r3, #0]
 810a100:	4a8e      	ldr	r2, [pc, #568]	; (810a33c <HAL_UART_IRQHandler+0x570>)
 810a102:	4293      	cmp	r3, r2
 810a104:	d053      	beq.n	810a1ae <HAL_UART_IRQHandler+0x3e2>
 810a106:	687b      	ldr	r3, [r7, #4]
 810a108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a10c:	681b      	ldr	r3, [r3, #0]
 810a10e:	4a8c      	ldr	r2, [pc, #560]	; (810a340 <HAL_UART_IRQHandler+0x574>)
 810a110:	4293      	cmp	r3, r2
 810a112:	d04c      	beq.n	810a1ae <HAL_UART_IRQHandler+0x3e2>
 810a114:	687b      	ldr	r3, [r7, #4]
 810a116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a11a:	681b      	ldr	r3, [r3, #0]
 810a11c:	4a89      	ldr	r2, [pc, #548]	; (810a344 <HAL_UART_IRQHandler+0x578>)
 810a11e:	4293      	cmp	r3, r2
 810a120:	d045      	beq.n	810a1ae <HAL_UART_IRQHandler+0x3e2>
 810a122:	687b      	ldr	r3, [r7, #4]
 810a124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a128:	681b      	ldr	r3, [r3, #0]
 810a12a:	4a87      	ldr	r2, [pc, #540]	; (810a348 <HAL_UART_IRQHandler+0x57c>)
 810a12c:	4293      	cmp	r3, r2
 810a12e:	d03e      	beq.n	810a1ae <HAL_UART_IRQHandler+0x3e2>
 810a130:	687b      	ldr	r3, [r7, #4]
 810a132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a136:	681b      	ldr	r3, [r3, #0]
 810a138:	4a84      	ldr	r2, [pc, #528]	; (810a34c <HAL_UART_IRQHandler+0x580>)
 810a13a:	4293      	cmp	r3, r2
 810a13c:	d037      	beq.n	810a1ae <HAL_UART_IRQHandler+0x3e2>
 810a13e:	687b      	ldr	r3, [r7, #4]
 810a140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a144:	681b      	ldr	r3, [r3, #0]
 810a146:	4a82      	ldr	r2, [pc, #520]	; (810a350 <HAL_UART_IRQHandler+0x584>)
 810a148:	4293      	cmp	r3, r2
 810a14a:	d030      	beq.n	810a1ae <HAL_UART_IRQHandler+0x3e2>
 810a14c:	687b      	ldr	r3, [r7, #4]
 810a14e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a152:	681b      	ldr	r3, [r3, #0]
 810a154:	4a7f      	ldr	r2, [pc, #508]	; (810a354 <HAL_UART_IRQHandler+0x588>)
 810a156:	4293      	cmp	r3, r2
 810a158:	d029      	beq.n	810a1ae <HAL_UART_IRQHandler+0x3e2>
 810a15a:	687b      	ldr	r3, [r7, #4]
 810a15c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a160:	681b      	ldr	r3, [r3, #0]
 810a162:	4a7d      	ldr	r2, [pc, #500]	; (810a358 <HAL_UART_IRQHandler+0x58c>)
 810a164:	4293      	cmp	r3, r2
 810a166:	d022      	beq.n	810a1ae <HAL_UART_IRQHandler+0x3e2>
 810a168:	687b      	ldr	r3, [r7, #4]
 810a16a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a16e:	681b      	ldr	r3, [r3, #0]
 810a170:	4a7a      	ldr	r2, [pc, #488]	; (810a35c <HAL_UART_IRQHandler+0x590>)
 810a172:	4293      	cmp	r3, r2
 810a174:	d01b      	beq.n	810a1ae <HAL_UART_IRQHandler+0x3e2>
 810a176:	687b      	ldr	r3, [r7, #4]
 810a178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a17c:	681b      	ldr	r3, [r3, #0]
 810a17e:	4a78      	ldr	r2, [pc, #480]	; (810a360 <HAL_UART_IRQHandler+0x594>)
 810a180:	4293      	cmp	r3, r2
 810a182:	d014      	beq.n	810a1ae <HAL_UART_IRQHandler+0x3e2>
 810a184:	687b      	ldr	r3, [r7, #4]
 810a186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a18a:	681b      	ldr	r3, [r3, #0]
 810a18c:	4a75      	ldr	r2, [pc, #468]	; (810a364 <HAL_UART_IRQHandler+0x598>)
 810a18e:	4293      	cmp	r3, r2
 810a190:	d00d      	beq.n	810a1ae <HAL_UART_IRQHandler+0x3e2>
 810a192:	687b      	ldr	r3, [r7, #4]
 810a194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a198:	681b      	ldr	r3, [r3, #0]
 810a19a:	4a73      	ldr	r2, [pc, #460]	; (810a368 <HAL_UART_IRQHandler+0x59c>)
 810a19c:	4293      	cmp	r3, r2
 810a19e:	d006      	beq.n	810a1ae <HAL_UART_IRQHandler+0x3e2>
 810a1a0:	687b      	ldr	r3, [r7, #4]
 810a1a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a1a6:	681b      	ldr	r3, [r3, #0]
 810a1a8:	4a70      	ldr	r2, [pc, #448]	; (810a36c <HAL_UART_IRQHandler+0x5a0>)
 810a1aa:	4293      	cmp	r3, r2
 810a1ac:	d106      	bne.n	810a1bc <HAL_UART_IRQHandler+0x3f0>
 810a1ae:	687b      	ldr	r3, [r7, #4]
 810a1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a1b4:	681b      	ldr	r3, [r3, #0]
 810a1b6:	685b      	ldr	r3, [r3, #4]
 810a1b8:	b29b      	uxth	r3, r3
 810a1ba:	e005      	b.n	810a1c8 <HAL_UART_IRQHandler+0x3fc>
 810a1bc:	687b      	ldr	r3, [r7, #4]
 810a1be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a1c2:	681b      	ldr	r3, [r3, #0]
 810a1c4:	685b      	ldr	r3, [r3, #4]
 810a1c6:	b29b      	uxth	r3, r3
 810a1c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 810a1cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 810a1d0:	2b00      	cmp	r3, #0
 810a1d2:	f000 81ad 	beq.w	810a530 <HAL_UART_IRQHandler+0x764>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810a1d6:	687b      	ldr	r3, [r7, #4]
 810a1d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810a1dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 810a1e0:	429a      	cmp	r2, r3
 810a1e2:	f080 81a5 	bcs.w	810a530 <HAL_UART_IRQHandler+0x764>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810a1e6:	687b      	ldr	r3, [r7, #4]
 810a1e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 810a1ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 810a1f0:	687b      	ldr	r3, [r7, #4]
 810a1f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a1f6:	69db      	ldr	r3, [r3, #28]
 810a1f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a1fc:	f000 8087 	beq.w	810a30e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810a200:	687b      	ldr	r3, [r7, #4]
 810a202:	681b      	ldr	r3, [r3, #0]
 810a204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a208:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 810a20c:	e853 3f00 	ldrex	r3, [r3]
 810a210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 810a214:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 810a218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810a21c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 810a220:	687b      	ldr	r3, [r7, #4]
 810a222:	681b      	ldr	r3, [r3, #0]
 810a224:	461a      	mov	r2, r3
 810a226:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 810a22a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 810a22e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a232:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 810a236:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 810a23a:	e841 2300 	strex	r3, r2, [r1]
 810a23e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 810a242:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 810a246:	2b00      	cmp	r3, #0
 810a248:	d1da      	bne.n	810a200 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a24a:	687b      	ldr	r3, [r7, #4]
 810a24c:	681b      	ldr	r3, [r3, #0]
 810a24e:	3308      	adds	r3, #8
 810a250:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 810a254:	e853 3f00 	ldrex	r3, [r3]
 810a258:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 810a25a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 810a25c:	f023 0301 	bic.w	r3, r3, #1
 810a260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 810a264:	687b      	ldr	r3, [r7, #4]
 810a266:	681b      	ldr	r3, [r3, #0]
 810a268:	3308      	adds	r3, #8
 810a26a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 810a26e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 810a272:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a274:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 810a276:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 810a27a:	e841 2300 	strex	r3, r2, [r1]
 810a27e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 810a280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810a282:	2b00      	cmp	r3, #0
 810a284:	d1e1      	bne.n	810a24a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810a286:	687b      	ldr	r3, [r7, #4]
 810a288:	681b      	ldr	r3, [r3, #0]
 810a28a:	3308      	adds	r3, #8
 810a28c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a28e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810a290:	e853 3f00 	ldrex	r3, [r3]
 810a294:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 810a296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 810a298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810a29c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 810a2a0:	687b      	ldr	r3, [r7, #4]
 810a2a2:	681b      	ldr	r3, [r3, #0]
 810a2a4:	3308      	adds	r3, #8
 810a2a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 810a2aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 810a2ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a2ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 810a2b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 810a2b2:	e841 2300 	strex	r3, r2, [r1]
 810a2b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 810a2b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810a2ba:	2b00      	cmp	r3, #0
 810a2bc:	d1e3      	bne.n	810a286 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810a2be:	687b      	ldr	r3, [r7, #4]
 810a2c0:	2220      	movs	r2, #32
 810a2c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a2c6:	687b      	ldr	r3, [r7, #4]
 810a2c8:	2200      	movs	r2, #0
 810a2ca:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810a2cc:	687b      	ldr	r3, [r7, #4]
 810a2ce:	681b      	ldr	r3, [r3, #0]
 810a2d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a2d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810a2d4:	e853 3f00 	ldrex	r3, [r3]
 810a2d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 810a2da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810a2dc:	f023 0310 	bic.w	r3, r3, #16
 810a2e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 810a2e4:	687b      	ldr	r3, [r7, #4]
 810a2e6:	681b      	ldr	r3, [r3, #0]
 810a2e8:	461a      	mov	r2, r3
 810a2ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 810a2ee:	65bb      	str	r3, [r7, #88]	; 0x58
 810a2f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a2f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 810a2f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 810a2f6:	e841 2300 	strex	r3, r2, [r1]
 810a2fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 810a2fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810a2fe:	2b00      	cmp	r3, #0
 810a300:	d1e4      	bne.n	810a2cc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 810a302:	687b      	ldr	r3, [r7, #4]
 810a304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810a308:	4618      	mov	r0, r3
 810a30a:	f7fb f87f 	bl	810540c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810a30e:	687b      	ldr	r3, [r7, #4]
 810a310:	2202      	movs	r2, #2
 810a312:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 810a314:	687b      	ldr	r3, [r7, #4]
 810a316:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810a31a:	687b      	ldr	r3, [r7, #4]
 810a31c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810a320:	b29b      	uxth	r3, r3
 810a322:	1ad3      	subs	r3, r2, r3
 810a324:	b29b      	uxth	r3, r3
 810a326:	4619      	mov	r1, r3
 810a328:	6878      	ldr	r0, [r7, #4]
 810a32a:	f000 f91d 	bl	810a568 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810a32e:	e0ff      	b.n	810a530 <HAL_UART_IRQHandler+0x764>
 810a330:	40020010 	.word	0x40020010
 810a334:	40020028 	.word	0x40020028
 810a338:	40020040 	.word	0x40020040
 810a33c:	40020058 	.word	0x40020058
 810a340:	40020070 	.word	0x40020070
 810a344:	40020088 	.word	0x40020088
 810a348:	400200a0 	.word	0x400200a0
 810a34c:	400200b8 	.word	0x400200b8
 810a350:	40020410 	.word	0x40020410
 810a354:	40020428 	.word	0x40020428
 810a358:	40020440 	.word	0x40020440
 810a35c:	40020458 	.word	0x40020458
 810a360:	40020470 	.word	0x40020470
 810a364:	40020488 	.word	0x40020488
 810a368:	400204a0 	.word	0x400204a0
 810a36c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810a370:	687b      	ldr	r3, [r7, #4]
 810a372:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810a376:	687b      	ldr	r3, [r7, #4]
 810a378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810a37c:	b29b      	uxth	r3, r3
 810a37e:	1ad3      	subs	r3, r2, r3
 810a380:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 810a384:	687b      	ldr	r3, [r7, #4]
 810a386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810a38a:	b29b      	uxth	r3, r3
 810a38c:	2b00      	cmp	r3, #0
 810a38e:	f000 80d1 	beq.w	810a534 <HAL_UART_IRQHandler+0x768>
          && (nb_rx_data > 0U))
 810a392:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 810a396:	2b00      	cmp	r3, #0
 810a398:	f000 80cc 	beq.w	810a534 <HAL_UART_IRQHandler+0x768>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810a39c:	687b      	ldr	r3, [r7, #4]
 810a39e:	681b      	ldr	r3, [r3, #0]
 810a3a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a3a4:	e853 3f00 	ldrex	r3, [r3]
 810a3a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 810a3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a3ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810a3b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 810a3b4:	687b      	ldr	r3, [r7, #4]
 810a3b6:	681b      	ldr	r3, [r3, #0]
 810a3b8:	461a      	mov	r2, r3
 810a3ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 810a3be:	647b      	str	r3, [r7, #68]	; 0x44
 810a3c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a3c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 810a3c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810a3c6:	e841 2300 	strex	r3, r2, [r1]
 810a3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 810a3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a3ce:	2b00      	cmp	r3, #0
 810a3d0:	d1e4      	bne.n	810a39c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810a3d2:	687b      	ldr	r3, [r7, #4]
 810a3d4:	681b      	ldr	r3, [r3, #0]
 810a3d6:	3308      	adds	r3, #8
 810a3d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a3dc:	e853 3f00 	ldrex	r3, [r3]
 810a3e0:	623b      	str	r3, [r7, #32]
   return(result);
 810a3e2:	6a3b      	ldr	r3, [r7, #32]
 810a3e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810a3e8:	f023 0301 	bic.w	r3, r3, #1
 810a3ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 810a3f0:	687b      	ldr	r3, [r7, #4]
 810a3f2:	681b      	ldr	r3, [r3, #0]
 810a3f4:	3308      	adds	r3, #8
 810a3f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 810a3fa:	633a      	str	r2, [r7, #48]	; 0x30
 810a3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a3fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810a400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a402:	e841 2300 	strex	r3, r2, [r1]
 810a406:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 810a408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a40a:	2b00      	cmp	r3, #0
 810a40c:	d1e1      	bne.n	810a3d2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810a40e:	687b      	ldr	r3, [r7, #4]
 810a410:	2220      	movs	r2, #32
 810a412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a416:	687b      	ldr	r3, [r7, #4]
 810a418:	2200      	movs	r2, #0
 810a41a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810a41c:	687b      	ldr	r3, [r7, #4]
 810a41e:	2200      	movs	r2, #0
 810a420:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810a422:	687b      	ldr	r3, [r7, #4]
 810a424:	681b      	ldr	r3, [r3, #0]
 810a426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a428:	693b      	ldr	r3, [r7, #16]
 810a42a:	e853 3f00 	ldrex	r3, [r3]
 810a42e:	60fb      	str	r3, [r7, #12]
   return(result);
 810a430:	68fb      	ldr	r3, [r7, #12]
 810a432:	f023 0310 	bic.w	r3, r3, #16
 810a436:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 810a43a:	687b      	ldr	r3, [r7, #4]
 810a43c:	681b      	ldr	r3, [r3, #0]
 810a43e:	461a      	mov	r2, r3
 810a440:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 810a444:	61fb      	str	r3, [r7, #28]
 810a446:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a448:	69b9      	ldr	r1, [r7, #24]
 810a44a:	69fa      	ldr	r2, [r7, #28]
 810a44c:	e841 2300 	strex	r3, r2, [r1]
 810a450:	617b      	str	r3, [r7, #20]
   return(result);
 810a452:	697b      	ldr	r3, [r7, #20]
 810a454:	2b00      	cmp	r3, #0
 810a456:	d1e4      	bne.n	810a422 <HAL_UART_IRQHandler+0x656>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810a458:	687b      	ldr	r3, [r7, #4]
 810a45a:	2202      	movs	r2, #2
 810a45c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810a45e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 810a462:	4619      	mov	r1, r3
 810a464:	6878      	ldr	r0, [r7, #4]
 810a466:	f000 f87f 	bl	810a568 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810a46a:	e063      	b.n	810a534 <HAL_UART_IRQHandler+0x768>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810a46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 810a470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810a474:	2b00      	cmp	r3, #0
 810a476:	d00e      	beq.n	810a496 <HAL_UART_IRQHandler+0x6ca>
 810a478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 810a47c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810a480:	2b00      	cmp	r3, #0
 810a482:	d008      	beq.n	810a496 <HAL_UART_IRQHandler+0x6ca>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810a484:	687b      	ldr	r3, [r7, #4]
 810a486:	681b      	ldr	r3, [r3, #0]
 810a488:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 810a48c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810a48e:	6878      	ldr	r0, [r7, #4]
 810a490:	f001 f838 	bl	810b504 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810a494:	e051      	b.n	810a53a <HAL_UART_IRQHandler+0x76e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810a496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 810a49a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a49e:	2b00      	cmp	r3, #0
 810a4a0:	d014      	beq.n	810a4cc <HAL_UART_IRQHandler+0x700>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810a4a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810a4a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a4aa:	2b00      	cmp	r3, #0
 810a4ac:	d105      	bne.n	810a4ba <HAL_UART_IRQHandler+0x6ee>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810a4ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 810a4b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810a4b6:	2b00      	cmp	r3, #0
 810a4b8:	d008      	beq.n	810a4cc <HAL_UART_IRQHandler+0x700>
  {
    if (huart->TxISR != NULL)
 810a4ba:	687b      	ldr	r3, [r7, #4]
 810a4bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a4be:	2b00      	cmp	r3, #0
 810a4c0:	d03a      	beq.n	810a538 <HAL_UART_IRQHandler+0x76c>
    {
      huart->TxISR(huart);
 810a4c2:	687b      	ldr	r3, [r7, #4]
 810a4c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a4c6:	6878      	ldr	r0, [r7, #4]
 810a4c8:	4798      	blx	r3
    }
    return;
 810a4ca:	e035      	b.n	810a538 <HAL_UART_IRQHandler+0x76c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810a4cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 810a4d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a4d4:	2b00      	cmp	r3, #0
 810a4d6:	d009      	beq.n	810a4ec <HAL_UART_IRQHandler+0x720>
 810a4d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810a4dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a4e0:	2b00      	cmp	r3, #0
 810a4e2:	d003      	beq.n	810a4ec <HAL_UART_IRQHandler+0x720>
  {
    UART_EndTransmit_IT(huart);
 810a4e4:	6878      	ldr	r0, [r7, #4]
 810a4e6:	f000 ffe2 	bl	810b4ae <UART_EndTransmit_IT>
    return;
 810a4ea:	e026      	b.n	810a53a <HAL_UART_IRQHandler+0x76e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810a4ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 810a4f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810a4f4:	2b00      	cmp	r3, #0
 810a4f6:	d009      	beq.n	810a50c <HAL_UART_IRQHandler+0x740>
 810a4f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810a4fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810a500:	2b00      	cmp	r3, #0
 810a502:	d003      	beq.n	810a50c <HAL_UART_IRQHandler+0x740>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810a504:	6878      	ldr	r0, [r7, #4]
 810a506:	f001 f811 	bl	810b52c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810a50a:	e016      	b.n	810a53a <HAL_UART_IRQHandler+0x76e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810a50c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 810a510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810a514:	2b00      	cmp	r3, #0
 810a516:	d010      	beq.n	810a53a <HAL_UART_IRQHandler+0x76e>
 810a518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810a51c:	2b00      	cmp	r3, #0
 810a51e:	da0c      	bge.n	810a53a <HAL_UART_IRQHandler+0x76e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810a520:	6878      	ldr	r0, [r7, #4]
 810a522:	f000 fff9 	bl	810b518 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810a526:	e008      	b.n	810a53a <HAL_UART_IRQHandler+0x76e>
      return;
 810a528:	bf00      	nop
 810a52a:	e006      	b.n	810a53a <HAL_UART_IRQHandler+0x76e>
    return;
 810a52c:	bf00      	nop
 810a52e:	e004      	b.n	810a53a <HAL_UART_IRQHandler+0x76e>
      return;
 810a530:	bf00      	nop
 810a532:	e002      	b.n	810a53a <HAL_UART_IRQHandler+0x76e>
      return;
 810a534:	bf00      	nop
 810a536:	e000      	b.n	810a53a <HAL_UART_IRQHandler+0x76e>
    return;
 810a538:	bf00      	nop
  }
}
 810a53a:	37e8      	adds	r7, #232	; 0xe8
 810a53c:	46bd      	mov	sp, r7
 810a53e:	bd80      	pop	{r7, pc}

0810a540 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 810a540:	b480      	push	{r7}
 810a542:	b083      	sub	sp, #12
 810a544:	af00      	add	r7, sp, #0
 810a546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 810a548:	bf00      	nop
 810a54a:	370c      	adds	r7, #12
 810a54c:	46bd      	mov	sp, r7
 810a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a552:	4770      	bx	lr

0810a554 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810a554:	b480      	push	{r7}
 810a556:	b083      	sub	sp, #12
 810a558:	af00      	add	r7, sp, #0
 810a55a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810a55c:	bf00      	nop
 810a55e:	370c      	adds	r7, #12
 810a560:	46bd      	mov	sp, r7
 810a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a566:	4770      	bx	lr

0810a568 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 810a568:	b480      	push	{r7}
 810a56a:	b083      	sub	sp, #12
 810a56c:	af00      	add	r7, sp, #0
 810a56e:	6078      	str	r0, [r7, #4]
 810a570:	460b      	mov	r3, r1
 810a572:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 810a574:	bf00      	nop
 810a576:	370c      	adds	r7, #12
 810a578:	46bd      	mov	sp, r7
 810a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a57e:	4770      	bx	lr

0810a580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810a580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810a584:	b092      	sub	sp, #72	; 0x48
 810a586:	af00      	add	r7, sp, #0
 810a588:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810a58a:	2300      	movs	r3, #0
 810a58c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810a590:	697b      	ldr	r3, [r7, #20]
 810a592:	689a      	ldr	r2, [r3, #8]
 810a594:	697b      	ldr	r3, [r7, #20]
 810a596:	691b      	ldr	r3, [r3, #16]
 810a598:	431a      	orrs	r2, r3
 810a59a:	697b      	ldr	r3, [r7, #20]
 810a59c:	695b      	ldr	r3, [r3, #20]
 810a59e:	431a      	orrs	r2, r3
 810a5a0:	697b      	ldr	r3, [r7, #20]
 810a5a2:	69db      	ldr	r3, [r3, #28]
 810a5a4:	4313      	orrs	r3, r2
 810a5a6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810a5a8:	697b      	ldr	r3, [r7, #20]
 810a5aa:	681b      	ldr	r3, [r3, #0]
 810a5ac:	681a      	ldr	r2, [r3, #0]
 810a5ae:	4bbd      	ldr	r3, [pc, #756]	; (810a8a4 <UART_SetConfig+0x324>)
 810a5b0:	4013      	ands	r3, r2
 810a5b2:	697a      	ldr	r2, [r7, #20]
 810a5b4:	6812      	ldr	r2, [r2, #0]
 810a5b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810a5b8:	430b      	orrs	r3, r1
 810a5ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810a5bc:	697b      	ldr	r3, [r7, #20]
 810a5be:	681b      	ldr	r3, [r3, #0]
 810a5c0:	685b      	ldr	r3, [r3, #4]
 810a5c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810a5c6:	697b      	ldr	r3, [r7, #20]
 810a5c8:	68da      	ldr	r2, [r3, #12]
 810a5ca:	697b      	ldr	r3, [r7, #20]
 810a5cc:	681b      	ldr	r3, [r3, #0]
 810a5ce:	430a      	orrs	r2, r1
 810a5d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810a5d2:	697b      	ldr	r3, [r7, #20]
 810a5d4:	699b      	ldr	r3, [r3, #24]
 810a5d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810a5d8:	697b      	ldr	r3, [r7, #20]
 810a5da:	681b      	ldr	r3, [r3, #0]
 810a5dc:	4ab2      	ldr	r2, [pc, #712]	; (810a8a8 <UART_SetConfig+0x328>)
 810a5de:	4293      	cmp	r3, r2
 810a5e0:	d004      	beq.n	810a5ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810a5e2:	697b      	ldr	r3, [r7, #20]
 810a5e4:	6a1b      	ldr	r3, [r3, #32]
 810a5e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810a5e8:	4313      	orrs	r3, r2
 810a5ea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810a5ec:	697b      	ldr	r3, [r7, #20]
 810a5ee:	681b      	ldr	r3, [r3, #0]
 810a5f0:	689b      	ldr	r3, [r3, #8]
 810a5f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810a5f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810a5fa:	697a      	ldr	r2, [r7, #20]
 810a5fc:	6812      	ldr	r2, [r2, #0]
 810a5fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810a600:	430b      	orrs	r3, r1
 810a602:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810a604:	697b      	ldr	r3, [r7, #20]
 810a606:	681b      	ldr	r3, [r3, #0]
 810a608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a60a:	f023 010f 	bic.w	r1, r3, #15
 810a60e:	697b      	ldr	r3, [r7, #20]
 810a610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810a612:	697b      	ldr	r3, [r7, #20]
 810a614:	681b      	ldr	r3, [r3, #0]
 810a616:	430a      	orrs	r2, r1
 810a618:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810a61a:	697b      	ldr	r3, [r7, #20]
 810a61c:	681b      	ldr	r3, [r3, #0]
 810a61e:	4aa3      	ldr	r2, [pc, #652]	; (810a8ac <UART_SetConfig+0x32c>)
 810a620:	4293      	cmp	r3, r2
 810a622:	d177      	bne.n	810a714 <UART_SetConfig+0x194>
 810a624:	4ba2      	ldr	r3, [pc, #648]	; (810a8b0 <UART_SetConfig+0x330>)
 810a626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a628:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810a62c:	2b28      	cmp	r3, #40	; 0x28
 810a62e:	d86d      	bhi.n	810a70c <UART_SetConfig+0x18c>
 810a630:	a201      	add	r2, pc, #4	; (adr r2, 810a638 <UART_SetConfig+0xb8>)
 810a632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a636:	bf00      	nop
 810a638:	0810a6dd 	.word	0x0810a6dd
 810a63c:	0810a70d 	.word	0x0810a70d
 810a640:	0810a70d 	.word	0x0810a70d
 810a644:	0810a70d 	.word	0x0810a70d
 810a648:	0810a70d 	.word	0x0810a70d
 810a64c:	0810a70d 	.word	0x0810a70d
 810a650:	0810a70d 	.word	0x0810a70d
 810a654:	0810a70d 	.word	0x0810a70d
 810a658:	0810a6e5 	.word	0x0810a6e5
 810a65c:	0810a70d 	.word	0x0810a70d
 810a660:	0810a70d 	.word	0x0810a70d
 810a664:	0810a70d 	.word	0x0810a70d
 810a668:	0810a70d 	.word	0x0810a70d
 810a66c:	0810a70d 	.word	0x0810a70d
 810a670:	0810a70d 	.word	0x0810a70d
 810a674:	0810a70d 	.word	0x0810a70d
 810a678:	0810a6ed 	.word	0x0810a6ed
 810a67c:	0810a70d 	.word	0x0810a70d
 810a680:	0810a70d 	.word	0x0810a70d
 810a684:	0810a70d 	.word	0x0810a70d
 810a688:	0810a70d 	.word	0x0810a70d
 810a68c:	0810a70d 	.word	0x0810a70d
 810a690:	0810a70d 	.word	0x0810a70d
 810a694:	0810a70d 	.word	0x0810a70d
 810a698:	0810a6f5 	.word	0x0810a6f5
 810a69c:	0810a70d 	.word	0x0810a70d
 810a6a0:	0810a70d 	.word	0x0810a70d
 810a6a4:	0810a70d 	.word	0x0810a70d
 810a6a8:	0810a70d 	.word	0x0810a70d
 810a6ac:	0810a70d 	.word	0x0810a70d
 810a6b0:	0810a70d 	.word	0x0810a70d
 810a6b4:	0810a70d 	.word	0x0810a70d
 810a6b8:	0810a6fd 	.word	0x0810a6fd
 810a6bc:	0810a70d 	.word	0x0810a70d
 810a6c0:	0810a70d 	.word	0x0810a70d
 810a6c4:	0810a70d 	.word	0x0810a70d
 810a6c8:	0810a70d 	.word	0x0810a70d
 810a6cc:	0810a70d 	.word	0x0810a70d
 810a6d0:	0810a70d 	.word	0x0810a70d
 810a6d4:	0810a70d 	.word	0x0810a70d
 810a6d8:	0810a705 	.word	0x0810a705
 810a6dc:	2301      	movs	r3, #1
 810a6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a6e2:	e220      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a6e4:	2304      	movs	r3, #4
 810a6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a6ea:	e21c      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a6ec:	2308      	movs	r3, #8
 810a6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a6f2:	e218      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a6f4:	2310      	movs	r3, #16
 810a6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a6fa:	e214      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a6fc:	2320      	movs	r3, #32
 810a6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a702:	e210      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a704:	2340      	movs	r3, #64	; 0x40
 810a706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a70a:	e20c      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a70c:	2380      	movs	r3, #128	; 0x80
 810a70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a712:	e208      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a714:	697b      	ldr	r3, [r7, #20]
 810a716:	681b      	ldr	r3, [r3, #0]
 810a718:	4a66      	ldr	r2, [pc, #408]	; (810a8b4 <UART_SetConfig+0x334>)
 810a71a:	4293      	cmp	r3, r2
 810a71c:	d130      	bne.n	810a780 <UART_SetConfig+0x200>
 810a71e:	4b64      	ldr	r3, [pc, #400]	; (810a8b0 <UART_SetConfig+0x330>)
 810a720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a722:	f003 0307 	and.w	r3, r3, #7
 810a726:	2b05      	cmp	r3, #5
 810a728:	d826      	bhi.n	810a778 <UART_SetConfig+0x1f8>
 810a72a:	a201      	add	r2, pc, #4	; (adr r2, 810a730 <UART_SetConfig+0x1b0>)
 810a72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a730:	0810a749 	.word	0x0810a749
 810a734:	0810a751 	.word	0x0810a751
 810a738:	0810a759 	.word	0x0810a759
 810a73c:	0810a761 	.word	0x0810a761
 810a740:	0810a769 	.word	0x0810a769
 810a744:	0810a771 	.word	0x0810a771
 810a748:	2300      	movs	r3, #0
 810a74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a74e:	e1ea      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a750:	2304      	movs	r3, #4
 810a752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a756:	e1e6      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a758:	2308      	movs	r3, #8
 810a75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a75e:	e1e2      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a760:	2310      	movs	r3, #16
 810a762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a766:	e1de      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a768:	2320      	movs	r3, #32
 810a76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a76e:	e1da      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a770:	2340      	movs	r3, #64	; 0x40
 810a772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a776:	e1d6      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a778:	2380      	movs	r3, #128	; 0x80
 810a77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a77e:	e1d2      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a780:	697b      	ldr	r3, [r7, #20]
 810a782:	681b      	ldr	r3, [r3, #0]
 810a784:	4a4c      	ldr	r2, [pc, #304]	; (810a8b8 <UART_SetConfig+0x338>)
 810a786:	4293      	cmp	r3, r2
 810a788:	d130      	bne.n	810a7ec <UART_SetConfig+0x26c>
 810a78a:	4b49      	ldr	r3, [pc, #292]	; (810a8b0 <UART_SetConfig+0x330>)
 810a78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a78e:	f003 0307 	and.w	r3, r3, #7
 810a792:	2b05      	cmp	r3, #5
 810a794:	d826      	bhi.n	810a7e4 <UART_SetConfig+0x264>
 810a796:	a201      	add	r2, pc, #4	; (adr r2, 810a79c <UART_SetConfig+0x21c>)
 810a798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a79c:	0810a7b5 	.word	0x0810a7b5
 810a7a0:	0810a7bd 	.word	0x0810a7bd
 810a7a4:	0810a7c5 	.word	0x0810a7c5
 810a7a8:	0810a7cd 	.word	0x0810a7cd
 810a7ac:	0810a7d5 	.word	0x0810a7d5
 810a7b0:	0810a7dd 	.word	0x0810a7dd
 810a7b4:	2300      	movs	r3, #0
 810a7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a7ba:	e1b4      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a7bc:	2304      	movs	r3, #4
 810a7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a7c2:	e1b0      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a7c4:	2308      	movs	r3, #8
 810a7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a7ca:	e1ac      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a7cc:	2310      	movs	r3, #16
 810a7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a7d2:	e1a8      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a7d4:	2320      	movs	r3, #32
 810a7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a7da:	e1a4      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a7dc:	2340      	movs	r3, #64	; 0x40
 810a7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a7e2:	e1a0      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a7e4:	2380      	movs	r3, #128	; 0x80
 810a7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a7ea:	e19c      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a7ec:	697b      	ldr	r3, [r7, #20]
 810a7ee:	681b      	ldr	r3, [r3, #0]
 810a7f0:	4a32      	ldr	r2, [pc, #200]	; (810a8bc <UART_SetConfig+0x33c>)
 810a7f2:	4293      	cmp	r3, r2
 810a7f4:	d130      	bne.n	810a858 <UART_SetConfig+0x2d8>
 810a7f6:	4b2e      	ldr	r3, [pc, #184]	; (810a8b0 <UART_SetConfig+0x330>)
 810a7f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a7fa:	f003 0307 	and.w	r3, r3, #7
 810a7fe:	2b05      	cmp	r3, #5
 810a800:	d826      	bhi.n	810a850 <UART_SetConfig+0x2d0>
 810a802:	a201      	add	r2, pc, #4	; (adr r2, 810a808 <UART_SetConfig+0x288>)
 810a804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a808:	0810a821 	.word	0x0810a821
 810a80c:	0810a829 	.word	0x0810a829
 810a810:	0810a831 	.word	0x0810a831
 810a814:	0810a839 	.word	0x0810a839
 810a818:	0810a841 	.word	0x0810a841
 810a81c:	0810a849 	.word	0x0810a849
 810a820:	2300      	movs	r3, #0
 810a822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a826:	e17e      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a828:	2304      	movs	r3, #4
 810a82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a82e:	e17a      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a830:	2308      	movs	r3, #8
 810a832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a836:	e176      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a838:	2310      	movs	r3, #16
 810a83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a83e:	e172      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a840:	2320      	movs	r3, #32
 810a842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a846:	e16e      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a848:	2340      	movs	r3, #64	; 0x40
 810a84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a84e:	e16a      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a850:	2380      	movs	r3, #128	; 0x80
 810a852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a856:	e166      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a858:	697b      	ldr	r3, [r7, #20]
 810a85a:	681b      	ldr	r3, [r3, #0]
 810a85c:	4a18      	ldr	r2, [pc, #96]	; (810a8c0 <UART_SetConfig+0x340>)
 810a85e:	4293      	cmp	r3, r2
 810a860:	d140      	bne.n	810a8e4 <UART_SetConfig+0x364>
 810a862:	4b13      	ldr	r3, [pc, #76]	; (810a8b0 <UART_SetConfig+0x330>)
 810a864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a866:	f003 0307 	and.w	r3, r3, #7
 810a86a:	2b05      	cmp	r3, #5
 810a86c:	d836      	bhi.n	810a8dc <UART_SetConfig+0x35c>
 810a86e:	a201      	add	r2, pc, #4	; (adr r2, 810a874 <UART_SetConfig+0x2f4>)
 810a870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a874:	0810a88d 	.word	0x0810a88d
 810a878:	0810a895 	.word	0x0810a895
 810a87c:	0810a89d 	.word	0x0810a89d
 810a880:	0810a8c5 	.word	0x0810a8c5
 810a884:	0810a8cd 	.word	0x0810a8cd
 810a888:	0810a8d5 	.word	0x0810a8d5
 810a88c:	2300      	movs	r3, #0
 810a88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a892:	e148      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a894:	2304      	movs	r3, #4
 810a896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a89a:	e144      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a89c:	2308      	movs	r3, #8
 810a89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a8a2:	e140      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a8a4:	cfff69f3 	.word	0xcfff69f3
 810a8a8:	58000c00 	.word	0x58000c00
 810a8ac:	40011000 	.word	0x40011000
 810a8b0:	58024400 	.word	0x58024400
 810a8b4:	40004400 	.word	0x40004400
 810a8b8:	40004800 	.word	0x40004800
 810a8bc:	40004c00 	.word	0x40004c00
 810a8c0:	40005000 	.word	0x40005000
 810a8c4:	2310      	movs	r3, #16
 810a8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a8ca:	e12c      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a8cc:	2320      	movs	r3, #32
 810a8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a8d2:	e128      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a8d4:	2340      	movs	r3, #64	; 0x40
 810a8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a8da:	e124      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a8dc:	2380      	movs	r3, #128	; 0x80
 810a8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a8e2:	e120      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a8e4:	697b      	ldr	r3, [r7, #20]
 810a8e6:	681b      	ldr	r3, [r3, #0]
 810a8e8:	4acb      	ldr	r2, [pc, #812]	; (810ac18 <UART_SetConfig+0x698>)
 810a8ea:	4293      	cmp	r3, r2
 810a8ec:	d176      	bne.n	810a9dc <UART_SetConfig+0x45c>
 810a8ee:	4bcb      	ldr	r3, [pc, #812]	; (810ac1c <UART_SetConfig+0x69c>)
 810a8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a8f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810a8f6:	2b28      	cmp	r3, #40	; 0x28
 810a8f8:	d86c      	bhi.n	810a9d4 <UART_SetConfig+0x454>
 810a8fa:	a201      	add	r2, pc, #4	; (adr r2, 810a900 <UART_SetConfig+0x380>)
 810a8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a900:	0810a9a5 	.word	0x0810a9a5
 810a904:	0810a9d5 	.word	0x0810a9d5
 810a908:	0810a9d5 	.word	0x0810a9d5
 810a90c:	0810a9d5 	.word	0x0810a9d5
 810a910:	0810a9d5 	.word	0x0810a9d5
 810a914:	0810a9d5 	.word	0x0810a9d5
 810a918:	0810a9d5 	.word	0x0810a9d5
 810a91c:	0810a9d5 	.word	0x0810a9d5
 810a920:	0810a9ad 	.word	0x0810a9ad
 810a924:	0810a9d5 	.word	0x0810a9d5
 810a928:	0810a9d5 	.word	0x0810a9d5
 810a92c:	0810a9d5 	.word	0x0810a9d5
 810a930:	0810a9d5 	.word	0x0810a9d5
 810a934:	0810a9d5 	.word	0x0810a9d5
 810a938:	0810a9d5 	.word	0x0810a9d5
 810a93c:	0810a9d5 	.word	0x0810a9d5
 810a940:	0810a9b5 	.word	0x0810a9b5
 810a944:	0810a9d5 	.word	0x0810a9d5
 810a948:	0810a9d5 	.word	0x0810a9d5
 810a94c:	0810a9d5 	.word	0x0810a9d5
 810a950:	0810a9d5 	.word	0x0810a9d5
 810a954:	0810a9d5 	.word	0x0810a9d5
 810a958:	0810a9d5 	.word	0x0810a9d5
 810a95c:	0810a9d5 	.word	0x0810a9d5
 810a960:	0810a9bd 	.word	0x0810a9bd
 810a964:	0810a9d5 	.word	0x0810a9d5
 810a968:	0810a9d5 	.word	0x0810a9d5
 810a96c:	0810a9d5 	.word	0x0810a9d5
 810a970:	0810a9d5 	.word	0x0810a9d5
 810a974:	0810a9d5 	.word	0x0810a9d5
 810a978:	0810a9d5 	.word	0x0810a9d5
 810a97c:	0810a9d5 	.word	0x0810a9d5
 810a980:	0810a9c5 	.word	0x0810a9c5
 810a984:	0810a9d5 	.word	0x0810a9d5
 810a988:	0810a9d5 	.word	0x0810a9d5
 810a98c:	0810a9d5 	.word	0x0810a9d5
 810a990:	0810a9d5 	.word	0x0810a9d5
 810a994:	0810a9d5 	.word	0x0810a9d5
 810a998:	0810a9d5 	.word	0x0810a9d5
 810a99c:	0810a9d5 	.word	0x0810a9d5
 810a9a0:	0810a9cd 	.word	0x0810a9cd
 810a9a4:	2301      	movs	r3, #1
 810a9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a9aa:	e0bc      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a9ac:	2304      	movs	r3, #4
 810a9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a9b2:	e0b8      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a9b4:	2308      	movs	r3, #8
 810a9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a9ba:	e0b4      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a9bc:	2310      	movs	r3, #16
 810a9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a9c2:	e0b0      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a9c4:	2320      	movs	r3, #32
 810a9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a9ca:	e0ac      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a9cc:	2340      	movs	r3, #64	; 0x40
 810a9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a9d2:	e0a8      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a9d4:	2380      	movs	r3, #128	; 0x80
 810a9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a9da:	e0a4      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810a9dc:	697b      	ldr	r3, [r7, #20]
 810a9de:	681b      	ldr	r3, [r3, #0]
 810a9e0:	4a8f      	ldr	r2, [pc, #572]	; (810ac20 <UART_SetConfig+0x6a0>)
 810a9e2:	4293      	cmp	r3, r2
 810a9e4:	d130      	bne.n	810aa48 <UART_SetConfig+0x4c8>
 810a9e6:	4b8d      	ldr	r3, [pc, #564]	; (810ac1c <UART_SetConfig+0x69c>)
 810a9e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a9ea:	f003 0307 	and.w	r3, r3, #7
 810a9ee:	2b05      	cmp	r3, #5
 810a9f0:	d826      	bhi.n	810aa40 <UART_SetConfig+0x4c0>
 810a9f2:	a201      	add	r2, pc, #4	; (adr r2, 810a9f8 <UART_SetConfig+0x478>)
 810a9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a9f8:	0810aa11 	.word	0x0810aa11
 810a9fc:	0810aa19 	.word	0x0810aa19
 810aa00:	0810aa21 	.word	0x0810aa21
 810aa04:	0810aa29 	.word	0x0810aa29
 810aa08:	0810aa31 	.word	0x0810aa31
 810aa0c:	0810aa39 	.word	0x0810aa39
 810aa10:	2300      	movs	r3, #0
 810aa12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aa16:	e086      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810aa18:	2304      	movs	r3, #4
 810aa1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aa1e:	e082      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810aa20:	2308      	movs	r3, #8
 810aa22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aa26:	e07e      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810aa28:	2310      	movs	r3, #16
 810aa2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aa2e:	e07a      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810aa30:	2320      	movs	r3, #32
 810aa32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aa36:	e076      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810aa38:	2340      	movs	r3, #64	; 0x40
 810aa3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aa3e:	e072      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810aa40:	2380      	movs	r3, #128	; 0x80
 810aa42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aa46:	e06e      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810aa48:	697b      	ldr	r3, [r7, #20]
 810aa4a:	681b      	ldr	r3, [r3, #0]
 810aa4c:	4a75      	ldr	r2, [pc, #468]	; (810ac24 <UART_SetConfig+0x6a4>)
 810aa4e:	4293      	cmp	r3, r2
 810aa50:	d130      	bne.n	810aab4 <UART_SetConfig+0x534>
 810aa52:	4b72      	ldr	r3, [pc, #456]	; (810ac1c <UART_SetConfig+0x69c>)
 810aa54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810aa56:	f003 0307 	and.w	r3, r3, #7
 810aa5a:	2b05      	cmp	r3, #5
 810aa5c:	d826      	bhi.n	810aaac <UART_SetConfig+0x52c>
 810aa5e:	a201      	add	r2, pc, #4	; (adr r2, 810aa64 <UART_SetConfig+0x4e4>)
 810aa60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810aa64:	0810aa7d 	.word	0x0810aa7d
 810aa68:	0810aa85 	.word	0x0810aa85
 810aa6c:	0810aa8d 	.word	0x0810aa8d
 810aa70:	0810aa95 	.word	0x0810aa95
 810aa74:	0810aa9d 	.word	0x0810aa9d
 810aa78:	0810aaa5 	.word	0x0810aaa5
 810aa7c:	2300      	movs	r3, #0
 810aa7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aa82:	e050      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810aa84:	2304      	movs	r3, #4
 810aa86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aa8a:	e04c      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810aa8c:	2308      	movs	r3, #8
 810aa8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aa92:	e048      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810aa94:	2310      	movs	r3, #16
 810aa96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aa9a:	e044      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810aa9c:	2320      	movs	r3, #32
 810aa9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aaa2:	e040      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810aaa4:	2340      	movs	r3, #64	; 0x40
 810aaa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aaaa:	e03c      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810aaac:	2380      	movs	r3, #128	; 0x80
 810aaae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aab2:	e038      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810aab4:	697b      	ldr	r3, [r7, #20]
 810aab6:	681b      	ldr	r3, [r3, #0]
 810aab8:	4a5b      	ldr	r2, [pc, #364]	; (810ac28 <UART_SetConfig+0x6a8>)
 810aaba:	4293      	cmp	r3, r2
 810aabc:	d130      	bne.n	810ab20 <UART_SetConfig+0x5a0>
 810aabe:	4b57      	ldr	r3, [pc, #348]	; (810ac1c <UART_SetConfig+0x69c>)
 810aac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810aac2:	f003 0307 	and.w	r3, r3, #7
 810aac6:	2b05      	cmp	r3, #5
 810aac8:	d826      	bhi.n	810ab18 <UART_SetConfig+0x598>
 810aaca:	a201      	add	r2, pc, #4	; (adr r2, 810aad0 <UART_SetConfig+0x550>)
 810aacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810aad0:	0810aae9 	.word	0x0810aae9
 810aad4:	0810aaf1 	.word	0x0810aaf1
 810aad8:	0810aaf9 	.word	0x0810aaf9
 810aadc:	0810ab01 	.word	0x0810ab01
 810aae0:	0810ab09 	.word	0x0810ab09
 810aae4:	0810ab11 	.word	0x0810ab11
 810aae8:	2302      	movs	r3, #2
 810aaea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aaee:	e01a      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810aaf0:	2304      	movs	r3, #4
 810aaf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aaf6:	e016      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810aaf8:	2308      	movs	r3, #8
 810aafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810aafe:	e012      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810ab00:	2310      	movs	r3, #16
 810ab02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ab06:	e00e      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810ab08:	2320      	movs	r3, #32
 810ab0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ab0e:	e00a      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810ab10:	2340      	movs	r3, #64	; 0x40
 810ab12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ab16:	e006      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810ab18:	2380      	movs	r3, #128	; 0x80
 810ab1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ab1e:	e002      	b.n	810ab26 <UART_SetConfig+0x5a6>
 810ab20:	2380      	movs	r3, #128	; 0x80
 810ab22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810ab26:	697b      	ldr	r3, [r7, #20]
 810ab28:	681b      	ldr	r3, [r3, #0]
 810ab2a:	4a3f      	ldr	r2, [pc, #252]	; (810ac28 <UART_SetConfig+0x6a8>)
 810ab2c:	4293      	cmp	r3, r2
 810ab2e:	f040 80f8 	bne.w	810ad22 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810ab32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810ab36:	2b20      	cmp	r3, #32
 810ab38:	dc46      	bgt.n	810abc8 <UART_SetConfig+0x648>
 810ab3a:	2b02      	cmp	r3, #2
 810ab3c:	f2c0 8082 	blt.w	810ac44 <UART_SetConfig+0x6c4>
 810ab40:	3b02      	subs	r3, #2
 810ab42:	2b1e      	cmp	r3, #30
 810ab44:	d87e      	bhi.n	810ac44 <UART_SetConfig+0x6c4>
 810ab46:	a201      	add	r2, pc, #4	; (adr r2, 810ab4c <UART_SetConfig+0x5cc>)
 810ab48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ab4c:	0810abcf 	.word	0x0810abcf
 810ab50:	0810ac45 	.word	0x0810ac45
 810ab54:	0810abd7 	.word	0x0810abd7
 810ab58:	0810ac45 	.word	0x0810ac45
 810ab5c:	0810ac45 	.word	0x0810ac45
 810ab60:	0810ac45 	.word	0x0810ac45
 810ab64:	0810abe7 	.word	0x0810abe7
 810ab68:	0810ac45 	.word	0x0810ac45
 810ab6c:	0810ac45 	.word	0x0810ac45
 810ab70:	0810ac45 	.word	0x0810ac45
 810ab74:	0810ac45 	.word	0x0810ac45
 810ab78:	0810ac45 	.word	0x0810ac45
 810ab7c:	0810ac45 	.word	0x0810ac45
 810ab80:	0810ac45 	.word	0x0810ac45
 810ab84:	0810abf7 	.word	0x0810abf7
 810ab88:	0810ac45 	.word	0x0810ac45
 810ab8c:	0810ac45 	.word	0x0810ac45
 810ab90:	0810ac45 	.word	0x0810ac45
 810ab94:	0810ac45 	.word	0x0810ac45
 810ab98:	0810ac45 	.word	0x0810ac45
 810ab9c:	0810ac45 	.word	0x0810ac45
 810aba0:	0810ac45 	.word	0x0810ac45
 810aba4:	0810ac45 	.word	0x0810ac45
 810aba8:	0810ac45 	.word	0x0810ac45
 810abac:	0810ac45 	.word	0x0810ac45
 810abb0:	0810ac45 	.word	0x0810ac45
 810abb4:	0810ac45 	.word	0x0810ac45
 810abb8:	0810ac45 	.word	0x0810ac45
 810abbc:	0810ac45 	.word	0x0810ac45
 810abc0:	0810ac45 	.word	0x0810ac45
 810abc4:	0810ac37 	.word	0x0810ac37
 810abc8:	2b40      	cmp	r3, #64	; 0x40
 810abca:	d037      	beq.n	810ac3c <UART_SetConfig+0x6bc>
 810abcc:	e03a      	b.n	810ac44 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810abce:	f7fe f92d 	bl	8108e2c <HAL_RCCEx_GetD3PCLK1Freq>
 810abd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810abd4:	e03c      	b.n	810ac50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810abd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810abda:	4618      	mov	r0, r3
 810abdc:	f7fe f93c 	bl	8108e58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810abe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810abe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810abe4:	e034      	b.n	810ac50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810abe6:	f107 0318 	add.w	r3, r7, #24
 810abea:	4618      	mov	r0, r3
 810abec:	f7fe fa88 	bl	8109100 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810abf0:	69fb      	ldr	r3, [r7, #28]
 810abf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810abf4:	e02c      	b.n	810ac50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810abf6:	4b09      	ldr	r3, [pc, #36]	; (810ac1c <UART_SetConfig+0x69c>)
 810abf8:	681b      	ldr	r3, [r3, #0]
 810abfa:	f003 0320 	and.w	r3, r3, #32
 810abfe:	2b00      	cmp	r3, #0
 810ac00:	d016      	beq.n	810ac30 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810ac02:	4b06      	ldr	r3, [pc, #24]	; (810ac1c <UART_SetConfig+0x69c>)
 810ac04:	681b      	ldr	r3, [r3, #0]
 810ac06:	08db      	lsrs	r3, r3, #3
 810ac08:	f003 0303 	and.w	r3, r3, #3
 810ac0c:	4a07      	ldr	r2, [pc, #28]	; (810ac2c <UART_SetConfig+0x6ac>)
 810ac0e:	fa22 f303 	lsr.w	r3, r2, r3
 810ac12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810ac14:	e01c      	b.n	810ac50 <UART_SetConfig+0x6d0>
 810ac16:	bf00      	nop
 810ac18:	40011400 	.word	0x40011400
 810ac1c:	58024400 	.word	0x58024400
 810ac20:	40007800 	.word	0x40007800
 810ac24:	40007c00 	.word	0x40007c00
 810ac28:	58000c00 	.word	0x58000c00
 810ac2c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810ac30:	4b9d      	ldr	r3, [pc, #628]	; (810aea8 <UART_SetConfig+0x928>)
 810ac32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810ac34:	e00c      	b.n	810ac50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810ac36:	4b9d      	ldr	r3, [pc, #628]	; (810aeac <UART_SetConfig+0x92c>)
 810ac38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810ac3a:	e009      	b.n	810ac50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810ac3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810ac40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810ac42:	e005      	b.n	810ac50 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810ac44:	2300      	movs	r3, #0
 810ac46:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810ac48:	2301      	movs	r3, #1
 810ac4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810ac4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810ac50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810ac52:	2b00      	cmp	r3, #0
 810ac54:	f000 81de 	beq.w	810b014 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810ac58:	697b      	ldr	r3, [r7, #20]
 810ac5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810ac5c:	4a94      	ldr	r2, [pc, #592]	; (810aeb0 <UART_SetConfig+0x930>)
 810ac5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810ac62:	461a      	mov	r2, r3
 810ac64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810ac66:	fbb3 f3f2 	udiv	r3, r3, r2
 810ac6a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810ac6c:	697b      	ldr	r3, [r7, #20]
 810ac6e:	685a      	ldr	r2, [r3, #4]
 810ac70:	4613      	mov	r3, r2
 810ac72:	005b      	lsls	r3, r3, #1
 810ac74:	4413      	add	r3, r2
 810ac76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810ac78:	429a      	cmp	r2, r3
 810ac7a:	d305      	bcc.n	810ac88 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810ac7c:	697b      	ldr	r3, [r7, #20]
 810ac7e:	685b      	ldr	r3, [r3, #4]
 810ac80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810ac82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810ac84:	429a      	cmp	r2, r3
 810ac86:	d903      	bls.n	810ac90 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810ac88:	2301      	movs	r3, #1
 810ac8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810ac8e:	e1c1      	b.n	810b014 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810ac90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810ac92:	2200      	movs	r2, #0
 810ac94:	60bb      	str	r3, [r7, #8]
 810ac96:	60fa      	str	r2, [r7, #12]
 810ac98:	697b      	ldr	r3, [r7, #20]
 810ac9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810ac9c:	4a84      	ldr	r2, [pc, #528]	; (810aeb0 <UART_SetConfig+0x930>)
 810ac9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810aca2:	b29b      	uxth	r3, r3
 810aca4:	2200      	movs	r2, #0
 810aca6:	603b      	str	r3, [r7, #0]
 810aca8:	607a      	str	r2, [r7, #4]
 810acaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 810acae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810acb2:	f7f5 fb19 	bl	81002e8 <__aeabi_uldivmod>
 810acb6:	4602      	mov	r2, r0
 810acb8:	460b      	mov	r3, r1
 810acba:	4610      	mov	r0, r2
 810acbc:	4619      	mov	r1, r3
 810acbe:	f04f 0200 	mov.w	r2, #0
 810acc2:	f04f 0300 	mov.w	r3, #0
 810acc6:	020b      	lsls	r3, r1, #8
 810acc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810accc:	0202      	lsls	r2, r0, #8
 810acce:	6979      	ldr	r1, [r7, #20]
 810acd0:	6849      	ldr	r1, [r1, #4]
 810acd2:	0849      	lsrs	r1, r1, #1
 810acd4:	2000      	movs	r0, #0
 810acd6:	460c      	mov	r4, r1
 810acd8:	4605      	mov	r5, r0
 810acda:	eb12 0804 	adds.w	r8, r2, r4
 810acde:	eb43 0905 	adc.w	r9, r3, r5
 810ace2:	697b      	ldr	r3, [r7, #20]
 810ace4:	685b      	ldr	r3, [r3, #4]
 810ace6:	2200      	movs	r2, #0
 810ace8:	469a      	mov	sl, r3
 810acea:	4693      	mov	fp, r2
 810acec:	4652      	mov	r2, sl
 810acee:	465b      	mov	r3, fp
 810acf0:	4640      	mov	r0, r8
 810acf2:	4649      	mov	r1, r9
 810acf4:	f7f5 faf8 	bl	81002e8 <__aeabi_uldivmod>
 810acf8:	4602      	mov	r2, r0
 810acfa:	460b      	mov	r3, r1
 810acfc:	4613      	mov	r3, r2
 810acfe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810ad00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ad02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810ad06:	d308      	bcc.n	810ad1a <UART_SetConfig+0x79a>
 810ad08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ad0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810ad0e:	d204      	bcs.n	810ad1a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810ad10:	697b      	ldr	r3, [r7, #20]
 810ad12:	681b      	ldr	r3, [r3, #0]
 810ad14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810ad16:	60da      	str	r2, [r3, #12]
 810ad18:	e17c      	b.n	810b014 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810ad1a:	2301      	movs	r3, #1
 810ad1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810ad20:	e178      	b.n	810b014 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810ad22:	697b      	ldr	r3, [r7, #20]
 810ad24:	69db      	ldr	r3, [r3, #28]
 810ad26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810ad2a:	f040 80c5 	bne.w	810aeb8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810ad2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810ad32:	2b20      	cmp	r3, #32
 810ad34:	dc48      	bgt.n	810adc8 <UART_SetConfig+0x848>
 810ad36:	2b00      	cmp	r3, #0
 810ad38:	db7b      	blt.n	810ae32 <UART_SetConfig+0x8b2>
 810ad3a:	2b20      	cmp	r3, #32
 810ad3c:	d879      	bhi.n	810ae32 <UART_SetConfig+0x8b2>
 810ad3e:	a201      	add	r2, pc, #4	; (adr r2, 810ad44 <UART_SetConfig+0x7c4>)
 810ad40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ad44:	0810adcf 	.word	0x0810adcf
 810ad48:	0810add7 	.word	0x0810add7
 810ad4c:	0810ae33 	.word	0x0810ae33
 810ad50:	0810ae33 	.word	0x0810ae33
 810ad54:	0810addf 	.word	0x0810addf
 810ad58:	0810ae33 	.word	0x0810ae33
 810ad5c:	0810ae33 	.word	0x0810ae33
 810ad60:	0810ae33 	.word	0x0810ae33
 810ad64:	0810adef 	.word	0x0810adef
 810ad68:	0810ae33 	.word	0x0810ae33
 810ad6c:	0810ae33 	.word	0x0810ae33
 810ad70:	0810ae33 	.word	0x0810ae33
 810ad74:	0810ae33 	.word	0x0810ae33
 810ad78:	0810ae33 	.word	0x0810ae33
 810ad7c:	0810ae33 	.word	0x0810ae33
 810ad80:	0810ae33 	.word	0x0810ae33
 810ad84:	0810adff 	.word	0x0810adff
 810ad88:	0810ae33 	.word	0x0810ae33
 810ad8c:	0810ae33 	.word	0x0810ae33
 810ad90:	0810ae33 	.word	0x0810ae33
 810ad94:	0810ae33 	.word	0x0810ae33
 810ad98:	0810ae33 	.word	0x0810ae33
 810ad9c:	0810ae33 	.word	0x0810ae33
 810ada0:	0810ae33 	.word	0x0810ae33
 810ada4:	0810ae33 	.word	0x0810ae33
 810ada8:	0810ae33 	.word	0x0810ae33
 810adac:	0810ae33 	.word	0x0810ae33
 810adb0:	0810ae33 	.word	0x0810ae33
 810adb4:	0810ae33 	.word	0x0810ae33
 810adb8:	0810ae33 	.word	0x0810ae33
 810adbc:	0810ae33 	.word	0x0810ae33
 810adc0:	0810ae33 	.word	0x0810ae33
 810adc4:	0810ae25 	.word	0x0810ae25
 810adc8:	2b40      	cmp	r3, #64	; 0x40
 810adca:	d02e      	beq.n	810ae2a <UART_SetConfig+0x8aa>
 810adcc:	e031      	b.n	810ae32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810adce:	f7fc fdf7 	bl	81079c0 <HAL_RCC_GetPCLK1Freq>
 810add2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810add4:	e033      	b.n	810ae3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810add6:	f7fc fe09 	bl	81079ec <HAL_RCC_GetPCLK2Freq>
 810adda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810addc:	e02f      	b.n	810ae3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810adde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810ade2:	4618      	mov	r0, r3
 810ade4:	f7fe f838 	bl	8108e58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810ade8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810adea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810adec:	e027      	b.n	810ae3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810adee:	f107 0318 	add.w	r3, r7, #24
 810adf2:	4618      	mov	r0, r3
 810adf4:	f7fe f984 	bl	8109100 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810adf8:	69fb      	ldr	r3, [r7, #28]
 810adfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810adfc:	e01f      	b.n	810ae3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810adfe:	4b2d      	ldr	r3, [pc, #180]	; (810aeb4 <UART_SetConfig+0x934>)
 810ae00:	681b      	ldr	r3, [r3, #0]
 810ae02:	f003 0320 	and.w	r3, r3, #32
 810ae06:	2b00      	cmp	r3, #0
 810ae08:	d009      	beq.n	810ae1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810ae0a:	4b2a      	ldr	r3, [pc, #168]	; (810aeb4 <UART_SetConfig+0x934>)
 810ae0c:	681b      	ldr	r3, [r3, #0]
 810ae0e:	08db      	lsrs	r3, r3, #3
 810ae10:	f003 0303 	and.w	r3, r3, #3
 810ae14:	4a24      	ldr	r2, [pc, #144]	; (810aea8 <UART_SetConfig+0x928>)
 810ae16:	fa22 f303 	lsr.w	r3, r2, r3
 810ae1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810ae1c:	e00f      	b.n	810ae3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810ae1e:	4b22      	ldr	r3, [pc, #136]	; (810aea8 <UART_SetConfig+0x928>)
 810ae20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810ae22:	e00c      	b.n	810ae3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810ae24:	4b21      	ldr	r3, [pc, #132]	; (810aeac <UART_SetConfig+0x92c>)
 810ae26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810ae28:	e009      	b.n	810ae3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810ae2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810ae2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810ae30:	e005      	b.n	810ae3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810ae32:	2300      	movs	r3, #0
 810ae34:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810ae36:	2301      	movs	r3, #1
 810ae38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810ae3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810ae3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810ae40:	2b00      	cmp	r3, #0
 810ae42:	f000 80e7 	beq.w	810b014 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810ae46:	697b      	ldr	r3, [r7, #20]
 810ae48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810ae4a:	4a19      	ldr	r2, [pc, #100]	; (810aeb0 <UART_SetConfig+0x930>)
 810ae4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810ae50:	461a      	mov	r2, r3
 810ae52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810ae54:	fbb3 f3f2 	udiv	r3, r3, r2
 810ae58:	005a      	lsls	r2, r3, #1
 810ae5a:	697b      	ldr	r3, [r7, #20]
 810ae5c:	685b      	ldr	r3, [r3, #4]
 810ae5e:	085b      	lsrs	r3, r3, #1
 810ae60:	441a      	add	r2, r3
 810ae62:	697b      	ldr	r3, [r7, #20]
 810ae64:	685b      	ldr	r3, [r3, #4]
 810ae66:	fbb2 f3f3 	udiv	r3, r2, r3
 810ae6a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810ae6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ae6e:	2b0f      	cmp	r3, #15
 810ae70:	d916      	bls.n	810aea0 <UART_SetConfig+0x920>
 810ae72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ae74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810ae78:	d212      	bcs.n	810aea0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810ae7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ae7c:	b29b      	uxth	r3, r3
 810ae7e:	f023 030f 	bic.w	r3, r3, #15
 810ae82:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810ae84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ae86:	085b      	lsrs	r3, r3, #1
 810ae88:	b29b      	uxth	r3, r3
 810ae8a:	f003 0307 	and.w	r3, r3, #7
 810ae8e:	b29a      	uxth	r2, r3
 810ae90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810ae92:	4313      	orrs	r3, r2
 810ae94:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 810ae96:	697b      	ldr	r3, [r7, #20]
 810ae98:	681b      	ldr	r3, [r3, #0]
 810ae9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 810ae9c:	60da      	str	r2, [r3, #12]
 810ae9e:	e0b9      	b.n	810b014 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810aea0:	2301      	movs	r3, #1
 810aea2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810aea6:	e0b5      	b.n	810b014 <UART_SetConfig+0xa94>
 810aea8:	03d09000 	.word	0x03d09000
 810aeac:	003d0900 	.word	0x003d0900
 810aeb0:	0810c22c 	.word	0x0810c22c
 810aeb4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810aeb8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810aebc:	2b20      	cmp	r3, #32
 810aebe:	dc49      	bgt.n	810af54 <UART_SetConfig+0x9d4>
 810aec0:	2b00      	cmp	r3, #0
 810aec2:	db7c      	blt.n	810afbe <UART_SetConfig+0xa3e>
 810aec4:	2b20      	cmp	r3, #32
 810aec6:	d87a      	bhi.n	810afbe <UART_SetConfig+0xa3e>
 810aec8:	a201      	add	r2, pc, #4	; (adr r2, 810aed0 <UART_SetConfig+0x950>)
 810aeca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810aece:	bf00      	nop
 810aed0:	0810af5b 	.word	0x0810af5b
 810aed4:	0810af63 	.word	0x0810af63
 810aed8:	0810afbf 	.word	0x0810afbf
 810aedc:	0810afbf 	.word	0x0810afbf
 810aee0:	0810af6b 	.word	0x0810af6b
 810aee4:	0810afbf 	.word	0x0810afbf
 810aee8:	0810afbf 	.word	0x0810afbf
 810aeec:	0810afbf 	.word	0x0810afbf
 810aef0:	0810af7b 	.word	0x0810af7b
 810aef4:	0810afbf 	.word	0x0810afbf
 810aef8:	0810afbf 	.word	0x0810afbf
 810aefc:	0810afbf 	.word	0x0810afbf
 810af00:	0810afbf 	.word	0x0810afbf
 810af04:	0810afbf 	.word	0x0810afbf
 810af08:	0810afbf 	.word	0x0810afbf
 810af0c:	0810afbf 	.word	0x0810afbf
 810af10:	0810af8b 	.word	0x0810af8b
 810af14:	0810afbf 	.word	0x0810afbf
 810af18:	0810afbf 	.word	0x0810afbf
 810af1c:	0810afbf 	.word	0x0810afbf
 810af20:	0810afbf 	.word	0x0810afbf
 810af24:	0810afbf 	.word	0x0810afbf
 810af28:	0810afbf 	.word	0x0810afbf
 810af2c:	0810afbf 	.word	0x0810afbf
 810af30:	0810afbf 	.word	0x0810afbf
 810af34:	0810afbf 	.word	0x0810afbf
 810af38:	0810afbf 	.word	0x0810afbf
 810af3c:	0810afbf 	.word	0x0810afbf
 810af40:	0810afbf 	.word	0x0810afbf
 810af44:	0810afbf 	.word	0x0810afbf
 810af48:	0810afbf 	.word	0x0810afbf
 810af4c:	0810afbf 	.word	0x0810afbf
 810af50:	0810afb1 	.word	0x0810afb1
 810af54:	2b40      	cmp	r3, #64	; 0x40
 810af56:	d02e      	beq.n	810afb6 <UART_SetConfig+0xa36>
 810af58:	e031      	b.n	810afbe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810af5a:	f7fc fd31 	bl	81079c0 <HAL_RCC_GetPCLK1Freq>
 810af5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810af60:	e033      	b.n	810afca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810af62:	f7fc fd43 	bl	81079ec <HAL_RCC_GetPCLK2Freq>
 810af66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810af68:	e02f      	b.n	810afca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810af6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810af6e:	4618      	mov	r0, r3
 810af70:	f7fd ff72 	bl	8108e58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810af74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810af76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810af78:	e027      	b.n	810afca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810af7a:	f107 0318 	add.w	r3, r7, #24
 810af7e:	4618      	mov	r0, r3
 810af80:	f7fe f8be 	bl	8109100 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810af84:	69fb      	ldr	r3, [r7, #28]
 810af86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810af88:	e01f      	b.n	810afca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810af8a:	4b2d      	ldr	r3, [pc, #180]	; (810b040 <UART_SetConfig+0xac0>)
 810af8c:	681b      	ldr	r3, [r3, #0]
 810af8e:	f003 0320 	and.w	r3, r3, #32
 810af92:	2b00      	cmp	r3, #0
 810af94:	d009      	beq.n	810afaa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810af96:	4b2a      	ldr	r3, [pc, #168]	; (810b040 <UART_SetConfig+0xac0>)
 810af98:	681b      	ldr	r3, [r3, #0]
 810af9a:	08db      	lsrs	r3, r3, #3
 810af9c:	f003 0303 	and.w	r3, r3, #3
 810afa0:	4a28      	ldr	r2, [pc, #160]	; (810b044 <UART_SetConfig+0xac4>)
 810afa2:	fa22 f303 	lsr.w	r3, r2, r3
 810afa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810afa8:	e00f      	b.n	810afca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810afaa:	4b26      	ldr	r3, [pc, #152]	; (810b044 <UART_SetConfig+0xac4>)
 810afac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810afae:	e00c      	b.n	810afca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810afb0:	4b25      	ldr	r3, [pc, #148]	; (810b048 <UART_SetConfig+0xac8>)
 810afb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810afb4:	e009      	b.n	810afca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810afb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810afba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810afbc:	e005      	b.n	810afca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810afbe:	2300      	movs	r3, #0
 810afc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810afc2:	2301      	movs	r3, #1
 810afc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810afc8:	bf00      	nop
    }

    if (pclk != 0U)
 810afca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810afcc:	2b00      	cmp	r3, #0
 810afce:	d021      	beq.n	810b014 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810afd0:	697b      	ldr	r3, [r7, #20]
 810afd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810afd4:	4a1d      	ldr	r2, [pc, #116]	; (810b04c <UART_SetConfig+0xacc>)
 810afd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810afda:	461a      	mov	r2, r3
 810afdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810afde:	fbb3 f2f2 	udiv	r2, r3, r2
 810afe2:	697b      	ldr	r3, [r7, #20]
 810afe4:	685b      	ldr	r3, [r3, #4]
 810afe6:	085b      	lsrs	r3, r3, #1
 810afe8:	441a      	add	r2, r3
 810afea:	697b      	ldr	r3, [r7, #20]
 810afec:	685b      	ldr	r3, [r3, #4]
 810afee:	fbb2 f3f3 	udiv	r3, r2, r3
 810aff2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810aff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810aff6:	2b0f      	cmp	r3, #15
 810aff8:	d909      	bls.n	810b00e <UART_SetConfig+0xa8e>
 810affa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810affc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810b000:	d205      	bcs.n	810b00e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810b002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b004:	b29a      	uxth	r2, r3
 810b006:	697b      	ldr	r3, [r7, #20]
 810b008:	681b      	ldr	r3, [r3, #0]
 810b00a:	60da      	str	r2, [r3, #12]
 810b00c:	e002      	b.n	810b014 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810b00e:	2301      	movs	r3, #1
 810b010:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810b014:	697b      	ldr	r3, [r7, #20]
 810b016:	2201      	movs	r2, #1
 810b018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810b01c:	697b      	ldr	r3, [r7, #20]
 810b01e:	2201      	movs	r2, #1
 810b020:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810b024:	697b      	ldr	r3, [r7, #20]
 810b026:	2200      	movs	r2, #0
 810b028:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 810b02a:	697b      	ldr	r3, [r7, #20]
 810b02c:	2200      	movs	r2, #0
 810b02e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 810b030:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 810b034:	4618      	mov	r0, r3
 810b036:	3748      	adds	r7, #72	; 0x48
 810b038:	46bd      	mov	sp, r7
 810b03a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810b03e:	bf00      	nop
 810b040:	58024400 	.word	0x58024400
 810b044:	03d09000 	.word	0x03d09000
 810b048:	003d0900 	.word	0x003d0900
 810b04c:	0810c22c 	.word	0x0810c22c

0810b050 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810b050:	b480      	push	{r7}
 810b052:	b083      	sub	sp, #12
 810b054:	af00      	add	r7, sp, #0
 810b056:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810b058:	687b      	ldr	r3, [r7, #4]
 810b05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b05c:	f003 0301 	and.w	r3, r3, #1
 810b060:	2b00      	cmp	r3, #0
 810b062:	d00a      	beq.n	810b07a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810b064:	687b      	ldr	r3, [r7, #4]
 810b066:	681b      	ldr	r3, [r3, #0]
 810b068:	685b      	ldr	r3, [r3, #4]
 810b06a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810b06e:	687b      	ldr	r3, [r7, #4]
 810b070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b072:	687b      	ldr	r3, [r7, #4]
 810b074:	681b      	ldr	r3, [r3, #0]
 810b076:	430a      	orrs	r2, r1
 810b078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810b07a:	687b      	ldr	r3, [r7, #4]
 810b07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b07e:	f003 0302 	and.w	r3, r3, #2
 810b082:	2b00      	cmp	r3, #0
 810b084:	d00a      	beq.n	810b09c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810b086:	687b      	ldr	r3, [r7, #4]
 810b088:	681b      	ldr	r3, [r3, #0]
 810b08a:	685b      	ldr	r3, [r3, #4]
 810b08c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810b090:	687b      	ldr	r3, [r7, #4]
 810b092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810b094:	687b      	ldr	r3, [r7, #4]
 810b096:	681b      	ldr	r3, [r3, #0]
 810b098:	430a      	orrs	r2, r1
 810b09a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810b09c:	687b      	ldr	r3, [r7, #4]
 810b09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b0a0:	f003 0304 	and.w	r3, r3, #4
 810b0a4:	2b00      	cmp	r3, #0
 810b0a6:	d00a      	beq.n	810b0be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810b0a8:	687b      	ldr	r3, [r7, #4]
 810b0aa:	681b      	ldr	r3, [r3, #0]
 810b0ac:	685b      	ldr	r3, [r3, #4]
 810b0ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810b0b2:	687b      	ldr	r3, [r7, #4]
 810b0b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810b0b6:	687b      	ldr	r3, [r7, #4]
 810b0b8:	681b      	ldr	r3, [r3, #0]
 810b0ba:	430a      	orrs	r2, r1
 810b0bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810b0be:	687b      	ldr	r3, [r7, #4]
 810b0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b0c2:	f003 0308 	and.w	r3, r3, #8
 810b0c6:	2b00      	cmp	r3, #0
 810b0c8:	d00a      	beq.n	810b0e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810b0ca:	687b      	ldr	r3, [r7, #4]
 810b0cc:	681b      	ldr	r3, [r3, #0]
 810b0ce:	685b      	ldr	r3, [r3, #4]
 810b0d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810b0d4:	687b      	ldr	r3, [r7, #4]
 810b0d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810b0d8:	687b      	ldr	r3, [r7, #4]
 810b0da:	681b      	ldr	r3, [r3, #0]
 810b0dc:	430a      	orrs	r2, r1
 810b0de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810b0e0:	687b      	ldr	r3, [r7, #4]
 810b0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b0e4:	f003 0310 	and.w	r3, r3, #16
 810b0e8:	2b00      	cmp	r3, #0
 810b0ea:	d00a      	beq.n	810b102 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810b0ec:	687b      	ldr	r3, [r7, #4]
 810b0ee:	681b      	ldr	r3, [r3, #0]
 810b0f0:	689b      	ldr	r3, [r3, #8]
 810b0f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810b0f6:	687b      	ldr	r3, [r7, #4]
 810b0f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810b0fa:	687b      	ldr	r3, [r7, #4]
 810b0fc:	681b      	ldr	r3, [r3, #0]
 810b0fe:	430a      	orrs	r2, r1
 810b100:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810b102:	687b      	ldr	r3, [r7, #4]
 810b104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b106:	f003 0320 	and.w	r3, r3, #32
 810b10a:	2b00      	cmp	r3, #0
 810b10c:	d00a      	beq.n	810b124 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810b10e:	687b      	ldr	r3, [r7, #4]
 810b110:	681b      	ldr	r3, [r3, #0]
 810b112:	689b      	ldr	r3, [r3, #8]
 810b114:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810b118:	687b      	ldr	r3, [r7, #4]
 810b11a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810b11c:	687b      	ldr	r3, [r7, #4]
 810b11e:	681b      	ldr	r3, [r3, #0]
 810b120:	430a      	orrs	r2, r1
 810b122:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810b124:	687b      	ldr	r3, [r7, #4]
 810b126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b12c:	2b00      	cmp	r3, #0
 810b12e:	d01a      	beq.n	810b166 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810b130:	687b      	ldr	r3, [r7, #4]
 810b132:	681b      	ldr	r3, [r3, #0]
 810b134:	685b      	ldr	r3, [r3, #4]
 810b136:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810b13a:	687b      	ldr	r3, [r7, #4]
 810b13c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810b13e:	687b      	ldr	r3, [r7, #4]
 810b140:	681b      	ldr	r3, [r3, #0]
 810b142:	430a      	orrs	r2, r1
 810b144:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810b146:	687b      	ldr	r3, [r7, #4]
 810b148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810b14a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810b14e:	d10a      	bne.n	810b166 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810b150:	687b      	ldr	r3, [r7, #4]
 810b152:	681b      	ldr	r3, [r3, #0]
 810b154:	685b      	ldr	r3, [r3, #4]
 810b156:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810b15a:	687b      	ldr	r3, [r7, #4]
 810b15c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810b15e:	687b      	ldr	r3, [r7, #4]
 810b160:	681b      	ldr	r3, [r3, #0]
 810b162:	430a      	orrs	r2, r1
 810b164:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810b166:	687b      	ldr	r3, [r7, #4]
 810b168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b16a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b16e:	2b00      	cmp	r3, #0
 810b170:	d00a      	beq.n	810b188 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810b172:	687b      	ldr	r3, [r7, #4]
 810b174:	681b      	ldr	r3, [r3, #0]
 810b176:	685b      	ldr	r3, [r3, #4]
 810b178:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810b17c:	687b      	ldr	r3, [r7, #4]
 810b17e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810b180:	687b      	ldr	r3, [r7, #4]
 810b182:	681b      	ldr	r3, [r3, #0]
 810b184:	430a      	orrs	r2, r1
 810b186:	605a      	str	r2, [r3, #4]
  }
}
 810b188:	bf00      	nop
 810b18a:	370c      	adds	r7, #12
 810b18c:	46bd      	mov	sp, r7
 810b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b192:	4770      	bx	lr

0810b194 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810b194:	b580      	push	{r7, lr}
 810b196:	b098      	sub	sp, #96	; 0x60
 810b198:	af02      	add	r7, sp, #8
 810b19a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b19c:	687b      	ldr	r3, [r7, #4]
 810b19e:	2200      	movs	r2, #0
 810b1a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810b1a4:	f7f9 fca8 	bl	8104af8 <HAL_GetTick>
 810b1a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810b1aa:	687b      	ldr	r3, [r7, #4]
 810b1ac:	681b      	ldr	r3, [r3, #0]
 810b1ae:	681b      	ldr	r3, [r3, #0]
 810b1b0:	f003 0308 	and.w	r3, r3, #8
 810b1b4:	2b08      	cmp	r3, #8
 810b1b6:	d12f      	bne.n	810b218 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810b1b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810b1bc:	9300      	str	r3, [sp, #0]
 810b1be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810b1c0:	2200      	movs	r2, #0
 810b1c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810b1c6:	6878      	ldr	r0, [r7, #4]
 810b1c8:	f000 f88e 	bl	810b2e8 <UART_WaitOnFlagUntilTimeout>
 810b1cc:	4603      	mov	r3, r0
 810b1ce:	2b00      	cmp	r3, #0
 810b1d0:	d022      	beq.n	810b218 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810b1d2:	687b      	ldr	r3, [r7, #4]
 810b1d4:	681b      	ldr	r3, [r3, #0]
 810b1d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b1da:	e853 3f00 	ldrex	r3, [r3]
 810b1de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 810b1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b1e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810b1e6:	653b      	str	r3, [r7, #80]	; 0x50
 810b1e8:	687b      	ldr	r3, [r7, #4]
 810b1ea:	681b      	ldr	r3, [r3, #0]
 810b1ec:	461a      	mov	r2, r3
 810b1ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810b1f0:	647b      	str	r3, [r7, #68]	; 0x44
 810b1f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b1f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 810b1f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810b1f8:	e841 2300 	strex	r3, r2, [r1]
 810b1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 810b1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810b200:	2b00      	cmp	r3, #0
 810b202:	d1e6      	bne.n	810b1d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810b204:	687b      	ldr	r3, [r7, #4]
 810b206:	2220      	movs	r2, #32
 810b208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 810b20c:	687b      	ldr	r3, [r7, #4]
 810b20e:	2200      	movs	r2, #0
 810b210:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810b214:	2303      	movs	r3, #3
 810b216:	e063      	b.n	810b2e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810b218:	687b      	ldr	r3, [r7, #4]
 810b21a:	681b      	ldr	r3, [r3, #0]
 810b21c:	681b      	ldr	r3, [r3, #0]
 810b21e:	f003 0304 	and.w	r3, r3, #4
 810b222:	2b04      	cmp	r3, #4
 810b224:	d149      	bne.n	810b2ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810b226:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810b22a:	9300      	str	r3, [sp, #0]
 810b22c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810b22e:	2200      	movs	r2, #0
 810b230:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810b234:	6878      	ldr	r0, [r7, #4]
 810b236:	f000 f857 	bl	810b2e8 <UART_WaitOnFlagUntilTimeout>
 810b23a:	4603      	mov	r3, r0
 810b23c:	2b00      	cmp	r3, #0
 810b23e:	d03c      	beq.n	810b2ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b240:	687b      	ldr	r3, [r7, #4]
 810b242:	681b      	ldr	r3, [r3, #0]
 810b244:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b248:	e853 3f00 	ldrex	r3, [r3]
 810b24c:	623b      	str	r3, [r7, #32]
   return(result);
 810b24e:	6a3b      	ldr	r3, [r7, #32]
 810b250:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810b254:	64fb      	str	r3, [r7, #76]	; 0x4c
 810b256:	687b      	ldr	r3, [r7, #4]
 810b258:	681b      	ldr	r3, [r3, #0]
 810b25a:	461a      	mov	r2, r3
 810b25c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810b25e:	633b      	str	r3, [r7, #48]	; 0x30
 810b260:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b262:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810b264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810b266:	e841 2300 	strex	r3, r2, [r1]
 810b26a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 810b26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b26e:	2b00      	cmp	r3, #0
 810b270:	d1e6      	bne.n	810b240 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810b272:	687b      	ldr	r3, [r7, #4]
 810b274:	681b      	ldr	r3, [r3, #0]
 810b276:	3308      	adds	r3, #8
 810b278:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b27a:	693b      	ldr	r3, [r7, #16]
 810b27c:	e853 3f00 	ldrex	r3, [r3]
 810b280:	60fb      	str	r3, [r7, #12]
   return(result);
 810b282:	68fb      	ldr	r3, [r7, #12]
 810b284:	f023 0301 	bic.w	r3, r3, #1
 810b288:	64bb      	str	r3, [r7, #72]	; 0x48
 810b28a:	687b      	ldr	r3, [r7, #4]
 810b28c:	681b      	ldr	r3, [r3, #0]
 810b28e:	3308      	adds	r3, #8
 810b290:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810b292:	61fa      	str	r2, [r7, #28]
 810b294:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b296:	69b9      	ldr	r1, [r7, #24]
 810b298:	69fa      	ldr	r2, [r7, #28]
 810b29a:	e841 2300 	strex	r3, r2, [r1]
 810b29e:	617b      	str	r3, [r7, #20]
   return(result);
 810b2a0:	697b      	ldr	r3, [r7, #20]
 810b2a2:	2b00      	cmp	r3, #0
 810b2a4:	d1e5      	bne.n	810b272 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810b2a6:	687b      	ldr	r3, [r7, #4]
 810b2a8:	2220      	movs	r2, #32
 810b2aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 810b2ae:	687b      	ldr	r3, [r7, #4]
 810b2b0:	2200      	movs	r2, #0
 810b2b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810b2b6:	2303      	movs	r3, #3
 810b2b8:	e012      	b.n	810b2e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810b2ba:	687b      	ldr	r3, [r7, #4]
 810b2bc:	2220      	movs	r2, #32
 810b2be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810b2c2:	687b      	ldr	r3, [r7, #4]
 810b2c4:	2220      	movs	r2, #32
 810b2c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b2ca:	687b      	ldr	r3, [r7, #4]
 810b2cc:	2200      	movs	r2, #0
 810b2ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810b2d0:	687b      	ldr	r3, [r7, #4]
 810b2d2:	2200      	movs	r2, #0
 810b2d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 810b2d6:	687b      	ldr	r3, [r7, #4]
 810b2d8:	2200      	movs	r2, #0
 810b2da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810b2de:	2300      	movs	r3, #0
}
 810b2e0:	4618      	mov	r0, r3
 810b2e2:	3758      	adds	r7, #88	; 0x58
 810b2e4:	46bd      	mov	sp, r7
 810b2e6:	bd80      	pop	{r7, pc}

0810b2e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810b2e8:	b580      	push	{r7, lr}
 810b2ea:	b084      	sub	sp, #16
 810b2ec:	af00      	add	r7, sp, #0
 810b2ee:	60f8      	str	r0, [r7, #12]
 810b2f0:	60b9      	str	r1, [r7, #8]
 810b2f2:	603b      	str	r3, [r7, #0]
 810b2f4:	4613      	mov	r3, r2
 810b2f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810b2f8:	e049      	b.n	810b38e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810b2fa:	69bb      	ldr	r3, [r7, #24]
 810b2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b300:	d045      	beq.n	810b38e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810b302:	f7f9 fbf9 	bl	8104af8 <HAL_GetTick>
 810b306:	4602      	mov	r2, r0
 810b308:	683b      	ldr	r3, [r7, #0]
 810b30a:	1ad3      	subs	r3, r2, r3
 810b30c:	69ba      	ldr	r2, [r7, #24]
 810b30e:	429a      	cmp	r2, r3
 810b310:	d302      	bcc.n	810b318 <UART_WaitOnFlagUntilTimeout+0x30>
 810b312:	69bb      	ldr	r3, [r7, #24]
 810b314:	2b00      	cmp	r3, #0
 810b316:	d101      	bne.n	810b31c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810b318:	2303      	movs	r3, #3
 810b31a:	e048      	b.n	810b3ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810b31c:	68fb      	ldr	r3, [r7, #12]
 810b31e:	681b      	ldr	r3, [r3, #0]
 810b320:	681b      	ldr	r3, [r3, #0]
 810b322:	f003 0304 	and.w	r3, r3, #4
 810b326:	2b00      	cmp	r3, #0
 810b328:	d031      	beq.n	810b38e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810b32a:	68fb      	ldr	r3, [r7, #12]
 810b32c:	681b      	ldr	r3, [r3, #0]
 810b32e:	69db      	ldr	r3, [r3, #28]
 810b330:	f003 0308 	and.w	r3, r3, #8
 810b334:	2b08      	cmp	r3, #8
 810b336:	d110      	bne.n	810b35a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810b338:	68fb      	ldr	r3, [r7, #12]
 810b33a:	681b      	ldr	r3, [r3, #0]
 810b33c:	2208      	movs	r2, #8
 810b33e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 810b340:	68f8      	ldr	r0, [r7, #12]
 810b342:	f000 f838 	bl	810b3b6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 810b346:	68fb      	ldr	r3, [r7, #12]
 810b348:	2208      	movs	r2, #8
 810b34a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 810b34e:	68fb      	ldr	r3, [r7, #12]
 810b350:	2200      	movs	r2, #0
 810b352:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 810b356:	2301      	movs	r3, #1
 810b358:	e029      	b.n	810b3ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810b35a:	68fb      	ldr	r3, [r7, #12]
 810b35c:	681b      	ldr	r3, [r3, #0]
 810b35e:	69db      	ldr	r3, [r3, #28]
 810b360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810b364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810b368:	d111      	bne.n	810b38e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810b36a:	68fb      	ldr	r3, [r7, #12]
 810b36c:	681b      	ldr	r3, [r3, #0]
 810b36e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810b372:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810b374:	68f8      	ldr	r0, [r7, #12]
 810b376:	f000 f81e 	bl	810b3b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810b37a:	68fb      	ldr	r3, [r7, #12]
 810b37c:	2220      	movs	r2, #32
 810b37e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810b382:	68fb      	ldr	r3, [r7, #12]
 810b384:	2200      	movs	r2, #0
 810b386:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 810b38a:	2303      	movs	r3, #3
 810b38c:	e00f      	b.n	810b3ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810b38e:	68fb      	ldr	r3, [r7, #12]
 810b390:	681b      	ldr	r3, [r3, #0]
 810b392:	69da      	ldr	r2, [r3, #28]
 810b394:	68bb      	ldr	r3, [r7, #8]
 810b396:	4013      	ands	r3, r2
 810b398:	68ba      	ldr	r2, [r7, #8]
 810b39a:	429a      	cmp	r2, r3
 810b39c:	bf0c      	ite	eq
 810b39e:	2301      	moveq	r3, #1
 810b3a0:	2300      	movne	r3, #0
 810b3a2:	b2db      	uxtb	r3, r3
 810b3a4:	461a      	mov	r2, r3
 810b3a6:	79fb      	ldrb	r3, [r7, #7]
 810b3a8:	429a      	cmp	r2, r3
 810b3aa:	d0a6      	beq.n	810b2fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810b3ac:	2300      	movs	r3, #0
}
 810b3ae:	4618      	mov	r0, r3
 810b3b0:	3710      	adds	r7, #16
 810b3b2:	46bd      	mov	sp, r7
 810b3b4:	bd80      	pop	{r7, pc}

0810b3b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810b3b6:	b480      	push	{r7}
 810b3b8:	b095      	sub	sp, #84	; 0x54
 810b3ba:	af00      	add	r7, sp, #0
 810b3bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b3be:	687b      	ldr	r3, [r7, #4]
 810b3c0:	681b      	ldr	r3, [r3, #0]
 810b3c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b3c6:	e853 3f00 	ldrex	r3, [r3]
 810b3ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 810b3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b3ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810b3d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 810b3d4:	687b      	ldr	r3, [r7, #4]
 810b3d6:	681b      	ldr	r3, [r3, #0]
 810b3d8:	461a      	mov	r2, r3
 810b3da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810b3dc:	643b      	str	r3, [r7, #64]	; 0x40
 810b3de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b3e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 810b3e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 810b3e4:	e841 2300 	strex	r3, r2, [r1]
 810b3e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810b3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b3ec:	2b00      	cmp	r3, #0
 810b3ee:	d1e6      	bne.n	810b3be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b3f0:	687b      	ldr	r3, [r7, #4]
 810b3f2:	681b      	ldr	r3, [r3, #0]
 810b3f4:	3308      	adds	r3, #8
 810b3f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b3f8:	6a3b      	ldr	r3, [r7, #32]
 810b3fa:	e853 3f00 	ldrex	r3, [r3]
 810b3fe:	61fb      	str	r3, [r7, #28]
   return(result);
 810b400:	69fb      	ldr	r3, [r7, #28]
 810b402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810b406:	f023 0301 	bic.w	r3, r3, #1
 810b40a:	64bb      	str	r3, [r7, #72]	; 0x48
 810b40c:	687b      	ldr	r3, [r7, #4]
 810b40e:	681b      	ldr	r3, [r3, #0]
 810b410:	3308      	adds	r3, #8
 810b412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810b414:	62fa      	str	r2, [r7, #44]	; 0x2c
 810b416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810b41a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810b41c:	e841 2300 	strex	r3, r2, [r1]
 810b420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810b422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b424:	2b00      	cmp	r3, #0
 810b426:	d1e3      	bne.n	810b3f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b428:	687b      	ldr	r3, [r7, #4]
 810b42a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810b42c:	2b01      	cmp	r3, #1
 810b42e:	d118      	bne.n	810b462 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b430:	687b      	ldr	r3, [r7, #4]
 810b432:	681b      	ldr	r3, [r3, #0]
 810b434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b436:	68fb      	ldr	r3, [r7, #12]
 810b438:	e853 3f00 	ldrex	r3, [r3]
 810b43c:	60bb      	str	r3, [r7, #8]
   return(result);
 810b43e:	68bb      	ldr	r3, [r7, #8]
 810b440:	f023 0310 	bic.w	r3, r3, #16
 810b444:	647b      	str	r3, [r7, #68]	; 0x44
 810b446:	687b      	ldr	r3, [r7, #4]
 810b448:	681b      	ldr	r3, [r3, #0]
 810b44a:	461a      	mov	r2, r3
 810b44c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810b44e:	61bb      	str	r3, [r7, #24]
 810b450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b452:	6979      	ldr	r1, [r7, #20]
 810b454:	69ba      	ldr	r2, [r7, #24]
 810b456:	e841 2300 	strex	r3, r2, [r1]
 810b45a:	613b      	str	r3, [r7, #16]
   return(result);
 810b45c:	693b      	ldr	r3, [r7, #16]
 810b45e:	2b00      	cmp	r3, #0
 810b460:	d1e6      	bne.n	810b430 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810b462:	687b      	ldr	r3, [r7, #4]
 810b464:	2220      	movs	r2, #32
 810b466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b46a:	687b      	ldr	r3, [r7, #4]
 810b46c:	2200      	movs	r2, #0
 810b46e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810b470:	687b      	ldr	r3, [r7, #4]
 810b472:	2200      	movs	r2, #0
 810b474:	675a      	str	r2, [r3, #116]	; 0x74
}
 810b476:	bf00      	nop
 810b478:	3754      	adds	r7, #84	; 0x54
 810b47a:	46bd      	mov	sp, r7
 810b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b480:	4770      	bx	lr

0810b482 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810b482:	b580      	push	{r7, lr}
 810b484:	b084      	sub	sp, #16
 810b486:	af00      	add	r7, sp, #0
 810b488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810b48a:	687b      	ldr	r3, [r7, #4]
 810b48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b48e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810b490:	68fb      	ldr	r3, [r7, #12]
 810b492:	2200      	movs	r2, #0
 810b494:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810b498:	68fb      	ldr	r3, [r7, #12]
 810b49a:	2200      	movs	r2, #0
 810b49c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810b4a0:	68f8      	ldr	r0, [r7, #12]
 810b4a2:	f7ff f857 	bl	810a554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810b4a6:	bf00      	nop
 810b4a8:	3710      	adds	r7, #16
 810b4aa:	46bd      	mov	sp, r7
 810b4ac:	bd80      	pop	{r7, pc}

0810b4ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810b4ae:	b580      	push	{r7, lr}
 810b4b0:	b088      	sub	sp, #32
 810b4b2:	af00      	add	r7, sp, #0
 810b4b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810b4b6:	687b      	ldr	r3, [r7, #4]
 810b4b8:	681b      	ldr	r3, [r3, #0]
 810b4ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b4bc:	68fb      	ldr	r3, [r7, #12]
 810b4be:	e853 3f00 	ldrex	r3, [r3]
 810b4c2:	60bb      	str	r3, [r7, #8]
   return(result);
 810b4c4:	68bb      	ldr	r3, [r7, #8]
 810b4c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810b4ca:	61fb      	str	r3, [r7, #28]
 810b4cc:	687b      	ldr	r3, [r7, #4]
 810b4ce:	681b      	ldr	r3, [r3, #0]
 810b4d0:	461a      	mov	r2, r3
 810b4d2:	69fb      	ldr	r3, [r7, #28]
 810b4d4:	61bb      	str	r3, [r7, #24]
 810b4d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b4d8:	6979      	ldr	r1, [r7, #20]
 810b4da:	69ba      	ldr	r2, [r7, #24]
 810b4dc:	e841 2300 	strex	r3, r2, [r1]
 810b4e0:	613b      	str	r3, [r7, #16]
   return(result);
 810b4e2:	693b      	ldr	r3, [r7, #16]
 810b4e4:	2b00      	cmp	r3, #0
 810b4e6:	d1e6      	bne.n	810b4b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810b4e8:	687b      	ldr	r3, [r7, #4]
 810b4ea:	2220      	movs	r2, #32
 810b4ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810b4f0:	687b      	ldr	r3, [r7, #4]
 810b4f2:	2200      	movs	r2, #0
 810b4f4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810b4f6:	6878      	ldr	r0, [r7, #4]
 810b4f8:	f7ff f822 	bl	810a540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810b4fc:	bf00      	nop
 810b4fe:	3720      	adds	r7, #32
 810b500:	46bd      	mov	sp, r7
 810b502:	bd80      	pop	{r7, pc}

0810b504 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810b504:	b480      	push	{r7}
 810b506:	b083      	sub	sp, #12
 810b508:	af00      	add	r7, sp, #0
 810b50a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810b50c:	bf00      	nop
 810b50e:	370c      	adds	r7, #12
 810b510:	46bd      	mov	sp, r7
 810b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b516:	4770      	bx	lr

0810b518 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810b518:	b480      	push	{r7}
 810b51a:	b083      	sub	sp, #12
 810b51c:	af00      	add	r7, sp, #0
 810b51e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810b520:	bf00      	nop
 810b522:	370c      	adds	r7, #12
 810b524:	46bd      	mov	sp, r7
 810b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b52a:	4770      	bx	lr

0810b52c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810b52c:	b480      	push	{r7}
 810b52e:	b083      	sub	sp, #12
 810b530:	af00      	add	r7, sp, #0
 810b532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810b534:	bf00      	nop
 810b536:	370c      	adds	r7, #12
 810b538:	46bd      	mov	sp, r7
 810b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b53e:	4770      	bx	lr

0810b540 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810b540:	b480      	push	{r7}
 810b542:	b085      	sub	sp, #20
 810b544:	af00      	add	r7, sp, #0
 810b546:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b548:	687b      	ldr	r3, [r7, #4]
 810b54a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810b54e:	2b01      	cmp	r3, #1
 810b550:	d101      	bne.n	810b556 <HAL_UARTEx_DisableFifoMode+0x16>
 810b552:	2302      	movs	r3, #2
 810b554:	e027      	b.n	810b5a6 <HAL_UARTEx_DisableFifoMode+0x66>
 810b556:	687b      	ldr	r3, [r7, #4]
 810b558:	2201      	movs	r2, #1
 810b55a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b55e:	687b      	ldr	r3, [r7, #4]
 810b560:	2224      	movs	r2, #36	; 0x24
 810b562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b566:	687b      	ldr	r3, [r7, #4]
 810b568:	681b      	ldr	r3, [r3, #0]
 810b56a:	681b      	ldr	r3, [r3, #0]
 810b56c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b56e:	687b      	ldr	r3, [r7, #4]
 810b570:	681b      	ldr	r3, [r3, #0]
 810b572:	681a      	ldr	r2, [r3, #0]
 810b574:	687b      	ldr	r3, [r7, #4]
 810b576:	681b      	ldr	r3, [r3, #0]
 810b578:	f022 0201 	bic.w	r2, r2, #1
 810b57c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810b57e:	68fb      	ldr	r3, [r7, #12]
 810b580:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810b584:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810b586:	687b      	ldr	r3, [r7, #4]
 810b588:	2200      	movs	r2, #0
 810b58a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b58c:	687b      	ldr	r3, [r7, #4]
 810b58e:	681b      	ldr	r3, [r3, #0]
 810b590:	68fa      	ldr	r2, [r7, #12]
 810b592:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b594:	687b      	ldr	r3, [r7, #4]
 810b596:	2220      	movs	r2, #32
 810b598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b59c:	687b      	ldr	r3, [r7, #4]
 810b59e:	2200      	movs	r2, #0
 810b5a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810b5a4:	2300      	movs	r3, #0
}
 810b5a6:	4618      	mov	r0, r3
 810b5a8:	3714      	adds	r7, #20
 810b5aa:	46bd      	mov	sp, r7
 810b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b5b0:	4770      	bx	lr

0810b5b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b5b2:	b580      	push	{r7, lr}
 810b5b4:	b084      	sub	sp, #16
 810b5b6:	af00      	add	r7, sp, #0
 810b5b8:	6078      	str	r0, [r7, #4]
 810b5ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b5bc:	687b      	ldr	r3, [r7, #4]
 810b5be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810b5c2:	2b01      	cmp	r3, #1
 810b5c4:	d101      	bne.n	810b5ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810b5c6:	2302      	movs	r3, #2
 810b5c8:	e02d      	b.n	810b626 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810b5ca:	687b      	ldr	r3, [r7, #4]
 810b5cc:	2201      	movs	r2, #1
 810b5ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b5d2:	687b      	ldr	r3, [r7, #4]
 810b5d4:	2224      	movs	r2, #36	; 0x24
 810b5d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b5da:	687b      	ldr	r3, [r7, #4]
 810b5dc:	681b      	ldr	r3, [r3, #0]
 810b5de:	681b      	ldr	r3, [r3, #0]
 810b5e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b5e2:	687b      	ldr	r3, [r7, #4]
 810b5e4:	681b      	ldr	r3, [r3, #0]
 810b5e6:	681a      	ldr	r2, [r3, #0]
 810b5e8:	687b      	ldr	r3, [r7, #4]
 810b5ea:	681b      	ldr	r3, [r3, #0]
 810b5ec:	f022 0201 	bic.w	r2, r2, #1
 810b5f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810b5f2:	687b      	ldr	r3, [r7, #4]
 810b5f4:	681b      	ldr	r3, [r3, #0]
 810b5f6:	689b      	ldr	r3, [r3, #8]
 810b5f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810b5fc:	687b      	ldr	r3, [r7, #4]
 810b5fe:	681b      	ldr	r3, [r3, #0]
 810b600:	683a      	ldr	r2, [r7, #0]
 810b602:	430a      	orrs	r2, r1
 810b604:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b606:	6878      	ldr	r0, [r7, #4]
 810b608:	f000 f850 	bl	810b6ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b60c:	687b      	ldr	r3, [r7, #4]
 810b60e:	681b      	ldr	r3, [r3, #0]
 810b610:	68fa      	ldr	r2, [r7, #12]
 810b612:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b614:	687b      	ldr	r3, [r7, #4]
 810b616:	2220      	movs	r2, #32
 810b618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b61c:	687b      	ldr	r3, [r7, #4]
 810b61e:	2200      	movs	r2, #0
 810b620:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810b624:	2300      	movs	r3, #0
}
 810b626:	4618      	mov	r0, r3
 810b628:	3710      	adds	r7, #16
 810b62a:	46bd      	mov	sp, r7
 810b62c:	bd80      	pop	{r7, pc}

0810b62e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b62e:	b580      	push	{r7, lr}
 810b630:	b084      	sub	sp, #16
 810b632:	af00      	add	r7, sp, #0
 810b634:	6078      	str	r0, [r7, #4]
 810b636:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b638:	687b      	ldr	r3, [r7, #4]
 810b63a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810b63e:	2b01      	cmp	r3, #1
 810b640:	d101      	bne.n	810b646 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810b642:	2302      	movs	r3, #2
 810b644:	e02d      	b.n	810b6a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810b646:	687b      	ldr	r3, [r7, #4]
 810b648:	2201      	movs	r2, #1
 810b64a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b64e:	687b      	ldr	r3, [r7, #4]
 810b650:	2224      	movs	r2, #36	; 0x24
 810b652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b656:	687b      	ldr	r3, [r7, #4]
 810b658:	681b      	ldr	r3, [r3, #0]
 810b65a:	681b      	ldr	r3, [r3, #0]
 810b65c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b65e:	687b      	ldr	r3, [r7, #4]
 810b660:	681b      	ldr	r3, [r3, #0]
 810b662:	681a      	ldr	r2, [r3, #0]
 810b664:	687b      	ldr	r3, [r7, #4]
 810b666:	681b      	ldr	r3, [r3, #0]
 810b668:	f022 0201 	bic.w	r2, r2, #1
 810b66c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810b66e:	687b      	ldr	r3, [r7, #4]
 810b670:	681b      	ldr	r3, [r3, #0]
 810b672:	689b      	ldr	r3, [r3, #8]
 810b674:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810b678:	687b      	ldr	r3, [r7, #4]
 810b67a:	681b      	ldr	r3, [r3, #0]
 810b67c:	683a      	ldr	r2, [r7, #0]
 810b67e:	430a      	orrs	r2, r1
 810b680:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b682:	6878      	ldr	r0, [r7, #4]
 810b684:	f000 f812 	bl	810b6ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b688:	687b      	ldr	r3, [r7, #4]
 810b68a:	681b      	ldr	r3, [r3, #0]
 810b68c:	68fa      	ldr	r2, [r7, #12]
 810b68e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b690:	687b      	ldr	r3, [r7, #4]
 810b692:	2220      	movs	r2, #32
 810b694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b698:	687b      	ldr	r3, [r7, #4]
 810b69a:	2200      	movs	r2, #0
 810b69c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810b6a0:	2300      	movs	r3, #0
}
 810b6a2:	4618      	mov	r0, r3
 810b6a4:	3710      	adds	r7, #16
 810b6a6:	46bd      	mov	sp, r7
 810b6a8:	bd80      	pop	{r7, pc}
	...

0810b6ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810b6ac:	b480      	push	{r7}
 810b6ae:	b085      	sub	sp, #20
 810b6b0:	af00      	add	r7, sp, #0
 810b6b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810b6b4:	687b      	ldr	r3, [r7, #4]
 810b6b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810b6b8:	2b00      	cmp	r3, #0
 810b6ba:	d108      	bne.n	810b6ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810b6bc:	687b      	ldr	r3, [r7, #4]
 810b6be:	2201      	movs	r2, #1
 810b6c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810b6c4:	687b      	ldr	r3, [r7, #4]
 810b6c6:	2201      	movs	r2, #1
 810b6c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810b6cc:	e031      	b.n	810b732 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810b6ce:	2310      	movs	r3, #16
 810b6d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810b6d2:	2310      	movs	r3, #16
 810b6d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810b6d6:	687b      	ldr	r3, [r7, #4]
 810b6d8:	681b      	ldr	r3, [r3, #0]
 810b6da:	689b      	ldr	r3, [r3, #8]
 810b6dc:	0e5b      	lsrs	r3, r3, #25
 810b6de:	b2db      	uxtb	r3, r3
 810b6e0:	f003 0307 	and.w	r3, r3, #7
 810b6e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810b6e6:	687b      	ldr	r3, [r7, #4]
 810b6e8:	681b      	ldr	r3, [r3, #0]
 810b6ea:	689b      	ldr	r3, [r3, #8]
 810b6ec:	0f5b      	lsrs	r3, r3, #29
 810b6ee:	b2db      	uxtb	r3, r3
 810b6f0:	f003 0307 	and.w	r3, r3, #7
 810b6f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810b6f6:	7bbb      	ldrb	r3, [r7, #14]
 810b6f8:	7b3a      	ldrb	r2, [r7, #12]
 810b6fa:	4911      	ldr	r1, [pc, #68]	; (810b740 <UARTEx_SetNbDataToProcess+0x94>)
 810b6fc:	5c8a      	ldrb	r2, [r1, r2]
 810b6fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810b702:	7b3a      	ldrb	r2, [r7, #12]
 810b704:	490f      	ldr	r1, [pc, #60]	; (810b744 <UARTEx_SetNbDataToProcess+0x98>)
 810b706:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810b708:	fb93 f3f2 	sdiv	r3, r3, r2
 810b70c:	b29a      	uxth	r2, r3
 810b70e:	687b      	ldr	r3, [r7, #4]
 810b710:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810b714:	7bfb      	ldrb	r3, [r7, #15]
 810b716:	7b7a      	ldrb	r2, [r7, #13]
 810b718:	4909      	ldr	r1, [pc, #36]	; (810b740 <UARTEx_SetNbDataToProcess+0x94>)
 810b71a:	5c8a      	ldrb	r2, [r1, r2]
 810b71c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810b720:	7b7a      	ldrb	r2, [r7, #13]
 810b722:	4908      	ldr	r1, [pc, #32]	; (810b744 <UARTEx_SetNbDataToProcess+0x98>)
 810b724:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810b726:	fb93 f3f2 	sdiv	r3, r3, r2
 810b72a:	b29a      	uxth	r2, r3
 810b72c:	687b      	ldr	r3, [r7, #4]
 810b72e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810b732:	bf00      	nop
 810b734:	3714      	adds	r7, #20
 810b736:	46bd      	mov	sp, r7
 810b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b73c:	4770      	bx	lr
 810b73e:	bf00      	nop
 810b740:	0810c244 	.word	0x0810c244
 810b744:	0810c24c 	.word	0x0810c24c

0810b748 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "../ros_lib/ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 810b748:	b480      	push	{r7}
 810b74a:	b085      	sub	sp, #20
 810b74c:	af00      	add	r7, sp, #0
 810b74e:	6078      	str	r0, [r7, #4]
 810b750:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 810b752:	683b      	ldr	r3, [r7, #0]
 810b754:	681b      	ldr	r3, [r3, #0]
 810b756:	0a5a      	lsrs	r2, r3, #9
 810b758:	490f      	ldr	r1, [pc, #60]	; (810b798 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 810b75a:	fba1 1202 	umull	r1, r2, r1, r2
 810b75e:	09d2      	lsrs	r2, r2, #7
 810b760:	490e      	ldr	r1, [pc, #56]	; (810b79c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 810b762:	fb01 f202 	mul.w	r2, r1, r2
 810b766:	1a9b      	subs	r3, r3, r2
 810b768:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 810b76a:	683b      	ldr	r3, [r7, #0]
 810b76c:	681b      	ldr	r3, [r3, #0]
 810b76e:	0a5b      	lsrs	r3, r3, #9
 810b770:	4a09      	ldr	r2, [pc, #36]	; (810b798 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 810b772:	fba2 2303 	umull	r2, r3, r2, r3
 810b776:	09db      	lsrs	r3, r3, #7
 810b778:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 810b77a:	687b      	ldr	r3, [r7, #4]
 810b77c:	681a      	ldr	r2, [r3, #0]
 810b77e:	68bb      	ldr	r3, [r7, #8]
 810b780:	441a      	add	r2, r3
 810b782:	687b      	ldr	r3, [r7, #4]
 810b784:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 810b786:	683b      	ldr	r3, [r7, #0]
 810b788:	68fa      	ldr	r2, [r7, #12]
 810b78a:	601a      	str	r2, [r3, #0]
}
 810b78c:	bf00      	nop
 810b78e:	3714      	adds	r7, #20
 810b790:	46bd      	mov	sp, r7
 810b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b796:	4770      	bx	lr
 810b798:	00044b83 	.word	0x00044b83
 810b79c:	3b9aca00 	.word	0x3b9aca00

0810b7a0 <__cxa_pure_virtual>:
 810b7a0:	b508      	push	{r3, lr}
 810b7a2:	f000 f80d 	bl	810b7c0 <_ZSt9terminatev>

0810b7a6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 810b7a6:	b508      	push	{r3, lr}
 810b7a8:	4780      	blx	r0
 810b7aa:	f000 f80e 	bl	810b7ca <abort>
	...

0810b7b0 <_ZSt13get_terminatev>:
 810b7b0:	4b02      	ldr	r3, [pc, #8]	; (810b7bc <_ZSt13get_terminatev+0xc>)
 810b7b2:	6818      	ldr	r0, [r3, #0]
 810b7b4:	f3bf 8f5b 	dmb	ish
 810b7b8:	4770      	bx	lr
 810b7ba:	bf00      	nop
 810b7bc:	1000001c 	.word	0x1000001c

0810b7c0 <_ZSt9terminatev>:
 810b7c0:	b508      	push	{r3, lr}
 810b7c2:	f7ff fff5 	bl	810b7b0 <_ZSt13get_terminatev>
 810b7c6:	f7ff ffee 	bl	810b7a6 <_ZN10__cxxabiv111__terminateEPFvvE>

0810b7ca <abort>:
 810b7ca:	b508      	push	{r3, lr}
 810b7cc:	2006      	movs	r0, #6
 810b7ce:	f000 f873 	bl	810b8b8 <raise>
 810b7d2:	2001      	movs	r0, #1
 810b7d4:	f7f9 f87e 	bl	81048d4 <_exit>

0810b7d8 <__errno>:
 810b7d8:	4b01      	ldr	r3, [pc, #4]	; (810b7e0 <__errno+0x8>)
 810b7da:	6818      	ldr	r0, [r3, #0]
 810b7dc:	4770      	bx	lr
 810b7de:	bf00      	nop
 810b7e0:	10000020 	.word	0x10000020

0810b7e4 <__libc_init_array>:
 810b7e4:	b570      	push	{r4, r5, r6, lr}
 810b7e6:	4d0d      	ldr	r5, [pc, #52]	; (810b81c <__libc_init_array+0x38>)
 810b7e8:	4c0d      	ldr	r4, [pc, #52]	; (810b820 <__libc_init_array+0x3c>)
 810b7ea:	1b64      	subs	r4, r4, r5
 810b7ec:	10a4      	asrs	r4, r4, #2
 810b7ee:	2600      	movs	r6, #0
 810b7f0:	42a6      	cmp	r6, r4
 810b7f2:	d109      	bne.n	810b808 <__libc_init_array+0x24>
 810b7f4:	4d0b      	ldr	r5, [pc, #44]	; (810b824 <__libc_init_array+0x40>)
 810b7f6:	4c0c      	ldr	r4, [pc, #48]	; (810b828 <__libc_init_array+0x44>)
 810b7f8:	f000 f9b0 	bl	810bb5c <_init>
 810b7fc:	1b64      	subs	r4, r4, r5
 810b7fe:	10a4      	asrs	r4, r4, #2
 810b800:	2600      	movs	r6, #0
 810b802:	42a6      	cmp	r6, r4
 810b804:	d105      	bne.n	810b812 <__libc_init_array+0x2e>
 810b806:	bd70      	pop	{r4, r5, r6, pc}
 810b808:	f855 3b04 	ldr.w	r3, [r5], #4
 810b80c:	4798      	blx	r3
 810b80e:	3601      	adds	r6, #1
 810b810:	e7ee      	b.n	810b7f0 <__libc_init_array+0xc>
 810b812:	f855 3b04 	ldr.w	r3, [r5], #4
 810b816:	4798      	blx	r3
 810b818:	3601      	adds	r6, #1
 810b81a:	e7f2      	b.n	810b802 <__libc_init_array+0x1e>
 810b81c:	0810c25c 	.word	0x0810c25c
 810b820:	0810c25c 	.word	0x0810c25c
 810b824:	0810c25c 	.word	0x0810c25c
 810b828:	0810c264 	.word	0x0810c264

0810b82c <memcpy>:
 810b82c:	440a      	add	r2, r1
 810b82e:	4291      	cmp	r1, r2
 810b830:	f100 33ff 	add.w	r3, r0, #4294967295
 810b834:	d100      	bne.n	810b838 <memcpy+0xc>
 810b836:	4770      	bx	lr
 810b838:	b510      	push	{r4, lr}
 810b83a:	f811 4b01 	ldrb.w	r4, [r1], #1
 810b83e:	f803 4f01 	strb.w	r4, [r3, #1]!
 810b842:	4291      	cmp	r1, r2
 810b844:	d1f9      	bne.n	810b83a <memcpy+0xe>
 810b846:	bd10      	pop	{r4, pc}

0810b848 <memset>:
 810b848:	4402      	add	r2, r0
 810b84a:	4603      	mov	r3, r0
 810b84c:	4293      	cmp	r3, r2
 810b84e:	d100      	bne.n	810b852 <memset+0xa>
 810b850:	4770      	bx	lr
 810b852:	f803 1b01 	strb.w	r1, [r3], #1
 810b856:	e7f9      	b.n	810b84c <memset+0x4>

0810b858 <realloc>:
 810b858:	4b02      	ldr	r3, [pc, #8]	; (810b864 <realloc+0xc>)
 810b85a:	460a      	mov	r2, r1
 810b85c:	4601      	mov	r1, r0
 810b85e:	6818      	ldr	r0, [r3, #0]
 810b860:	f000 b8da 	b.w	810ba18 <_realloc_r>
 810b864:	10000020 	.word	0x10000020

0810b868 <_raise_r>:
 810b868:	291f      	cmp	r1, #31
 810b86a:	b538      	push	{r3, r4, r5, lr}
 810b86c:	4604      	mov	r4, r0
 810b86e:	460d      	mov	r5, r1
 810b870:	d904      	bls.n	810b87c <_raise_r+0x14>
 810b872:	2316      	movs	r3, #22
 810b874:	6003      	str	r3, [r0, #0]
 810b876:	f04f 30ff 	mov.w	r0, #4294967295
 810b87a:	bd38      	pop	{r3, r4, r5, pc}
 810b87c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810b87e:	b112      	cbz	r2, 810b886 <_raise_r+0x1e>
 810b880:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810b884:	b94b      	cbnz	r3, 810b89a <_raise_r+0x32>
 810b886:	4620      	mov	r0, r4
 810b888:	f000 f830 	bl	810b8ec <_getpid_r>
 810b88c:	462a      	mov	r2, r5
 810b88e:	4601      	mov	r1, r0
 810b890:	4620      	mov	r0, r4
 810b892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b896:	f000 b817 	b.w	810b8c8 <_kill_r>
 810b89a:	2b01      	cmp	r3, #1
 810b89c:	d00a      	beq.n	810b8b4 <_raise_r+0x4c>
 810b89e:	1c59      	adds	r1, r3, #1
 810b8a0:	d103      	bne.n	810b8aa <_raise_r+0x42>
 810b8a2:	2316      	movs	r3, #22
 810b8a4:	6003      	str	r3, [r0, #0]
 810b8a6:	2001      	movs	r0, #1
 810b8a8:	e7e7      	b.n	810b87a <_raise_r+0x12>
 810b8aa:	2400      	movs	r4, #0
 810b8ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810b8b0:	4628      	mov	r0, r5
 810b8b2:	4798      	blx	r3
 810b8b4:	2000      	movs	r0, #0
 810b8b6:	e7e0      	b.n	810b87a <_raise_r+0x12>

0810b8b8 <raise>:
 810b8b8:	4b02      	ldr	r3, [pc, #8]	; (810b8c4 <raise+0xc>)
 810b8ba:	4601      	mov	r1, r0
 810b8bc:	6818      	ldr	r0, [r3, #0]
 810b8be:	f7ff bfd3 	b.w	810b868 <_raise_r>
 810b8c2:	bf00      	nop
 810b8c4:	10000020 	.word	0x10000020

0810b8c8 <_kill_r>:
 810b8c8:	b538      	push	{r3, r4, r5, lr}
 810b8ca:	4d07      	ldr	r5, [pc, #28]	; (810b8e8 <_kill_r+0x20>)
 810b8cc:	2300      	movs	r3, #0
 810b8ce:	4604      	mov	r4, r0
 810b8d0:	4608      	mov	r0, r1
 810b8d2:	4611      	mov	r1, r2
 810b8d4:	602b      	str	r3, [r5, #0]
 810b8d6:	f7f8 ffed 	bl	81048b4 <_kill>
 810b8da:	1c43      	adds	r3, r0, #1
 810b8dc:	d102      	bne.n	810b8e4 <_kill_r+0x1c>
 810b8de:	682b      	ldr	r3, [r5, #0]
 810b8e0:	b103      	cbz	r3, 810b8e4 <_kill_r+0x1c>
 810b8e2:	6023      	str	r3, [r4, #0]
 810b8e4:	bd38      	pop	{r3, r4, r5, pc}
 810b8e6:	bf00      	nop
 810b8e8:	10002ab4 	.word	0x10002ab4

0810b8ec <_getpid_r>:
 810b8ec:	f7f8 bfda 	b.w	81048a4 <_getpid>

0810b8f0 <sbrk_aligned>:
 810b8f0:	b570      	push	{r4, r5, r6, lr}
 810b8f2:	4e0e      	ldr	r6, [pc, #56]	; (810b92c <sbrk_aligned+0x3c>)
 810b8f4:	460c      	mov	r4, r1
 810b8f6:	6831      	ldr	r1, [r6, #0]
 810b8f8:	4605      	mov	r5, r0
 810b8fa:	b911      	cbnz	r1, 810b902 <sbrk_aligned+0x12>
 810b8fc:	f000 f8bc 	bl	810ba78 <_sbrk_r>
 810b900:	6030      	str	r0, [r6, #0]
 810b902:	4621      	mov	r1, r4
 810b904:	4628      	mov	r0, r5
 810b906:	f000 f8b7 	bl	810ba78 <_sbrk_r>
 810b90a:	1c43      	adds	r3, r0, #1
 810b90c:	d00a      	beq.n	810b924 <sbrk_aligned+0x34>
 810b90e:	1cc4      	adds	r4, r0, #3
 810b910:	f024 0403 	bic.w	r4, r4, #3
 810b914:	42a0      	cmp	r0, r4
 810b916:	d007      	beq.n	810b928 <sbrk_aligned+0x38>
 810b918:	1a21      	subs	r1, r4, r0
 810b91a:	4628      	mov	r0, r5
 810b91c:	f000 f8ac 	bl	810ba78 <_sbrk_r>
 810b920:	3001      	adds	r0, #1
 810b922:	d101      	bne.n	810b928 <sbrk_aligned+0x38>
 810b924:	f04f 34ff 	mov.w	r4, #4294967295
 810b928:	4620      	mov	r0, r4
 810b92a:	bd70      	pop	{r4, r5, r6, pc}
 810b92c:	10002ab0 	.word	0x10002ab0

0810b930 <_malloc_r>:
 810b930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b934:	1ccd      	adds	r5, r1, #3
 810b936:	f025 0503 	bic.w	r5, r5, #3
 810b93a:	3508      	adds	r5, #8
 810b93c:	2d0c      	cmp	r5, #12
 810b93e:	bf38      	it	cc
 810b940:	250c      	movcc	r5, #12
 810b942:	2d00      	cmp	r5, #0
 810b944:	4607      	mov	r7, r0
 810b946:	db01      	blt.n	810b94c <_malloc_r+0x1c>
 810b948:	42a9      	cmp	r1, r5
 810b94a:	d905      	bls.n	810b958 <_malloc_r+0x28>
 810b94c:	230c      	movs	r3, #12
 810b94e:	603b      	str	r3, [r7, #0]
 810b950:	2600      	movs	r6, #0
 810b952:	4630      	mov	r0, r6
 810b954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b958:	4e2e      	ldr	r6, [pc, #184]	; (810ba14 <_malloc_r+0xe4>)
 810b95a:	f000 f89d 	bl	810ba98 <__malloc_lock>
 810b95e:	6833      	ldr	r3, [r6, #0]
 810b960:	461c      	mov	r4, r3
 810b962:	bb34      	cbnz	r4, 810b9b2 <_malloc_r+0x82>
 810b964:	4629      	mov	r1, r5
 810b966:	4638      	mov	r0, r7
 810b968:	f7ff ffc2 	bl	810b8f0 <sbrk_aligned>
 810b96c:	1c43      	adds	r3, r0, #1
 810b96e:	4604      	mov	r4, r0
 810b970:	d14d      	bne.n	810ba0e <_malloc_r+0xde>
 810b972:	6834      	ldr	r4, [r6, #0]
 810b974:	4626      	mov	r6, r4
 810b976:	2e00      	cmp	r6, #0
 810b978:	d140      	bne.n	810b9fc <_malloc_r+0xcc>
 810b97a:	6823      	ldr	r3, [r4, #0]
 810b97c:	4631      	mov	r1, r6
 810b97e:	4638      	mov	r0, r7
 810b980:	eb04 0803 	add.w	r8, r4, r3
 810b984:	f000 f878 	bl	810ba78 <_sbrk_r>
 810b988:	4580      	cmp	r8, r0
 810b98a:	d13a      	bne.n	810ba02 <_malloc_r+0xd2>
 810b98c:	6821      	ldr	r1, [r4, #0]
 810b98e:	3503      	adds	r5, #3
 810b990:	1a6d      	subs	r5, r5, r1
 810b992:	f025 0503 	bic.w	r5, r5, #3
 810b996:	3508      	adds	r5, #8
 810b998:	2d0c      	cmp	r5, #12
 810b99a:	bf38      	it	cc
 810b99c:	250c      	movcc	r5, #12
 810b99e:	4629      	mov	r1, r5
 810b9a0:	4638      	mov	r0, r7
 810b9a2:	f7ff ffa5 	bl	810b8f0 <sbrk_aligned>
 810b9a6:	3001      	adds	r0, #1
 810b9a8:	d02b      	beq.n	810ba02 <_malloc_r+0xd2>
 810b9aa:	6823      	ldr	r3, [r4, #0]
 810b9ac:	442b      	add	r3, r5
 810b9ae:	6023      	str	r3, [r4, #0]
 810b9b0:	e00e      	b.n	810b9d0 <_malloc_r+0xa0>
 810b9b2:	6822      	ldr	r2, [r4, #0]
 810b9b4:	1b52      	subs	r2, r2, r5
 810b9b6:	d41e      	bmi.n	810b9f6 <_malloc_r+0xc6>
 810b9b8:	2a0b      	cmp	r2, #11
 810b9ba:	d916      	bls.n	810b9ea <_malloc_r+0xba>
 810b9bc:	1961      	adds	r1, r4, r5
 810b9be:	42a3      	cmp	r3, r4
 810b9c0:	6025      	str	r5, [r4, #0]
 810b9c2:	bf18      	it	ne
 810b9c4:	6059      	strne	r1, [r3, #4]
 810b9c6:	6863      	ldr	r3, [r4, #4]
 810b9c8:	bf08      	it	eq
 810b9ca:	6031      	streq	r1, [r6, #0]
 810b9cc:	5162      	str	r2, [r4, r5]
 810b9ce:	604b      	str	r3, [r1, #4]
 810b9d0:	4638      	mov	r0, r7
 810b9d2:	f104 060b 	add.w	r6, r4, #11
 810b9d6:	f000 f865 	bl	810baa4 <__malloc_unlock>
 810b9da:	f026 0607 	bic.w	r6, r6, #7
 810b9de:	1d23      	adds	r3, r4, #4
 810b9e0:	1af2      	subs	r2, r6, r3
 810b9e2:	d0b6      	beq.n	810b952 <_malloc_r+0x22>
 810b9e4:	1b9b      	subs	r3, r3, r6
 810b9e6:	50a3      	str	r3, [r4, r2]
 810b9e8:	e7b3      	b.n	810b952 <_malloc_r+0x22>
 810b9ea:	6862      	ldr	r2, [r4, #4]
 810b9ec:	42a3      	cmp	r3, r4
 810b9ee:	bf0c      	ite	eq
 810b9f0:	6032      	streq	r2, [r6, #0]
 810b9f2:	605a      	strne	r2, [r3, #4]
 810b9f4:	e7ec      	b.n	810b9d0 <_malloc_r+0xa0>
 810b9f6:	4623      	mov	r3, r4
 810b9f8:	6864      	ldr	r4, [r4, #4]
 810b9fa:	e7b2      	b.n	810b962 <_malloc_r+0x32>
 810b9fc:	4634      	mov	r4, r6
 810b9fe:	6876      	ldr	r6, [r6, #4]
 810ba00:	e7b9      	b.n	810b976 <_malloc_r+0x46>
 810ba02:	230c      	movs	r3, #12
 810ba04:	603b      	str	r3, [r7, #0]
 810ba06:	4638      	mov	r0, r7
 810ba08:	f000 f84c 	bl	810baa4 <__malloc_unlock>
 810ba0c:	e7a1      	b.n	810b952 <_malloc_r+0x22>
 810ba0e:	6025      	str	r5, [r4, #0]
 810ba10:	e7de      	b.n	810b9d0 <_malloc_r+0xa0>
 810ba12:	bf00      	nop
 810ba14:	10002aac 	.word	0x10002aac

0810ba18 <_realloc_r>:
 810ba18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ba1c:	4680      	mov	r8, r0
 810ba1e:	4614      	mov	r4, r2
 810ba20:	460e      	mov	r6, r1
 810ba22:	b921      	cbnz	r1, 810ba2e <_realloc_r+0x16>
 810ba24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810ba28:	4611      	mov	r1, r2
 810ba2a:	f7ff bf81 	b.w	810b930 <_malloc_r>
 810ba2e:	b92a      	cbnz	r2, 810ba3c <_realloc_r+0x24>
 810ba30:	f000 f83e 	bl	810bab0 <_free_r>
 810ba34:	4625      	mov	r5, r4
 810ba36:	4628      	mov	r0, r5
 810ba38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ba3c:	f000 f884 	bl	810bb48 <_malloc_usable_size_r>
 810ba40:	4284      	cmp	r4, r0
 810ba42:	4607      	mov	r7, r0
 810ba44:	d802      	bhi.n	810ba4c <_realloc_r+0x34>
 810ba46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810ba4a:	d812      	bhi.n	810ba72 <_realloc_r+0x5a>
 810ba4c:	4621      	mov	r1, r4
 810ba4e:	4640      	mov	r0, r8
 810ba50:	f7ff ff6e 	bl	810b930 <_malloc_r>
 810ba54:	4605      	mov	r5, r0
 810ba56:	2800      	cmp	r0, #0
 810ba58:	d0ed      	beq.n	810ba36 <_realloc_r+0x1e>
 810ba5a:	42bc      	cmp	r4, r7
 810ba5c:	4622      	mov	r2, r4
 810ba5e:	4631      	mov	r1, r6
 810ba60:	bf28      	it	cs
 810ba62:	463a      	movcs	r2, r7
 810ba64:	f7ff fee2 	bl	810b82c <memcpy>
 810ba68:	4631      	mov	r1, r6
 810ba6a:	4640      	mov	r0, r8
 810ba6c:	f000 f820 	bl	810bab0 <_free_r>
 810ba70:	e7e1      	b.n	810ba36 <_realloc_r+0x1e>
 810ba72:	4635      	mov	r5, r6
 810ba74:	e7df      	b.n	810ba36 <_realloc_r+0x1e>
	...

0810ba78 <_sbrk_r>:
 810ba78:	b538      	push	{r3, r4, r5, lr}
 810ba7a:	4d06      	ldr	r5, [pc, #24]	; (810ba94 <_sbrk_r+0x1c>)
 810ba7c:	2300      	movs	r3, #0
 810ba7e:	4604      	mov	r4, r0
 810ba80:	4608      	mov	r0, r1
 810ba82:	602b      	str	r3, [r5, #0]
 810ba84:	f7f8 ff30 	bl	81048e8 <_sbrk>
 810ba88:	1c43      	adds	r3, r0, #1
 810ba8a:	d102      	bne.n	810ba92 <_sbrk_r+0x1a>
 810ba8c:	682b      	ldr	r3, [r5, #0]
 810ba8e:	b103      	cbz	r3, 810ba92 <_sbrk_r+0x1a>
 810ba90:	6023      	str	r3, [r4, #0]
 810ba92:	bd38      	pop	{r3, r4, r5, pc}
 810ba94:	10002ab4 	.word	0x10002ab4

0810ba98 <__malloc_lock>:
 810ba98:	4801      	ldr	r0, [pc, #4]	; (810baa0 <__malloc_lock+0x8>)
 810ba9a:	f000 b85d 	b.w	810bb58 <__retarget_lock_acquire_recursive>
 810ba9e:	bf00      	nop
 810baa0:	10002ab8 	.word	0x10002ab8

0810baa4 <__malloc_unlock>:
 810baa4:	4801      	ldr	r0, [pc, #4]	; (810baac <__malloc_unlock+0x8>)
 810baa6:	f000 b858 	b.w	810bb5a <__retarget_lock_release_recursive>
 810baaa:	bf00      	nop
 810baac:	10002ab8 	.word	0x10002ab8

0810bab0 <_free_r>:
 810bab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810bab2:	2900      	cmp	r1, #0
 810bab4:	d044      	beq.n	810bb40 <_free_r+0x90>
 810bab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810baba:	9001      	str	r0, [sp, #4]
 810babc:	2b00      	cmp	r3, #0
 810babe:	f1a1 0404 	sub.w	r4, r1, #4
 810bac2:	bfb8      	it	lt
 810bac4:	18e4      	addlt	r4, r4, r3
 810bac6:	f7ff ffe7 	bl	810ba98 <__malloc_lock>
 810baca:	4a1e      	ldr	r2, [pc, #120]	; (810bb44 <_free_r+0x94>)
 810bacc:	9801      	ldr	r0, [sp, #4]
 810bace:	6813      	ldr	r3, [r2, #0]
 810bad0:	b933      	cbnz	r3, 810bae0 <_free_r+0x30>
 810bad2:	6063      	str	r3, [r4, #4]
 810bad4:	6014      	str	r4, [r2, #0]
 810bad6:	b003      	add	sp, #12
 810bad8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810badc:	f7ff bfe2 	b.w	810baa4 <__malloc_unlock>
 810bae0:	42a3      	cmp	r3, r4
 810bae2:	d908      	bls.n	810baf6 <_free_r+0x46>
 810bae4:	6825      	ldr	r5, [r4, #0]
 810bae6:	1961      	adds	r1, r4, r5
 810bae8:	428b      	cmp	r3, r1
 810baea:	bf01      	itttt	eq
 810baec:	6819      	ldreq	r1, [r3, #0]
 810baee:	685b      	ldreq	r3, [r3, #4]
 810baf0:	1949      	addeq	r1, r1, r5
 810baf2:	6021      	streq	r1, [r4, #0]
 810baf4:	e7ed      	b.n	810bad2 <_free_r+0x22>
 810baf6:	461a      	mov	r2, r3
 810baf8:	685b      	ldr	r3, [r3, #4]
 810bafa:	b10b      	cbz	r3, 810bb00 <_free_r+0x50>
 810bafc:	42a3      	cmp	r3, r4
 810bafe:	d9fa      	bls.n	810baf6 <_free_r+0x46>
 810bb00:	6811      	ldr	r1, [r2, #0]
 810bb02:	1855      	adds	r5, r2, r1
 810bb04:	42a5      	cmp	r5, r4
 810bb06:	d10b      	bne.n	810bb20 <_free_r+0x70>
 810bb08:	6824      	ldr	r4, [r4, #0]
 810bb0a:	4421      	add	r1, r4
 810bb0c:	1854      	adds	r4, r2, r1
 810bb0e:	42a3      	cmp	r3, r4
 810bb10:	6011      	str	r1, [r2, #0]
 810bb12:	d1e0      	bne.n	810bad6 <_free_r+0x26>
 810bb14:	681c      	ldr	r4, [r3, #0]
 810bb16:	685b      	ldr	r3, [r3, #4]
 810bb18:	6053      	str	r3, [r2, #4]
 810bb1a:	4421      	add	r1, r4
 810bb1c:	6011      	str	r1, [r2, #0]
 810bb1e:	e7da      	b.n	810bad6 <_free_r+0x26>
 810bb20:	d902      	bls.n	810bb28 <_free_r+0x78>
 810bb22:	230c      	movs	r3, #12
 810bb24:	6003      	str	r3, [r0, #0]
 810bb26:	e7d6      	b.n	810bad6 <_free_r+0x26>
 810bb28:	6825      	ldr	r5, [r4, #0]
 810bb2a:	1961      	adds	r1, r4, r5
 810bb2c:	428b      	cmp	r3, r1
 810bb2e:	bf04      	itt	eq
 810bb30:	6819      	ldreq	r1, [r3, #0]
 810bb32:	685b      	ldreq	r3, [r3, #4]
 810bb34:	6063      	str	r3, [r4, #4]
 810bb36:	bf04      	itt	eq
 810bb38:	1949      	addeq	r1, r1, r5
 810bb3a:	6021      	streq	r1, [r4, #0]
 810bb3c:	6054      	str	r4, [r2, #4]
 810bb3e:	e7ca      	b.n	810bad6 <_free_r+0x26>
 810bb40:	b003      	add	sp, #12
 810bb42:	bd30      	pop	{r4, r5, pc}
 810bb44:	10002aac 	.word	0x10002aac

0810bb48 <_malloc_usable_size_r>:
 810bb48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810bb4c:	1f18      	subs	r0, r3, #4
 810bb4e:	2b00      	cmp	r3, #0
 810bb50:	bfbc      	itt	lt
 810bb52:	580b      	ldrlt	r3, [r1, r0]
 810bb54:	18c0      	addlt	r0, r0, r3
 810bb56:	4770      	bx	lr

0810bb58 <__retarget_lock_acquire_recursive>:
 810bb58:	4770      	bx	lr

0810bb5a <__retarget_lock_release_recursive>:
 810bb5a:	4770      	bx	lr

0810bb5c <_init>:
 810bb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bb5e:	bf00      	nop
 810bb60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810bb62:	bc08      	pop	{r3}
 810bb64:	469e      	mov	lr, r3
 810bb66:	4770      	bx	lr

0810bb68 <_fini>:
 810bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bb6a:	bf00      	nop
 810bb6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810bb6e:	bc08      	pop	{r3}
 810bb70:	469e      	mov	lr, r3
 810bb72:	4770      	bx	lr
